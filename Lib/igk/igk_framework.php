<?php
 
// file: igk_framework.php
// author: C.A.D BONDJE DOUE
// description: Balafon Core Framework file
// copyright: igkdev Â© 2013-2020
// license: read licence.txt
// mail: bondje.doue@igkdev.com
// help uri: https://igkdev.com/balafon/wiki

use function igk_resources_gets as __;

use IGK\Controllers\RootController;
use IGK\Actions\Dispatcher;
use IGK\Controllers\BaseController;
use IGK\System\Configuration\ConfigData;
use IGK\System\Html\Dom\IGKHtmlMeta;
use IGK\Resources\R;
use IGK\System\Database\QueryBuilderConstant as queryConstant;
use IGK\System\Console\Logger;
use IGK\System\Database\MySQL\IGKMySQLQueryResult;

///<summary></summary>
/**
* 
*/
function igk_agent_androidversion(){
    return IGKUserAgent::GetAndroidVersion();
}
function igk_bind_session_id($id){ 
    @session_id($id);
}
///<summary></summary>
/**
* 
*/
function igk_agent_ieversion(){
    if(igk_agent_isie()){
        $tab=array();
        $c=preg_match_all("/(?<type>(MSIE|Trident|Edge))(\/)?\s*(?P<version>[0-9\.]+)/i", $_SERVER["HTTP_USER_AGENT"], $tab);
        if($c>=1){
            $t=igk_getv($tab["type"], 0);
            $v=igk_getv($tab["version"], 0);
            switch($t){
                case 'Trident':
                    return "11.0/".$v;
                case 'Edge':
                    return "12.0/".$v;
                case 'MSIE':
                default:
                return $v;
            }
        }
    }
    return null;
}

///<summary></summary>
///<param name="regenerate"></param>
/**
* 
* @param mixed $regenerate the default value is 0
*/
function igk_valid_cref($regenerate=0, $throwex = 0){
    $sess=igk_app()->Session;
    $cref=base64_encode($sess->getCRef());
    $result=(igk_getr($cref) == 1);
    if($regenerate){
        $sess->generateCref();
    }
    if (!$result && $throwex){
        throw new IGK\System\Security\CrefNotValidException();
    }
    return $result;
}

///<summary></summary>
/**
* 
*/
function igk_agent_isandroid(){
    return IGKUserAgent::IsAndroid();
}
///<summary></summary>
/**
* 
*/
function igk_agent_isie(){
    return IGKUserAgent::IsIE();
}
///<summary>close a visible notify dialog</summary>
/**
* close a visible notify dialog
*/
function igk_ajx_close_dialog(){
    $s=igk_createnode("BalafonJS");
    $s->Content="igk.balafonjs.utils.closeNotify(1);";
    $s->RenderAJX();
}

///<summary></summary>
/**
* 
*/
function igk_ajx_exit(){
    if(igk_is_ajx_demand())
        igk_exit();
}
///<summary></summary>
///<param name="script"></param>
/**
* 
* @param mixed $script
*/
function igk_ajx_include_script($script){
    if(igk_is_ajx_demand()){
        $b=igk_createnode("balafonJS");
        $b->Content="igk.js.load('{$script}');";
        $b->RenderAJX();
    }
}
///<summary></summary>
///<param name="lnk"></param>
/**
* 
* @param mixed $lnk
*/
function igk_ajx_link($lnk){
    if(igk_is_ajx_demand() || igk_is_webapp()){
        $p=ltrim(igk_io_basepath($lnk),"/");
        $u=igk_io_baseuri()."/".$p;
        return igk_html_uri($u);
    }
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_ajx_notify_close_dialog(){
    $n=igk_createnode();
    $n->addScript()->Content=<<<EOF
ns_igk.winui.notify.close();
EOF;
    $n->RenderAJX();
}
///<summary> shortcut to notify dialog</summary>
/**
*  shortcut to notify dialog
*/
function igk_ajx_notify_dialog($title, $content, $type="default", $render=true){
    $notbox=new IGKHtmlNotifyDialogBoxItem();
    $notbox->setClass("igk-".$type);
    $c=$notbox->show($title, $content);
    if($render){
        $c->RenderAJX();
    }
    return $notbox;
}
///<summary></summary>
///<param name="title"></param>
///<param name="uri"></param>
///<param name="callbacks"></param>
///<param name="method" default="POST"></param>
/**
* 
* @param mixed $title
* @param mixed $uri
* @param mixed $callbacks
* @param mixed $method the default value is "POST"
*/
function igk_ajx_notify_dialog_callback($title, $uri, $callbacks, $method="POST"){
    if(igk_qr_confirm()){
        $type=igk_getr("dialog-type", "confirm");
        ($fc=igk_getv($callbacks, $type)) && $fc();
        return;
    }
    $fc=igk_getv($callbacks, "form") ?? igk_die(__("no callback defined")); 
    //array("code"=>"no form callback specified"));
    $dv=igk_createnode("form");
    $dv["action"]=$uri;
    $dv["method"]=$method;
    $dv->addObData(function() use ($fc, $dv){
        $fc($dv);
    });
    igk_html_add_confirm($dv);
    igk_ajx_notify_dialog($title, $dv);
    igk_exit();
}
///<summary></summary>
///<param name="title"></param>
///<param name="d"></param>
///<param name="closeBtn" default="'drop'"> mixed(string|array)  </param>
///<param name="callback" default="null"></param>
/**
* 
* @param mixed $title
* @param mixed $d
* @param mixed $closeBtn 'drop' or attribute
* @param mixed $callback the default value is null
*/
function igk_ajx_panel_dialog($title, $d, $closeBtn='drop', $callback=null){
    $dialog=igk_html_node_paneldialog($title, $d, is_array($closeBtn)? $closeBtn: ["closeBtn"=>$closeBtn]);
    if(is_callable($callback)){
        $callback($dialog);
    }
    $dialog->RenderAJX();
}
///<summary>return a panel dialog result</summary>
/**
 * return a panel dialog result
 * @param string $title title of the dialog
 * @param mixed $d node or string to show
 * @param string $closeBtn close button
 * @param callable $callback the call to to call
 */
function igk_ajx_panel_dialog_result($title, $d, $closeBtn='drop', ?callable $callback=null){
    ob_start();
    igk_ajx_panel_dialog($title, $d, $closeBtn, $callback);
    return new IGK\System\Http\WebResponse(ob_get_clean());
}
///<summary></summary>
/**
* 
*/
function igk_ajx_panel_dialog_close(){
    $n=igk_createnode("BalafonJS");
    $n["autoremove"]=1;
    $n->Content="igk.winui.controls.panelDialog.close()";
    $n->RenderAJX();
}
/**
 * ask client to send a request again to update the value
 */
function igk_ajx_update($uri, $target='body', $type='get'){
    if ($type!='get'){
        $type = 'post';
    }
    if ($target=='body'){
        $target = 'null';
    }else{
        $target="'$target'";
    }
    igk_createnode("script")
    ->setAttribute("autoremove","true")
    ->setContent("ns_igk.ajx.{$type}('$uri', null, {$target});")
    ->renderAJX();
}
///<summary>redirect to uri in ajx context</summary>
/**
* redirect to uri in ajx context
*/
function igk_ajx_redirect($uri=null){
    if(igk_is_ajx_demand()){
        $uri=$uri == null ? igk_sys_srv_referer(): $uri;
        igk_navto($uri);
    }
}
///<summary></summary>
///<param name="tab"></param>
///<param name="tagname" default="response"></param>
///<param name="type" default="IGK_CT_PLAIN_TEXT"></param>
/**
* 
* @param mixed $tab
* @param mixed $tagname the default value is "response"
* @param mixed $type the default value is IGK_CT_PLAIN_TEXT
*/
function igk_ajx_render_response($tab, $tagname="response", $type=IGK_CT_PLAIN_TEXT){
    $r=igk_createnode($tagname);
    if(is_array($tab)){
        foreach($tab as $k=>$v){
            $r->addNode($k)->Content=$v;
        }
    }
    if($type !== IGK_CT_PLAIN_TEXT){
        header("Content-Type:".$type);
    }
    $r->RenderAJX();
}
///<summary>Replace controller view</summary>
///<note> it call view replace controller view.</note>
///<param name="ctrl"> controller to use in replacement strategie.</param>
///<param name="view"> demand to call the current view.</param>
/**
* Replace controller view
* @param mixed $ctrl  controller to use in replacement strategie.
* @param mixed $view  demand to call the current view.
*/
function igk_ajx_replace_ctrl_view($ctrl, $view=1){
    if(!$ctrl)
        return;
    if($view){
        $ctrl->setCurrentView($ctrl->MainView);
    }
    $c=new IGKHtmlAJXCtrlReplacementNode();
    $c->addCtrl($ctrl);
    $c->RenderAJX();
    $ctrl->regSystemVars(null);
}
///<summary>render a replacement node</summary>
///<param name="n">node to replace in ajx context</param>
///<param name="target">id to target</param>
///<param name="hash">hash to pass to ajx context</param>
/**
* render a replacement node
* @param mixed $n node to replace in ajx context
* @param mixed $target id to target
* @param mixed $hash hash to pass to ajx context
*/
function igk_ajx_replace_node($n, $target=null, $hash=null, $render=true){

    $c=new IGKHtmlAJXReplacementNode();
    $c["target"]=$target;
    $c["hash"]=$hash;
    $c->addNode($n);
    if ($render)
    $c->RenderAJX();
    return $c;
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_ajx_replace_uri($uri){
    $n=igk_createnode('balafonJS');
    $n["autoremove"]=1;
    $n->Content="ns_igk.winui.history.replace('{$uri}', null); ";
    $n->RenderAJX();
    return $n;
}
///<summary></summary>
///<param name="msg"></param>
///<param name="classtype" default="null"></param>
///<param name="noclose"></param>
/**
* 
* @param mixed $msg
* @param mixed $classtype the default value is null
* @param mixed $noclose the default value is 0
*/
function igk_ajx_toast($msg, $classtype=null, $noclose=0){
    $ajx=igk_createnode("toast");
    if($classtype != null)
        $ajx["class"]="+".$classtype;
    if($noclose){
        $ajx["noHide"]=1;
    }
    $ajx->Content=$msg;
    $ajx->RenderAJX();
}
///<summary>show an alert to document information </summary>
///<remark>document must be fully loaded. can be uses at the InitComplete </remark>
/**
* show an alert to document information
*/
function igk_alert($msg){
    $frame=igk_html_frame(igk_getctrl(IGK_FRAME_CTRL), "alert_frame");
    $frame->Title=__("title.alert");
    $frame->BoxContent->ClearChilds();
    $frm=$frame->BoxContent->addForm();
    $frm->addDiv()->Content=$msg;
}
///<summary></summary>
///<param name="args"></param>
/**
* 
* @param mixed $args
*/
function igk_android_onrenderdoc($args){
    $doc=$args->args[0];
    $options=$args->args[1];
    $v_isandroid=igk_agent_isandroid();
    if($options->Cache){
        $js=igk_createnode("Script");
        $js->Content="igk.android.init('width=device-width, initial-scale=1, user-scalable=no');";
        $m=new IGKHtmlSingleNodeViewer($js);
        $doc->body->add($m);
    }
    else{
        if($options->Context == IGK_WEB_CONTEXT){
            $sm=$doc->getMetas();
            if($sm){
                $meta=$sm->getMetaById("_page_viewport");
                if($meta == null){
                    $meta=igk_createnode("meta");
                    $meta["name"]="viewport";
                }
                if($v_isandroid){
                    //+ | accesibility for android mobile = light root guide
                    $meta[IGKHtmlMetaManager::ATTR_CONTENT]=
                    "width=device-width, initial-scale=1, maximum-scale=6, user-scalable=yes";
                    // "width=device-width, initial-scale=1, user-scalable=no";
                }
                else{
                    $meta[IGKHtmlMetaManager::ATTR_CONTENT]="initial-scale=1";
                }
                $sm->addMeta("_page_viewport", $meta);
            }
            else{
                igk_die("No meta defined for  document");
            }
            if($v_isandroid){
                $doc->body["class"]="+igk-android";
            }
            else{
                $doc->body["class"]="-igk-android";
            }
        }
    }
}
///<summary></summary>
///<param name="text"></param>
/**
* 
* @param mixed $text
*/
function igk_ansi2utf8($text){
    $text=str_replace("Â¡", "\xc2\xa1", $text);
    $text=str_replace("Â¢", "\xc2\xa2", $text);
    $text=str_replace("Â£", "\xc2\xa3", $text);
    $text=str_replace("Â¤", "\xc2\xa4", $text);
    $text=str_replace("Â¥", "\xc2\xa5", $text);
    $text=str_replace("Â¦", "\xc2\xa6", $text);
    $text=str_replace("Â§", "\xc2\xa7", $text);
    $text=str_replace("Â¨", "\xc2\xa8", $text);
    $text=str_replace("Â©", "\xc2\xa9", $text);
    $text=str_replace("Âª", "\xc2\xaa", $text);
    $text=str_replace("Â«", "\xc2\xab", $text);
    $text=str_replace("Â¬", "\xc2\xac", $text);
    $text=str_replace("Â­", "\xc2\xad", $text);
    $text=str_replace("Â®", "\xc2\xae", $text);
    $text=str_replace("Â¯", "\xc2\xaf", $text);
    $text=str_replace("Â°", "\xc2\xb0", $text);
    $text=str_replace("Â±", "\xc2\xb1", $text);
    $text=str_replace("Â²", "\xc2\xb2", $text);
    $text=str_replace("Â³", "\xc2\xb3", $text);
    $text=str_replace("Â´", "\xc2\xb4", $text);
    $text=str_replace("Âµ", "\xc2\xb5", $text);
    $text=str_replace("Â¶", "\xc2\xb6", $text);
    $text=str_replace("Â·", "\xc2\xb7", $text);
    $text=str_replace("Â¸", "\xc2\xb8", $text);
    $text=str_replace("Â¹", "\xc2\xb9", $text);
    $text=str_replace("Âº", "\xc2\xba", $text);
    $text=str_replace("Â»", "\xc2\xbb", $text);
    $text=str_replace("Â¼", "\xc2\xbc", $text);
    $text=str_replace("Â½", "\xc2\xbd", $text);
    $text=str_replace("Â¾", "\xc2\xbe", $text);
    $text=str_replace("Â¿", "\xc2\xbf", $text);
    $text=str_replace("Ã", "\xc3\x80", $text);
    $text=str_replace("Ã", "\xc3\x81", $text);
    $text=str_replace("Ã", "\xc3\x82", $text);
    $text=str_replace("Ã", "\xc3\x83", $text);
    $text=str_replace("Ã", "\xc3\x84", $text);
    $text=str_replace("Ã", "\xc3\x85", $text);
    $text=str_replace("Ã", "\xc3\x86", $text);
    $text=str_replace("Ã", "\xc3\x87", $text);
    $text=str_replace("Ã", "\xc3\x88", $text);
    $text=str_replace("Ã", "\xc3\x89", $text);
    $text=str_replace("Ã", "\xc3\x8a", $text);
    $text=str_replace("Ã", "\xc3\x8b", $text);
    $text=str_replace("Ã", "\xc3\x8c", $text);
    $text=str_replace("Ã", "\xc3\x8d", $text);
    $text=str_replace("Ã", "\xc3\x8e", $text);
    $text=str_replace("Ã", "\xc3\x8f", $text);
    $text=str_replace("Ã", "\xc3\x90", $text);
    $text=str_replace("Ã", "\xc3\x91", $text);
    $text=str_replace("Ã", "\xc3\x92", $text);
    $text=str_replace("Ã", "\xc3\x93", $text);
    $text=str_replace("Ã", "\xc3\x94", $text);
    $text=str_replace("Ã", "\xc3\x95", $text);
    $text=str_replace("Ã", "\xc3\x96", $text);
    $text=str_replace("Ã", "\xc3\x97", $text);
    $text=str_replace("Ã", "\xc3\x98", $text);
    $text=str_replace("Ã", "\xc3\x99", $text);
    $text=str_replace("Ã", "\xc3\x9a", $text);
    $text=str_replace("Ã", "\xc3\x9b", $text);
    $text=str_replace("Ã", "\xc3\x9c", $text);
    $text=str_replace("Ã", "\xc3\x9d", $text);
    $text=str_replace("Ã", "\xc3\x9e", $text);
    $text=str_replace("Ã", "\xc3\x9f", $text);
    $text=str_replace("Ã ", "\xc3\xa0", $text);
    $text=str_replace("Ã½", "\xc3\xbd", $text);
    $text=str_replace("Ã¾", "\xc3\xbe", $text);
    $text=str_replace("Ã¿", "\xc3\xbf", $text);
    $text=str_replace("Ã¤", "\xc3\xa4", $text);
    $text=str_replace("Ã¥", "\xc3\xa5", $text);
    $text=str_replace("Ã¦", "\xc3\xa6", $text);
    $text=str_replace("Ã§", "\xc3\xa7", $text);
    $text=str_replace("Ã¨", "\xc3\xa8", $text);
    $text=str_replace("Ã©", "\xc3\xa9", $text);
    $text=str_replace("Ãª", "\xc3\xaa", $text);
    $text=str_replace("Ã«", "\xc3\xab", $text);
    $text=str_replace("Ã¬", "\xc3\xac", $text);
    $text=str_replace("Ã­", "\xc3\xad", $text);
    $text=str_replace("Ã®", "\xc3\xae", $text);
    $text=str_replace("Ã¯", "\xc3\xaf", $text);
    $text=str_replace("Ã°", "\xc3\xb0", $text);
    $text=str_replace("Ã±", "\xc3\xb1", $text);
    $text=str_replace("Ã²", "\xc3\xb2", $text);
    $text=str_replace("Ã³", "\xc3\xb3", $text);
    $text=str_replace("Ã´", "\xc3\xb4", $text);
    $text=str_replace("Ãµ", "\xc3\xb5", $text);
    $text=str_replace("Ã¶", "\xc3\xb6", $text);
    $text=str_replace("Ã·", "\xc3\xb7", $text);
    $text=str_replace("Ã¸", "\xc3\xb8", $text);
    $text=str_replace("Ã¹", "\xc3\xb9", $text);
    $text=str_replace("Ãº", "\xc3\xba", $text);
    $text=str_replace("Ã»", "\xc3\xbb", $text);
    $text=str_replace("Ã¼", "\xc3\xbc", $text);
    return $text;
}
///<summary>check if apache module is present</summary>
/**
* check if apache module is present
*/
function igk_apache_module($n){
    if(function_exists("apache_get_modules")){
        return in_array($n, apache_get_modules());
    }
    else{
        ob_start();
        phpinfo();
        $s=ob_get_contents();
        ob_end_clean();
        return strpos($s, $n) !== false;
    }
}
///<summary> return the application in the current session </summary>
/**
*  return the application in the current session
*  @return IGKApp
*/
function igk_app(){
    return IGKApp::getInstance();
}
///<summary></summary>
/**
* 
*/
function igk_app_destroy(){
    return IGKApp::Destroy();
}
///<summary>get app environment key</summary>
/**
* get app environment key
*/
function igk_app_env_key($app, $key){
    return "app://".$app->Name."/".$key;
}
///<summary>store system session key</summary>
///<param name="app">IGKAppSetting instance</param>
/**
* 
* @param mixed $app
*/
function igk_app_store_in_session($app){ 
    $_SESSION[IGK_APP_SESSION_KEY]=$app;
}
///<summary></summary>
/**
* 
*/
function igk_app_version(){
    return IGK_PLATEFORM_NAME. " ".IGK_VERSION;
}
///<summary></summary>
///<param name="$c"></param>
///<param name="from"></param>
///<param name="to" default="-1"></param>
/**
* 
* @param mixed $c
* @param mixed $from the default value is 0
* @param mixed $to the default value is -1
*/
function igk_array_copy($c, $from=0, $to=-1){
    $tab=array();
    $t=($to == -1) ? count($c): $to;
    if($t<=igk_count($c)){
        foreach($c as $k=>$v){
            $tab[$k]=$v;
            $t--;
            if($t<=0)
                break;
        }
    }
    return $tab;
}
///<summary>exclude some properties array</summary>
function igk_array_exclude($args, $property){
    if (is_string($property))
        $property = explode("|", $property);
    if($args ){
        foreach($property as $s){
            unset($args[$s]);
        }
    }
    return $args;
}

///<summary> create a key array for value</summary>
/**
*  create a key array for value
*/
function igk_array_createkeyarray($tab, $default=1){
	return array_fill_keys($tab, $default); 
}
function igk_array_is_indexed($arr){
	return array_values($arr) === $arr;
}
///<summary></summary>
///<param name="tab"></param>
///<param name="size"></param>
///<param name="default"></param>
/**
* 
* @param mixed $tab
* @param mixed $size the default value is 0
* @param mixed $default the default value is 0
*/
function igk_array_fill($tab, $size=0, $default=0){
    if(($s=igk_count($tab)) < $size){
        while($s > 0){
            $tab[]=$default;
            $s--;
        }
    }
    return $tab;
}
///<summary>array filter data, throw if require parameter is missing</summary>
/**
 * filter array
 * @param array $data table to get value
 * @param array $filter table of required filter value key=>required
 */
function igk_array_filter($data, $list, $die=true){
	$q =[];
	foreach($list as $k=>$v){
		if (!array_key_exists($k, $data)){
			if ($v){
                if ($die)
                    igk_die("require parameter not present : ".$k);
                else 
                    return null;
            }
			continue;
		}
		$q[$k] = $data[$k];
	}
	return $q;
}

 ///<summary>extra property list</summary>
function igk_array_extract($t, $property){
    $tab = [];
    foreach(explode("|", $property) as $k){
        $tab[$k]  = igk_getv($t, $k);
    }
    return $tab;
}

///<summary></summary>
///<param name="$c"></param>
/**
* 
* @param mixed $c
*/
function igk_array_first($c){
    if(is_array($c) && (igk_count($c) > 0)){
        return $c[0];
    }
    return null;
}
///<summary>used to get array of toggled value . keys=>keys </summary>
/**
* used to get array of toggled value . keys=>keys
*/
function igk_array_key_value_toggle($d){
    $b=array();
    foreach($d as $k=>$v){
        if(isset($b[$v]))
            continue;
        $b[$v]=$k;
    }
    return $b;
}
///<summary></summary>
///<param name="$c"></param>
/**
* 
* @param mixed $c
*/
function igk_array_last($c){
    if(is_array($c) && (igk_count($c) > 0)){
        return $c[igk_count($c)-1];
    }
    return null;
}
///<summary>Create a reference assoc key in define object</summary>
///<param name="d">array of object</param>
///<param name="key">key that will be used as the association key</param>
/**
* 
* @param mixed $d
* @param mixed $key
*/
function igk_array_object_refkey($d, $key){
    $b=array();
    if($d){
        foreach($d as $v){
            if(is_object($v))
                $b[$v->$key]=$v;
        }
    }
    return $b;
}
///<summary>add value to array. if key is present make an array</summary>
/**
* add value to array. if key is present make an array
*/
function igk_array_push_keyvalue(& $tab, $k, $v, $replace=true){
    if(!isset($tab[$k]) || $replace){
        $tab[$k]=$v;
    }
    else{
        if(is_array($tab[$k])){
            $tab[$k][]=$v;
        }
        else{
            $t=array($tab[$k]);
            $t[]=$v;
            $tab[$k]=$t;
        }
    }
}
///<summary>remove empty entries from the table</summary>
/**
* remove empty entries from the table
*/
function igk_array_remove_empty(& $tab){
    $ot=array();
    foreach($tab as $v){
        if(empty($v))
            continue;
        $ot[]=$v;
    }
    $tab=$ot;
    return $ot;
}
///<summary></summary>
///<param name="tab" ref="true"></param>
///<param name="key"></param>
/**
* 
* @param mixed * $tab
* @param mixed $key
*/
function igk_array_sort_bykey(& $tab, $key){
    $sorter=new IGKSorter();
    $sorter->key=$key;
    usort($tab, array($sorter, "SortValue"));
}
///<summary>array utility. sort assoc array by key</summary>
/**
* array utility. sort assoc array by key
*/
function igk_array_sortbykey(& $tab){
    $k=array_keys($tab);
    $o=array();
    sort($k);
    foreach($k as $s=>$t){
        $o[$t]=$tab[$t];
    }
    $tab=$o;
    return $tab;
}
///<summary></summary>
///<param name="tab" ref="true"></param>
/**
* 
* @param mixed * $tab
*/
function igk_array_sortkey(& $tab){
    if(!is_array($tab))
        return false;
    $ckey=array_keys($tab);
    igk_usort($ckey, "igk_key_sort");
    $t=array();
    foreach($ckey as $k){
        $t[$k]=$tab[$k];
    }
    $tab=$t;
    return true;
}
///<summary>convert assoc-array to object presentation</summary>
/**
* convert assoc-array to object presentation
*/
function igk_array_to_obj($c, $ns){
    if(($c == null) || !is_array($c)){
        igk_assert_die(!igk_sys_env_production(), __FUNCTION__." Invalid argument");
        return null;
    }
    $t=array();
    $ln=strlen($ns) + 1;
    $ln -= $ns[$ln-2] == '/' ? 1: 0;
    foreach($c as $k=>$v){
        if(!strstr($k, $ns))
            continue;
        $n=substr($k, $ln);
        $tt=explode("/", $n);
        if(igk_count($tt) == 1){
            $t[$n]=$v;
        }
        else{
            $g=null;
            $nn=array_pop($tt);
            foreach($tt as $m){
                if(($g == null)){
                    if(isset($t[$m])){
                        $g=$t[$m];
                    }
                    else{
                        $g=igk_createobj();
                        $t[$m]=$g;
                    }
                }
                else{
                    if(!isset($g->$m)){
                        $g->$m=igk_createobj();
                        $g=$g->$m;
                    }
                }
            }
            $g->$nn=$v;
        }
    }
    return (object)$t;
}
///<summary>Used to convert array to values to assoc table of (value => value)</summary>
/**
* Used to convert array to values to assoc table of (value => value)
*/
function igk_array_tokeys($d, $value=true){
    $b=array();
    foreach($d as $v){
        $b[$v]=$value ? $v: null;
    }
    return $b;
}
///<summary></summary>
///<param name="tab"></param>
///<param name="obj"></param>
/**
* 
* @param mixed $tab
* @param mixed $obj
*/
function igk_array_value_exist($tab, $obj){
    if($tab === null){
       igk_die(__FILE__.":".__LINE__, __FUNCTION__);
    }
    foreach($tab as $v){
        if($v === $obj)
            return true;
    }
    return false;
}
///<summary></summary>
///<param name="cond"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $cond
* @param mixed $msg
*/
function igk_assert_die($cond, $msg){
    if($cond){ 
        igk_die($msg);
    }
}
///<summary>return the base uri name of a file</summary>
///<exemple>/igkdev/com/info/li.txt will return com.info.li_txt </exemple>
/**
* return the base uri name of a file
*/
function igk_base_uri_name($f, $basedir=null){
    $s=$basedir ?? igk_io_basedir(); 
    $k= igk_io_basedir(igk_io_dir($f));
    $k=str_replace($s, "", $k); 
    $k=str_replace(".", "_", $k);
    $k=str_replace(DIRECTORY_SEPARATOR, ".", $k);
    if((strlen($k) > 0) && ($k[0] == "."))
    $k=substr($k, 1); 
    return $k;
}
///<summary>used to bind attribuyte to type</summary>
///<exemple>bind attribute</exemple>
/**
* used to bind attribuyte to type
*/
function igk_bind_attribute($type, $name, $attribute, $allowmultiple=true, $inherits=false){
    switch($type){
        case "class":
        IGKAttribute::Register($name, $attribute, $allowmultiple, $inherits);
        break;
        case "method":
        break;
    }
}
///<summary></summary>
///<param name="doc"></param>
/**
* 
* @param mixed $doc
*/
function igk_bind_host_css_style($doc){
    $bvtheme=new IGKHtmlDocTheme($doc, "temp://files");
    $out="";
    $g=$doc->Theme->getParam("css://temp/rendering");
    if($g){
        $sys=$doc->SysTheme;
        foreach($g as $k=>$v){
            igkOb::Start();
            igk_css_bind_file($v->host, $k, $bvtheme);
            $m=igk_css_treat($sys, igkOb::Content());
            igkOb::Clear();
            if(!empty($m)){
                $out .= $m;
            }
        }
        if(defined("IGK_FORCSS") && IGK_FORCSS){
            $doc->setParam("css://temp/rendering", null);
        }
    }
    $o="";
    if(!empty($out)){
        $o .= $out;
    }
    $o .= $bvtheme->get_css_def(false, false, $doc);
    if(!empty($o)){
        $s=igk_createnode("style");
        $s["id"]="tempsp";
        $s->Content=$o;
        return $s->Render();
    }
    return null;
}
///<summary>style function to bind file</summary>
/**
* style function to bind file
*/
function igk_bind_host_css_style_file($file, $doc, $host){
    $bvtheme=new IGKHtmlDocTheme($doc->Parent, "temp://files");
    $out="";
    $sys=$doc->SysTheme;
    igkOb::Start();
    igk_css_bind_file($host, $file, $bvtheme);
    $m=igk_css_treat($sys, igkOb::Content());
    igkOb::Clear();
    if(!empty($m)){
        $out .= $m;
    }
    $o="";
    if(!empty($out)){
        $o .= $out;
    }
    $o .= $bvtheme->get_css_def(false, false, $doc);
    return $o;
}
///<summary></summary>
///<param name="o"></param>
/**
* 
* @param mixed $o
*/
function igk_cache_expired($o){
    $n=igk_date_now();
    $d1=igk_time_span(IGK_DATETIME_FORMAT, $n);
    $d2=igk_time_span(IGK_DATETIME_FORMAT, $o->date);
    $b=($d1 - $d2);
    return $b > $o->duration;
}
///<summary>generate cache from folder</summary>
/**
* generate cache from folder
*/
function igk_cache_gen_cache($sourcedir, $cachedir, $mergescript=null, $resregex="/\.(js(on)?)$/"){
    igk_wln_e("merge script");
    $ln=strlen($sourcedir) + 1;
    $resolver=IGKResourceUriResolver::getInstance();
    $mergeoutput="";
    $dname="";
    if($mergescript){
        $dname=$cachedir."/{$mergescript}.js";
    }
    $rgx=$resregex;
    $mergescallback=function($file) use ($sourcedir, $mergescript){
        $header="/*file:".substr($file, strlen($sourcedir) + 1)."*/".IGK_LF;
        if($mergescript){
            echo $header.str_replace("\"use strict\";", "", igk_js_minify(file_get_contents($file)))."\n";
        }
        else{
            igk_zip_output($header.igk_js_minify(file_get_contents($file)), 0, 0);
        }
    };
    if(is_callable($resregex)){
        $rgx="/\.(([a-z]+)$)/i";
    }
    else{
        $resregex=function($file, $cfile, $mergescallback){
            switch($ext=igk_io_path_ext(basename($file))){
                case "js":
                $mergescallback($file);
                break;default: include($file);
                break;
            }
        };
    }
    foreach(igk_io_getfiles($sourcedir, $rgx) as $file){
        ob_start();
        $cfile=$cachedir."/".substr($file, $ln);
        $c=$resregex($file, $cfile, $mergescallback);
        $output=ob_get_contents();
        ob_clean();
        if($c){
            continue;
        }
        $ext=igk_io_path_ext(basename($file));
        if($mergescript && ($ext == "js")){
            $mergeoutput .= $output;
        }
        else{
            igk_io_w2file($cfile, $output);
            $resolver->resolve($cfile, null);
        }
    }
    if($mergescript && !empty($mergeoutput)){
        $cfile=$dname;
        ob_start();
        igk_zip_output($mergeoutput, 0, 0);
        $mergeoutput=ob_get_contents();
        ob_end_clean();
        igk_io_w2file($cfile, $mergeoutput);
        $resolver->resolve(dirname($cfile), null);
    }
}


function igk_cache_js_callback($file, $cfile, $mergescallback){
		$ext = igk_io_path_ext(basename($file));
		switch($ext){
			case "js":
				$mergescallback($file);
				break;
			default:
				IGKIO::CreateDir(dirname($cfile));
				igk_io_symlink($file, $cfile);
				return 1;
		}
		return 0;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_call_env_closure($n){
    $fc=igk_getv(igk_get_env(IGK_ENV_CALLBACK_KEYS), $n);
    if($fc){
        return call_user_func_array($fc, array_slice(func_get_args(), 1));
    }
    return null;
}
///<summary></summary>
///<param name="callable"></param>
/**
* 
* @param mixed $callable
*/
function igk_callable_id($callable){
    if(is_string($callable) && is_callable($callable))
        return $callable;
    if(!igk_is_callable($callable)){
        return null;
    }
    if(is_array($callable) && (igk_count($callable) == 2)){
        $cl=get_class(igk_getv($callable, 0));
        $m=igk_getv($callable, 1);
        $f=$cl."::\x3a".$m;
        return $f;
    }
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="parentName"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $parentName
*/
function igk_can_set_ctrlparent($ctrl, $parentName){
    $p=igk_getctrl($parentName, false);
    while($p){
        if(($p == $ctrl) || (!$p->CanAddChild))
            return false;
        $p=$p->getWebParentCtrl();
    }
    return true;
}
///<summary></summary>
/**
* 
*/
function igk_cancel_last_ref_number(){
    $ct=igk_getctrl(IGK_UCB_REF_CTRL);
    $ct->cancel_last_ref_number();
}
///<summary></summary>
///<param name="v" default="11"></param>
/**
* 
* @param mixed $v the default value is 11
*/
function igk_check_ie_version($v=11){
    return igk_agent_isie() ? (explode("/", igk_agent_ieversion())[0]<=$v): 0;
}
///<summary>short cut to clear cache</summary>
/**
* shortcut to clear cache
*/
function igk_clear_cache(){
    IGKControllerManagerObject::ClearCache();
}
///Clear config session and restart Application
/**
*/
function igk_clear_config_session(){
    $ctrl=igk_getconfigwebpagectrl();
    $uri=$ctrl->getUri("startconfig&q=".base64_encode('?'.http_build_query(array(
            "u"=>$ctrl->User->clLogin,
            "pwd"=>$ctrl->User->clPwd,
            "selectedCtrl"=>$ctrl->getSelectedConfigCtrl()->getName(),
            "selectPage"=>$ctrl->getSelectedMenuName()
        ))));
    igk_getctrl(IGK_SESSION_CTRL)->ClearS(false);
}
///partir un jour
///<summary>clear cookie</summary>
///<param name="n">cookie's name</param>
/**
* clear cookie
* @param mixed $n cookie's name
*/
function igk_clear_cookie($n){ 
    $m=igk_get_cookie_name(igk_sys_domain_name()."/".$n);
    $rs=igk_getv($_COOKIE, $m);
    igk_set_cookie($n, "", 1, time() - (7 * 24 * 60));
    if($rs)
        unset($_COOKIE[$m]);
}
///<summary>clear header list</summary>
/**
* clear header list
*/
function igk_clear_header_list($ignorelist=null){
    $ignorelist=$ignorelist ?? igk_get_env("sys://headers/ignorelist");
    $tab=headers_list();
    foreach($tab as $v){
        $n=igk_getv(explode(':', $v), 0);
        if($ignorelist && in_array($n, $ignorelist))
            continue;
        header_remove($n);
    }
}
///<summary></summary>
/**
* 
*/
function igk_clearall_cookie(){
    $tab=$_COOKIE;
    foreach($tab as $k=>$v){
        igk_set_global_cookie($k, "", 1, time() - (7 * 24 * 60));
        unset($_COOKIE[$k]);
    }
}
///<summary>close the current session id</summary>
/**
* close the current session id
*/
function igk_close_session(){
    if(session_id())
        @session_write_close();
}
///<summary></summary>
///<param name="v"></param>
///<param name="$c"></param>
/**
* 
* @param mixed $v
* @param mixed $c
*/
function igk_cmp_array_value($v, $c){
    if(is_array($v) && is_array($c)){
        $dc=igk_count($v);
        $hc=igk_count($c);
        if($dc == $hc){
            for($i=0; $i < $dc; $i++){
                if($v[$i] !== $c[$i]){
                    return false;
                }
            }
            return true;
        }
    }
    return false;
}
///<summary></summary>
///<param name="o"></param>
///<param name="i"></param>
/**
* 
* @param mixed $o
* @param mixed $i
*/
function igk_cmp_refobj($o, $i){
    if(($o == null) && ($i == null))
        return true;
    if((($o == null) && ($i != null)) || (($o != null) && ($i == null)))
        return false;
    $cmp=igk_new_id(); 
    $o->$cmp=true; 
    $r=(!empty($i->$cmp));
    unset($o->$cmp);
    return $r;
}
///<summary>compare two version</summary>
///<exemple> 1.0.1 vs 1.0.5</exemple>
/**
* compare two version 
*/
function igk_cmp_version($v1, $v2){
    while(($tb1=explode(".", trim($v1))) && count($tb1) < 4){
        $v1 .= ".0";
    }
    while(($tb2=explode(".", trim($v2))) && count($tb2) < 4){
        $v2 .= ".0";
    }
    $c=igk_count($tb1);
    if($c == igk_count($tb2)){
        $i=0;
        while(($i < $c) && ($tb1[$i] === $tb2[$i])){
            $i++;
        }
        if($i < $c){
            if($tb1[$i] < $tb2[$i]){
                return -1;
            }
            return 1;
        }
    }
    return strcmp($v1, $v2);
}
///<summary></summary>
/**
* 
*/
function igk_community_get_followus_service(){
    return igk_get_env("sys://services/community/followus");
}
///<summary></summary>
///<param name="name"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $name
* @param mixed $callback
*/
function igk_community_register_followus_service($name, $callback){
    $k="sys://services/community/followus";
    $tab=igk_get_env($k, function(){
        return array();
    });
    $tab[strtolower($name)
    ]=$callback;
    igk_set_env("sys://services/community/followus", $tab);
}
///<summary></summary>
/**
* 
*/
function igk_conf_canconfigure(){
    return igk_getctrl(IGK_CONF_CTRL)->getCanConfigure();
}
///<summary>get object with igk Xpath selection model</summary>
/**
* get object with igk Xpath selection model
*/
function igk_conf_get($conf, $path, $default=null, $strict=0){
    $tab=null;
    $tobj=array();
    array_push($tobj, array('o'=>$conf, 'path'=>$path));
    $tout=null;
    $q=null;
    while($cq=array_pop($tobj)){
        $g=explode("/", $cq['path']);
        $q=$cq["o"];
        $count=0;
        foreach($g as $k){
            $count++;
            if(preg_match_all("/^\[(?P<exp>(.)+)\]$/i", trim($k), $tab) > 0){
                $o=igk_conf_get_expression($tab["exp"][0]);

                $m=null;
                if(is_array($q)){
                    foreach($q as $s){
                        $p=1;
                        foreach($o as $qt=>$qs){
                            $p=$p && igk_conf_match($s, $qt, $qs);
                            if(!$p)
                                break;
                        }
                        if($p){
							//bind array
                            if($m == null)
                                $m=$s;
                            else{
                                if(!is_array($m)){
                                    $m=array($m);
                                }
                                $m[]=$s;
                            }
                        }
                    }
                    if($m){
                        if($count < igk_count($g)){
                            $cpath=implode("/", array_slice($g, $count));
                            if(is_array($m)){
                                foreach($m as $mk=>$mv){
                                    array_push($tobj, array("o"=>$mv, "path"=>$cpath));
                                }
                            }
                            else{
                                array_push($tobj, array("o"=>$m, "path"=>$cpath));
                            }
                            $m=null;
                            $q=null;
                            break;
                        }
                        $q=$m;
                        continue;
                    }
                    else{
                        if($strict){
                            return $default;
                        }
                    }
                    $q=igk_getv($q, 0);
                    continue;
                }
                else{
                    $p=1;
                    foreach($o as $qt=>$qs){
                        $p=$p && igk_conf_match($q, $qt, $qs);
                        if(!$p)
                            break;
                    }
                    if($p)
                        $m=$q;
                    else{
                        if($strict)
                            return $default;
                        $m=$q;
                    }
                }
                if($m){
                    $q=$m;
                    continue;
                }
                return $default;
            }
            $q=igk_getv($q, $k);
            if($q == null)
                return $default;
        }
        if($q){
            if($tout === null){
                $tout=$q;
            }
            else if(!is_array($tout)){
                $tout=array($tout);
                $tout[]=$q;
            }
        }
    }
    return $tout;
}
///<summary></summary>
///<param name="s"></param>
/**
* 
* @param mixed $s
*/
function igk_conf_get_expression($s){
    $tab=array();
    $ln=strlen($s);
    $i=0;
    $m=0;
    $n="";
    $q=null;
    while($i < $ln){
        $ch=$s[$i];
        switch($ch){
            case "=":
            case "|":
            case "$":
            case "^":
            if($m == 0){
                $q=(object)array("op"=>$ch, "v"=>"");
                $tab[$n]=$q;
                $m=1;
            }
            $n="";
            break;
            case ",":
            if(($m == 1) && (!empty($n))){
                $q->v=$n;
            }
            $m=0;
            $n="";
            break;
            default: $n .= $ch;
            break;
        }
        $i++;
    }
    if(($m == 1) && (!empty($n))){
        $q->v=$n;
    }
    return (object)$tab;
}
///<summary>used to load configuration settings</summary>
///<param name="obj">output object</param>
///<param name="n">igk html node to load</param>
/**
* used to load configuration settings
* @param mixed $objoutput object
* @param mixed $n igk html node to load
*/
function igk_conf_load($obj, $n){
    if(!isset($n))
        return null;
    $tab=array();
    array_push($tab, (object)array("t"=>$obj, "n"=>$n));
    while($q=array_pop($tab)){
        if($q->n->HasAttributes){
            foreach($q->n->Attributes as $m=>$mc){
                $q->t->{$m}=$mc;
            }
        }
        if($q->n->ChildCount == 1){
            if($q->n->Childs[0]->TagName == "!CDATA"){
                $h=$q->n->TagName;
                $q->p->$h=$q->n->Childs[0]->Content;
                continue;
            }
        }
        if($attr=$q->n->Childs) foreach($attr as $v){
            if(($v->ChildCount<=0) && !$v->HasAttributes){
                $q->t->{$v->
                TagName}=$v->innerHtml;
            }
            else{
                $cb=igk_createobj();
                array_push($tab, (object)array("t"=>$cb, "n"=>$v, "p"=>$q->t));
                if(isset($q->t->{$v->
                TagName})){
                    if(!is_array($q->t->{$v->
                    TagName})){
                        $q->t->{$v->
                        TagName}=array($q->t->{$v->
                        TagName});
                    }
                    $q->t->{$v->
                    TagName}[]=$cb;
                }
                else
                    $q->t->{$v->
                TagName}=$cb;
            }
        }
    }
}
///<summary></summary>
///<param name="t" ref="true"></param>
///<param name="d"></param>
/**
* 
* @param mixed * $t
* @param mixed $d
*/
function igk_conf_load_attribs(& $t, $d){
    if($d->HasAttributes){
        foreach($d->Attributes as $k=>$s){
            $t[$k]=$s;
        }
    }
}
///<summary></summary>
///<param name="s"></param>
///<param name="tag" default="configs"></param>
///<param name="deftext" default="text"></param>
/**
* 
* @param mixed $s
* @param mixed $tag the default value is "configs"
* @param mixed $deftext the default value is "text"
*/
function igk_conf_load_content($s, $tag="configs", $deftext="text"){
    $div=igk_createxmlnode("dummy");
    $div->Load($s);
    $h=($div->getElementsByTagName($tag));
    $d=igk_getv($div->getElementsByTagName($tag), 0);
    if($d){
        $t=array();
        igk_conf_load_attribs($t, $d);
        $childs=$d->Childs;
        if($childs) foreach($d->Childs as $k){
            if($k->Type == "HtmlText")
                continue;
            $n=$k->TagName;
            $o=null;
            if($k->ChildCount<=0){
                $sk=$k->innerHTML;
                if($k->HasAttributes){
                    $o=igk_createobj();
                    igk_conf_load($o, $k);
                }
                if(isset($t[$n])){
                    if(!is_array($t[$n])){
                        $t[$n]=array($t[$n]);
                    }
                    $t[$n][]=$o;
                }
                else{
                    if($o){
                        if(!empty($sk))
                                $o->{$deftext}=$k;
                        $t[$n]=$o;
                    }
                    else if(!empty($sk))
                        $t[$n]=$sk;
                }
            }
            else{
                $v_ob=igk_createobj();
                igk_conf_load($v_ob, $k);
                if(isset($t[$k->TagName])){
                    if(!is_array($t[$k->TagName])){
                        $t[$k->TagName]=array($t[$k->TagName]);
                    }
                    $t[$k->TagName][]=$v_ob;
                }
                else
                    $t[$k->TagName]=$v_ob;
            }
        }
        return (object)$t;
    }
    return null;
}
///<summary>used to load configuration file.</summary>
///<doc>configuration file are xml file that store primary </doc>
///<param name="file">xml file to load</param>
///<param name="tag">root name tag</param>
///<param name="obj">object where to load</param>
/**
* used to load configuration file.
* @param mixed $ile xml file to load
* @param mixed $tag root name tag
* @param mixed $objobject where to load
*/
function igk_conf_load_file($file, $tag=IGK_CNF_TAG, $obj=null){
    $s=igk_io_read_allfile($file);
    $o=igk_conf_load_content($s, $tag);
    return $o;
}
///<summary>get if configuration match the request</summary>
/**
* get if configuration match the request
*/
function igk_conf_match($t, $n, $op){
    if(isset($t->$n)){
        switch($op->op){
            case "=":
            return $t->$n == $op->v;
            case "$":
            return igk_str_endwith($t->$n, $op->v);
            case "^":
            return igk_str_startwith($t->$n, $op->v);
            case "~":
            return strstr($t->$n, $op->v) !== null;
        }
    }
    return 0;
}
///<summary>set object at igkXpath selection model</summary>
/**
 * * set object at igkXpath selection model
 */
function igk_conf_set(& $obj, $data, $path){
    $c=explode("/", $path);
    $s=$obj;
    while($q=array_shift($c)){
        $set=igk_count($c) == 0;
        if($set){
            $s->$q = $data;
            break;
        }
        if(!isset($s->$q))
            $s->$q=igk_createobj();
        $s=$s->$q;
    } 
}
///<summary>store config value to node</summary>
///<param name="node">node where to add object</param>
///<param name="root">root name</param>
///<param name="v"></param>
/**
* store config value to node
* @param mixed $node node where to add object
* @param mixed $rootroot name
* @param mixed $v
*/
function igk_conf_store_value($d, $k, $v){
    $bindv=function($c, $v){
        $tab=array();
        array_push($tab, (object)array('n'=>$c, 'v'=>$v));
        while($q=array_pop($tab)){
            $m=$q;
            foreach($m->v as $s=>$t){
                if($s[0] == "@"){
                    $m->n[substr($s, 1)]=$t;
                    continue;
                }
              
                if(is_string($t) || is_numeric($t)){
                    $m->n->add($s)->Content=htmlspecialchars($t);
                }
                else{
                    if(is_array($t)){
                        array_push($tab, (object)array('_from:table'=>1, 'n'=>$m->n, 'v'=>$t, 'a'=>$s));
                    }
                    else{
                        if(isset($m->{'_from:table'})){
                            $a=$m->a;
                            igk_assert_die(!$a, "object not found. ".$s);
                            array_push($tab, (object)array('n'=>$m->n->add($a), 'v'=>$t));
                        }
                        else{
                            if ($t instanceof IGKXmlCDATA){
                                $m->n->add($s)->Content = $t;
                                continue;
                            }
                            array_push($tab, (object)array('n'=>$m->n->add($s), 'v'=>$t));
                        }
                    }
                }
            }
        }
    };
    if(is_string($v) || is_numeric($v)){
        $d->add($k)->Content=$v;
        return;
    }
    else{
        if(is_object($v)){
            
            $c=$d->add($k);
            $bindv($c, $v);
        }
        else if(is_array($v)){
            $name=$k;
            foreach($v as $k=>$v){
                $n=$d->add($name);
                $bindv($n, $v);
            }
        }
    }
}
///<summary>unset all object found in igkXpath selection model</summary>
/**
* unset all object found in igkXpath selection model
*/
function igk_conf_unset(& $obj, $path){
    throw new IGKException("Not Implement ".__FUNCTION__);
}
///<summary></summary>
/**
* 
*/
function igk_config_php_index_content(){
    $index_file="../index.php";
    $v=<<<ETF
<?php
define("IGK_CONFIG_PAGE",1);
if (!defined("IGK_FRAMEWORK"))
@require_once("{$index_file}");
igk_sys_config_view(__FILE__);
ETF;
    return $v;
}
///<summary></summary>
/**
* 
*/
function igk_core_dist_jscache(){
    return igk_io_cacheddist_jsdir()."/core/balafon.js";
}
///<summary></summary>
///<param name="item"></param>
/**
* 
* @param mixed $item
*/
function igk_count($item){
    if(is_string($item))
        return strlen($item);
    if(is_array($item))
        return count($item);
    if(is_object($item)){
        if(method_exists(get_class($item), "getCount"))
            return $item->getCount();
        if(method_exists(get_class($item), "getRowCount"))
            return $item->getRowCount();
    }
    return 0;
}
///<summary></summary>
/**
* 
*/
function igk_create_action_reponse(){
    return igk_createobj(array("msg"=>"Success", "type"=>"igk-default"));
}
///<summary>crate a adapter from class name</summary>
/**
* crate a adapter from class name
*/
function igk_create_adapter_from_classname($n, $ctrl=null, $params=null){
    
    $out=new $n(!is_string($ctrl) ? $ctrl: null);
    if(($out != null) && ($params != null)){
        $out->configure($params);
    }
    if(!$out->IsAvailable){
        igk_debug_wln("adapter ".$ctrl." not available");
        return null;
    }
    return $out;
}
///<summary>create an attribute to render value by calling callback</summary>
///<param name="n" > name or array callback </param>
/**
* create an attribute to render value by calling callback
* @param mixed $n  name or array callback
*/
function igk_create_attr_callback($n, $attrs){
    $s=null;
    if(is_callable($n)){
        $s=(object)array(
                IGK_OBJ_TYPE_FD=>"callable",
                "name"=>$n,
                "attrs"=>$attrs
            );
        return $s;
    }
    return $s;
}
///<summary></summary>
///<param name="classname"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $classname
* @param mixed $callback
*/
function igk_create_component_callback($classname, $callback){
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
    $t=$ctrl->getParam("sys://class_component", array());
    if(!isset($t[$classname])){
        $t[$classname]=$callback();
        $ctrl->setParam("sys://class_component", $t);
    }
    return $t[$classname];
}
///<summary></summary>
/**
* 
*/
function igk_create_cref(){
    static $cref;
    if(!isset($cref)){
        $cref="cref:".date("Ymd-His")."|".igk_new_id();
    }
    return $cref;
}
///<summary>create a dynamic object with the array data</summary>
/**
* create a dynamic object with the array data
*/
function igk_create_dynamic($data){
    $m=new IGKDynamicObject();
    $m->initProperties($data);
    return $m;
}
///<summary>used to create a evaluable expression callback</summary>
/**
* used to create a evaluable expression callback
*/
function igk_create_expression_callback($exp, $param=null){
    return (object)array(
            IGK_OBJ_TYPE_FD=>"_callback",
            "clType"=>"exp",
            "clFunc"=>$exp,
            "clParam"=>$param
        );
}
///<summary>create a file callback object</summary>
/**
* create a file callback object
*/
function igk_create_file_callback($ctrl, $file, $func=null, $param=null){
    return (object)array(
            IGK_OBJ_TYPE_FD=>"_callback",
            "clType"=>"file",
            "Ctrl"=>$ctrl,
            "clFile"=>$file,
            "clFunc"=>$func,
            "clParam"=>$param
        );
}
///<summary> used to create a filtered object </summary>
/**
*  used to create a filtered object
*/
function igk_create_filterobject($n, $initarray){
    if(!isset($n) || ($n == null))
        $n=(object)$initarray;
    else{
        if(is_array($n))
            $n=(object)$n;
        foreach($initarray as $k=>$v){
            if(!isset($n->$k)){
                $n->$k=$v;
            }
        }
    }
    return $n;
}
///<summary></summary>
///<param name="func"></param>
///<param name="param" default="null"></param>
/**
* 
* @param mixed $func
* @param mixed $param the default value is null
*/
function igk_create_func_callback($func, $param=null){
    return (object)array(
            IGK_OBJ_TYPE_FD=>"_callback",
            "clType"=>"func",
            "clFunc"=>$func,
            "clParam"=>$param
        );
}
///<summary></summary>
/**
* 
*/
function igk_create_guid(){
    if(function_exists("com_create_guid")){
        return com_create_guid();
    }
    mt_srand((double)microtime() * 10000);
    $charid=strtoupper(md5(uniqid(rand(), true)));
    $hyphen=chr(45);
    $uuid=chr(123).substr($charid, 0, 8).$hyphen.substr($charid, 8, 4).$hyphen.substr($charid, 12, 4).$hyphen.substr($charid, 16, 4).$hyphen.substr($charid, 20, 12).chr(125);
    return $uuid;
}
///<summary></summary>
///<param name="name"></param>
///<param name="args" default="null"></param>
///<param name="initcallback" default="null"></param>
///<param name="class" default="IGK_HTML_ITEMBASE_CLASS"></param>
///<param name="context" default="Html"></param>
/**
* 
* @param mixed $name
* @param mixed $args the default value is null
* @param mixed $initcallback the default value is null
* @param mixed $class the default value is IGK_HTML_ITEMBASE_CLASS
* @param mixed $context the default value is Html
*/
function igk_create_html_component($name, $args=null, $initcallback=null, $class=IGK_HTML_ITEMBASE_CLASS, $context=IGKHtmlContext::Html){
    static $createComponentFromPackage=null;
    static $creator=null;
    if($creator != null){
        if(isset($creator[$name])){
            $fc=$creator[$name];
            if(!is_array($args))
                $args=array();
            $args=array($name, $args);
            if($c=call_user_func_array($fc, $args)){
                if(is_callable($initcallback)) {
                    $initcallback($c, array(
                        "type" => IGK_COMPONENT_TYPE_FUNCTION,
                        "name" => "__creator:" . $name
                    ));
                }
            }
            return $c;
        }
    }
    $package=null;
    if($createComponentFromPackage === null)
        $createComponentFromPackage=function($g, $name, $args=null, $initcallback=null, $class=IGK_HTML_ITEMBASE_CLASS, $context=IGKHtmlContext::Html) use (& $package){
        if(isset($package[$g]["components"])){
            $components=$package[$g]["components"];
            if(isset($components[$name]) && is_callable($c_fc=$components[$name])){
                return call_user_func_array($c_fc, func_get_args());
            }
        }
        return null;
    };
    $package=igk_reg_component_package();
    if(($pos=strpos($name, ":")) !== false){
        $g=substr($name, 0, $pos);
        $n=substr($name, $pos + 1);
        if(isset($package[$g])){
            if($comp=$createComponentFromPackage($g, $name, $args, $initcallback, $class, $context)){
                $creator[$name]=["callback", "count"=>1];
                return $comp;
            }
            $cc=$package[$g]["callback"];
            $fc=function() use ($cc){
                return call_user_func_array($cc, func_get_args());
            };
            if($creator == null){
                $creator=array();
            }
            $creator[$name]=$fc;
            $ng=call_user_func_array($fc, array_merge(array($name), array_slice(func_get_args(), 1)));
            return $ng;
        }
    }
    if($comp=$createComponentFromPackage("igk", $name, $args, $initcallback, $class, $context)){
        return $comp;
    }
    $c=null;
    $f=IGKString::Format(IGK_HTML_CLASS_NODE_FORMAT, $name);
    if(class_exists($f) && !igk_reflection_class_isabstract($f) && igk_reflection_class_extends($f, $class)){
        $p=new ReflectionClass($f);
        $tb=array();
        if(is_array($args))
            $tb=$args;
        $o=call_user_func_array(array($p, "newInstance"), $tb);
        if($o)
            $c=$o;
        else{
            $c=new $f();
        }
    }
    else{
        if(function_exists($fc=str_replace("-", "_", IGK_FUNC_NODE_PREFIX.$name))){
            $tb=is_array($args) ? $args: array();
            $s=new ReflectionFunction($fc);
            $v_pcount=igk_count($tb);
            $v_rp=$s->getNumberOfRequiredParameters();
            if($v_pcount>=$v_rp){
                $c=call_user_func_array($fc, $tb);
                if($c){
                    if($initcallback)
                        $initcallback($c, array("type"=>IGK_COMPONENT_TYPE_FUNCTION, "name"=>$fc));
                }
                // else{
                    // igk_wln("item not created :::".$fc. " method not returning a valid data node");
                // }
            }
            else{
                igk_die("add{$name} : number of required parameters mismatch. Expected {$v_rp} but ".$v_pcount. " passed");
            }
        }
        else{
            if($context == IGKHtmlContext::Html){
                $c=new IGKHtmlItem($name);
            }
            else{
                $c=new IGKXmlNode($name);
            }
        }
    }
    return $c;
}
///<summary></summary>
///<param name="fcname"></param>
///<param name="node"></param>
/**
* 
* @param mixed $fcname
* @param mixed $node
*/
function igk_create_invoke_callback($fcname, $node){
    $t=array("fc"=>$fcname, "n"=>$node);
    if(func_num_args() > 2)
        $t=array_merge($t, array_slice(func_get_args(), 2));
    return igk_create_expression_callback("return \$invokeParam(\$obj,\$fc,null,1);", $t);
}
///<summary></summary>
///<param name="path"></param>
/**
* 
* @param mixed $path
*/
function igk_create_module($path){
    $v_k="sys://require_mods";
    $g=igk_get_env($v_k, array());
    if(isset($g[$path]))
        return 0;
    $dir=IGK_LIB_DIR. "/Modules/{$path}";
    if(file_exists($dir)){
        return 0;
    }
    if(!IGKIO::CreateDir($dir))
        return 0;
    igk_io_save_file_as_utf8_wbom($dir."/.module.pinc", igk_io_read_allfile(IGK_LIB_DIR."/Model/module.php"));
    return 1;
}
///<summary></summary>
///<param name="callable"></param>
///<param name="params" default="null"></param>
/**
* 
* @param mixed $callable
* @param mixed $params the default value is null
*/
function igk_create_node_callback($callable, $params=null){
    return (object)array(
            IGK_OBJ_TYPE_FD=>"_callback",
            "clType"=>"node",
            "clFunc"=>$callable,
            "clParam"=>$params
        );
}
///<summary>create a session instance object</summary>
///<param name="n">identifier of the object</param>
///<param name="callback">mixed callable|classname callback object</param>
/**
* create a session instance object
* @param mixed $string identifier identifier of the object
* @param mixed $closure mixed callable|classname callback object
*/
function igk_create_session_instance($n, $callback){
    $create_instance=function($callback){
        $o=null;
        if(is_callable($callback))
            ($o=$callback()) || igk_die(__("failed to create an instance"));
        else if(class_exists($callback, false)){
            ($o=new $callback()) || igk_die(__("failed to create an instance"));
        }
        return $o;
    };
    //+ no session started just create the object
    if(!isset($_SESSION)){
        return $create_instance($callback);        
    }
    //+ create the object and replace if not null
    $o=igk_getv($_SESSION, $n);
    if(!$o && ($o=$create_instance($callback))){
        $_SESSION[$n]=$o;
    }
    return $o;
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_createadditionalconfiginfo($tab){
    $o=new StdClass();
    $o->clType=igk_getv($tab, "clType");
    $o->clDefaultValue=igk_getv($tab, "clDefaultValue");
    $o->clRequire=igk_getv($tab, "clRequire");
    return $o;
}
///<summary>create an article node</summary>
/**
* create an article node
*/
function igk_createarticlenode($ctrl, $article, $row){
    $n=igk_createnode("div");
    igk_html_article($ctrl, $article, $n);
    return $n;
}
///<summary></summary>
/**
* 
*/
function igk_createcallbacknode(){
    return new IGKHtmlCallbackNode();
}
///<summary></summary>
///<param name="name"></param>
///<param name="attributes" default="null"></param>
///<param name="index" default="null"></param>
/**
* 
* @param mixed $name
* @param mixed $attributes the default value is null
* @param mixed $index the default value is null
*/
function igk_createforminput($name, $attributes=null, $index=null){
    $d=igk_createnode();
    $d["class"]="igk-form-group";
    $f=$d->addSLabelInput($name, 'text');
    if($attributes)
        $f->input->setAttributes($attributes);
    return $d;
}
///<summary> create loading article context </summary>
/**
*  create loading article context
*/
function igk_createloading_context($ctrl, $raw=null){
    $t=[];
    $t["ctrl"]=isset($ctrl) ? $ctrl: null;
    $t["raw"] = $raw; 
    if(count($t) > 0)
        return (object)$t;
    return null;
}
///<summary>shorcut to create a balafon web node</summary>
/**
* shorcut to create a balafon web node
*/
function igk_createnode($tag="div", $attributes=null, $index=null){
    return IGKHtmlItem::CreateWebNode($tag, $attributes, $index);
}
function igk_createnotagnode(){
    return igk_createnode(IGK_HTML_NOTAG_ELEMENT);
}
///<summary></summary>
///<param name="args" default="null"></param>
/**
* 
* @param mixed $args the default value is null
*/
function igk_createnode_with_package($args=null){
    $package=igk_get_current_package();
    if($package !== null){
        $tab=is_array($args) ? $args: func_get_args();
        while(igk_count($tab) < 3){
            $tab[]=null;
        }
        list($name, $attributes, $indexOrArgs)
        =$tab;
        if(is_object($package) && method_exists($package, "CreateNode")){
            $n=$package->CreateNode($name, $attributes, $indexOrArgs);
            return $n;
        }
        if(!is_callable($package))
            igk_die("not a callable");
        return call_user_func_array($package, $args);
    }
    return null;
}
///<summary>create a object node</summary>
/**
* create a object node
*/
function igk_createobj($tab=null){
    if($tab == null)
        return (object)array();
    if(is_array($tab))
        return (object)$tab;
    if(is_object($tab)){
        $obj=(object)array();
        foreach($tab as $k=>$v){
            $obj->$k=$v;
        }
        return $obj;
    }
    return null;
}
///<summary>create an object by keys</summary>
/**
* create an object by keys
*/
function igk_createobj_array($keys, $default=null){
    $o=igk_createobj();
    foreach($keys as $m){
        $o->$m=$default;
    }
    return $o;
}
///<summary>create filtered object </summary>
///<param name="src"> source data </param>
///<param name="filter"> filtered data </param>
/**
* create filtered object
*/
function igk_createobj_filter($src, $filter){
    $o=igk_createobj();
    foreach($filter as $k=>$v){
        $o->$k=igk_getv($src, $k, $v);
    }
    return $o;
}
///<summary></summary>
///<param name="array_key"></param>
/**
* 
* @param mixed $array_key
*/
function igk_createobj_strict($array_key){
    return IGKObjectStrict::Create($array_key);
}
///<summary></summary>
///<param name="tab" default="null"></param>
/**
* 
* @param mixed $tab the default value is null
*/
function igk_createobjstorage($tab=null){
    return new IGKObjStorage($tab);
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_createpreprocessor($n){
    $n=new IGKXmlProcessor($n);
    return $n;
}
///<summary></summary>
///<param name="name"></param>
///<param name="options"></param>
///<param name="selected" default="null"></param>
///<param name="callback" default="null"></param>
/**
* 
* @param mixed $name
* @param mixed $options
* @param mixed $selected the default value is null
* @param mixed $callback the default value is null
*/
function igk_createselectinput($name, $options, $selected=null, $callback=null){
    $d=igk_createnode();
    $d["class"]="igk-form-group";
    $f=$d->addLabel($name);
    $sl=$d->add("select");
    $sl["class"]="igk-form-control";
    if($options){
        foreach($options as $k=>$v){
            $opt=$sl->add("option");
            $opt["value"]=$k;
            $opt->Content=$callback ? $callback($v): $v;
            if($k == $selected){
                $opt["selected"]="true";
            }
        }
    }
    return $d;
}
///<summary></summary>
///<param name="txt" default="null"></param>
/**
* 
* @param mixed $txt the default value is null
*/
function igk_createtextnode($txt=null){
    $n=new IGKHtmlText($txt);
    return $n;
}
///<summary>shorcut to create xml data</summary>
/**
* shorcut to create xml data
*/
function igk_createxmlcdata(){
    return new IGKXmlCDATA();
}
///<summary>create xml node</summary>
/**
* create xml node
*/
function igk_createxmlnode($d){
    $c=new IGKXmlNode($d);
    return $c;
}
/**
 * store config data
 */
function igk_createxml_config_data ($data){
    $d = igk_createxmlnode("config");
    foreach($data as $k=>$v){
        igk_conf_store_value($d, $k, $v);
    } 
    return $d;
}
///<summary>create xml processor</summary>
/**
* create xml processor
*/
function igk_createxmlprocessor($type){
    return new IGKXmlProcessor($type);
}
///<summary>create xlst node</summary>
/**
* create xlst node
*/
function igk_createxsltnode(){
    $xsl=igk_createxmlnode("xsl:stylesheet");
    $xsl["version"]="1.0";
    $xsl["xmlns"]="http://www.w3.org/1999/xhtml";
    $xsl["xmlns:xsl"]="http://www.w3.org/1999/XSL/Transform";
    include_once(IGK_LIB_DIR."/igk_xsl_definition.php");
    $xsl->setTempFlag("RootNS", "igk_xsl_creator_callback");
    return $xsl;
}
///<summary></summary>
///<param name="doc"></param>
/**
* 
* @param mixed $doc
*/
function igk_css_add_doc_style($doc){
    $s = igk_io_corestyle_uri(); 
    $t=$doc->addStyle($s, true);
    $t->cache =1;
    return $t;
}
///<summary></summary>
///<param name="doc"></param>
///<param name="name"></param>
///<param name="file"></param>
///<param name="format" default="TrueType"></param>
/**
* 
* @param mixed $doc
* @param mixed $name
* @param mixed $file
* @param mixed $format the default value is "TrueType"
*/
function igk_css_add_tempfont($doc, $name, $file, $format="TrueType"){
    $f=$doc->Theme;
    $ft=$f->Font;
    $r=igk_getv($ft, $name);
    if(($r == null) || !is_object($r)){
        $r=(object)array(
                "Name"=>$name,
                "Fonts"=>array(),
                "Def"=>"arial, sans-serif"
            );
        $ft[$name]=$r;
    }
    $r->Fonts[$file]=(object)array("File"=>$file, "format"=>$format);
}
///<summary>bind .pcss file for ajx content</summary>
/**
* bind .pcss file for ajx content
*/
function igk_css_ajx_bind_file($f){
    $b=igk_get_env(IGK_AJX_BINDSTYLES, function(){
        return array();
    });
    if(!igk_get_env(__FUNCTION__)){
        $vsystheme=igk_app()->Doc->getSysTheme();
        igk_css_bind_sys_global_files($vsystheme);
        igk_css_load_theme($vsystheme);
        igk_set_env(__FUNCTION__, 1);
    }
    if(!isset($b[$f])){
        $o=igk_css_ob_get_tempfile($f, $from);
        igk_createnode("style")->setAttribute("type", "text/css")->setAttribute("igk:from", $from)->setContent($o)->renderAJX();
        $b[$f]=1;
        igk_set_env(IGK_AJX_BINDSTYLES, $b);
    }
}
///<summary></summary>
///<param name="name"></param>
///<param name="value"></param>
//@@ set or replace Append theme
/**
* 
* @param mixed $name
* @param mixed $value
*/
function igk_css_append($name, $value){
    $igk=igk_app();
    if($igk === null)
        return;
    $igk->Doc->Theme->Append[$name]=$value;
}

 
///<summary></summary>
///<param name="dir"></param>
/**
* 
* @param mixed $dir
*/
function igk_css_balafon_index($dir){

    header('Content-Type: text/css; charset=UTF-8');
    $c=igk_getr("Cache");
    if($c){
        igk_wl("/*Request from cache*/");
        return;
    }
    if(!defined("IGK_BASE_DIR")){
        define("IGK_BASE_DIR", $dir);
    }
    if (!defined("IGK_INIT")){
        igk_initenv($dir);
        igk_start_session();
        IGKApp::Init($dir."/index.php", false);
        // IGKApp::InitNoWebInstance(igk_app());
    }
    IGKOb::CleanAndStart();
	if (!IGKApp::IsInit()){
		igk_ilog(__FUNCTION__." : application not initialise ".igk_app()->server->REQUEST_URI);
		igk_exit();
	}


    $doc= igk_get_last_rendered_document() ?? igk_app()->Doc;
    
    if($doc){
        igk_set_env("sys://css/cleartemp", __FUNCTION__);
        $vsystheme= $doc->getSysTheme();
        $files = $doc->Theme->def->getBindTempFiles(1);
        @session_write_close(); 

        igk_css_bind_sys_global_files($vsystheme);
        igk_css_load_theme($vsystheme);
        if ($files){
            $doc->Theme->def->setBindTempFiles($files);
        }
        igk_css_render_balafon_style($doc);
    }
    else{
        include(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/balafon.min.css");
    }
    $c=IGKOb::Content();
    IGKOb::Clear();
    if(!igk_sys_env_production() && (igk_getr("recursion") == 1)){
        $g=igk_get_env("sys://theme/colorrecursion");
        if(igk_count($g) === 0){
            igk_wl("/*all good no recursion detected*/");
        }
        else{
            igk_wl("/*\n".implode("\n", array_keys($g))."\n*/");
        }
        igk_exit();
    }
    @session_write_close(); 
    igk_header_no_cache();
    if(!empty($c)){
        igk_zip_output($c);
    } 
    igk_exit();
}
///<summary></summary>
///<param name="callback"></param>
/**
* 
* @param mixed $callback
*/
function igk_css_bind_color_request($callback){
    igk_set_env("sys://css/bind_colorrequest", $callback);
}
///<summary>bind css file</summary>
///<param name="ctrl">the global controller used to bind the css theme file</param>
///<param name="f">access to file name</param>
///<param name="theme">for binding</param>
/**
* bind css file
* @param mixed $ctrl the global controller used to bind the css theme file
* @param mixed $ access to file name
* @param mixed $theme for binding
*/
function igk_css_bind_file($ctrl, $f, $theme=null){
    if(!file_exists($f)){
        igk_ilog('Bind file failed '.$f);
        return;
    }
    require_once(IGK_LIB_DIR."/Lib/Classes/Css/IGKCssColorHost.php");
    $doc = igk_get_last_rendered_document() ?? igk_app()->Doc;
    if(defined("IGK_FORCSS")){
        if($theme == null){
            $key="sys://css/IncludedFiled";
            $files=igk_get_env($key, array());

            $theme=$doc->Theme;
            $i=igk_env_count(__FUNCTION__);
            if($i == 1){
                $theme->resetAll();
                $files[$f]="root";
            }
            else{
                if(isset($files[$f]))
                    return;
                $files[$f]="sub";
            }
            igk_set_env($key, $files);
        }
    }
    else{
        if($theme == null){
            $theme=$doc->Theme;
        }
    } 
    $context = \IGK\Css\IGKCssContext::Init($ctrl, $theme);

    $xsm_screen=$theme->get_media(IGKHtmlDocThemeMediaType::XSM_MEDIA);
    $sm_screen=$theme->get_media(IGKHtmlDocThemeMediaType::SM_MEDIA);
    $lg_screen=$theme->get_media(IGKHtmlDocThemeMediaType::LG_MEDIA);
    $xlg_screen=$theme->get_media(IGKHtmlDocThemeMediaType::XLG_MEDIA);
    $xxlg_screen=$theme->get_media(IGKHtmlDocThemeMediaType::XXLG_MEDIA);
    $PTR=$theme->getPrintMedia();
    $css_m="";
    if($ctrl){
        $n="";
        if(is_object($ctrl)){
            $n=$ctrl->Name;
        }
        else
            $n=$ctrl;
        $css_m=$n ? ".".strtolower(igk_css_str2class_name($n)): '';
        unset($n);
    }

    $def=$theme->def;
    $cl= IGKCssColorHost::Create($theme->getCl());
	$prop= & $theme->getProperties();
    $referer= igk_app()->server->get("HTTP_REFERER", "igk://system");
 
    include($f);

    $cl= IGKCssColorHost::Create($theme->getCl());
    if(isset($root) && is_array($root)){
        $v_root=$def[":root"] ?? "";
        foreach($root as $k=>$v){
            if(empty($v))
                continue;
            $v_root .= $k.":".$v.";";
            igk_set_env_keys("sys://css/vars", $k, $v);
        }
        $def[":root"]=$v_root;
    }
}
///<summary></summary>
///<param name="theme" default="null"></param>
///<param name="bindfile" default="1"></param>
/**
* 
* @param mixed $theme the default value is null
* @param mixed $bindfile the default value is 1
*/
function igk_css_bind_sys_global_files($theme=null, $bindfile=1){
    $theme=$theme ?? igk_app()->Doc->getSysTheme() ?? igk_die("can't bind global files");
    $tab=igk_get_env(IGK_ENV_CSS_GLOBAL_CONF_FILES) ?? array();
    $cfile=igk_css_get_theme_files($theme);
    foreach($tab as $d=>$s){
        if(file_exists($d)){
            igk_css_bind_file(null, $d, $theme);
        }
    }
    if($bindfile)
        igk_css_bind_theme_files($theme);
}
///<summary></summary>
///<param name="th"></param>
///<param name="files"></param>
/**
* 
* @param mixed $th
* @param mixed $files
*/
function igk_css_bind_theme_file($th, $files){
    $f=igk_io_expand_path($files);
    $lfile=explode(";", $f);
    $v_lfiles=array();
    foreach($lfile as $d){
        $tab=explode('|', $d);
        list($file, $ctrl) = igk_count($tab)>=2 ? $tab: [$tab[0], null];
        if(!isset($v_lfiles[$file]) && !empty($d) && file_exists($file)){
            igk_css_bind_file(igk_getctrl($ctrl, false) ?? $ctrl, $file, $th);
            $v_lfiles[$file]=1;
        }
    } 
}
///<summary>bind file from theme</summary>
/**
* bind file from theme
*/
function igk_css_bind_theme_files($theme){
    $files=$theme->def->getFiles();
    $lfile=explode(";", igk_io_expand_path($files));
   
    foreach($lfile as $d){
        if(empty($d))
            continue;
        if(strpos($d, '|') === false)
            $d .= "|";
        list($file, $ctrl) =explode('|', $d); 
        if(file_exists($file)){
            igk_css_bind_file(null, $file, $theme);
        }
        else{
            igk_ilog("File not found - [{$d}]", __FUNCTION__);
        }
    }
}
///<summary>bind extra style to document</summary>
/**
* bind extra style to document
*/
function igk_css_bind_wuistyle($document, $ctrl, $type){
    $f=igk_realpath($ctrl->getStylesDir().'/'.$type.'.pcss');
    if(!file_exists($f))
        return 0;
    igk_css_bind_wuistyle_file($document, $f);
    return 1;
}
///<summary></summary>
///<param name="doc"></param>
///<param name="f"></param>
/**
* 
* @param mixed $doc
* @param mixed $f
*/
function igk_css_bind_wuistyle_file($doc, $f){
    if(igk_is_ajx_demand()){
        igk_css_ajx_bind_file($f);
    }
    else{
        if($doc)
            $doc->Theme->addTempFile($f);
    }
    return 1;
}
///<summary>eval class state and return the affected value</summary>
/**
* eval class state and return the affected value
*/
function igk_css_class_state($properties){
    $o="";
    foreach($properties as $k=>$v){
        if($v){
            if(is_callable($v) && !$v())
                continue;
            if(empty($o)){
                $o .= " ";
            }
            $o .= $k;
        }
    }
    return $o;
}
///<summary></summary>
///<param name="value"></param>
///<param name="gcl"></param>
///<param name="v_designmode"></param>
/**
* 
* @param mixed $value
* @param mixed $gcl
* @param mixed $v_designmode
*/
function igk_css_design_color_value($value, $gcl, $v_designmode){
    if($v_designmode){
        return "var(".IGK_CSS_VAR_COLOR_PREFIX.$value.")";
    }
    $b=igk_css_get_color_value($value, $gcl);
    return $b;
}
///<summary></summary>
/**
* 
*/
function igk_css_design_mode(){
    return igk_app()->Session->CssDesignMode ?? false;
}
///<summary></summary>
///<param name="value"></param>
///<param name="properties"></param>
///<param name="v_designmode"></param>
/**
* 
* @param mixed $value
* @param mixed $properties
* @param mixed $v_designmode
*/
function igk_css_design_property_value($value, $properties, $v_designmode){
    if($v_designmode){
        return "var(".IGK_CSS_VAR_PROPERTY_PREFIX.$value.")";
    }
    $b=igk_getv($properties, $value);
    return $b;
}
///<summary>get document style definition</summary>
/**
* get document style definition
*/
function igk_css_doc_get_def($doc, $minfile=false, $themeexport=false){
    $el=$minfile ? IGK_STR_EMPTY: IGK_LF;
    $s=array("name"=>"systheme", "theme"=>$doc->SysTheme);
    $data[]=$s;
    if($files=$s["theme"]->def->getFiles()){
        igk_css_bind_theme_file($s["theme"], $files);
    }
    $files=$s["theme"]->def->getBindTempFiles();
    if($files){
        igk_css_bind_theme_file($s["theme"], $files);
    }
    $outcl=[];
    igk_css_bind_color_request(function($cl) use (& $outcl){
        if(isset($outcl[$cl])){
            return $outcl[$cl];
        }
        $outcl[$cl]=$cl;
        return "transparent";
    });
    $s=igk_css_init_style_def_workflow($doc);
    $data[]=$s;
    $o="";
    foreach($data as  $v){
        $theme=$v["theme"];
        $name=$v["name"];
        if(!$minfile)
            $o .= IGK_START_COMMENT." CSS. Doc def - [".$name."] ".IGK_END_COMMENT.$el;
        $o .= $theme->get_css_def($minfile, $themeexport, $doc).$el;
        //$srh[]=$o;
        //if(isset($v["doc"])){
        //    $srh[]=$v["doc"]->getTemporaryCssDef($minfile, $themeexport).$el;
        //}
    }
    if(igk_server_is_local() && (igk_count($outcl) > 0) && ($f = igk_const("IGK_OUTCL_FILE") )){
        igk_io_w2file($f, "<?php\n".(function() use ($outcl){
            $o="";
            foreach($outcl as $k=>$v){
                $o .= "\$cl[\"".$k."\"]='';".IGK_LF;
            }
            return $o;
        })());
    }
    return $o;
}
///<return> the value of the key if found in the current theme</return>
/**
*/
function igk_css_get_cl($key){
    $theme=igk_app()->Doc->SysTheme;
    return igk_getv($theme->cl, $key);
}
///<summary></summary>
///<param name="clname"></param>
///<param name="defaultvalue" default="null"></param>
/**
* 
* @param mixed $clname
* @param mixed $defaultvalue the default value is null
*/
function igk_css_get_color($clname, $defaultvalue=null){
    $t=igk_css_get_color_value($clname);
    if($t)
        return $t;
    return $defaultvalue;
}
///<summary></summary>
///<param name="clname"></param>
///<param name="tab" default="null" ref="true"></param>
/**
* 
* @param mixed $clname
* @param mixed * $tab the default value is null
*/
function igk_css_get_color_value($clname, & $tab=null){
    $colors=& $tab;
    if($tab == null){
        $doc=null;
        if(defined("IGK_FORCSS")){
            $doc=igk_get_last_rendered_document();
        }
        $theme=($doc ?? igk_app()->Doc)->Theme;
        if($theme)
            $colors=& $theme->def->getCl();
    }
    return igk_css_treatcolor($colors, $clname);
}
///<summary>get css document style definition</summary>
/**
* get css document style definition
*/
function igk_css_get_doc_style_def($doc, $minfile, $themeexport){
    $o=IGK_STR_EMPTY;
    if($doc === null){
        $o .= IGK_START_COMMENT."balafon.css document theme not found ? is init ".IGKApp::IsInit()." ".session_id()." ".IGK_END_COMMENT;
        return $o;
    }
    $theme=$doc->Theme;
    if($theme->files){
        igk_css_bind_theme_file($theme, $theme->files);
    }
    $el=$minfile ? IGK_STR_EMPTY: IGK_LF;
    $v_name=$doc->getParam(IGK_DOC_ID_PARAM);
    if(!$minfile)
        $o .= IGK_START_COMMENT." THEME For Document [".$v_name."] ".IGK_END_COMMENT.$el;
    $o .= $theme->get_css_def($minfile, $themeexport);
    return $o;
}
///<summary>get font definition utility</summary>
/**
* get font definition utility
*/
function igk_css_get_fontdef($name, $definition, $lineseparator=IGK_STR_EMPTY){
    $out=IGK_STR_EMPTY;
    $v=$definition;
    if($name && $definition){
        if(is_string($v)){
            $fdd=$v;
            if(file_exists($fdd)){
                $fresolv=IGKResourceUriResolver::getInstance()->resolve($fdd);
                $format="truetype";
                $f="@font-face{";
                $f .= "font-family: \"".$name."\"; ";
                $f .= "src: url('".$fresolv."') format(\"$format\")";
                $f .= "}";
                $out .= $f.$lineseparator;
            }
            else{
				igk_ilog(__("Font file not found"));
                igk_wl(IGK_START_COMMENT."/!\\ Font file not found.[".$fdd. IGK_END_COMMENT."]".$lineseparator);
            }
        }
        else{
            if(!is_object($v)){
                igk_ilog(__FILE__.":".__LINE__." v not an object");
                return IGK_STR_EMPTY; 
            }
            $f="@font-face{";
            $f .= "font-family: \"{$v->Name}\"; ";
            $tab=$v->Fonts;
            if(is_array($tab)){
                foreach($tab as $s=>$t){
                    if(IGKValidator::IsUri($t->File)){
                        $f .= "src: url('".$t->File."') format(\"{$t->format}\");";
                        continue;
                    }
                    $ok=0;
                    $fdd="";
                    if(file_exists($t->File)){
                        $ok=1;
                        $fdd=igk_io_basepath($t->File);
                    }
                    else{
                        $fdd=($ok=file_exists(igk_io_syspath($t->File))) ? $t->File: null;
                    }
                    if($ok){
                        $f .= "src: url('".igk_io_baseuri()."/".igk_html_uri($fdd)."') format(\"{$t->format}\");";
                    }
                    else{
                        $f .= "/* file {$fdd} not exists*/";
                    }
                }
            }
            $f .= "}";
            $out .= $f.$lineseparator;
        }
    }
    return $out;
}
///<summary></summary>
/**
* 
*/
function igk_css_get_from(){
    return igk_get_env("sys://css/from");
}
///<summary></summary>
/**
* 
*/
function igk_css_get_map_selector(){
    $igk=igk_app();
    $selector=array();
    foreach($igk->Doc->SysTheme->def->getAttributes() as $k=>$v){
        $tab=explode(',', $k);
        if(empty($v))
            continue;
        foreach($tab as $s=>$t){
            if(!empty($t)){
                $selector[trim($t)
                ]=$v;
            }
        }
    }
    foreach($igk->Doc->Theme->def->getAttributes() as $k=>$v){
        $tab=explode(',', $k);
        if(empty($v))
            continue;
        foreach($tab as $s=>$t){
            if(!empty($t)){
                $selector[trim($t)] = $v;
            }
        }
    }
    return $selector;
}
///<summary>shortcut to get theme media</summary>
/**
* shortcut to get theme media
* @return mixed
*/
function igk_css_get_media($id){
    $igk=igk_app();
    if($igk === null)
        return;
    return $igk->Doc->Theme->get_media($id);
}
///<summary></summary>
///<param name="propname"></param>
///<param name="value"></param>
/**
* 
* @param mixed $propname
* @param mixed $value
*/
function igk_css_get_resolv_style($propname, $value){
    return "-webkit-{$propname}: {$value};-ms-{$propname}:{$value}; -moz-{$propname}:{$value}; -o-{$propname}: {$value}; {$propname}: {$value};";
}
///<summary></summary>
///<param name="propnameValue"></param>
/**
* 
* @param mixed $propnameValue
*/
function igk_css_get_resolv_stylei($propnameValue){
    $propnameValue=igk_str_rm_last(trim($propnameValue), ";");
    return "-webkit-{$propnameValue}; -ms-{$propnameValue}; -moz-{$propnameValue}; -o-{$propnameValue}; {$propnameValue};";
}
///<summary></summary>
///<param name="classname"></param>
/**
* 
* @param mixed $classname
*/
function igk_css_get_style($classname){
    $igk=igk_app();
    if($igk === null)
        return;
    $b=$igk->Doc->Theme[$classname];
    if($b == null){
        igk_ilog("/!\\ style not found : ".$classname);
        $b=$igk->Doc->SysTheme[$classname];
        if($b){
            $o=igk_css_treat($igk->Doc->SysTheme, $b);
            return $o;
        }
    }
    else{
        $o=igk_css_treat($igk->Doc->Theme, $b);
        return $o;
    }
    return IGK_STR_EMPTY;
}
///<summary>get css style from map</summary>
///<param name="node"></param>
///<param name="options" default="null" ref="true"></param>
///<param name="style" default="null"></param>
/**
* get css style from map
* @param mixed $node
* @param mixed * $options the default value is null
* @param mixed $style the default value is null
*/
function igk_css_get_style_from_map($node, & $options=null, $style=null){
    $s=null;
    if($options){
        if(isset($options->MapCssSelector)){
            $s=$options->MapCssSelector;
            igk_debug_wln("create used created map ");
        }
        else{
            $options->MapCssSelector=igk_css_get_map_selector();
            $s=$options->MapCssSelector;
            igk_debug_wln("create map ");
        }
    }
    if($s){
        $map=igk_get_selector_map($node);
        $style=$style == null ? new IGKCssStyle(): $style;
        $level=count($map);
        foreach($s as $k=>$v){
            $tlevel=igk_count(explode(" ", $k));
            if($tlevel > $level)
                continue;
            if(preg_match($map[0], $k)){
                $tab=array();
                $c=preg_match_all($map[igk_count($map)-1], $k, $tab);
                if($c > 0){
                    $st=$tab[0][0];
                    if($st == $k){
                        $style->Load($v, $tlevel, $k);
                    }
                }
            }
        }
        return $style->Render();
    }
    return null;
}
///<summary>shortcut to get system media</summary>
/**
* shortcut to get system media
*/
function igk_css_get_sys_media($id){
    $igk=igk_app();
    if($igk === null)
        return;
    return $igk->Doc->SysTheme->get_media($id);
}
///<summary></summary>
///<param name="theme"></param>
/**
* 
* @param mixed $theme
*/
function igk_css_get_theme_files($theme){
    $lfile=explode(";", igk_io_expand_path($theme->def->getFiles()));
    $t=array();
    foreach($lfile as $d){
        if(empty($d))
            continue;
        if(strpos($d, '|') === false)
            $d .= "|";
        list($file, $ctrl)
        =explode('|', $d);
        $t[$file]=$file;
    }
    return $t;
}
///change css process workflow : 08/02/2018
/**
*/
function igk_css_getbasedef($minfile=false, $themeexport=false){
    $igk=igk_app();
    $o=IGK_STR_EMPTY;
    $srh=array();
    $doc=$igk->Doc;
    $el=$minfile ? IGK_STR_EMPTY: IGK_LF;
    $data=array();
    $s=array("name"=>"systheme", "theme"=>$doc->SysTheme);
    $data[]=$s;
    $s=igk_css_init_style_def_workflow($doc);
    $data[]=$s;
    $rdoc=igk_get_last_rendered_document();
    if($rdoc && !igk_doc_is_global($rdoc)){
        $s=igk_css_init_style_def_workflow($rdoc);
        $data[]=$s;
    }
    foreach($data as $v){
        $theme=$v["theme"];
        $name=$v["name"];
        $o="";
        if(!$minfile)
            $o .= IGK_START_COMMENT." CSS BaseDef - [".$name."] ".IGK_END_COMMENT.$el;
        $o .= $theme->get_css_def($minfile, $themeexport).$el;
        $srh[]=$o;
        if(isset($v["doc"])){
            $srh[]=$v["doc"]->getTemporaryCssDef($minfile, $themeexport).$el;
        }
    }
    $o= implode("", $srh);
    return $o;
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_css_getbg_size($v){
    $o=IGK_STR_EMPTY;
    $o .= "-webkit-background-size: ".$v.";";
    $o .= "-o-background-size: ".$v.";";
    $o .= "-moz-background-size: ".$v.";";
    $o .= "background-size: ".$v.";";
    return $o;
}
///<summary></summary>
///<param name="v"></param>
///<param name="doc" default="null"></param>
/**
* 
* @param mixed $v
* @param mixed $doc the default value is null
*/
function igk_css_getbgcl($v, $doc=null){
    if(empty($v))
        return null;
    $doc= $doc ?? igk_app()->Doc;
    $theme=$doc->Theme;
    $systheme=$doc->SysTheme;
    $h=igk_css_treat($theme, $v, $systheme);
    if($h == null)
        return null;
    return "background-color: ".$v.";";
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_css_getbordercl($v){
    if(empty($v))
        return null;
    return "border-color: ".$v.";";
}
///<summary></summary>
/**
* 
*/
function igk_css_getdefaultstyle(){
    $v=<<<ETF
*{ margin : 0px; padding: 0px; }
ETF;
    return $v;
}
///<summary></summary>
///<param name="v"></param>
///<param name="doc" default="null"></param>
/**
* 
* @param mixed $v
* @param mixed $doc the default value is null
*/
function igk_css_getfcl($v, $doc=null){
    if(empty($v))
        return null;
    $doc=$doc ? $doc: igk_app()->Doc;
    $theme=$doc->Theme;
    $systheme=$doc->SysTheme;
    $h=igk_css_treat($theme, $v, $systheme);
    if($h){
        return "color: ".$h.";";
    }
    else{
        return "color: ".$v.";";
    }
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_css_getfont($v){
    if(empty($v))
        return null;
    return "font-family: \"".$v."\";";
}
///<summary></summary>
///<param name="id"></param>
/**
* 
* @param mixed $id
*/
function igk_css_getmedia($id){
    $igk=igk_app();
    return $igk->Doc->Theme->get_media($id);
}
///<summary></summary>
/**
* 
*/
function igk_css_header_comment(){
    $const="constant";
    $o=<<<EOF
Author: {$const('IGK_AUTHOR')}
Contact : {$const('IGK_AUTHOR_CONTACT')}
Copyright: {$const('IGK_COPYRIGHT')}
EOF;
    return $o;
}
///<summary></summary>
/**
* 
*/
function igk_css_ie11(){
    return defined("IGK_IE11_ENGINE") || igk_check_ie_version();
}
///<summary></summary>
///<param name="file"></param>
///<param name="tab" ref="true"></param>
/**
* 
* @param mixed $file
* @param mixed * $tab
*/
function igk_css_include_cache($file, & $tab){
    include($file);
}
///<summary> init css style</summary>
/**
*  init css style
*/
function igk_css_init_doc($doc){
    $doc->Theme->resetAll();
}
///<summary></summary>
///<param name="doc"></param>
///<param name="theme" default="null"></param>
/**
* 
* @param mixed $doc
* @param mixed $theme the default value is null
*/
function igk_css_init_style_def_workflow($doc, $theme=null){
    $theme=$theme ?? $doc->Theme;
    $v_name= $doc->getParam(IGK_DOC_ID_PARAM, "private");
    if($theme){
        if($files=$theme->def->getFiles()){
            igk_css_bind_theme_file($theme, $files);
            $theme->def->clearFiles();
        }
        $files=$theme->def->getBindTempFiles(1);
        if($files){
            igk_css_bind_theme_file($theme, $files);
        }
    }
    return array("name"=>$v_name, "theme"=>$theme);
}
///<summary></summary>
///<param name="r"></param>
/**
* 
* @param mixed $r
*/
function igk_css_invoke_color_request($r){
    $callback=igk_get_env("sys://css/bind_colorrequest");
    if(is_callable($callback)){
        return call_user_func_array($callback, array($r));
    }
    return null;
}
///<summary></summary>
///<param name="cl"></param>
///<param name="theme" default="null"></param>
/**
* 
* @param mixed $cl
* @param mixed $theme the default value is null
*/
function igk_css_is_webknowncolor($cl, $theme=null){
    if(preg_match("/#([0-9a-f]{3}|[0-9a-f]{6})$/i", $cl)){
        return 1;
    }
    $tcl=$theme == null ? igk_app()->Doc->SysTheme->cl: $theme;
    if(igk_css_get_color_value($cl, $tcl) != $cl)
        return 1;
    if(igk_get_env("igk_css_render_balafon_style")){
        $tab=igk_get_env(IGK_SESS_UNKCOLOR_KEY, array());
        $tab[$cl]=$cl;
        igk_set_env(IGK_SESS_UNKCOLOR_KEY, $tab);
    }
    return 0;
}
///<summary>used to bind a theme files to a theme</summary>
///<remark>if no theme defined then the system global theme will be used</remark>
///<remark2>theme is file that contain only color, font and properties definition</remark2>
/**
* used to bind a theme files to a theme
*/
function igk_css_load_theme($th=null){
    $gt=igk_web_get_config("globaltheme", 'default');
    $env_path=igk_get_env("sys://theme/path", [igk_io_basedir(), igk_io_applicationdir()]);
    $r=0;
    foreach($env_path as $d){
        $f=igk_io_dir($d."/".IGK_RES_FOLDER."/Themes/{$gt}.theme");
        if(file_exists($f)){
            $r=1;
            break;
        }
    }
    if(!$r)
        return;
    $th=$th ? $th: igk_app()->Doc->SysTheme;
    $t=array();
    $t["cl"]=& $th->def->getCl();
    $t["prop"]=& $th->def->getParams();
    igk_include_file($f, $t);
}
///<summary>minify css code source</summary>
/**
* minify css code source
*/
function igk_css_minify($s){
    return igk_js_minify($s, 0, " :\{\}()");
}
///<summary>bind css inline file</summary>
///<param name="f">full path to pcss file</param>
/**
* bind css inline file
* @param mixed $ full path to pcss file
*/
function igk_css_ob_get_tempfile($f, & $from=null){
    $vtemp=new IGKHtmlDocTheme(igk_app()->getDoc(), "theme://inline/tempfiles");
    igk_set_env(IGK_CSS_TEMP_FILES_KEY, 1);
    IGKOb::Start();
    igk_css_bind_file(null, $f, $vtemp);
    $m=IGKOb::Content();
    $out="";
    IGKOb::Clear();
    if(!empty($m)){
        $out .= $m;
    }
    $h=$vtemp->get_css_def(false, false);
    $out .= $h;
    igk_set_env(IGK_CSS_TEMP_FILES_KEY, null);
    $from=igk_css_get_from();
    igk_css_set_from(null);
    unset($vtemp);
    return $out;
}
///<summary>register to system </summary>
/**
* register to system
*/
function igk_css_reg_doc($ctrl){
    igk_app()->regCssController($ctrl);
}
///<summary>register font package</summary>
///<param name="fontname">the css name font-familly</param>
///<param name="file">basedir font path to existing font</param>
///<param name="document">the document that will bound the font. null if used global document</param>
///<param name="format">default format . TrueType</param>
/**
* register font package
* @param mixed $fontname the css name font-familly
* @param mixed $ile basedir font path to existing font
* @param mixed $document the document that will bound the font. null if used global document
* @param mixed $ormat default format . TrueType
*/
function igk_css_reg_font_package($fontname, $file, $document=null, $format="TrueType"){
    if(empty($file)){
        return;
    } 
    igk_die(__FUNCTION__.": register glyhicons: not implement");


    $igk=igk_app();
    $doc=$document == null ? $igk->Doc: $document;
    $ft=$doc->Theme->Font;
    $r=igk_getv($ft, $fontname);
    if(($r == null) || !is_object($r)){
        $r=(object)array("Name"=>$fontname, "Fonts"=>array());
        $ft[$fontname]=$r;
    }
    $r->Fonts[$file]=(object)array("File"=>$file, "format"=>$format);
    $doc->Theme->def[".".$fontname]="font-family: '".$fontname."';";
}
///<summary>register temporary global files</summary>
/**
* register temporary global files
*/
function igk_css_reg_global_style_file($fname, $theme=null, $ctrl=null, $temp=0){
    $s=igk_html_uri(igk_realpath($fname));
    $app=igk_html_uri($ctrl !== null ? "|".$ctrl->Name: "");
    if (empty($s)){
        igk_ilog(__FILE__.':'.__LINE__, "filename not found ".$fname);
        return;
    } 
    if(igk_current_context() != IGKAppContext::initializing){
        $doc=igk_app()->getDoc();
        if($doc){
            $theme=$theme ?? $doc->getSysTheme();
            if($temp){
                $f=igk_io_expand_path($theme->def->getBindTempFiles());
                $s .= $app;
                if(empty($f) || (IGKString::IndexOf($f, $s) === -1)){
                    if(!empty($f))
                        $s=";".$s;
                    $theme->def->setBindTempFiles($f.$s);
                }
            }
            else{
                $f=igk_io_expand_path($theme->def->getFiles());
                $s .= $app;
                if(empty($f) || (IGKString::IndexOf($f, $s) === -1)){
                    if(!empty($f))
                        $s=";".$s;
                    $theme->def->setFiles($f.$s);
                }
            }
            return;
        }
    } 
    if(file_exists($s) && preg_match("/(pgcss|css|pcss)/", igk_io_path_ext($s))){
        $tkey = IGK_ENV_CSS_GLOBAL_CONF_FILES;
        $tab=igk_get_env($tkey, array());
        $tab[$s]=1;
        igk_set_env($tkey, $tab);
    }
}
///<summary></summary>
///<param name="fname"></param>
///<param name="theme" default="null"></param>
///<param name="ctrl" default="null"></param>
/**
* 
* @param mixed $fname
* @param mixed $theme the default value is null
* @param mixed $ctrl the default value is null
*/
function igk_css_reg_global_tempfile($fname, $theme=null, $ctrl=null){
    return igk_css_reg_global_style_file($fname, $theme, $ctrl, 1);
}
///<summary></summary>
///<param name="th"></param>
///<param name="classname"></param>
///<param name="defaultvalue"></param>
///<param name="override" default="true"></param>
/**
* 
* @param mixed $th
* @param mixed $classname
* @param mixed $defaultvalue
* @param mixed $override the default value is true
*/
function igk_css_reg_mediaclass($th, $classname, $defaultvalue, $override=true){
    $igk=igk_app();
    if(($igk === null) || !$th || !IGKApp::IsInit())
        return;
    $s=$th[$classname];
    if(empty($s)){
        $th[$classname]=$defaultvalue;
    }
    else{
        if($override){
            $th[$classname]=$defaultvalue;
        }
        else{
            $th[$classname]=$s.$defaultvalue;
        }
    }
}
///<summary></summary>
///<param name="theme" default="null"></param>
/**
* 
* @param mixed $theme the default value is null
*/
function igk_css_reg_reset($theme=null){
    $igk=igk_app();
    $theme=$theme ?? $igk->Doc->SysTheme;
    if($theme){
        $def=$theme->def;
        $def->resetParams();
    }
}
///<summary>register svgs symbols file package</summary>
/**
* register svgs symbols file package
*/
function igk_css_reg_svg_symbol_files($file){
    if(!file_exists($file))
        return;
    $igk=igk_app();
    $s=$igk->Doc->SysTheme->def->regSymbol($file);
}
///<summary></summary>
///<param name="classname"></param>
///<param name="defaultvalue"></param>
///<param name="override" default="true"></param>
/**
* 
* @param mixed $classname
* @param mixed $defaultvalue
* @param mixed $override the default value is true
*/
function igk_css_regclass($classname, $defaultvalue, $override=true){
    $igk=igk_app();
    if(($igk === null) || !IGKApp::IsInit())
        return;
    igk_css_reg_mediaclass($igk->Doc->Theme, $classname, $defaultvalue, $override);
}
///<summary>register color to current theme</summary>
/**
* register color to current theme
*/
function igk_css_regcolor($clname, $value, $global=0, $override=true){
    $igk=igk_app();
    if($igk === null){
        return;}
    if(defined("IGK_FORCSS"))
        $doc=igk_get_last_rendered_document() ?? $igk->Doc;
    else
        $doc=$igk->Doc;
    if($global || (igk_get_env("sys://globalcolor") == 1)){
        IGKGlobalColor::getInstance()->setGlobalColor($clname, $value);
    }
    else{
        $def=$doc->Theme->def;
        if($def){
            $cl=& $def->getCl();
            if(!isset($cl[$clname]) || ($override)){
                $cl[$clname]=$value;
            }
        }
    }
}
///<summary> register global font to current document</summary>
/**
*  register global font to current document
*/
function igk_css_regfont($doc, $name, $path){
    $doc->Theme->addFont($name, $path);
}
///<summary></summary>
///<param name="doc"></param>
/**
* 
* @param mixed $doc
*/
function igk_css_regglobalfont($doc){
    igk_css_regfont($doc, "global", igk_io_basepath(IGK_LIB_DIR."/Default/".IGK_RES_FOLDER."/Fonts/global.ttf"));
}
///<summary>used to register a media query to the default document</summary>
/**
* used to register a media query to the default document
*/
function igk_css_regmedia($mediaExpression){
    $igk=igk_app();
    if($igk === null)
        return;
    return $igk->Doc->Theme->reg_media($mediaExpression);
}
///<summary></summary>
///<param name="picname"></param>
///<param name="link"></param>
/**
* 
* @param mixed $picname
* @param mixed $link
*/
function igk_css_regpic($picname, $link){
    igk_getctrl(IGK_PIC_RES_CTRL)->regPicture($picname, $link);
}
///<summary></summary>
/**
* 
*/
function igk_css_render_balafon_style($doc=null){
	$doc = $doc ? $doc : igk_get_last_rendered_document();
    header('content-type: text/css');
	ob_start();
    $o ="/*\r\nBalafon.css Dynamic css-defition \r".IGK_LF;
    $o .= igk_css_header_comment();
	$o .= "\r\n/* info: { id: ".$doc->getId()." }*/";
    $o .= "\r\n".IGK_END_COMMENT."\r".IGK_LF;

    $f=igk_io_currentrelativepath("Caches/cssstyle.cache");
    $t=($doc === null) || igk_app()->Configs->UseCssCache;
    igk_set_env(__FUNCTION__, 1);
    if($t){
        if(file_exists($f)){
            $o .= IGKIO::ReadAllText($f);
        }
        else{
            $o="/*balafon: doc or no-cache available*/".IGK_LF;
            $o .= IGKIO::ReadAllText(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/balafon.min.css");
        }
    }
    else{
        $mfile=igk_getr("minfile") || igk_sys_env_production();
        if($mfile){
            $o=implode('|', explode("\\r\\n", $o));
        }
        $o .= igk_css_getbasedef($mfile);
        if($t){
            IGKIO::WriteToFile($f, $o);
        }
    }
    $o .= "/*finish*/";
	$o .= ($r = ob_get_contents())?"\n".$r:"";
	ob_end_clean();
    igk_wl($o);
}
///<summary>render default style</summary>
///<param name="tab">array of theme file</param>
///<param name="doc">document to render </param>
/**
* render default style
* @param mixed $tab array of theme file
* @param mixed $doc document to render
*/
function igk_css_render_style($tab, $doc=null){
    if(defined("IGK_FORCSS"))
        return "";
    $doc=$doc ?? igk_app()->Doc ?? igk_die("can't render css style");
    $systheme=$doc->SysTheme;
    $th=$doc->Theme;
    igk_css_bind_sys_global_files();
    igk_css_bind_theme_files($th);
    $o="";
    foreach($tab as $k=>$v){
        $o .= "{$k}{ ".igk_css_treat($th, $v, $systheme)." }";
    }
    $th->resetAll();
    $systheme->resetAll();
    return $o;
}
///retrieve base.css file. Management
/**
*/
function igk_css_sdk_style_def($ctrl=null, $callback=null){
    $doc=igk_get_document("zip_icore");
    $cl=& $doc->SysTheme->getCl();
    $cl["menuLinkColor"]="#ddd";
    if($callback){
        $callback($doc, $cl);
    }
    $o=igk_css_doc_get_def($doc);
    return $o;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_css_set_from($n){
    igk_set_env("sys://css/from", $n);
}
///<summary>store no color def </summary>
/**
* store no color def
*/
function igk_css_store_no_colordef($f){
    $tab=igk_get_env("sys://not_get_colors");
    if(igk_count($tab) > 0){
        $o="";
        foreach($tab as $v){
            if(!empty($o))
                $o .= IGK_LF;
            $o .= "igk_css_regcolor(\"{$v}\", \"transparent\");";
        }
        igk_io_save_file_as_utf8_wbom($f, $o, true);
    }
}
///<summary>convert string to igk css class name</summary>
/**
* convert string to igk css class name
*/
function igk_css_str2class_name($s){
    $s=preg_replace_callback("/[^0-9a-z_]/i", function($m){
        return "_";
    }
    , $s);
    $s=str_replace(" ", "_", $s);
    $s=str_replace(".", "-", $s);
    return $s;
}
///<summary>treate a css theme. evaluate the expression</summary>
///<arg name="theme">source theme of the expression</arg>
///<arg name="v">expression to treat</arg>
///<arg name="themeexport">in theme export</arg>
///<arg name="themeexport">in theme export</arg>
/**
* treate a css theme. evaluate the expression. 
*/
function igk_css_treat($theme, $v, $systheme=null, $doc=null){
    $_app=igk_app();
    if($_app == null)
        return;
    if(is_object($v)){
        return null;
    }
    $doc = $doc ? $doc: igk_get_last_rendered_document();
    if(!$doc){
        return null;
    }
    $systheme= $systheme ? $systheme : $doc->getSysTheme();  
 

    return igk_css_treat_gtheme($theme, $systheme, $v);
}
function igk_css_treat_gtheme($theme, $systheme, $v){
 

    $reg=IGK_CSS_TREAT_REGEX;
    $reg3=IGK_CSS_CHILD_EXPRESSION_REGEX;
    $match=array(); 
    $gtheme = $theme;
    if ($systheme->def===null){
        igk_die("system definition is null.");
    }

    $d= & $systheme->def->getCl();
    $gcl=($d) ? $d: array();
    $c=0;
    $v_designmode=igk_css_design_mode();
    if($c=preg_match_all($reg3, $v, $match)){
        for($i=0; $i < $c; $i++){
            $n=$match[0][$i];
            $name=$match["name"][$i];
            $type=$match["type"][$i];
            $deftheme = $match["def"][$i];
            $rv=IGK_STR_EMPTY;
            $def = null;
            if (empty($deftheme)){
                $deftheme = "def";
            } 
            if(empty($type)){
                $rv= $gtheme->$deftheme[$name];
            }
            else{
               switch($type)
               {
                    case "sys":
                     
                        $rv=$systheme->$deftheme[$name];
                    break;
                    case "th":
                        $rv = $theme->$deftheme[$name];
                    break;
                    default:                
                        igk_ilog("css type not define: ".$name. " on ".$type. " ".$deftheme);
                    break;
                }
            } 
            $v=str_replace($n, $rv, $v); 
  
        }
    }
    
    $vresolv=1;
    $v=trim($v);
    $vsrc=$v;
    while($vresolv){
      
        $vresolv=0;
        $qlist=[];
        $qlist[]=$v;
        $roots=[];
        while($g=array_pop($qlist)){
            $rtv=null;
            $pos=0;
            if(is_array($g)){
                $rtv=$g["parent"];
                $g=$g["value"];
            }
            $ln=strlen($g);
            while(($pos=strpos($g, "[", $pos)) !== false){
                $tv=igk_str_read_brank($g, $pos, "]", "[");
                if(empty($tv))
                    continue;
                if($rtv == null){
                    $roots[$tv]=$tv;
                }
                if(($tl=strpos($tv, "[", 1)) !== false){
                    $q=array("parent"=>$tv, "value"=>substr($tv, $tl));
                    array_push($qlist, $q);
                }
                else{
                    $sv=igk_css_treat_value($tv, $theme, $systheme);
                    if(($rtv == null) || !isset($roots[$rtv]))
                        $roots[$tv]=$sv;
                    else{
                        $nvalue=str_replace($tv, $sv, $roots[$rtv]);
                        $roots[$rtv]=$nvalue;
                        if(($tl=strpos($nvalue, "[", 0)) !== false){
                            $q=array("parent"=>$rtv, "value"=>$nvalue);
                            array_push($qlist, $q);
                        }
                        unset($roots[$tv]);
                    }
                }
            }
            // igk_wln("replace >>>>> ".$g);
        }
        foreach($roots as $k=>$tv){
            if($k == $tv){
                $tv="";
            }
            if(strpos($v, $k) === false){
                throw new IGKCssParserException("{$k} not found in {$v}");
            }
            else
                $v=str_replace($k, $tv, $v);
        }
        $v=  igk_css_treat_bracket($v, $theme, $systheme);
        $g=0;
        if(!empty($v) && ($v != $vsrc) && (strpos($v, "[") !== false)){
            $vresolv=1;
            $vsrc=$v;
        }
    }  
    return $v;
}
///<summary>treat style properties with sys</summary>
/**
* treat style properties with sys
*/
function igk_css_treat_bracket($v, $theme, $systheme=null, $gtheme=null, $doc=null){
    $doc=$doc ?? igk_app()->Doc;
    if($doc == null){
        igk_wln_e("can't treat bracket\n".igk_show_trace());
    }  
    $systheme= $systheme ? $systheme : $doc->getSysTheme();
    $gtheme= $gtheme ? $gtheme : $doc->Theme;
    $reg2=IGK_CSS_TREAT_REGEX_2;
    $src=$v;
    $chain=[];
    $syschain=igk_get_env("sys://css/syschain");
    while(($c=preg_match_all($reg2, $v, $match))){
        for($i=0; $i < $c; $i++){
            $v_m=$match[0][$i];
            $type=$match['name'][$i];
            if(isset($chain[$v_m])){
                igk_die("looping resolution : ".$v_m. " for [".$src."]");
                return $v;
            }
            for($i=0; $i < $c; $i++){
                $v_m=$match[0][$i];
                $v_n=trim($match["name"][$i]);
                if(isset($theme[$v_n])){
                    $v=str_replace($v_m, igk_css_treat($theme, $theme[$v_n], $systheme), $v);
                }
                else{
                    $rtab=explode(':', $v_n);
                    if(count($rtab)>=2){
                        $v_from=strtolower(trim($rtab[0]));
                        switch($v_from){
                            case "sys":
                            $v_nn=explode(',', trim($rtab[1]));
                            $sk=IGK_STR_EMPTY;
                            foreach($v_nn as $r){
                                $g=trim($r);
                                $sk .= igk_getv($syschain, $g) ?? $systheme->def[".".$g];
                                $chain[$g]=$sk;
                            }
                            $sk=trim($sk);
                            $v=str_replace($v_m, $sk, $v);
                            break;
                        }
                    }
                    else{
                        $v_nn=explode(',', trim($v_n));
                        $sk=IGK_STR_EMPTY;
                        $rv=IGK_STR_EMPTY;
                        foreach($v_nn as $r){
                            $mk=trim($r);
                            $sk .= $gtheme->def[$mk];
                            $rv .= igk_css_treat($theme, $gtheme->def[$mk], $systheme);
                        }
                        $v=str_replace($v_m, $rv, $v);
                    }
                }
            }
        }
    } 
    igk_set_env("sys://css/syschain", $syschain);
    return $v;
}
///<param name="v" refout="true">value to update</param>
///<param name="theme">Theme script</param>
///<param name="type">style to resolv value </param>
///<param name="value">style to resolv value </param>
///<param name="document">document </param>
///<exemple type="css" >: body { background-color: [cl:red]}
///where entry is  'background-color: [cl:red]'
///use : igk_css_treat_value('css expression ')
///</exemple>
/**
* @param mixed $v value to update
* @param mixed $theme Theme script
* @param mixed $type style to resolv value
* @param mixed $value style to resolv value
* @param mixed $document document
*/
function igk_css_treat_entries(& $v, $theme, $type, $value, $systheme, $a="", $stop="", $themeexport=0){
    
    // igk_wln_e("data:".$v, get_class($systheme), get_class($theme));

    $themeexport=0; 
    $gtheme=$theme; 
    
    $v_m=$v;
    $d=& $systheme->def->getCl();
    $gcl=($d) ? $d: array();
    $stop=trim($stop);
    $v_designmode=igk_css_design_mode();
    $chainColors=array();
    if(($theme != null) && ($gtheme !== $theme) && ($theme !== $systheme)){
        $colors=$theme->getCl();
        if($colors){
            $chainColors[]=$colors;
        }
    }
    if($colors=$gtheme->getCl()){
        $chainColors[]=$colors;
    }
    if($gcl){
        $chainColors[] = array_merge($gcl, []);
    }
    
    
    $chainColorCallback=function($value) use (& $chainColors, $v_designmode, $gtheme, $systheme, $theme){
   
        $tab=explode(",", $value);
        $v=trim($tab[0]);
        $def= count($tab) > 1 ? implode(",", array_slice($tab, 1)): 'transparent';
        if(!($s=igk_css_treatcolor($chainColors, $v)) || ($v == $s)){
            $s=igk_css_design_color_value($v, null, $v_designmode);
        }
       
        if((empty($s) || ($s == $v)) && (igk_count($tab) > 1)){
            //igk_ilog(__LINE__.": not found : ".$s);
            $s =trim($def);
        }
        return $s;
    };
    switch(strtolower($type)){
        case "resolv":
        $v=str_replace($v_m, igk_css_get_resolv_stylei($value) ?? "", $v);
        break;
        case "varp":
        if(!igk_css_var_support()){
            $tab=explode(":", $value);
            $prop=$tab[0];
            $name=implode(":", array_slice($tab, 1));
            igk_set_env_keys("sys://css/vars", $prop, $name);
            $v_r="";
        }
        else{
            $v_r=$value.";";
        }
        $v=str_replace($v_m, $v_r, $v);
        break;
        case "varf":
        if(!igk_css_var_support()){
            $v=str_replace($v_m, $value, $v);
        }
        else
            $v=str_replace($v_m, "", $v);
        break;
        case "var":
        if(igk_css_var_support()){
            $v_r="var(".$value.")".$a;
        }
        else{
            $tab=array_slice(explode(",", $value), 1);
            if(igk_count($tab) > 0){
                $v_r=trim(implode(",", $tab));
            }
            else{
                $v_r=($t=igk_get_env("sys://css/vars")) ? igk_getv($t, $value): null;
            }
            if(!empty($v_r))
                $v_r .= $a;
        }
        $v=str_replace($v_m, $v_r, $v);
        break;
        case "fit":
        if(preg_match("/^(fill|contain|cover|none|scale-down)/i", $value)){
            $v=str_replace($v_m, "-webkit-object-fit: {$value};-ms-object-fit:{$value}; -o-object-fit: {$value}; object-fit: {$value};", $v);
        }
        else{
            $v=str_replace($v_m, "", $v);
        }
        break;
        case "trans":
        $v=str_replace($v_m, "-webkit-transition: {$value};-ms-transition:{$value}; -moz-transition:{$value}; -o-transition: {$value}; transition: {$value};", $v);
        break;
        case "lingrad":
        $v_stand=$value;
        if(preg_match("/^(left|top|right|bottom)/i", trim($v_stand))){
            $v_stand="to ".$v_stand;
        }
        $v=str_replace($v_m, "background: -webkit-linear-gradient({$value}); background:-ms-linear-gradient({$value}); background:-moz-linear-gradient({$value});background:-o-linear-gradient({$value}); background:linear-gradient({$v_stand});", $v);
        break;
        case "trans-prop":
        $v=str_replace($v_m, "-webkit-transition-property: {$value};-ms-transition-property:{$value}; -moz-transition-property:{$value}; -o-transition-property: {$value}; transition-property: {$value};", $v);
        break;
        case "transform":
        $v=str_replace($v_m, "-webkit-transform: {$value};-ms-transform:{$value}; -moz-transform:{$value}; -o-transform: {$value}; transform: {$value};", $v);
        case "transform-o":
        $v=str_replace($v_m, "-webkit-transform-origin: {$value};-ms-transform-origin:{$value}; -moz-transform-origin:{$value}; -o-transform-origin: {$value}; transform-origin: {$value};", $v);
        break;
        case "anim":
        case "animation":
        $v=str_replace($v_m, "-webkit-animation: {$value};-ms-animation:{$value}; -moz-animation:{$value}; -o-animation: {$value}; animation: {$value};", $v);
        break;
        case "filter":
        $v=str_replace($v_m, "-webkit-filter: {$value};-ms-filter:{$value}; -moz-filter:{$value}; -o-filter: {$value}; filter: {$value};", $v);
        break;
        case "res":
        if(is_file($value)){
            $v=str_replace($v_m, "background-image: url('".igk_io_baseuri($value)."')".$stop, $v);
        }
        else{
            $vimg=R::GetImgResUri($value);
            $v=str_replace($v_m, (!empty($vimg) && !$themeexport ? "background-image: url('".$vimg."'){$stop}": ""), $v);
        }
        break;
        case "bgres":
        $v=str_replace($v_m, (!$themeexport ? "background-image: url('".igk_io_baseuri()."/".igk_html_uri($value)."');": ""), $v);
        break;
        case "uri":
        $v=str_replace($v_m, (!$themeexport ? "url('".igk_io_baseuri()."/".igk_html_uri($value)."')": ""), $v);
        break;
        case "sysbgcl":
        $ncl=igk_css_design_color_value($value, $gcl, $v_designmode);
        $b=($ncl != $value) || (($ncl == $value) && igk_css_is_webknowncolor($ncl)) ? igk_css_getbgcl($ncl): "";
        $v=str_replace($v_m, $b, $v);
        break;
        case "sysfcl":
        $ncl=igk_css_design_color_value($value, $gcl, $v_designmode);
        $b=($ncl != $value) || (($ncl == $value) && igk_css_is_webknowncolor($ncl)) ? igk_css_getfcl($ncl): "";
        $v=str_replace($v_m, $b, $v);
        break;
        case "sysbcl":
        $ncl=igk_css_design_color_value($value, $gcl, $v_designmode);
        $b=($ncl != $value) || (($ncl == $value) && igk_css_is_webknowncolor($ncl)) ? igk_css_getbordercl($ncl): "";
        $v=str_replace($v_m, $b, $v);
        break;
        case "syscl":
        $ncl=igk_css_design_color_value($value, $gcl, $v_designmode);
        if(($ncl == $value) && !igk_css_is_webknowncolor($ncl)){
            if(igk_sys_env_production()){
                $ncl='initial';
            }
            $cl=& $systheme->def->getCl();
            $cl[$ncl]=$ncl;
        }
        $v=str_replace($v_m, $ncl.$a, $v);
        break;
        case "fcl":
        $v=str_replace($v_m, igk_css_getfcl($chainColorCallback($value)), $v);
        break;
        case "bgcl":
            
            $ncl= $chainColorCallback($value);
            $v=str_replace($v_m, igk_css_getbgcl($ncl), $v);

        break;
        case "bcl":
        $ncl=$chainColorCallback($value);
        $v=str_replace($v_m, igk_css_getbordercl($ncl), $v);
        break;
        case "cl":
        $rp=igk_str_rm_last($v_m, ';');
        $nv=$chainColorCallback($value);
        $t=$nv;
        $v=str_replace($rp, $t, $v);
        break;
        case "ft":
        $v=str_replace($v_m, ($theme !== $gtheme) && $theme->ft[$value] ? igk_css_getfont($value): null, $v);
        break;
        case "ftn":
        $h=$theme->ft[$value] ? $theme->ft[$value]: null;
        if($h)
            $v=str_replace($v_m, "\"".$h."\"", $v);
        else
            $v=str_replace($v_m, IGK_STR_EMPTY, $v);
        break;
        case "pr":
        case "prop":
		$p = & $systheme->getProperties();

        $v_r=igk_css_design_property_value($value, $theme->properties, $v_designmode);

	    if(!empty($v_r))
            $v_r .= $stop;
        $v=str_replace($v_m, $v_r, $v);
        break;
        case "palcl":
        $r=igk_get_palette();
        $v=str_replace($v_m, $r ? igk_getv($r, $value): null, $v);
        break;
        case "palbgcl":
        $r=igk_get_palette();
        if($r){
            $s=$r[$value];
            if(!empty($s))
                $v=str_replace($v_m, "background-color: ".$s.";", $v);
            else
                $v=str_replace($v_m, IGK_STR_EMPTY, $v);
        }
        else{
            $v=str_replace($v_m, IGK_STR_EMPTY, $v);
        }
        break;
        case "palfcl":
        $r=igk_get_palette();
        $s=igk_getv($r, $value);
        if(!empty($s))
            $v=str_replace($v_m, "color: ".$s.";", $v);
        else
            $v=str_replace($v_m, IGK_STR_EMPTY, $v);
        break;default:
        if((strlen($type) > 0) && ($type[0] == "-")){
            $type=substr($type, 1);
            $v=str_replace($v_m, "-webkit-{$type}: {$value};-ms-{$type}:{$value}; -moz-{$type}:{$value}; -o-{$type}: {$value}; {$type}: {$value};", $v);
        }
        else
            $v=str_replace($v_m, IGK_STR_EMPTY, $v);
        break;
    }
    return $v;
}
///<summary>used to treat style value</summary>
/**
* used to treat style value
*/
function igk_css_treat_value($v, $theme, $systheme, $themeexport=1){
    $reg=IGK_CSS_TREAT_REGEX;
    $pos=0;
    $tab=[];
    while(($pos=strpos($v, "{", $pos)) !== false){
        $ob=igk_str_read_brank($v, $pos, "}", "{");
        $tab[$ob]=igk_css_treat_bracket($ob, $theme, $systheme);
    } 

    foreach($tab as $k=>$vi){
        $v=str_replace($k, $vi, $v);
    }
    if(!preg_match($reg, $v, $match))
        return "";
    $type=$match["name"];
    $value=$match["value"];
    $stop="";
    if(isset($match["stop"])){
        $stop=$match["stop"];
    }
    $v=igk_css_treat_entries($v, $theme, $type, $value, $systheme, "", $stop, $themeexport);
    return $v;
}
///<summary></summary>
///<param name="colors" ref="true"></param>
///<param name="value"></param>
///<param name="defined" default="false"></param>
/**
* 
* @param mixed * $colors
* @param mixed $value
* @param mixed $defined the default value is false
*/
function igk_css_treatcolor(& $colors, $value, $defined=false){
    if(is_object($value)){
        igk_die("/!\\ object not allowed to be treated as color ");
    }
    if(empty($value)){
        return $value;
    }
    $tabpush=array();
    $q=$value;
    $v="";
    $reg2='/{\s*(?P<name>[\w_-]+)\s*\}/i';
    $is_color_chain=is_array(igk_getv($colors, 0));
    $chain_index=0;
    $rcolors=0;
    if($is_color_chain){
        $rcolors=$colors;
        $colors=igk_getv($rcolors, $chain_index);
    }
    while($q){
        if(isset($tabpush[$q])){
            $g=igk_css_invoke_color_request($q);
            if(!$g){
                igk_set_env_keys("sys://theme/colorrecursion", $q, $q);
                return 'initial';
            }
            return $g;
        }
        $tabpush[$q]=1;
        if(isset($colors[$q])){
            $q=$colors[$q];
        }
        else{
            if(($c=preg_match_all($reg2, $q, $match))){
                for($i=0; $i < $c; $i++){
                    $v_m=$match[0][$i];
                    $type=$match['name'][$i];
                    for($i=0; $i < $c; $i++){
                        $v_m=$match[0][$i];
                        $v_n=trim($match["name"][$i]);
                        $q=$v_n;
                    }
                }
            }
            else{
                if($is_color_chain && ($chain_index < count($rcolors))){
                    $colors=array_merge($colors, $rcolors[$chain_index++]);
                    unset($tabpush[$q]);
                }
                else{
                    break;
                }
            }
        }
    }
    if(!empty($q) && IGKGlobalColor::IsGlobalColor($q)){
        $q=IGKGlobalColor::getInstance()->Get($q);
    }
    return $q;
}
///<summary></summary>
///<param name="value"></param>
/**
* 
* @param mixed $value
*/
function igk_css_treatstyle($value, $theme= null, $systheme=null){
    $igk=igk_app();
    $theme = $theme ? $theme : $igk->Doc->Theme;
    if(empty($value) || !$igk || ($igk->Doc == null))
        return $value; 
    if ($systheme === null){
        $systheme = $igk->Doc->getSysTheme();
    } 
    return igk_css_treat_gtheme($theme, $systheme, $value);
}
///<summary></summary>
///<param name="b"></param>
/**
* 
* @param mixed $b
*/
function igk_css_type($b){
    $tab=["igk-default", "igk-success", "igk-warning", "igk-info", "igk-danger"];
    return igk_getv($tab, $b, "igk-default");
}
///<summary></summary>
/**
* 
*/
function igk_css_type_styles(){
    return array(
            "default",
            "success",
            "danger",
            "warning",
            "info",
            "active",
            "disable"
        );
}
///<summary>unregister font package</summary>
/**
* unregister font package
*/
function igk_css_unreg_font_package($fontname){
    $igk=igk_app();
	if ($doc = $igk->getDoc()){
		$ft=$doc->Theme->Font;
		if ($ft !== null){
			$r=igk_getv($ft, $fontname);
			if($r !== null){
				$ft[$fontname]=null;
			}
			$doc->Theme->def[".".$fontname]=null;
		}
	}
}
///<summary></summary>
/**
* 
*/
function igk_css_var_support(){
    return !(!IGKUserAgent::IsMod() && (igk_css_ie11() || IGKUserAgent::IsSafari()));
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_csv_get_value_array($tab){
    $o="";
    $i=0;
    foreach($tab as $v){
        if($i){
            $o .= igk_csv_sep();
        }
        else
            $i=1;
        $o .= igk_csv_getvalue($v);
    }
    return $o;
}
///<summary>return a csv entry for a value data</summary>
/**
* return a csv entry for a value data
*/
function igk_csv_getvalue($v){
    return IGKCSVDataAdapter::GetValue($v);
}
///<summary></summary>
/**
* 
*/
function igk_csv_sep(){
    $g = igk_app()->Configs;
    return $g->getConfig("csv_separator", ",");
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="k" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $k the default value is null
*/
function igk_ctrl_auth_key($ctrl, $k=null){
    $s="sys://auth/".$ctrl->AppName;
    if($k)
        $s .= "/".$k;
    return strtolower($s);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="n"></param>
///<param name="classdef" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $n
* @param mixed $classdef the default value is null
*/
function igk_ctrl_bind_css($ctrl, $n, $classdef=null){
    $k=IGK_CSS_DEFAULT_STYLE_FUNC_KEY;
    $g=null;
    if($n->iscallback($k)){
        $g=$n->$k();
    }
    $n["class"]=igk_css_str2class_name(strtolower($ctrl->getName())). ($classdef != null ? " ".$classdef: null). " ".$g;
}
///<summary>used to bind controller css file</summary>
///<param name="ctrl">controller that will be used to bind extra css setting</param>
///<param name="file">pcss file to bind. if null then the primarayCssFile of the controller is used</param>
/**
* used to bind controller css file
* @param mixed $ctrl controller that will be used to bind extra css setting
* @param mixed $ile pcss file to bind. if null then the primarayCssFile of the controller is used
*/
function igk_ctrl_bind_css_file($ctrl, $file=null, $temp=0){
    $f=$file ?? $ctrl->getPrimaryCssFile();
    if(file_exists($f) && !igk_is_ajx_demand()){
        if(!defined("IGK_FORCSS")){
            $doc = $ctrl->CurrentDoc ?? $ctrl->Doc ?? igk_app()->Doc;
            igk_css_reg_global_style_file($f, $doc->Theme, $ctrl, $temp);
        }
        else{
            igk_css_bind_file($ctrl, $f);
        }
    } 
}
///<summary> controller request to change the lang</summary>
/**
*  controller request to change the lang
*/
function igk_ctrl_change_lang($ctrl, $p){
    $lang=igk_getv($p, 'lang');
    if($lang){
        if(R::ChangeLang($lang)){
            $ctrl->setEnvParam(BaseController::IGK_ENV_PARAM_LANGCHANGE_KEY, 1);
        }
    }
    unset($lang);
}
///<summary>return the current acting view controller</summary>
/**
* return the current acting view controller
*/
function igk_ctrl_current_view_ctrl(){
    return igk_get_env(IGKEnvKeys::CURRENT_CTRL);
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_ctrl_env_param_key($ctrl){
    return "sys://ctrl/".$ctrl->getName();
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_ctrl_env_view_arg_key($ctrl){
    return strtolower("sys://ctrl/viewargs/".get_class($ctrl)."/view/args");
}
///<summary></summary>
///<param name="ctrn"></param>
///<param name="path" default="null"></param>
/**
* 
* @param mixed $ctrn
* @param mixed $path the default value is null
*/
function igk_ctrl_get_app_uri($ctrn, $path=null){
    $c=igk_getctrl($ctrn, false);
    if($c){
        return $c->getAppUri($path);
    }
    return null;
}
///<summary>return a controller direct command</summary>
///<param name="ctrl">controller identifier</param>
///<param name="u">function request</param>
///<param name="type">system type</param>
///<param name="port">port request</param>
/**
* return a controller direct command
* @param mixed $ctrl controller identifier
* @param mixed $u function request
* @param mixed $type system type
* @param mixed $port port request
*/
function igk_ctrl_get_cmd_uri($ctrl, $u=null, $type='sys', $port=null){
    if($port)
        $port=":".$port;
    return igk_io_baseuri().$port."/!@{$type}//{$ctrl->Name}/{$u}";
}
///<summary>get controller info</summary>
/**
* get controller info
*/
function igk_ctrl_get_ctrl_info($name){
    $m=IGKCtrlTypeManager::GetControllerTypes();
    $keys=array_keys($m);
    if(isset($m[$name])){
        $type=$m[$name];
        $i=new IGKCtrlInfo($name, $type);
        return $i;
    }
    return null;
}
///<summary>get configuration setting</summary>
/**
* get configuration setting
*/
function igk_ctrl_get_setting($ctrl, $n){
    return igk_getv($ctrl->Configs, $n);
}
///<summary>include controller view as content. the view to include is the first item of the params table</summary>
///<param name="file">first file of the param </param>
/**
* include controller view as content. the view to include is the first item of the params table
* @param mixed $ile first file of the param
*/
function igk_ctrl_include_content($ctrl, $file, $t, $params, $source=null, $dir=null){
    $c=igk_getv($params, 0);
    if($c){
        if($dir == null)
            $dir=dirname($file);
        $f=$dir."/{$c}.phtml";
        if(($f != $file) && file_exists($f)){
            $dt=array_slice($params, 1);
            igk_ctrl_include_view_file($ctrl, $source, $t->addDiv(), $f, $dt);
        }
        else{
            $t->addDiv()->addPanel()->Content=__("e.pagenotfound_1", $c);
        }
    }
}
///<summary>include controller view</summary>
/**
* include controller view
*/
function igk_ctrl_include_view_file($ctrl, $source, $t, $file, $args=null, $fname=null){
    $fc=function($ctrl, $source, $t, $file, $params=null, $fname=null){
        $dir=dirname(igk_realpath($file));
        $fname=$fname ?? igk_io_basenamewithoutext($file);
        $__local_uri__=$ctrl->getAppUri(($source ? $source."/": "").$fname);
        igk_set_env("sys://currenturiaccess", $__local_uri__);
        igk_include_set_view($file);
        $viewargs=get_defined_vars();
        include($file);
        igk_include_unset_view($file);
    };
    $of=$fc->bindTo($ctrl);
    $of($ctrl, $source, $t, $file, $args, $fname);
}
///<summary>init controller node css class </summary>
/**
* init controller node css class
*/
function igk_ctrl_init_css($ctrl, $node, $classdef=null){
    if($ctrl->getEnvParam(IGK_KEY_CSS_NOCLEAR) == 1)
        return;
    $c=$node["class"];
    if($c){
        $c->Clear();
    }
    igk_ctrl_bind_css($ctrl, $node, $classdef);
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_ctrl_is_current_subdomain($ctrl){
    return igk_sys_is_subdomain() && get_class(igk_app()->SubDomainCtrl) === get_class($ctrl);
}
///<summary>CHECK if the name is a reserved name</summary>
/**
* CHECK if the name is a reserved name
*/
function igk_ctrl_is_reservedname($name){
    if(preg_match(IGK_PHP_RESERVEDNAME_REGEX, trim($name)))
        return true;
    return false;
}
///<summary> get if this controller name is active</summary>
///<note>Data/.non-active.csv will have the diseable controller</note>
/**
*  get if this controller name is active
*/
function igk_ctrl_isactive($ctrlname){
    return true;
}
///<summary>utility load contoller menu stored from database</summary>
///<param name="callback">the callback to call for head menu</param>
/**
* utility load contoller menu stored from database
* @param mixed $closure callback the callback to call for head menu
*/
function igk_ctrl_loadmenu($ctrl, $menutable, $callback){
    $t=igk_db_table_select_where($menutable, null, $ctrl, false, array("Sort"=>"Asc", "SortColumn"=>"clIndex"));
    foreach($t->Rows as  $v){
        $callback($v);
    }
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_ctrl_notify_key($ctrl){
    return "sys://notify/".$ctrl->Name;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="u"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $u
*/
function igk_ctrl_private_folder($ctrl, $u){
    return $ctrl->getDataDir()."/".IGK_RES_FOLDER."/.private/".$u->clLogin;
}
///<summary>render controller document</summary>
///<param name="ctrl">the controller</param>
///<param name="view">the requested view file</param>
///<param name="ctrl">param to pass</param>
///<param name="ctrl">the controller</param>
/**
* render controller document
* @param mixed $objectctrl the controller
* @param mixed $string view the requested view file
* @param mixed ctrl param to pass
* @param mixed $bool  the controller
*/
function igk_ctrl_render_doc($ctrl, $view, $param=null, $exit=1){
    $f=$ctrl->getViewFile($view);
    if(file_exists($f)){
        $ctrl->getView($view, false, $param);
        igk_render_node($ctrl->getTargetNode(), igk_get_document($ctrl, true));
        if($exit)
            igk_exit();
    }
}
///<summary>used to reset parameters</summary>
///<param name="rg" >regular expression to match pattern</param>
/**
* used to reset parameters
* @param mixed $rgregular expression to match pattern
*/
function igk_ctrl_reset_params($ctrl, $rg="/(.)+/i"){
    $keys=$ctrl->getParamKeys();
    foreach($keys as  $v){
        if(preg_match($rg, $v)){
            $ctrl->unsetParam($v);
        }
    }
}
///<summary>view the current controllerr and render it to cibling targetnode</summary>
///<remark>viewmode might be one in other to check if this view is visible or not</remark>
/**
* view the current controllerr and render it to cibling targetnode
*/
function igk_ctrl_view($ctrl, $targetnode, $requestedview=IGK_DEFAULT_VIEW, $params=null, $viewmode=1){
    if($ctrl == null)
        return;
    $bck=$ctrl->getCurrentView();
    $tn=$ctrl->TargetNode;
    $ctrl->TargetNode=$targetnode;
    if($viewmode == 1){
        $ctrl->setCurrentView($requestedview, true, null, $params);
    }
    else{
        $f=$ctrl->getViewFile($requestedview);
        if(file_exists($f)){
            igk_set_env(IGK_ENV_CTRL_VIEW, $viewmode);
            $ctrl->getView($requestedview, false, $params);
        }
    }
    $ctrl->TargetNode=$tn;
    $ctrl->setCurrentView($bck, false);
}
///<summary>used to load view automacally view for controller according to pattern</summary>
///<param name="ctrl">controller</param>
///<param name="t">target node</param>
///<param name="pattern">pattern prefix filename </param>
/**
* used to load view automacally view for controller according to pattern
* @param mixed $ctrl controller
* @param mixed $t target node
* @param mixed $pattern pattern prefix filename
*/
function igk_ctrl_view_load_pattern($ctrl, $t, $pattern="main_"){
    $tab=igk_io_getfiles($ctrl->getViewDir(), function($s) use ($pattern){
        return preg_match("/^".$pattern."_(.)+\\.phtml$/", basename($s));
    }
    , false);
    sort($tab);
    foreach($tab as $v){
       $t->addCtrlView($v, $ctrl);
    }
}
///<summary>call View function of this controller. if this controller is not a child or call the parent view</summary>
/**
* call View function of this controller. if this controller is not a child or call the parent view
*/
function igk_ctrl_viewparent($ctrl){
    if($ctrl->Configs->clParentCtrl && ($p=igk_getctrl($ctrl->Configs->clParentCtrl))){
        if($p != null)
            igk_ctrl_viewparent($p);
    }
    else{
        if($ctrl->IsVisible)
            $ctrl->View();
    }
}
///<summary></summary>
///<param name="filepath"></param>
/**
* 
* @param mixed $filepath
*/
function igk_ctrl_zone($filepath){
    return igk_getv(igk_get_env("sys://ctrl/zone/files"), $filepath);
}
///<summary></summary>
///<param name="filepath"></param>
/**
* 
* @param mixed $filepath
*/
function igk_ctrl_zone_init($filepath){
    if(!file_exists($filepath))
        return null;
    $b=igk_get_env("sys://ctrl/zone/files");
    if(!$b){
        $b=array();
    }
    if(!isset($b[$filepath])){
        $b[$filepath]=new IGKCtrlZone($filepath);
    }
    igk_set_env("sys://ctrl/zone/files", $b);
    return $b[$filepath];
}
///<summary></summary>
/**
* 
*/
function igk_curl_get_info(){
    return igk_get_env("curl://getinfo", array());
}
///<summary></summary>
/**
* 
*/
function igk_curl_info(){
    return igk_get_env("curl://info");
}
///<summary></summary>
/**
* 
*/
function igk_curl_lasterror(){
    return igk_get_error("igk_curl_post_uri");
}
///<summary>balafon send curl </summary>
///<param name="curlOptions" > mixed, array of curl option or string of custom request type:</param>
///<usage >igk_curl_post_uri(uri)</usage>
/**
* send data with curl
* @param mixed $curlOptions  mixed, array of curl option or string of custom request
*/
function igk_curl_post_uri($uri, $args=null, $curlOptions=null, $headers=null){
    $get_info_callback=function($r, $tab){
        $rtab=[];
        foreach($tab as $v){
            $rtab[$v]=curl_getinfo($r, $v);
        }
        return $rtab;
    };
    $server="BALAFON"; // igk_server()->HTTP_USER_AGENT;
    $sessid=igk_getv($_COOKIE, 'PHPSESSID', session_id());
    $strCookie='PHPSESSID='. $sessid.'; path='.igk_get_cookie_path();
    $r=curl_init();
    if($r){
        curl_setopt($r, CURLOPT_URL, $uri);
        curl_setopt($r, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($r, CURLOPT_SSL_VERIFYHOST, false);
        if($args){
            curl_setopt($r, CURLOPT_POSTFIELDS, http_build_query($args));
        }
        curl_setopt($r, CURLOPT_USERAGENT, $server);
        curl_setopt($r, CURLOPT_COOKIE, $strCookie);
        if($curlOptions){
            if(is_string($curlOptions)){
                curl_setopt($r, CURLOPT_CUSTOMREQUEST, $curlOptions);
            }
            else{
                foreach($curlOptions as $k=>$v){
                    curl_setopt($r, constant("CURLOPT_".$k), $v);
                }
            }
        }
        if($headers){
            curl_setopt($r, CURLOPT_HTTPHEADER, $headers);
        }
        IGKOb::Start();
        $data=curl_exec($r);
        igk_set_env("curl://getinfo", $get_info_callback($r, igk_get_env("curl://getinfo/setting", array(CURLINFO_HTTP_CODE))));
        if(curl_errno($r)){
            $err=curl_error($r);
            igk_set_error(__FUNCTION__, $err);
            $c=null;
        }
        else{
            $c=IGKOb::Content();
            IGKOb::Clear();
        }
        igk_set_env("curl://info", [
			"Status"=>curl_getinfo($r, CURLINFO_HTTP_CODE),
			"Protocol"=>curl_getinfo($r, CURLINFO_PROTOCOL),
			"Url"=>curl_getinfo($r, CURLINFO_EFFECTIVE_URL)
		]);
        curl_close($r);
        return $c;
    }
    return null;
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_curl_set_info($tab){
    igk_set_env("curl://getinfo/setting", $tab);
}
///<summary></summary>
/**
* 
*/
function igk_curl_status(){
    $g=igk_curl_get_info();
    return igk_getv($g, CURLINFO_HTTP_CODE, -1);
}
///<summary></summary>
///<param name="amout"></param>
/**
* 
* @param mixed $amout
*/
function igk_currency_getamount($amout){
    $c=$amout.IGK_STR_EMPTY;
    if(!strstr($c, "."))
        $amout=$c.".00";
    return $amout;
}
///<summary>get system running context</summary>
/**
* get system running context
*/
function igk_current_context(){
    $ctx=igk_get_env(IGK_ENV_APP_CONTEXT, IGKAppContext::initializing);
    return $ctx;
}
///<summary>add cron controller</summary>
/**
* add cron controller
*/
function igk_data_addcron($ctrl){
    $n="";
    if(is_string($ctrl) && IGKValidator::IsUri($ctrl)){
        $n=$ctrl;
    }
    else if(is_object($ctrl) && igk_is_controller($ctrl)){
        $n=$ctrl->Name;
    }
    else{
        igk_die("can't add ".$ctrl);
    }
    $f=igk_data_get_cron_file();
    $t=(array)igk_get_env("sys://con/settings") ?? igk_json_parse(igk_io_read_allfile($f));
    $b=igk_getctrl(IGK_SESSION_CTRL)->getUri("RunCron&ctrl=".$n);
    $t[$b]=1;
    igk_set_env("sys://con/settings", $t);
    igk_io_save_file_as_utf8_wbom($f, igk_json_encode($t), true);
}
///<summary></summary>
/**
* 
*/
function igk_data_get_cron_file(){
    return igk_io_basedir()."/".IGK_DATA_FOLDER."/.crons.json";
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_datatypes_getinfo($n){
    $c=igk_getctrl(IGK_DATA_TYPE_CTRL);
    return $c->getInfo($n);
}
///<summary> compare 2 date string. format: YYYYMMDD</summary>
/**
*  compare 2 date string. format: YYYYMMDD
*/
function igk_date_compare($date1, $date2){
    try {
        $d1=new DateTime($date1);
        $d2=new DateTime($date2);
        if($date1 > $date2)
            return 1;
        if($date1 < $date2)
            return -1;
        return 0;
    }
    catch(Exception $ex){
        igk_wln("some exception: ".$ex->getMessage());
        return -2;
    }
}
///<summary>return the higher date according to format</summary>
/**
* return the higher date according to format
*/
function igk_date_last_date($date1, $date2, $v_format="Y-m-d"){
    $s1=igk_time_span($v_format, $date1);
    $s2=igk_time_span($v_format, $date2);
    return $s1<=$s2 ? $date2: $date1;
}
///<summary></summary>
///<param name="format" default="null"></param>
/**
* 
* @param mixed $format the default value is null
*/
function igk_date_now($format=null){
    if($format)
        return date($format);
    return date(IGK_DATETIME_FORMAT);
}

 /**
  * 
  */
function igk_db_init_dataschema($ctrl, $dataschema, $adapter){
	$r = $dataschema;
    if (!is_object($r)){
        throw new IGKException("dataschema not an object");
    }
	$tb=$r->Data;
	$etb=$r->Entries;
	$no_error = 1; 
    $adapter->beginInitDb($ctrl);
	foreach($tb as $k=>$v){
		$n=igk_db_get_table_name($k, $ctrl);
        $data=igk_getv($etb, $n); 

		igk_hook(IGK_NOTIFICATION_INITTABLE, [$ctrl, $n, & $data]); 
		if(!$adapter->createTable($n, igk_getv($v, 'ColumnInfo'), $data, igk_getv($v, 'Description'), 
            $adapter->DbName
            )
        ){
			igk_push_env("db_init_schema", __("failed to create [0]", $n));
			$no_error  = 0;
		} 
	}
    $adapter->endInitDb();
	return $no_error;
}

///<summary> backup controller data as xml object</summary>
/**
*  backup controller data as xml object
*/
function igk_db_backup_ctrl($ctrl, $defentries=1){
    if($ctrl){
        $tb=igk_db_get_ctrl_tables($ctrl);
        $schema=igk_html_node_dbdataschema();
        $apt=igk_get_data_adapter($ctrl->getDataAdapterName());
        $appc=igk_getctrl(IGK_API_CTRL);
        if($apt->connect()){
            $entries=$schema->addXmlNode("Entries");
            foreach($tb as $v){
                $rep=$schema->addXmlNode(IGKDbSchemas::DATA_DEFINITION)->setAttributes(array("TableName"=>$v));
                if ($defentries)
                $appc->datadb("get_table_definition", $rep, $v, $apt, null, $entries);
            }
            if (!$entries->HasChilds){
                igk_html_rm($entries);
            }
            $apt->close();
        }
        return $schema;
    }
    return null;
}
///<summary></summary>
///<param name="text"></param>
/**
* 
* @param mixed $text
*/
function igk_db_clean_text($text){
    igk_load_library("treat");
    $c=array($text);
    igk_protect_request($c);
    return $c[0];
}
///<summary></summary>
///<param name="ctrlOrAdapterName"></param>
///<param name="table"></param>
///<param name="dbname" default="null"></param>
/**
* 
* @param mixed $ctrlOrAdapterName
* @param mixed $table
* @param mixed $dbname the default value is null
*/
function igk_db_clear_table($ctrlOrAdapterName, $table, $dbname=null){
    $adapt=igk_get_data_adapter($ctrlOrAdapterName, false);
    if($adapt){
        $adapt->connect($dbname);
        $r=$adapt->deleteAll($table);
        $adapt->close();
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="ctrlorName"></param>
/**
* 
* @param mixed $ctrlorName
*/
function igk_db_close($ctrlorName){
    $apt=igk_get_data_adapter($ctrlorName);
    if($apt)
        $apt->close(false);
}
///<summary>close adapter</summary>
/**
* close adapter
*/
function igk_db_close_adapter($ctrlOrAdapterName){
    $ad=igk_get_data_adapter($ctrlOrAdapterName);
    if($ad){
        $ad->close();
    }
}
///<summary>close db and die with a message</summary>
/**
* close db and die with a message
*/
function igk_db_close_die($db, $msg){
    $db->close();
    igk_die($msg);
}
///<summary>compare time</summary>
/**
* compare time
*/
function igk_db_cmp_time($type, $format, $oldd, $newd){
    $o=igk_time_span($format, $oldd);
    $n=igk_time_span($format, $newd);
    if($o !== $n){
        return $n > $o ? 1: -1;
    }
    return 0;
}
///<summary>return column info association keys</summary>
/**
* return column info association keys
*/
function igk_db_column_info($db, $tablename, & $autoinc=null){
    $t=igk_getv(igk_getv($db->Data, $tablename), "ColumnInfo");
    $tt=[];
    foreach($t as $v){
        $tt[$v->clName]=$v;
        if($v->clAutoIncrement){
            $autoinc=$v->clName;
        }
    }
    return $tt;
}
///<summary>Copy filter dataobj value value only. Erase the src data attributes if key not found in data object </summary>
/**
* Copy filter dataobj value value only. Erase the src data attributes if key not found in data object
*/
function igk_db_copy_row(& $src, $dataobj, $erase=1){
    foreach($src as $k=>$v){
        if(isset($dataobj->$k)){
            $src->$k=$dataobj->$k;
        }
        else{
            if($erase)
                $src->$k=null;
        }
    }
}
///<summary> utility function. used to create object from data. the filter exclude data</summary>
/**
*  utility function. used to create object from data. the filter exclude data
*/
function igk_db_create_data($obj, $filter){
    $c=new StdClass();
    if($obj){
        foreach($obj as $k=>$v){
            if(array_key_exists($k, $filter)){
                continue;
            }
            $c->$k=$v;
        }
    }
    return $c;
}
///<summary> utility function. create data by filtering with table info</summary>
/**
*  utility function. create data by filtering with table info
*/
function igk_db_create_datafrominfo($adapter, $table, $obj, $tabinfo){
    if($obj === null)
        $c=igk_db_create_row($table);
    foreach($tabinfo as $k=>$v){
        if($v->clNotNull){
            if($v->clDefault){
                $c->$k=$v->clDefault;
            }
            else if($v->clLinkType){
                $r=$adapter->select($v->clLinkType)->getRowAtIndex(0);
                if($r){
                    $c->$k=$r->clId;
                }
            }
        }
    }
    if($obj){
        foreach($obj as $k=>$v){
            if(array_key_exists($k, $tabinfo)){
                $c->$k=$v;
            }
        }
    }
    return $c;
}
///<summary>create an empty result</summary>
/**
* create an empty result
*/
function igk_db_create_emptyresult($ctrl, $result=false){
    $g=igk_get_data_adapter($ctrl);
    $s=$g ? $g->CreateEmptyResult($result): null;
    return $s;
}
///<summary>create a db expression that will be evaluated</summary>
///<exemple></exemple>
/**
* create a db expression that will be evaluated
*/
function igk_db_create_expression($value){
    return new IGKDbExpression($value);
}
///<summary></summary>
///<param name="key"></param>
///<param name="user" default="null"></param>
///<param name="base" default="36"></param>
///<param name="length" default="3"></param>
/**
* 
* @param mixed $key
* @param mixed $user the default value is null
* @param mixed $base the default value is 36
* @param mixed $length the default value is 3
*/
function igk_db_create_identifier($key, $user=null, $base=36, $length=3){
    $u= $user ?? igk_app()->Session->User;
    if($u == null){
        $u = igk_get_system_user();
    }
    $ct=igk_getctrl(IGK_UCB_REF_CTRL);
    $number=intval($ct->get_ref_nextnumber($u->clId, $key));
    $c=intval(date("Ymd").$u->clId);
    $bill_ref=IGKNumber::ToBase($number, $base, $length);
    $ct->update_ref_nextnumber($u->clId, $key);
    $c=intval(date("Ymd").$u->clId);
    $format=IGKNumber::ToBase($c, 36, 8);
    $bill_ref=$format."-".IGKNumber::ToBase($number, 36, 3);
    igk_set_env(__FUNCTION__."/number", $number);
    return $bill_ref;
}
///<summary></summary>
///<param name="tb"></param>
///<param name="dataobj" default="null"></param>
/**
* 
* @param mixed $tb
* @param mixed $dataobj the default value is null
*/
function igk_db_create_obj_from_infokey($tb, $dataobj=null){
    if($tb){
        $obj=igk_createobj();
        foreach($tb as $k=>$v){ 
            $obj->$k = igk_db_getdefaultv($v);
        }
        if($dataobj != null){
            if(is_array($dataobj))
                $dataobj=(object)$dataobj;
            igk_db_copy_row($obj, $dataobj);
        }
        return $obj;
    }
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_db_create_opt_obj(){
    $obj=igk_createobj();
    $obj->Operand="AND";
    $s= IGKQueryResult::CALLBACK_OPTS;
    $obj->$s=null;
    $obj->Sort=null;
    $obj->SortColumn=null;
    return $obj;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="model" default="null"></param>
///<param name="base" default="36"></param>
///<param name="length" default="4"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $model the default value is null
* @param mixed $base the default value is 36
* @param mixed $length the default value is 4
*/
function igk_db_create_ref($ctrl, $model=null, $base=36, $length=4){
    
    return igk_getctrl(IGK_CB_REF_CTRL)->get_ref($ctrl, $model, $base, $length);
}
///<summary>create and empty row from global system datatable name</summary>
///<param name="tablename">registrated global sql data table</param>
///<param name="dataobj">object that will fill the value</param>
///<param name="schema">schema file </param>
/**
* create and empty row from global system datatable name
* @param mixed $tablename registrated global sql data table
* @param mixed $dataobj object that will fill the value
* @param mixed $schema schema file
*/
function igk_db_create_row($tablename, $dataobj=null, $schema=null){
    if($schema){
        $tt=igk_get_env(__FUNCTION__."/".$tablename, function() use ($tablename, $schema){
            $tdb=igk_get_env("sys://schema", []);
            if(!isset($tdb[$schema])){
                $tdb[$schema]=igk_db_load_data_and_entries_schemas($schema) ?? igk_die("failed to load data schema");
            }
            $db=$tdb[$schema];
            return igk_db_column_info($db, $tablename);
        });
        return igk_db_create_obj_from_infokey($tt, $dataobj);
    }
    $tb=igk_db_getdatatableinfokey($tablename);
    return igk_db_create_obj_from_infokey($tb, $dataobj);
}
///<summary>create and empty row from ctrl data table datatable na.me</summary>
/**
* create and empty row from ctrl data table datatable na.me
*/
function igk_db_create_row_obj($tablename, $ctrl, $dataobj=null){
    $tb=igk_db_ctrl_datatable_info_key($ctrl, $tablename);
    return igk_db_create_obj_from_infokey($tb, $dataobj);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="table"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $table
*/
function igk_db_ctrl_datatable_info_key($ctrl, $table){
    $tc=$ctrl->getEnvParam(IGK_CTRL_TABLE_INFO_KEY, array());
    $h=igk_getv($tc, $table);
    if($h){
        return $h;
    }
    $c=$ctrl->getDataTableInfo();
    if(!$c){  
        return null;
    }
    if($ctrl->UseDataSchema){
        $h=igk_getv($c, $table) ?? igk_die(__FUNCTION__.", no table {$table} found in [{$ctrl->Name}]");
        $d=igk_db_ref_keyinfo($h);
        if($d != null){
            $tc[$table]=$d;
            $ctrl->setParam(IGK_CTRL_TABLE_INFO_KEY, $tc);
        }
        return $d;
    }
    else{
        if($ctrl->getDataTableName() != $table)
            return null;
        if(igk_count($c) > 0){
            $m=igk_array_object_refkey($c, IGK_FD_NAME);
            $ctrl->setEnvParam(IGK_CTRL_TABLE_INFO_KEY, array($table=>$m));
            return $m;
        }
        return null;
    }
}
///<summary></summary>
///<param name="adapter"></param>
///<param name="table"></param>
///<param name="entry"></param>
///<param name="tabinfo" default="null"></param>
///<param name="present" default="null" ref="true"></param>
///<param name="ptype" default="null" ref="true"></param>
/**
* 
* @param mixed $adapter
* @param mixed $table
* @param mixed $entry
* @param mixed $tabinfo the default value is null
* @param mixed * $present the default value is null
* @param mixed * $ptype the default value is null
*/
function igk_db_data_is_present($adapter, $table, $entry, $tabinfo=null, & $present=null, & $ptype=null){
    if($tabinfo == null){
        $tabinfo=igk_db_getdatatableinfokey($table);
    }
    if(($entry == null) || ($tabinfo == null))
        return false;
    $t=array();
    $uniquecolumn=array();
    foreach($entry as $k=>$v){
        if(!isset($tabinfo[$k])){
            igk_die("[".__FUNCTION__."] - Column [$k] not found in table `{$table}` definition. maybe you must reset  datatable cache");
            igk_exit();
        }
        $s=$tabinfo[$k];
        if($s->clAutoIncrement){
            continue;
        }
        if($s->clIsUnique){
            $t[$k]=$v;
        }
        if($s->clIsUniqueColumnMember){
            $rtab=null;
            if(!empty($s->clColumnMemberIndex)){
                $rindexes=explode("-", $s->clColumnMemberIndex);
                foreach($rindexes as $gk){
                    if(!is_numeric($gk))
                        continue;
                    if(isset($uniquecolumn[$gk]))
                        $rtab=$uniquecolumn[$gk];
                    else
                        $rtab=array();
                    $rtab[$k]=$v;
                    $uniquecolumn[$gk]=$rtab;
                }
            }
            else{
                if(isset($uniquecolumn[0]))
                    $rtab=$uniquecolumn[0];
                else
                    $rtab=array();
                $rtab[$k]=$v;
                $uniquecolumn[0]=$rtab;
            }
        }
    }
    if(igk_count($t) > 0){ 
        foreach($t as $k=>$v){
            $m = array($k=>$v);  
            if(($g=igk_db_table_select_where($table, $m, $adapter)) && $g->RowCount > 0){
                $present=$g;
                $ptype=1; 
                return true;
            }
        }
    }
    if(igk_count($uniquecolumn) > 0){
        foreach($uniquecolumn as $k=>$v){
            if(($g=igk_db_table_select_where($table, $v, $adapter)) && ($g->RowCount > 0)){
                $present=$g;
                $ptype=2; 
                return true;
            }
        }
    }
    return false;
}
///<summary></summary>
///<param name="controllerOrAdpaterName"></param>
///<param name="table"></param>
///<param name="where" default="null"></param>
///<param name="dbname" default="null"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $controllerOrAdpaterName
* @param mixed $table
* @param mixed $where the default value is null
* @param mixed $dbname the default value is null
* @param mixed $leaveOpen the default value is false
*/
function igk_db_delete($controllerOrAdpaterName, $table, $where=null, $dbname=null, $leaveOpen=false){
    $adapt=igk_get_data_adapter($controllerOrAdpaterName, false);
    if($adapt){
        $adapt->connect($dbname);
        $r=$adapt->delete($table, $where);
        $adapt->close($leaveOpen);
        return $r;
    }
    else{
        igk_wln("adapt is null");
    }
    return null;
}
///<summary></summary>
///<param name="r"></param>
/**
* 
* @param mixed $r
*/
function igk_db_delete_cookie($r){
    $table = igk_db_get_table_name(IGK_TB_COOKIESTORE);
    $ctrl=igk_db_get_datatableowner($table);
    return igk_db_delete($ctrl, $table, is_object($r) ? $r->clId: $r);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="where"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $where
*/
function igk_db_deletec($ctrl, $where){
    return igk_db_delete($ctrl, $ctrl->getDataTableName(), $where, null);
}
///<summary>drop application table from system config</summary>
/**
* drop application table from system config
*/
function igk_db_drop_ctrl_db($ctrl, $tb=null, $fc=null){
    $s=igk_is_conf_connected() || igk_user()->auth($ctrl->Name.":".$fc);
    if(!$s){
        if(igk_app_is_uri_demand($ctrl, $fc)){
            igk_navto($ctrl->getAppUri());
        }
        return;
    }
    if(!igk_getv($ctrl->getConfigs(), "clDataSchema")){
        $db=igk_get_data_adapter($ctrl, true);
        if($db && $db->connect()){
            $db->dropTable($ctrl->getDataTableName());
            $db->close();
        }
    }
    else{
        $db=igk_get_data_adapter($ctrl, true);
        if($db){
            if($db->connect()){
                $v_tblist=array();
                foreach($tb as $k=>$v){
                    $v_tblist [$k]=$k;
                }
                $rdb=$ctrl->db;
                if($rdb && method_exists($rdb, "onStartDropTable")){
                    $rdb->onStartDropTable();
                }
                igk_raise_event("sys://db/startdroptable", $ctrl);
                $db->dropTable($v_tblist);
                $db->close();
            }
        }
    }
    if(igk_app_is_uri_demand($ctrl, "dropdb")){
        igk_navto($ctrl->getAppUri());
    }
}
///<summary></summary>
///<param name="key"></param>
/**
* 
* @param mixed $key
*/
function igk_db_drop_identifier($key){
    $ct=igk_getctrl(IGK_UCB_REF_CTRL);
    $ct->delete_key($key);
}

function igk_db_current_data_driver(){
    return igk_getv(IGKDBQueryDriver::$Config, "db");
}
function igk_db_current_data_adapter(){
    if($d = igk_db_current_data_driver()){

        $adapter_name = IGKDBQueryDriver::$Config[$d]["data_adapter"];
        return igk_get_data_adapter($adapter_name);
    }
    return null;
}
///<summary></summary>
///<param name="ctrlorName"></param>
///<param name="table"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $ctrlorName
* @param mixed $table
* @param mixed $leaveOpen the default value is false
*/
function igk_db_drop_table($ctrlorName, $table, $leaveOpen=false){
    $apt=igk_get_data_adapter($ctrlorName);
    if($apt){
        $apt->connect();
        $apt->dropTable($table);
        $apt->close($leaveOpen);
    }
}
///<summary> used to dump query result</summary>
/**
*  used to dump query result
*/
function igk_db_dump_result($result){
    $r=igk_createnode();
    if($result === null){
        $r->Content="No result";
    }
    else{
        $r->addDiv()->Content="Count : ".$result->RowCount;
        $tb=$r->addTable();
        $tr=$tb->addTr();
        foreach($result->Columns as $v){
            $td=$tr->add("th");
            $td->Content=$v->name;
        }
        foreach($result->Rows as  $v){
            $tr=$tb->addTr();
            foreach($v as  $t){
                $tr->addTd()->Content=$t;
            }
        }
    }
    $r->RenderAJX();
}
///<summary></summary>
///<param name="message"></param>
/**
* 
* @param mixed $message
*/
function igk_db_error($message){
    igk_app()->Session->setParam("db_error_msg", $message);
}
///<summary>create a field objet</summary>
/**
* create a field objet
*/
function igk_db_field($n, $op='='){
    $o=(object)array(
            IGK_FD_NAME=>$n,
            "clOperator"=>$op,
            "obj:type"=>__FUNCTION__
        );
    $o->getValue=function() use ($o){igk_wln(array_keys(get_defined_vars()));
        return $o->clName;
    };
    return $o;
}
///<summary>create and filter an object data table to insert in form</summary>
/**
* create and filter an object data table to insert in form
*/
function igk_db_form_data($tablanename, $callbackfilter=null){
    $fi=$callbackfilter !== null;
    $row=igk_db_create_row($tablanename);
    $t=array();
    foreach($row as $k=>$v){
        if($fi && $callbackfilter($k, $t)){
            continue;
        }
        $t[$k]=array();
    }
    return $t;
}
///<summary>get gloval config properties</summary>
/**
* get gloval config properties
*/
function igk_db_get_config($n, $default=null, $comment=null, $init=0){
    return igk_getctrl(IGK_BDCONFIGS_CTRL)->getConfigv($n, $default, $comment, $init);
}
///<summary>register configuration properties</summary>
/**
* register configuration properties
*/
function igk_db_get_configp($ctrl, $n, $default=null){
    return igk_db_get_config(strtolower($ctrl->getName())."://".$n, $default);
}
///<summary>get registered user configuration </summary>
/**
* get registered user configuration
*/
function igk_db_get_configup($ctrl, $u, $n, $default=null, $comment=null, $init=0){
    return igk_db_get_config(strtolower($ctrl->getName())."://".$u->clLogin."/".$n, $default, $comment, $init);
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_db_get_ctrl_tables($ctrl){
    return igk_getctrl(IGK_MYSQL_DB_CTRL, true)->getTablesFor($ctrl);
}
///<summary></summary>
///<param name="tablename"></param>
/**
* 
* @param mixed $tablename
*/
function igk_db_get_datatableowner($tablename){
    return igk_getctrl(IGK_MYSQL_DB_CTRL, true)->getDataTableCtrl($tablename);
}
///<summary></summary>
///<param name="controllerOrAdpaterName"></param>
///<param name="table"></param>
///<param name="dbname" default="null"></param>
/**
* 
* @param mixed $controllerOrAdpaterName
* @param mixed $table
* @param mixed $dbname the default value is null
*/
function igk_db_get_entries($controllerOrAdpaterName, $table, $dbname=null){
    $adapt=igk_get_data_adapter($controllerOrAdpaterName, false);
    if($adapt){
        $adapt->connect($dbname);
        $r=$adapt->selectAll($table);
        $adapt->close();
        return $r;
    }
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_db_get_error(){
    return igk_app()->Session->getParam("db_error_msg");
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_db_get_schema_filename($ctrl){
    return $ctrl->getDataSchemaFile();
}
///<summary></summary>
///<param name="ad"></param>
///<param name="table"></param>
///<param name="tabinfo"></param>
///<param name="row"></param>
///<param name="syncRefTable" ref="true"></param>
/**
* 
* @param mixed $ad
* @param mixed $table
* @param mixed $tabinfo
* @param mixed $row
* @param mixed * $syncRefTable
*/
function igk_db_get_sync_row_data($ad, $table, $tabinfo, $row, & $syncRefTable){
    $obj=igk_db_create_row($table);
    if($row){
        foreach($row as $k=>$v){
            $clinfo=igk_getv($tabinfo, $k);
            if(!$clinfo)
                continue;
            if(isset($clinfo->clLinkType) && isset($row->$k)){
                if(!isset($syncRefTable[$clinfo->clLinkType])){
                    $syncRefTable[$clinfo->clLinkType]=array();
                }
                $ii=$syncRefTable[$clinfo->clLinkType];
                $g=null;
                if(!isset($ii[$row->$k])){
                    $g=$ad->select($clinfo->clLinkType, array(IGK_FD_ID=>$row->$k))->getRowAtIndex(0);
                    unset($g->clId);
                    $ii[$row->$k]=$g;
                    $syncRefTable[$clinfo->clLinkType]=$ii;
                }
                $obj->$k="{\"t\":\"{$clinfo->clLinkType}\",\"id\":\"{$row->$k}\"}";
                continue;
            }
            $obj->$k=$row->$k;
        }
    }
    return $obj;
}
///<summary>return the declared table definition structure</summary>
/**
* return the declared table definition structure
*/
function igk_db_get_table_def($adaptername=IGK_MYSQL_DATAADAPTER){
    $v_dictionary=array();
    foreach(igk_sys_getall_ctrl() as $k){
        
        if((($k->getDataAdapterName() != $adaptername) || (($v_info=$k->getDataTableInfo()) === null))
        || empty($v_name =$k->getDataTableName()) )
            continue;
        $te=null;
        if(isset($v_info["data-schema"]) || is_array($v_info) && is_array(igk_getv(array_values($v_info), 0))){
            foreach($v_info as $table=>$rinfo){
                if($table == "data-schema")
                    continue;
                $info=(object)array(
                        "tableName"=>$table,
                        "tableInfo"=>IGKDbColumnInfo::AssocInfo($rinfo,
                        $table),
                        "Ctrl"=>$k,
                        IGK_ENTRIES_TAGNAME=>$te,
                        "AdapterName"=>$adaptername
                    );
                $v_dictionary[$info->tableName]=$info;
            }
        }
        else{
            $info=(object)array(
                    "tableName"=>$v_name,
                    "tableInfo"=>IGKDbColumnInfo::AssocInfo($v_info,
                    $v_name),
                    "Ctrl"=>$k,
                    IGK_ENTRIES_TAGNAME=>$te,
                    "AdapterName"=>$adaptername
                );
            $v_dictionary[$info->tableName]=$info;
        }
    }
    return $v_dictionary;
}
///<summary>get table defition of a mysql db definition</summary>
/**
* get table defition of a mysql db definition
*/
function igk_db_get_table_info($table){
    $tab=igk_getctrl(IGK_MYSQL_DB_CTRL)->getDataTableDefinition($table);
    return $tab;
}
function igk_db_get_model_class_name($name, $ctrl=null){
    $b = $ctrl? $ctrl : igk_getctrl(IGK_MYSQL_DB_CTRL)->getDataTableCtrl($name);
    $nss = $b->getEntryNamespace();
    $ns = igk_db_get_table_name("%prefix%", $b);
    $k = $name; 
    $gs = !empty($ns) && strpos($k, $ns) === 0;
    $t =  $gs ? str_replace($ns, "", $k) : $k;
    $name = preg_replace("/\\s/", "_", $t);
    $name = implode("", array_map("ucfirst", array_filter(explode("_",$name))));

    foreach(array_filter([$nss, "IGK"]) as $b){
        $tn = implode("\\", array_filter([$b, "Models", $name]));
        if (class_exists($tn)){
            return $tn;
        }
    } 
    return null;
}
///<summary>Resolv table name</summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_db_get_table_name($name, $ctrl=null){
    
    $v="/^%(?P<name>(prefix|sysprefix))%/i";
    return preg_replace_callback($v, function($m)use($ctrl){
        switch($m["name"]){
            case "prefix":
                $p = igk_app()->configs->get("db_prefix");         
                if ($ctrl){
                    if (!empty($s = $ctrl->getConfigs()->clDataTablePrefix)){
                        $p = $s;
                    }
                }
                return $p;
            case "sysprefix":
                return igk_app()->configs->get("db_prefix");
        }
    }, $name);
    // if(preg_match($v, $name)){       
    //     $p = igk_app()->configs->get("db_prefix");         
    //     if ($ctrl){
    //         if (!empty($s = $ctrl->Configs->clDataTablePrefix)){
    //             $p = $s;
    //         }
    //     }
    //     $name = preg_replace($v, $p, $name);
    // }
    // return $name;
}
///<summary>get table that contains specified column</summary>
/**
* get table that contains specified column
*/
function igk_db_get_table_with_column($columnName, $adaptername=IGK_MYSQL_DATAADAPTER){
    $dic=igk_db_get_table_def($adaptername);
    $tab=array();
    $columnName=strtolower($columnName);
    foreach($dic as $v){
        $tb=array_keys($v->tableInfo);
        foreach($tb as $t){
            if(strtolower($t) == $columnName){
                $tab[]=$v->tableName;
                break;
            }
        }
    }
    return $tab;
}
///<summary>get the definition key in this table</summary>
/**
* get the definition key in this table
*/
function igk_db_getdatatableinfokey($tablename){
    if(!is_string($tablename)){
        igk_die("tablename not a string");
    }
    if(($ctrl =igk_getctrl(IGK_MYSQL_DB_CTRL))&&
    ($tab= $ctrl->getDataTableDefinition($tablename)))
    {
        return igk_array_object_refkey(igk_getv($tab, 'ColumnInfo'), IGK_FD_NAME);
    }
    return null;
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_db_getdefaultv($v){
    if($v->clNotNull){
        switch(strtolower($v->clType)){
            case "int":
            case "float":
            if(empty($v->clDefault))
                return 0;
            break;
        }
        if ($v->clDefault === null){
            return "";
        }
    } 
    return $v->clDefault;
}
///<summary></summary>
///<param name="ctrlorName"></param>
///<param name="table"></param>
///<param name="condition"></param>
/**
* 
* @param mixed $ctrlorName
* @param mixed $table
* @param mixed $condition
*/
function igk_db_getid($ctrlorName, $table, $condition){
    $r=igk_db_table_select_where($table, $condition, $ctrlorName);
    if($r && ($r->RowCount == 1)){
        return igk_getv($r->getRowAtIndex(0), IGK_FD_ID);
    }
    return null;
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_db_getobj($tab){
    $t=array();
    foreach($tab as $k){
        $t[$k->clName]=null;
    }
    return (object)$t;
}
///<summary>return an array of table column used to synchronise data</summary>
/**
* return an array of table column used to synchronise data
*/
function igk_db_getsync_key($tablename){
    $tab=igk_getctrl(IGK_MYSQL_DB_CTRL)->getDataTableDefinition($tablename);
    if($tab){
        $t=igk_getv($tab, 'SyncKey');
        if($t === null){
            $h=igk_array_object_refkey(igk_getv($tab, 'ColumnInfo'), IGK_FD_NAME);
            $m=array();
            $km=array();
            $m['key']=IGK_STR_EMPTY;
            foreach($h as $k=>$v){
                if(($k == IGK_FD_ID) || isset($v->clLinkType))
                    continue;
                if($v->clIsUnique || $v->clIsPrimary){
                    $m[$k]=1;
                    igk_db_sync_push_data($km, $m, $k);
                }
                else if($v->clIsUniqueColumnMember){
                    if(!isset($m["_unique_columns"])){
                        $m["_unique_columns"]=array();
                    }
                    $m["_unique_columns"][]=$k;
                    igk_db_sync_push_data($km, $m, $k);
                }
            }
            unset($k);
            if(igk_count($m) > 0) if(isset($m["_unique_columns"])){
                if(igk_count($m["_unique_columns"]) == 1){
                    $s=$m["_unique_columns"][0];
                    igk_db_sync_push_data($km, $m, $s);
                    unset($m["_unique_columns"]);
                }
            }
            $t=explode(',', $m['key']);
        }
        if(is_string($t)){
            $t=explode(',', $t);
        }
        return $t;
    }
    return null;
}
///<summary>grant system authorisation</summary>
///<exemple>igk_db_grant('sys://drop', 'root')</exemple>
/**
* grant system authorisation
*/
function igk_db_grant($authname, $groupname, $access=1, $ctrl=null){
     
    $auth=igk_db_table_select_row(igk_db_get_table_name(IGK_TB_AUTHORISATIONS), array(IGK_FD_NAME=>$authname));
    $group=igk_db_table_select_row(igk_db_get_table_name(IGK_TB_GROUPS), array(IGK_FD_NAME=>$groupname));
    $ctrl=$ctrl ?? igk_db_get_datatableowner(igk_db_get_table_name(IGK_TB_GROUPAUTHS));
    if($auth && $group)
        return igk_db_insert_if_not_exists($ctrl, igk_db_get_table_name(IGK_TB_GROUPAUTHS), array(
            IGK_FD_AUTH_ID=>$auth->clId,
            IGK_FD_GROUP_ID=>$group->clId,
            "clGrant"=>$access
        ));
    return 0;
}
///<summary> convert array to ossociation key value array</summary>
///<param name="key"> mixed . string|callable to get the identifier</param>
/**
*  convert array to ossociation key value array
* @param mixed $key  mixed . string|callable to get the identifier
*/
function igk_db_identifier_array($tb, $key){
    $tab=array();
    if($tb){
        $is_callable=is_callable($key);
        $s="";
        foreach($tb as  $v){
            $s=$key;
            if($is_callable){
                $s=$key($v);
                $tab[$s]=$v;
            }
            else{
                $tab[$v->$s]=$v;
            }
        }
    }
    return $tab;
}
///invoke to init system auto
/**
*/
function igk_db_init_auths($auths){
    $c=igk_db_get_datatableowner(igk_db_get_table_name(IGK_TB_AUTHORISATIONS));
    foreach($auths as  $v){
        igk_db_register_auth($v, $c);
    }
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="ad" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $ad the default value is null
*/
function igk_db_init_db($ctrl, $ad=null){
     
    $ad=$ad ?? igk_get_data_adapter($ctrl);
    if($ad->connect()){
        $ad->initForInitDb();
        $k=IGK_ENV_DB_INIT_CTRL;
        igk_set_env($k, $ctrl);
        $ctrl->initDb();
        igk_set_env($k, null);
        $ad->flushForInitDb();
        $ad->close();
        return 1;
    }
    return 0;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="schema"></param>
///<param name="entries" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $schema
* @param mixed $entries the default value is null
*/
function igk_db_init_from_data_schema($ctrl, $schema, $entries=null){
    $tb=null;
    $db=igk_get_data_adapter($ctrl, true);
    if($db){
        if($db->connect()){
            foreach($schema as $k=>$v){
                $n=igk_db_get_table_name($k);
                $data=$entries ? igk_getv($entries, $k): null;
                $r=$db->createTable($n, igk_getv($v, 'ColumnInfo'), $data, igk_getv($v, 'Description'), $db->DbName);
            }
            $db->close();
        }
        else{
            igk_debug_wln("db not connected");
        }
    }
    return $tb;
}
///<summary> init form dataschema></summary>
/**
*  init form dataschema>
*/
function igk_db_init_from_dataschema($ctrl, $ad, $schema){
    $r=$schema;
    if(!$r){
        return;}
    $tb=$r->Data;
    $etb=$r->Entries;
    $db=$ad;
    if($db){
        if($db->connect()){
            foreach($tb as $k=>$v){
                $n=igk_db_get_table_name($k);
                $data=igk_getv($etb, $k);
                igk_hook(IGK_NOTIFICATION_INITTABLE, [$ctrl, $n, $data]);
                $r=$db->createTable($n, igk_getv($v, 'ColumnInfo'), $data, igk_getv($v, 'Description'), $db->DbName);
            }
            $db->close();
        }
        else{
            igk_ilog("/!\\ connexion failed ");
        }
    }
    else{
        igk_ilog("no adapter found", __FUNCTION__);
    }
    return $tb;
}
///<summary></summary>
///<param name="groups"></param>
/**
* 
* @param mixed $groups
*/
function igk_db_init_groups($groups){
    foreach($groups as  $v){
        igk_db_register_group($v);
    }
}
function igk_db_util_init_row_script($table, $name="c"){
    $c = igk_db_create_row($table);
    $s = "";
    foreach($c as $k=>$v){
        if (!is_numeric($v) && empty($v)){
            $v = '""';
        }
        $s.=" \$${$name}->$k = $v;\n";
    }
    igk_text($s);
}
///<summary></summary>
///<remark>if entrie is a std class the reponds will have a clid updated </remark>
/**
*
*/
function igk_db_insert($controllerOrAdpaterName, $table, $entries, $dbname=null, $leaveOpen=false){
    $adapt=igk_get_data_adapter($controllerOrAdpaterName, false);
    if($adapt){
        if ($adapt->connect($dbname)){
            $r=$adapt->insert($table, $entries, igk_db_getdatatableinfokey($table));
            if (!$r){
                igk_ilog("sql error : ".igk_mysql_db_error());
            } 
            $adapt->close($leaveOpen); 
            return $r;
        } 
    }
    else{
        igk_db_error("Adapter is null");
    }
    return null;
}
///<summary>insert in table if data not exists</summary>
/**
* insert in table if data not exists
*/
function igk_db_insert_if_not_exists($controllerOrAdpaterName, $table, $entry, $condition=null, $dbname=null, $leaveOpen=false, $Op='OR'){
    $adapt=igk_get_data_adapter($controllerOrAdpaterName, false);
    $v_is_c=igk_is_controller($controllerOrAdpaterName);
    $table = igk_db_get_table_name($table, $v_is_c?$controllerOrAdpaterName: null);
    $r=false;

    if($adapt){
        $tabinfo=igk_db_getdatatableinfokey($table, 0);
        if($tabinfo == null){
            if(!igk_sys_env_production()){
                if($v_is_c){
                    $b=igk_db_ctrl_datatable_info_key($controllerOrAdpaterName, $table);
                }
                igk_wln(igk_db_ctrl_datatable_info_key($controllerOrAdpaterName, $table));
                igk_die("/tab info is null :  ".$table);
            }
            return -1;
        }
        $c=$v_is_c ? $controllerOrAdpaterName: $dbname;
       

        if($adapt->connect()){
            $e=null;
            if(igk_count($tabinfo) == 0){
                igk_debug_wln(__FUNCTION__.":::table [".$table. "]");
            }
            if($condition == null){
                $e=igk_db_data_is_present($adapt, $table, $entry, $tabinfo);
            } else {
                $e=igk_db_data_is_present($adapt, $table, $condition, $tabinfo);
            }
            if(!$e){ 
                $r=$adapt->insert($table, $entry, $tabinfo);
            } 
            $adapt->close($leaveOpen);
        } else {
            igk_ilog("failed connect");
        }
        return $r;
    }
    else{
        igk_ilog("/!\\ Adapter is null or connected ....".$table);
    }
    return null;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="entries"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $entries
*/
function igk_db_insertc($ctrl, $entries){
    return igk_db_insert($ctrl, $ctrl->getDataTableName(), $entries, null);
}
///<summary> shortcut to add multiple entries on the table</summary>
///<param name="strict"> add stop if error dected</param>
/**
*  shortcut to add multiple entries on the table
* @param mixed $strict  add stop if error dected
*/
function igk_db_inserts($ad, $table, $entries, $strict=1){
    $error=1;
    foreach($entries as $v){
        $error=$ad->insert($table, $v) && $error;
        if(!$error && $strict){
            break;
        }
    }
    return !$error;
}
///<summary></summary>
///<param name="t"></param>
/**
* 
* @param mixed $t
*/
function igk_db_is_typelength($t){
    return preg_match("/(int|varchar|enum)/i", strtolower($t));
}
///<summary></summary>
/**
*
*/
function igk_db_is_user_authorized($s, $actionName, $strict=false, $authTable=IGK_TB_AUTHORISATIONS, 
$userGroupTable=IGK_TB_USERGROUPS, $userGroupAuthTable=IGK_TB_GROUPAUTHS){
    if(!is_object($s) || empty($actionName))
        return 0;
    $authTable = igk_db_get_table_name($authTable);
    $userGroupTable = igk_db_get_table_name($userGroupTable);
    $userGroupAuthTable = igk_db_get_table_name($userGroupAuthTable);

    $r=igk_db_table_select_row($authTable, array(IGK_FD_NAME=>$actionName));
    $v_r=false;
    if($r){
        $v_authid=$r->clId;
        $v_usergroup=igk_db_table_select_where($userGroupTable, array(IGK_FD_USER_ID=>$s->clId));
        if($v_usergroup->RowCount<=0)
            return $v_r;
        foreach($v_usergroup->Rows as $item){ 
            $q=igk_db_table_select_where($userGroupAuthTable, array(
                    IGK_FD_GROUP_ID=>$item->clGroup_Id,
                    IGK_FD_AUTH_ID=>$v_authid
                ));
            if($q && ($q->RowCount == 1)){
                $grant = $q->getRowAtIndex(0)->clGrant;
                // igk_wln("granting: ".$grant);
                if (!$v_r){
                    if ( $grant != 1){
                        if ($strict)
                        return false;
                    }
                    $v_r = true;
                } else {
                    if ( $grant != 1){                         
                        return false;
                    }
                }
            }
            else{
               // igk_wln("strick:::::".$strict);
                if (!$strict){                     
                    continue;
                } 
                break;
            }
        }
        //igk_wln("base ::: {$actionName} = ".$v_r);
        return $v_r;
    }
    else{
        $p=(object)array();
        $p->clName=$actionName;
        $ctrl=igk_db_get_datatableowner($authTable);
        if($ctrl)
            igk_db_insert($ctrl, $authTable, $p);
    }
    return $v_r;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="leaveopen" default="false"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $leaveopen the default value is false
*/
function igk_db_last_id($ctrl, $leaveopen=false){
    $db=igk_get_data_adapter($ctrl);
    $r=null;
    if($db){
        if($db->connect()){
            $r=$db->last_id();
            $db->close($leaveopen);
        }
        else{
            igk_debug_wln("<div class=\"igk-danger\" >/!\ connect to db failed [".__FUNCTION__."]</div>");
        }
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="file"></param>
/**
* 
* @param mixed $file
*/
function igk_db_load_data_and_entries_schemas($file, $ctrl=null){
    if(file_exists($file)){
        $d=IGKHtmlReader::LoadXMLFile($file);
        return igk_db_load_data_and_entries_schemas_node($d, $ctrl);
    }
    return null;
}
///<summary> load data schema from loaded node </summary>
/**
*  load data schema from loaded node
*/
function igk_db_load_data_and_entries_schemas_node($d, $ctrl=null){
    if ($d===null){ 
        igk_wln_e("data is null");
        return;
    }
    $n=$d->TagName == IGK_SCHEMA_TAGNAME ? $d: igk_getv($d->getElementsByTagName(IGK_SCHEMA_TAGNAME), 0);
    if($n){
        $obj=(object)array(
                "Data"=>null,
                "Entries"=>null,
                "Relations"=>null,
                "Version"=>1
            );
        $tab = array();
        $relation = array();
        $migrations = [];
        igk_db_load_data_schema_array($n, $tab, $relation, $migrations, $ctrl);
        $obj->Data=$tab;
        $obj->Relations=$relation;
        $obj->Version=$n["Version"] ?? $n["version"] ?? 1;
        $e=$n ? igk_getv($n->getElementsByTagName(IGK_ENTRIES_TAGNAME), 0): null;
        $tab=array();
        if($e)
            igk_db_load_entries_array($e, $tab, $ctrl);
        $obj->Entries=$tab;
        return $obj;
    }
    return null;
}
///<summary>get default entries from data schema</summary>
/**
* get default entries from data schema
*/
function igk_db_load_data_entries_schemas($file, $ctrl){
    $tab=array();
    if(file_exists($file)){ 
        $d=IGKHtmlReader::LoadXMLFile($file);
        $n=igk_getv($d->getElementsByTagName(IGK_SCHEMA_TAGNAME), 0);
        $n=$n ? igk_getv($n->getElementsByTagName(IGK_ENTRIES_TAGNAME), 0): null;
        if($n){
            igk_db_load_entries_array($n, $tab, $ctrl);
        }
    }
    return $tab;
}
///<summary>load data schema in array</summary>
/**
* load data schema in array
*/
function igk_db_load_data_schema_array($n, & $tab, & $tbrelation=null, & $migrations=null, $ctrl=null, $resolvname=true){
    $entries=$n->getElementsByTagName(IGKDbSchemas::ENTRIES_TAG);
    $tentries = [];
    if ($entries){
        foreach($n->getElementsByTagName(IGKDbSchemas::ROWS_TAG) as $v){
            if ($tb = $v["For"]){
                $tb = $resolvname ?  IGKSysUtil::GetTableName($tb, $ctrl) : $tb; 
                $rtab = [];
                foreach($v->getElementsByTagName("Row") as $item){
                    array_push($rtab, $item->getAttributes()->ToArray());
                }

                if (isset($tentries[$tb])){
                    $tentries[$tb] = array_merge($tentries[$tb], $rtab);
                }else {
                    $tentries[$tb] = $rtab;
                }
            }
        }
    }

    foreach($n->getElementsByTagName(IGK_DATA_DEF_TAGNAME) as $v){
        $c=array();
        $tb = $v["TableName"];
        if ($resolvname)
            $tb= IGKSysUtil::GetTableName($v["TableName"], $ctrl);
        foreach($v->getElementsByTagName(IGK_COLUMN_TAGNAME) as $vv){
            $cl = IGKDbColumnInfo::CreateWithRelation(igk_to_array($vv->Attributes), $tb, $ctrl, $tbrelation);           
            $c[$cl->clName] = $cl;
        } 
        $tab[$tb]=array(
                "ColumnInfo"=>$c,
                "Description"=>igk_getv($v,"Description"),
                "Entries"=>igk_getv($tentries, $tb)
            );
    }
    if ($resolvname && ($nmigrations = igk_getv($n->getElementsByTagName(IGKDbSchemas::MIGRATIONS_TAG), 0))){
        
        // | load migrations           
        foreach($nmigrations->getElementsByTagName(IGKDbSchemas::MIGRATION_TAG) as $mig){
            $v_m = new IGK\System\Database\SchemaBuilderMigration();
            $v_m->controller = $ctrl;
            foreach($mig->getChilds() as $c){
                if ($c instanceof IGKHtmlCommentItem)
                    continue; 
                $fc = $c->tagName;                                      
                $item = $v_m->$fc()->load($c);
                // igk_ilog("calltype:".$fc);
                switch(strtolower($fc)){
                    case "addcolumn":
                        // add extra column definion
                        $tb = IGKSysUtil::GetTableName($item->table, $ctrl);
                        $tabcl = & $tab[$tb]["ColumnInfo"]; 
                        foreach($c->getElementsByTagName(IGK_COLUMN_TAGNAME) as $vv){
                            $cl = IGKDbColumnInfo::CreateWithRelation(igk_to_array($vv->Attributes), $tb, $ctrl, $tbrelation);  
                            $tabcl[$cl->clName] = $cl;
                        }
                       // igk_wln_e(array_keys($tabcl), $tb);
                        break;
                    case "removecolumn":
                        $tb = IGKSysUtil::GetTableName($item->table, $ctrl);
                        $tabcl = & $tab[$tb]["ColumnInfo"];
                        $item->columnInfo = $tabcl[$item->column];
                        unset($tabcl[$item->column]);
                        break;
                    case "changecolumn":
                        $tb = IGKSysUtil::GetTableName($item->table, $ctrl);
                        $tabcl = & $tab[$tb]["ColumnInfo"];
                        $item->columnInfo = $tabcl[$item->column];
                        
                        foreach($c->getElementsByTagName(IGK_COLUMN_TAGNAME) as $vv){
                            $cl = IGKDbColumnInfo::CreateWithRelation(igk_to_array($vv->Attributes), $tb, $ctrl, $tbrelation);  
                            //igk_wln_e("change .....".$cl->clName);
                            $tabcl[$item->column] = $cl;
                        } 
                        break;
                    case "renamecolumn":
                        $tb = IGKSysUtil::GetTableName($item->table, $ctrl);
                        $tabcl = & $tab[$tb]["ColumnInfo"];                        
                        $column = $tabcl[$item->column];
                        $column->clName = $item->new_name;
                        $tabcl[$column->clName] = $column;
                        unset($tabcl[$item->name]);
                        break;

                }                     
            }
            $migrations[] = $v_m;
        } 
    } 
}
///<summary>load data from schema files</summary>
/**
* load data from schema files
*/
function igk_db_load_data_schemas($file, $ctrl=null, $resolvname=true){
    if (!file_exists($file)){
        return null;
    }
    return igk_db_load_data_schemas_node(IGKHtmlReader::LoadFile($file), $ctrl, $resolvname);
}
function igk_db_load_data_schemas_node($d, $ctrl=null, $resolvname=true){
    $tables=array();
    $migrations=[];
    $relations = [];
    if($d){
        $n=igk_getv($d->getElementsByTagName(IGK_SCHEMA_TAGNAME), 0);
        if($n){ 
            igk_db_load_data_schema_array($n, $tables, $relations, $migrations, $ctrl, $resolvname);           
        }
    } 
    return (object)compact("tables", "migrations", "relations");
}
///<summary>load db controller entries</summary>
///<param name="ctrl">controller</param>
///<param name="tablename">tablename</param>
///<param name="entries">entry to add</param>
/**
* load db controller entries
* @param mixed $ctrl controller
* @param mixed $tablename tablename
* @param mixed $entries entry to add
* @deprecated since 11.6 please use grammar object
*/
function igk_db_load_entries($ctrl, $tablename, $entries){
    $v_r=igk_db_create_row($tablename);
	if (!$v_r){
		return false;
	}
    $tabinfo=igk_db_getdatatableinfokey($tablename);
    foreach($entries as $e=>$ee){
        $v=igk_createobj();
        $b=(object)$ee;
        foreach($v_r as $k=>$v){
            if(($linktable=$tabinfo[$k]->clLinkType) && (isset($b->$k))){
                $mv=$b->$k;
                $cond=array();
                $r=null;
                if(preg_match("/\[\s*link\s*:\s*(?P<cond>([^\]]+))\]/", $mv, $cond)){
                    $r=$ctrl->select($linktable, array(igk_db_create_expression($cond["cond"])), ["Columns"=>[IGK_FD_ID=>"id"]])->getRowAtIndex(0);
                    if($r){
                        $b->$k=intval($r->id);
                    }
                    else
                        $b->$k=null;
                }
            }
            if(isset($b->$k)){
                $b->$k=$b->$k;
            }
            else{
                $b->$k=null;
            }
        }
        if(!$ctrl->insert($tablename, $b)){
            // igk_debuggerview()->addNotifyBox("error")->Content="insert failed ".$ctrl->getError();
            return false;
        }
    }
	return true;
}
///<summary>load entry data</summary>
///<param name="n"></param>
///<param name="tab" ref="true"></param>
/**
* 
* @param mixed $n
* @param mixed * $tab
*/
function igk_db_load_entries_array($n, & $tab, $ctrl){
    $child=$n->Childs;
    if(!$child)
        return;
    foreach($child as  $v){
        if($v->TagName !== IGK_ROWS_TAGNAME)
            continue;
        $tb= igk_db_get_table_name($v["For"], $ctrl);
        if(empty($tb))
            continue;
        $c=array();
        $ttb=$v->getElementsByTagName(IGK_ROW_TAGNAME);
        foreach($ttb as $kk=>$vv){
            $attr=$vv->Attributes;
            if($attr)
                $c[]=$attr->ToArray();
        }
        if(igk_count($c) > 0){
            $tab[$tb]=$c;
        }
    }
}
///<summary></summary>
///<param name="src"></param>
///<param name="dest" ref="true"></param>
/**
* 
* @param mixed $src
* @param mixed * $dest
*/
function igk_db_load_row($src, & $dest){
    $t=(array)$src;
    foreach($dest as $k=>$v){
        if(isset($t[$k]))
            $dest->$k=$t[$k];
    }
}
///<summary></summary>
///<param name="result"></param>
///<param name="p"></param>
/**
* 
* @param mixed $result
* @param mixed $p
*/
function igk_db_load_to_node($result, $p){
    if($result && $result->RowCount > 0){
        foreach($result->Rows as $v){
            $p->add("Item")->setAttributes($v);
        }
    }
}
///<summary>represent id-name</summary>
/**
* represent id-name
*/
function igk_db_name_id($r){
    return array("text"=>__($r->clName), "value"=>$r->clId);
}
///<summary>get or set the exception</summary>
/**
* get or set the exception
*/
function igk_db_no_exception($d=null){
    $k="db://no_exception";
    if(func_num_args() == 0)
        return igk_get_env($k);
    igk_set_env($k, $d);
    return $d;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="tab"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $tab
*/
function igk_db_objentries($ctrl, $tab){
    $ttab=$ctrl->getDataTableInfo();
    if(!$tab)
        return null;
    $v_otab=array();
    foreach($ttab as  $v){
        $tk=igk_getv($v, IGK_FD_NAME);
        $v_otab[$tk]=igk_getv($tab, $tk);
    }
    return $v_otab;
}
///<summary>used to prefilter unique element entry for selection</summary>
///<note>auto increment is ignored for that reason.</note>
/**
* used to prefilter unique element entry for selection
*/
function igk_db_prefilter_for_select($entry, $tabinfo){
    if($entry == null)
        return null;
    if($tabinfo == null){
        return null;
    }
    $t=array();
    $uniquecolumn=array();
    foreach($entry as $k=>$v){
        if(!isset($tabinfo[$k])){
            igk_wln("Column [$k] not found in table definition ".__FUNCTION__);
            igk_html_wln_log("TabInfo", $tabinfo);
            igk_html_wln_log("Entry", $entry);
            igk_wln(igk_show_trace());
            igk_exit();
        }
        $s=$tabinfo[$k];
        if($s->clAutoIncrement)
            continue;
        if($s->clIsUnique){
            $t[$k]=$v;
        }
        if($s->clIsUniqueColumnMember){
            $uniquecolumn[$k]=$v;
        }
    }
    if(igk_count($t) > 0)
        return $t;
    return null;
}
///<summary></summary>
///<param name="h"></param>
/**
* 
* @param mixed $h
*/
function igk_db_ref_keyinfo($h){
    $c=igk_getv($h, 'ColumnInfo');
    if($c)
        return igk_array_object_refkey($c, IGK_FD_NAME);
    return $h;
}
///<summary>call update of the reference obj</summary>
/**
* call update of the reference obj
*/
function igk_db_ref_update(& $ref){
    return igk_obj_call($ref, "update");
}
///<summary>register a global system controller</summary>
///<param name="n">name for global controller</param>
///<param name="ctrlobj">controller or objet for that purpose</param>
/**
* register a global system controller
* @param mixed $n name for global controller
* @param mixed $ctrlobj controller or objet for that purpose
*/
function igk_db_reg_sys_ctrl($n, $ctrlobj){
    $t=igk_app()->Session->getParam(IGKSession::SYSDB_CTRL);
    if(!is_array($t))
        $t=array();
    $t[$n]=$ctrlobj;
    igk_app()->Session->setParam(IGKSession::SYSDB_CTRL, $t);
}
///<summary></summary>
///<param name="name"></param>
///<param name="cgctrl" default="null"></param>
/**
* 
* @param mixed $name
* @param mixed $cgctrl the default value is null
*/
function igk_db_register_auth($name, $cgctrl=null){
    $table = igk_db_get_table_name(IGK_TB_AUTHORISATIONS);
    $cgctrl=$cgctrl ?? igk_db_get_datatableowner($table);
    if($cgctrl)
        igk_db_insert_if_not_exists($cgctrl, $table, array(IGK_FD_NAME=>$name));
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_db_register_group($name){
    $table = igk_db_get_table_name(IGK_TB_GROUPS);
    $cgctrl=igk_db_get_datatableowner($table);
    if($cgctrl)
        igk_db_insert_if_not_exists($cgctrl, $table, array(IGK_FD_NAME=>$name));
}
///<summary></summary>
///<param name="controllerOrAdapterName"></param>
///<param name="table"></param>
///<param name="dbname" default="null"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $controllerOrAdapterName
* @param mixed $table
* @param mixed $dbname the default value is null
* @param mixed $leaveOpen the default value is false
*/
function igk_db_reload_index($controllerOrAdapterName, $table, $dbname=null, $leaveOpen=false){
    $adapt=igk_get_data_adapter($controllerOrAdapterName, false);
    if($adapt){
        $adapt->connect($dbname);
        $r=$adapt->selectAll($table);
        $adapt->ClearTable($table);
        $i=1;
        foreach($r->Rows as $v){
            $v->clId=$i;
            $adapt->insert($table, $v);
            $i++;
        }
        $adapt->close($leaveOpen);
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="u"></param>
///<param name="app"></param>
/**
* 
* @param mixed $u
* @param mixed $app
*/
function igk_db_resolv_app_uri($u, $app){
    if(preg_match("/^app:/i", $u)){
        $u=substr($u, 4);
    }
    if(IGKValidator::IsUri($u))
        return $u;
    return $app->getAppUri($u);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="schema"></param>
///<param name="error" default="null" ref="true"></param>
///<param name="ad" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $schema
* @param mixed * $error the default value is null
* @param mixed $ad the default value is null
*/
function igk_db_restore_backup_data($ctrl, $schema, & $error=null, $ad=null){
    if(is_string($schema)){
        $schema=IGKHtmlReader::Load($schema, "xml");
    }
    $e=igk_getv($schema->getElementsByTagName("Entries"), 0);
    $ad=$ad ?? igk_get_data_adapter($ctrl);
    $error=$error ?? [];
    if($e && $ad->connect()){
        $ad->stopRelationChecking();
        foreach($e->getElementsByTagName("Rows") as $row){
            $table=$row["For"];
            foreach($row->getElementsByTagName("Row") as $item){
                $tab=$item->getAttributes()->ToArray();
                if(igk_count($tab) > 0){
                    try {
                        igk_db_insert_if_not_exists($ad, $table, $tab);
                    }
                    catch(Exception $ex){
                        $error[]=$ex->getMessage();
                    }
                }
            }
        }
        $ad->restoreRelationChecking();
        $ad->close();
    }
    else{
        igk_ilog("no entries or no adapter found");
    }
    return $schema;
}
///<summary> restore backup data from schema </summary>
///<param name="adapter">the adapter to use</param>
///<param name="schema">mixed : schema to use. if string load xml, or xml schema load object </param>
/**
*  restore backup data from schema
* @param mixed $adapter the adapter to use
* @param mixed $schema mixed : schema to use. if string load xml, or xml schema load object
*/
function igk_db_restore_backup_data_adapter($adapter, $schema, & $error){
    if(is_string($schema)){
        $schema=IGKHtmlReader::Load($schema, "xml");
    }
    $e=igk_getv($schema->getElementsByTagName("Entries"), 0);
    $ktinfo=igk_db_load_data_and_entries_schemas_node($schema);
    $ad=$adapter;
    $error=$error ?? [];
    if($e && $adapter->connect()){
        $ad->stopRelationChecking();
        foreach($e->getElementsByTagName("Rows") as $row){
            $table=$row["For"];
            $autoinc=null;
            $tabinfo=igk_db_column_info($ktinfo, $table, $autoinc);
            foreach($row->getElementsByTagName("Row") as $item){
                $tab=$item->getAttributes()->ToArray();
                if(igk_count($tab) > 0){
                    try {
                        if($autoinc)
                            unset($tab[$autoinc]);
                        $present=igk_db_data_is_present($adapter, $table, $tab, $tabinfo);
                        if(!$present){
                            igk_db_insert($adapter, $table, $tab);
                        }
                    }
                    catch(Exception $ex){
                        $error[]=$ex->getMessage();
                    }
                }
            }
        }
        $ad->restoreRelationChecking();
        $ad->close();
    }
    else{
        igk_ilog("no entries or no adapter found", __FUNCTION__);
    }
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="tablename"></param>
///<param name="conditions" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $tablename
* @param mixed $conditions the default value is null
*/
function igk_db_select($ctrl, $tablename, $conditions=null){
    $db=igk_get_data_adapter($ctrl);
    $r=null;
    if($db){
        if($db->connect()){
            try { 
                $r=$db->selectAndWhere($tablename, $conditions);
            }
            catch(Exception $ex){
                igk_push_env("sys://lasterror", $ex);
            }
            $db->close();
        }
    }
    return $r;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="tablename" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $tablename the default value is null
*/
function igk_db_select_all($ctrl, $tablename=null){
    return igk_db_select($ctrl, $tablename ? $tablename: $ctrl->DataTableName);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="andcondition"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $andcondition
*/
function igk_db_select_wherec($ctrl, $andcondition){
    $db=igk_get_data_adapter($ctrl);
    $r=null;
    if($db){
        $db->connect();
        try {
            $r=$db->selectAndWhere($ctrl->DataTableName, $andcondition);
        }
        catch(Exception $ex){
            igk_log_write_i("error", $ex);
        }
        $db->close();
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="controllerOrAdpaterName"></param>
///<param name="query"></param>
///<param name="dbname" default="null"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $controllerOrAdpaterName
* @param mixed $query
* @param mixed $dbname the default value is null
* @param mixed $leaveOpen the default value is false
*/
function igk_db_send_query($controllerOrAdpaterName, $query, $dbname=null, $leaveOpen=false){
    $adapt=igk_get_data_adapter($controllerOrAdpaterName, false);
    if($adapt && method_exists(get_class($adapt), "sendQuery")){
        $adapt->connect($dbname);
        foreach(explode(";", $query) as $v){
            $v=trim($v);
            if(!empty($v)){
                try {
                    $r=$adapt->sendQuery($v);
                }
                catch(Exception $exception){}
            }
        }
        $adapt->close($leaveOpen);
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="u"></param>
///<param name="n"></param>
///<param name="value"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $u
* @param mixed $n
* @param mixed $value
*/
function igk_db_set_configup($ctrl, $u, $n, $value){
    $key=strtolower($ctrl->getName())."://".$u->clLogin."/".$n;
    return igk_getctrl(IGK_BDCONFIGS_CTRL)->setConfigv($key, $value);
}
///<summary></summary>
///<param name="identifier"></param>
///<param name="name"></param>
///<param name="date" default="null"></param>
/**
* 
* @param mixed $identifier
* @param mixed $name
* @param mixed $date the default value is null
*/
function igk_db_store_cookie($identifier, $name, $date=null){
    $identifier || igk_die("store cookie identifier is null. Not Allowed");
    $table = igk_db_get_table_name(IGK_TB_COOKIESTORE);
    $ctrl=igk_db_get_datatableowner($table);
    return igk_db_insert_if_not_exists($ctrl, $table, array(
            "clIdentifier"=>$identifier,
            IGK_FD_NAME=>$name,
            "clDateTime"=>$date
        ));
}
///<summary>evaluate expression according to row</summary>
/**
* evaluate expression according to row
*/
function igk_db_sync_key_eval($row, $expression){
    return eval("return \"{$expression}\";");
}
///<summary></summary>
///<param name="km" ref="true"></param>
///<param name="m" ref="true"></param>
///<param name="k"></param>
/**
* 
* @param mixed * $km
* @param mixed * $m
* @param mixed $k
*/
function igk_db_sync_push_data(& $km, & $m, $k){
    if(!isset($km[$k])){
        $m['key'] .= empty($m['key']) ? $k: ','.$k;
        $km[$k]=1;
    }
}
///<summary>synchronise data of this controller to dataadapter</summary>
///<remark>function init with required links</remark>
/**
* synchronise data of this controller to dataadapter
*/
function igk_db_sync_todb($ctrl, $adapter=null, $callinit=null){
    $ad=$adapter != null ? igk_get_data_adapter($adapter): igk_get_data_adapter($ctrl);
    if(!$ad || !$ad->connect() || !igk_is_conf_connected())
        return false;
    $dbctrl=igk_getctrl(IGK_MYSQL_DB_CTRL);
    $tables=$dbctrl->getTablesFor($ctrl, true);
    $ad->initForInitDb();
    $tc=$tables;
    $init = [];
    foreach($tc as $v){
        $c=$dbctrl->getDataTableCtrl($v);
        if($c === $ctrl)
            continue;
        if($c && !isset($init[$c->Name])){
            $c->initDb();
            $init[$c->Name]=1;
            unset($tables[$c->Name]);
        }
    }
    $ctrl->initDb();
    $ad->flushForInitDb();
    $ad->close();
    return true;
}
///<summary>get installed system controller</summary>
///<param name="n">name for global controller</param>
/**
* get installed system controller
* @param mixed $n name for global controller
*/
function igk_db_sys_ctrl($n){
    $t=igk_app()->Session->getParam(IGKSession::SYSDB_CTRL);
    if($t){
        return igk_getv($t, $n);
    }
    return null;
}
///<summary></summary>
///<param name="table"></param>
///<param name="andcondition" default="null"></param>
///<param name="adapter" default="IGK_MYSQL_DATAADAPTER"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $table
* @param mixed $andcondition the default value is null
* @param mixed $adapter the default value is IGK_MYSQL_DATAADAPTER
* @param mixed $leaveOpen the default value is false
*/
function igk_db_table_count_where($table, $andcondition=null, $adapter=IGK_MYSQL_DATAADAPTER, $leaveOpen=false){
    $db=igk_get_data_adapter($adapter);
    $r=null;
    if($db){
        if($db->connect()){
            try {
                $r=$db->selectCount($table, $andcondition);
            }
            catch(Exception $ex){
                igk_ilog($ex, "BLF - SQL Error");
            }
            $db->close();
        }
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_db_table_exists($ctrl){
    $v=igk_db_table_count_where(igk_db_get_table_name($ctrl->getDataTableName(), $ctrl), null, $ctrl);
    return $v;
}
///<summary>filter object to fit table definition data</summary>
/**
* filter object to fit table definition data
*/
function igk_db_table_filter_data($table, $obj){
    $tobj=igk_db_create_row($table);
    if($tobj){
        if($obj && (is_object($obj) || is_array($obj))){
            foreach($tobj as $k=>$v){
                $tobj->$k=igk_getv($obj, $k);
            }
        }
    }
    return $tobj;
}
///<summary></summary>
///<param name="table"></param>
///<param name="condition"></param>
///<param name="ctrl" default="null"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $table
* @param mixed $condition
* @param mixed $ctrl the default value is null
* @param mixed $leaveOpen the default value is false
*/
function igk_db_table_select_relationnal_where($table, $condition, $ctrl=null, $leaveOpen=false){
    ///TODO: DB SELECT RELATIONAL	- not yet implement
    throw new Exception("Not implement ". __FUNCTION__);
}
///<summary>select single row</summary>
/**
* select single row
*/
function igk_db_table_select_row($table, $id, $controllerOrAdapterName=IGK_MYSQL_DATAADAPTER, $leaveopen=false){
    $k=null;
    if(is_array($id))
        $k=$id;
    else if(is_object($id))
        $k=(array)$id;
    else
        $k=array(IGK_FD_ID=>$id);
    $r=igk_db_table_select_where($table, $k, $controllerOrAdapterName, $leaveopen);
    if($r && ($r->RowCount == 1))
        return $r->getRowAtIndex(0);
    return null;
}

function igk_db_count_rows($table, $conditions=null, $adapter=IGK_MYSQL_DATAADAPTER){
    if ($ad = igk_get_data_adapter($adapter)){
        if ($ab = $ad->selectCount($table, $conditions)){
            $r = $ab->getRowAtIndex(0);
            return $r->count;
        }
    }
    return null;

}
///<summary></summary>
///<param name="table"></param>
///<param name="andcondition" default="null"></param>
///<param name="adapter" default="IGK_MYSQL_DATAADAPTER"></param>
///<param name="leaveOpen" default="false"></param>
///<param name="options" default="null"></param>
/**
* 
* @param mixed $table
* @param mixed $andcondition the default value is null
* @param mixed $adapter the default value is IGK_MYSQL_DATAADAPTER
* @param mixed $leaveOpen the default value is false
* @param mixed $options the default value is null
*/
function igk_db_table_select_where($table, $andcondition=null, $adapter=IGK_MYSQL_DATAADAPTER, $leaveOpen=false, $options=null){
    $db=igk_get_data_adapter($adapter);
    $isad=$adapter == $db;
    $r=null;
    if($db){
        if(!$isad && !$db->connect()){
            if(!igk_sys_env_production()){
                igk_ilog(__FUNCTION__.":Connexion failed");
            }
            return $r;
        }
        try { 
            $r=$db->selectAndWhere($table, $andcondition, $options);
        }
        catch(Exception $ex){
            igk_elog("error", $ex);
        }
        if(!$isad)
            $db->close($leaveOpen);
    }
    return $r;
}
///<summary></summary>
///<param name="tablename"></param>
///<param name="where" default="null"></param>
/**
* 
* @param mixed $tablename
* @param mixed $where the default value is null
*/
function igk_db_table_xmlview_response($tablename, $where=null){
    $tb=igk_createnode("DataTable");
    $tb["name"]=$tablename;
    $dataentry=$tb->addDataEntry();
    $dataentry->LoadData(igk_db_table_select_where($tablename, $where));
    $e=IGKHtmlItem::CreateWebNode("XmlViewer");
    $e->Load($dataentry);
    return $e->Render(null);
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_db_unreg_sys_ctrl($n){
    $t=igk_app()->Session->getParam(IGKSession::SYSDB_CTRL);
    if(isset($t[$n])){
        unset($t[$n]);
        igk_app()->Session->setParam(IGKSession::SYSDB_CTRL, $t);
    }
}
///<summary></summary>
///<param name="controllerOrAdpaterName"></param>
///<param name="table"></param>
///<param name="entry"></param>
///<param name="where" default="null"></param>
///<param name="dbname" default="null"></param>
///<param name="leaveOpen" default="false"></param>
/**
* 
* @param mixed $controllerOrAdpaterName
* @param mixed $table
* @param mixed $entry
* @param mixed $where the default value is null
* @param mixed $dbname the default value is null
* @param mixed $leaveOpen the default value is false
*/
function igk_db_update($controllerOrAdpaterName, $table, $entry, $where=null, $dbname=null, $leaveOpen=false){
    $adapt=igk_get_data_adapter($controllerOrAdpaterName, false, $leaveOpen);
    if($adapt){
        $adapt->connect($dbname);
        $r=$adapt->update($table, $entry, $where == null ? array(IGK_FD_ID=>$entry->clId): $where);
        if(!$r && IGKApp::$DEBUG){
            igk_log_write_i("udpate error", igk_debuggerview()->getMessage());
        }
        $adapt->close($leaveOpen);
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="identifier"></param>
///<param name="name"></param>
///<param name="date" default="null"></param>
/**
* 
* @param mixed $identifier
* @param mixed $name
* @param mixed $date the default value is null
*/
function igk_db_update_cookie($identifier, $name, $date=null){
    $table = igk_db_get_table_name(IGK_TB_COOKIESTORE);
    $ctrl=igk_db_get_datatableowner($table);
    return igk_db_update($ctrl, $table, array(
            "clIdentifier"=>$identifier,
            IGK_FD_NAME=>$name,
            "clDateTime"=>$date
    ));
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_db_update_ctrl_db($ctrl){
    if(!$ctrl){
        return 0;
    }
    $schema=igk_db_backup_ctrl($ctrl);
    $dataxml=($schema) ? $schema->Render(): null;
    $ctrl->resetDb(0);
    if($dataxml){
        $error=[];
        igk_db_restore_backup_data($ctrl, $dataxml, $error);
    }
    $file=$ctrl->getDataDir()."/dbbackup/".date("YmdHis").".db.bck.xml";
    igk_io_w2file($file, $dataxml);
}
///<summary>get system user groups</summary>
///<param name="u">mixed id or user object</param>
/**
* get system user groups
* @param mixed $u mixed id or user object
*/
function igk_db_user_groups($u){
    //$cgctrl=igk_db_get_datatableowner(IGK_TB_USERGROUPS);
    $id=$u;
    if(is_object($u))
        $id=$u->clId;
    $r=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USERGROUPS), array("clUser_Id"=>$id));
    $g=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPS));
    $o=array();
    foreach($r->Rows as  $v){
        $o[$v->clGroup_Id] =$g->Rows[$v->clGroup_Id]->clName;
    }
    return $o;
}

/**
 * db view result
 */
function igk_db_view_result_node($result, $uri , $selected, $max=-1, $target=null){
    if(!$result || !igk_reflection_class_implement($result, 'IIGKQueryResult')){
        return null;
    }
    $n=igk_createnotagnode();
    $r=$n->addTable();
    if($result->getResultType() == "boolean"){
        $tr=$r->addTr();
        $tr->add("th")->Content="result";
        $tr=$r->addTr();
        $tr->addTd()->Content=$result->getRowAtIndex(0);
        return $r;
    }
    $tr=$r->addTr();
    $key=array();
    foreach($result->Columns as $v){
        $tr->add("th")->Content=$v->name;
        $key []=$v->name;
    }
    if($max > 0){ 
        igk_html_paginate($r, $n, $result->Rows, $max, function($table, $k, $v) use ($key){
            $tr=$table->addTr();
            foreach($key as $j){
                $tr->addTd()->Content=$v->$j;
            }
        }
        , $uri, $selected , $target);
    }
    else{
        foreach($result->Rows as $v){
            $tr=$r->addTr();
            foreach($key as $j){
                $tr->addTd()->Content=$v->$j;
            }
        }
    }
    return $n;
}
///<summary>set if APP DEBUG activity</summary>
/**
* set if APP DEBUG activity
*/
function igk_debug($d){
    IGKApp::$DEBUG=$d;
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_debug_die($msg){
    if(igk_is_debug()){
        igk_die($msg);
    }
}
///<summary></summary>
/**
* 
*/
function igk_debug_flush_data($msg=""){
    if(IGKApp::$DEBUG){
        igk_flush_data($msg);
    }
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_debug_or_local_die($msg){
    if(igk_is_debug() || igk_server_is_local()){
        igk_die($msg);
    }
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_debug_show($msg){
    if(!IGKApp::IsInit())
        return;
    if(IGKServerInfo::IsLocal()){
        $tab=explode(':', $msg);
        $ctrl=igk_getctrl("igkdebugctrl", false);
        if($ctrl == null)
            return;
        $lb=igk_createnode("div");
        if(count($tab) > 1){
            $args=array();
            preg_match_all('/((?P<name>([^:]+)):(?P<value>(.)*))$/i', $msg, $args);
            $n=strtolower(trim($args["name"][0]));
            switch($n){
                case "warning":
                case "error":
                case "notice":
                case "info":
                $lb["class"]="igk-debug-".$n;
                $lb->Content=$args["value"][0];
                $ctrl->addMessage($lb);
                break;default:
                $lb["class"]="igk-debug-msg";
                $lb->Content=$msg;
                $ctrl->addMessage($lb);
                break;
            }
        }
        else{
            $lb["class"]="igk-debug-msg";
            $lb->Content=$msg;
            $ctrl->addMessage($lb);
        }
    }
}
///<summary></summary>
/**
* 
*/
function igk_debug_show_dump_info(){
    igk_show_prev($_REQUEST);
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_debug_wl($msg){
    if(IGKApp::$DEBUG){
        igk_wln($msg);
    }
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_debug_wln($msg){
    if(IGKApp::$DEBUG){
        call_user_func_array('igk_wln', func_get_args());
    }
}
///<summary></summary>
///<param name="condition"></param>
///<param name="tag"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $condition
* @param mixed $tag
* @param mixed $msg
*/
function igk_debug_wln_a_i($condition, $tag, $msg){
    if($condition){
        igk_debug_wln_i($tag, $msg);
    }
}
///<summary></summary>
///<param name="tag"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $tag
* @param mixed $msg
*/
function igk_debug_wln_i($tag, $msg){
    igk_debug_wln("[$tag] - $msg");
}
///<summary></summary>
///<param name="die" default="true"></param>
/**
* 
* @param mixed $die the default value is true
*/
function igk_debuggerview($die=true){
    if(IGKApp::IsInit() && ($ctrl=igk_getctrl(IGK_DEBUG_CTRL))){
        return $ctrl->getDebuggerView();
    }
    return null;
}
///<summary>return an array of default sys ignored folder keys</summary>
/**
* return an array of default sys ignored folder keys
*/
function igk_default_ignore_lib($dir=null){
    $tk=array(
            IGK_LIB_FOLDER=>1,
            IGK_CONF_FOLDER=> 1, 
            IGK_DATA_FOLDER=>1,
            IGK_VIEW_FOLDER=>1,
            IGK_CONTENT_FOLDER=>1,
            IGK_SCRIPT_FOLDER=>1
        );
    if($dir){
        $keys=array_keys($tk);
        foreach($keys as $m){
            $tk[igk_html_uri($dir.'/'.$m)
            ]=1;
        }
    }
    return $tk;
}
///<summary></summary>
///<param name="path"></param>
/**
* 
* @param mixed $path
*/
function igk_delete_module($path){
    $dir=igk_get_module_dir(). "/{$path}";
    if(!file_exists($dir)){
        return 0;
    }
    $r=1;
    IGKIO::RmDir($dir, true);
    return $r;
}
///<summary></summary>
///<param name="obj"></param>
///<param name="closures" ref="true"></param>
/**
* 
* @param mixed $obj
* @param mixed * $closures
*/
function igk_detect_closure($obj, & $closures){
    $tq=array(array("v"=>$obj, "path"=>"."));
    $found=false;
    $where=null;
    $path=".";
    $obj_found=array();
    $idx=0;
    $depth=0;
    $closures=array();
    $first=0;
    $debug=0;
    while($cq=array_pop($tq)){
        $q=$cq["v"];
        $path=$cq["path"];
        $depth++;
        if(igk_is_closure($q)){
            $found=1;
            $closures[]=$path;
            if($first)
                break;
            continue;
        }
        if(is_object($q)){
            $hash=spl_object_hash($q);
            if(isset($obj_found[$hash])){
                $obj_found[$hash]->ref++;
                continue;
            }
            $obj_found[$hash]=(object)array("idx"=>$idx, "ref"=>1, "path"=>$path);
            $idx++;
            $r=new ReflectionClass($q);
            $tab=$r->getProperties(ReflectionProperty::IS_PRIVATE);
            $gr=$r;
            while($parent=$gr->getParentClass()){
                $pc=$parent->getName();
                $gr=new ReflectionClass($pc);
                $cpt=$gr->getProperties(ReflectionProperty::IS_PRIVATE | ReflectionProperty::IS_PUBLIC);
                $tab=array_merge($tab, $cpt);
            }
            $treated=array();
            foreach($tab as $v){
                $prop=$v;
                $ns="\0".$v->class."\0".$v->name;
                if($prop->isStatic() || isset($treated[$ns]) || isset($treated[$v->name]))
                    continue;
                if($prop->isPublic()){
                    $treated[$v->name]=1;
                }
                $treated[$ns]=1;
                $prop->setAccessible(true);
                $gvb=$prop->getValue($q);
                if($gvb === null)
                    continue;
                if(igk_is_closure($gvb)){
                    $found=true;
                    $closures[]=$path."/{$v->name}";
                    if($first)
                        break 2;
                    continue;
                }
                if(is_array($gvb)){
                    foreach($gvb as $kk=>$vv){
                        array_unshift($tq, array("v"=>$vv, "path"=>$path."/{$v->name}/{$kk}"));
                    }
                }
                else if(is_object($gvb)){
                    array_unshift($tq, array("v"=>$gvb, "path"=>$path."/{$v->name}"));
                }
            }
            foreach($q as $c=>$m){
                if(($m === null) || isset($treated[$c]))
                    continue;
                if(igk_is_closure($m)){
                    $found=1;
                    $closures[]=$path."/{$c}";
                    if($first)
                        break 2;
                }
                else if(is_object($m)){
                    array_push($tq, array("v"=>$m, "path"=>$path."/{$c}"));
                }
                else if(is_array($m)){
                    foreach($m as $kk=>$cc){
                        array_push($tq, array("v"=>$cc, "path"=>$path."/{$c}/{$kk}"));
                    }
                }
            }
        }
        else if(is_array($q)){
            foreach($q as $kk=>$vv){
                array_unshift($tq, array("v"=>$vv, "path"=>$path."/{$kk}"));
            }
        }
    }
    return $found;
}
///<summary>die with message</summary>
///<param name="msg">mixed value. error_array|string.</param>
///<param name="throwex">bool throw exception</param>
/**
* die with message
* @param mixed $msg value. error_array|string.
* @param mixed $throwex bool throw exception
* @throws Exception
*/
function igk_die($msg=IGK_DIE_DEFAULT_MSG, $throwex=1, $code=400){
    if($throwex){
        if(is_array($msg)){
            $t=$msg;
            $msg="";
            if(isset($t["code"]))
                $msg .= "<div>code:{$t['code']}</div>";
            if(isset($t["message"]) && ($m=$t["message"])){
                if(is_array($m)){
                    $msg .= "<div>Message: ";
                    foreach($m as $r){
                        $msg .= "<li>".$r."</li>";
                    }
                    $msg .= "</div>";
                }
                else{
                    $msg .= "<div>Message: {$m} </div>";
                }
            }
        } 
        // | Last Exception
        // igk_trace();
        // igk_exit();
		throw new IGKException($msg, $code);
    }
    else{
        ob_clean();
        igk_set_header($code);
        echo $msg;
        igk_exit();
    }
}
///<summary>die by setting code values</summary>
/**
* die by setting code values
*/
function igk_die_e($c){
    $e=igk_getv(igk_get_env("sys://errors"), $c, $c);
    igk_die($e);
}
function igk_die_notimplement($methodName){
    igk_die(__("{0} Not implement", $methodName));
}
function igk_die_m($m){
    igk_die_notimplement($m);
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_die_format($msg){
    return "<div>message : <i>".$msg."</i></div>";
}
///<summary></summary>
///<param name="callable"></param>
///<param name="obj"></param>
///<param name="method"></param>
///<param name="args"></param>
/**
* 
* @param mixed $callable
* @param mixed $obj
* @param mixed $method
* @param mixed $args the default value is
*/
function igk_dispatch_call($callable, $obj, $method, $args=array()){
    if(method_exists($obj, $method)){
        call_user_func_array($callable, array_merge(array($obj, $method), $args));
    }
}
///<summary>dispatch message to a specific controller</summary>
/**
* dispatch message to a specific controller
*/
function igk_dispatch_message($source, $c, $params){
    $bck=array("sess_id"=>session_id(), "sess"=>$_SESSION);
    session_write_close();
    $actionctrl=igk_getctrl(IGK_SYSACTION_CTRL);
    $uri=igk_io_baseuri()."/".$actionctrl->getUri("dispatchMessage");
    igk_wln(igk_curl_post_uri($uri, array(
            "ctrl"=>$c->getName(),
            "classname"=>get_class($c),
            "source"=>$source->getName(),
            "uri"=>"/".implode("/",
            $params)
        ), null, igk_get_platform_header_array()));
    if($bck){
        igk_bind_session_id($bck["sess_id"]);
        session_start();
        $_SESSION=$bck["sess"];
    }
}
///<summary>call this func to render a display object. other way for toString class method</summary>
/**
* call this func to render a display object. other way for toString class method
*/
function igk_display($obj, $keyTab=null){
    if($keyTab){
        $c=igk_get_env("sys://tabdisplay/".$keyTab);
        if($c){
            if(is_callable($c)){
                return $c($obj);
            }
            else{
                igk_wln("no display bind");
            }
        }
    }
    if(isset($obj->clName))
        return $obj->clName;
    if(isset($obj->clId))
        return $obj->clId;
}
///<summary>enable display error</summary>
/**
* enable display error
*/
function igk_display_error($a){
    if($a){
        ini_set("display_errors", "1");
        switch(igk_server()->ENVIRONMENT){
            case "development":
                error_reporting(-1);
                ini_set('display_errors', 1);
            break;
            default: 
                error_reporting(E_ALL | E_STRICT | E_NOTICE);
                ini_set('error_reporting', E_ALL | E_STRICT);
            break;
        }
    }
    else{
        ini_set("display_errors", "0");
    }
}

function igk_form_input_type($type){
    return IGKHtmlUtils::GetInputType($type);
}
///<summary></summary>
///<param name="doc"></param>
/**
* 
* @param mixed $doc
*/
function igk_doc_add_ie_meta_compatibility($doc){
    $meta=igk_createnode("meta");
    $meta["http-equiv"]="X-UA-Compatible";
    $meta[IGKHtmlMetaManager::ATTR_CONTENT]="IE=edge";
    $doc->Metas->addMeta("X-UA-Compatible-Edge", $meta);
}
///<summary></summary>
///<param name="doc"></param>
///<param name="script"></param>
///<param name="tag"></param>
///<param name="global" default="true"></param>
/**
* 
* @param mixed $doc
* @param mixed $script
* @param mixed $tag
* @param mixed $global the default value is true
*/
function igk_doc_add_lib_script($doc, $script, $tag, $global=true){

    if(file_exists($script))
        return $doc->addScript($script, $tag, $global);
    return null;
}
///<summary>use this to add tempory script to document</summary>
/**
* use this to add tempory script to document
*/
function igk_doc_add_tempscript($doc, $script, $onlyonce=1, $attr=null){
    if(igk_is_ajx_demand()){
        $k="sys://js/tempscripts/";
        $c=igk_get_env($k, array());
        if(isset($c[$script]))
            return $c[$script];
        $js=igk_createnotagnode();
        $o=null;
        if(file_exists($script)){
            $o=$js->addScript()->setContent(igk_io_read_allfile($script));
            $o->deactivate("defer");
        }
        else{
            $o=$js->addScript($script);
        }
        if($attr){
            $o->setAttributes($attr);
        }
        $o["autoremove"]="1";
        if(!defined("IGK_NO_WEB")){
            $js->RenderAJX();
        }
        $c[$script]=$js;
        igk_set_env($k, $c);
        return $o;
    }
    else
        return $doc->addTempScript($script, $onlyonce);
}
///<summary></summary>
///<param name="doc"></param>
/**
* 
* @param mixed $doc
*/
function igk_doc_enable_mobile_app($doc){
    $meta=igk_createnode("meta");
    $meta["name"]="mobile-web-app-capable";
    $meta[IGKHtmlMetaManager::ATTR_CONTENT]="yes";
    $doc->Metas->addMeta("mobile-web-app-capable", $meta);
}
///<summary></summary>
///<param name="doc"></param>
/**
* 
* @param mixed $doc
*/
function igk_doc_is_global($doc){
    return igk_app()->Doc === $doc;
}
///<summary> load temporary script to tempScriptListener</summary>
///<param name="doc" > the document where to load</param>
///<param name="folder" type="mixed"> string|array the folder of target scripts</param>
/**
*  load temporary script to tempScriptListener
* @param mixed $doc  the document where to load
* @param mixed folder  string|array the folder of target scripts
*/
function igk_doc_load_temp_script($doc, $folder, $tag=null, $strict=0){
    $options="";
    $created=0;
	$is_prod = igk_environment()->is("production") ;
    if(is_array($folder)){
        $btab=$folder;
        $folder= igk_getv($btab, "folder");
        $init= igk_getv($btab, "callback");
        $mergescript=igk_getv($btab, "mergescript");
        $cachedir=igk_io_cacheddist_jsdir();
        if($tag)
            $cachedir .= "/{$tag}";
        else
            igk_die("tagname is required");
        if($is_prod){
            if(!file_exists($cachegen=$cachedir."/.cache")){
                igk_cache_gen_cache($folder, $cachedir, $mergescript);
                igk_io_w2file($cachegen, json_encode((object)array("date"=>date("Ymd"), "tag"=>$tag)));
                igk_hook(IGKEvents::HOOK_CACHE_RES_CREATED, array());
                $created=1;
            }
        }
        if(is_callable($init)){
            $init($doc, $folder, $created);
        }
        return;
    }
    $c=0;
    if($is_prod){
        if(is_dir($folder)){
            $uid="";
            if($strict && $tag){
                $uid=$tag;
            }
            else
                $uid=(($tag) ? ($tag."-"): '').uniqid();
            $f=igk_html_uri(igk_io_cacheddist_jsdir()."/{$uid}.js");
            if(file_exists($f)){
                $doc->addTempScript($f, 1)->activate("defer");
            }
            else{
                $u="!@res/Scripts/".$uid;
                $doc->addTempScript($u.($strict ? "?strict=1".$options: ""), 1)->activate("defer");
                $doc->setParam("scripts/".$uid, $folder);
            }
            $c=1;
        }
        return $c;
    }
    igk_io_getfiles($folder, function($f) use (& $c, $doc){
        if(preg_match("/\.js$/i", $f)){
            $doc->addTempScript($f)->activate("defer");
            $c++;
        }
    });
    return $c;
}
///<summary>set the favicon to this document</summary>
///<param name="doc">IGKHtmlDocument </param>
///<param name="f">relative or fullpath to the favicon file </param>
/**
* set the favicon to this document
* @param mixed $doc IGKHtmlDocument
* @param mixed $ relative or fullpath to the favicon file
*/
function igk_doc_set_favicon($doc, $f){
    $doc->setFavicon($f);
}
///<summary>shortcut :  set meta do document</summary>
/**
* shortcut : set meta do document
*/
function igk_doc_set_meta($doc, $name, $content){
    $sm=$doc->Metas;
    $meta=$sm->getMetaById($name);
    if($meta == null){
        $meta=igk_createnode("meta");
        $doc->Metas->addMeta($name, $meta);
    }
    if($content == null){
        $doc->Metas->rmMeta($name);
    }
    else{
        $meta["name"]=$name;
        $meta[IGKHtmlMetaManager::ATTR_CONTENT]=$content;
    }
}
///<summary>@@@used to download content</summary>
/**
* @@@used to download content
*/
function igk_download_content($name, $size, $content, $encoding="binary", $exit=true){
    header("Content-Type: Application/force-download; name=\"". $name. "\"");
    header("Content-Transfer-Encoding: ".$encoding);
    header("Content-Length: $size");
    header("Content-Disposition: attachment; filename=\"". $name. "\"");
    header("Expires: 0");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    igk_set_env(IGK_ENV_NO_TRACE_KEY, 1);
    ob_clean();
    igk_wl($content);
    if($exit)
        igk_exit();
}
///ask to download file
/**
*/
function igk_download_file($name, $filename, $encoding="binary", $exit=1){
    if(file_exists($filename)){
        $size=@filesize($filename);
        ob_clean();
        igk_download_content($name, $size, IGKIO::ReadAllText($filename), $encoding, $exit);
    }
}
///<summary>dump value</summary>
/**
* dump value
*/
function igk_dump($v){
    $callers=debug_backtrace();
    $from=igk_getv($callers, 0);
    $d=igk_createnode('div');
    $d["class"]="igk-dump";
    $l=$d->add('span');
    $l->add("i")->Content=$from["file"];
    $l->addText(':');
    $l->add("b")->Content=$from["line"];
    if(is_object($v)){
        $st="{";
        $h=0;
        foreach($v as $k=>$s){
            if($h){
                $st .= ', <br />';
            }
            $st .= "<font color='red'>\"{$k}\"</font>=&gt;";
            if(is_object($s)){
                $st .= 'Object T';
            }
            else if(is_array($s)){
                $st .= 'Array T';
            }
            else{
                $st .= $s;
            }
            $h=1;
        }
        $st .= "}";
        $d->addDiv()->Content=$st;
    }
    else if(is_array($v)){
        $st="[";
        $h=0;
        foreach($v as $k=>$s){
            if($h){
                $st .= '</span>, <br /> ';
            }
            $st .= "<span><font color='red'>\"{$k}\"</font>=&gt;";
            if(is_object($s)){
                $st .= 'Object T';
            }
            else if(is_array($s)){
                $st .= 'Array T';
            }
            else{
                $st .= $s;
            }
            $h=1;
        }
        $st .= '</span>]';
        $d->addDiv()->Content=$st;
    }
    return $d->Render();
}
///<summary> dump array</summary>
/**
*  dump array
*/
function igk_dump_array($tab){
    $n=igk_createnode('div');
    $n["class"]="dumparray igk-row";
    foreach($tab as $k=>$v){
        $r=$n->addDiv();
        $r->addSpan()->setClass("k")->Content=$k;
        $r->addSpan()->setClass("v")->Content=is_string($v) ? $v: (is_object($v) ? get_class($v): $v);
    }
    $n->RenderAJX();
}
///<summary>write error log</summary>
/**
* write error log
*/
function igk_elog($msg, $tag=null){
    $f="";
    if(!($f = igk_const("IGK_LOG_ERROR_FILE")))
        $f= igk_io_dir(igk_io_sys_datadir()."/Logs/.error.".date("Y-m-d").".log");

    igk_log($msg, $f, $tag);
}

// function igk_engine_read_args($s){
    // $tb=[];
    // if(empty($s=trim($s))){
        // return $tb;
    // }

    // $g=explode(",", $s);
    // $spec=0;
    // $m="";
    // $b=0;
    // $br=["["=>1, "]"=>-1];
    // $bs=$s;


    // while( strlen($s=ltrim(array_shift($g))) > 0 ){

		// if ($s[0]=="'"){
			//glue litteral - and remove all comma
			// $t = substr($s, 1);
			// $tt = 1;$k = $t;
			// $CT = $t;
			// while($tt && $k){
				// if (!empty($ht = rtrim($t)) && ($ht[strlen($ht)-1]=="'")){
					// $CT = substr(rtrim($CT),0,-1);
					// $c = 1;
					// break;
				// } else {
					// $tt = 2;
					// $k= array_shift($g);
					// $CT.=",".$k;
					// $t = $k;
				// }
			// }
			// array_push($tb, $CT);
			// continue;
		// }
		// else{

			// if(($b !== 0) && !empty($m)){
				// $m .= ",";
			// }
			// for($i=0; $i < strlen($s); $i++){
				// if(isset($br[$s[$i]]))
					// $b=$b + $br[$s[$i]];
			// }

		// }
        // if($b == 0){
            // array_push($tb, $m.$s);
            // $m="";
        // }
        // else{
            // $m .= $s;
        // }
    // }
    // if($b !== 0){
        // error_log(__FILE__.":".__LINE__. " attr argument split not valid ");
        // return null;
    // }
    // return $tb;
// }

///<summary>retrieve argument splitting</summary>
/**
* retrieve argument splitting
*/
function igk_engine_read_args($s){
	// glue litteral - and remove all comma
	$args = [];
	$ln = strlen($s);
	$c = 0;
	$v = "";
	while($c < $ln){
		$ch = $s[$c];

		switch($ch){
			case "'":
				//$c++;
				$k=trim($v.igk_str_read_brank($s, $c, "'","'", null, 1));
				if ($k[0] == "@")
				{
					$k = substr($k, 2, -1);
				}else {
					$k = substr($k, 1, -1);
				}
				$v="";
				$args[] = $k;
			break;
			case "{":
				$args[] = igk_str_read_brank($s, $c, "}","{");
				$v="";
				break;
			case "[":
				$args[] = igk_str_read_brank($s, $c, "]","[");
			break;
			case ",":
				if(strlen($v = trim($v)))
					$args[] = $v;
				$v="";
			break;
			default:
				$v.= $ch;
			break;
		}
		$c++;
	}

	if (strlen($v = trim($v)) > 0)
		$args[] = $v;

	return $args;
}
///<summary>Convert string argument to array list. in context</summary>
///<param name="s">parameter to convert</param>
///<param name="context">context object that will parameter to convert</param>
/**
* Convert string argument to array list. in context
* @param mixed $s parameter to convert
* @param mixed $context context object that will parameter to convert
*/
function igk_engine_get_attr_arg($s, $context=null){

    $tb=igk_engine_read_args($s);
    if((count($tb) == 0) || !is_object($context)){
        return $tb;
    }


    $m=null;
    if($context && (is_object($context) || is_array($context))){
        $__g_context=(array)$context;
        extract($__g_context);
        unset($__g_context);
        $cs=array_keys((array)$context);
        $m=igk_str_join_tab(array_values($cs), '|', false);
        $rgx="#^\[\[:@(?P<name>((".$m.")))(?P<data>(.)+)?\]\]$#i";
        $paramvar_rgx="#@(?P<name>((".$m.")))#i";
        $callback=function($m, $n){
            if(isset($m["name"])){
                return "\$".$m["name"];
            }
            return "null";
        };
        for($k=0; $k < igk_count($tb); $k++){
            $mk=trim($tb[$k]);
            if(preg_match_all($rgx, $mk, $stt)){
                $n=$stt['name'][0];
                $d=$stt['data'][0];
                $d=preg_replace_callback($paramvar_rgx, $callback, $d);
                if(!empty($d)){
                    $s="\$context->".$n.$d;
                    $m="return {$s};";
                    igk_set_env(IGK_LAST_EVAL_KEY, $m);
                    $tb[$k]=@eval($m);
                }
                else{
                    $tb[$k]=$context->$n;
                }
            }
            else{
                if(preg_match('/^(\[|array\s*\()/i', $mk)){
                    igk_wln_e(__FILE__.":".__LINE__, "Action not available [[:@]] ".$mk, 
                    $cs
                    );
                    $tb[$k]=eval("return ".$mk.";");
                }
            }
        }
    }
	// igk_wln($tb);
    return $tb;
}
///<summary></summary>
///<param name="k"></param>
/**
* 
* @param mixed $k
*/
function igk_env_count($k){
    $sk='sys://counter/'.$k;
    $c=igk_get_env($sk, 1);
    igk_set_env($sk, $c + 1);
    return $c;
}
///<summary>get the current value of the counter</summary>
/**
* get the current value of the counter
*/
function igk_env_count_get($k){
    $sk='sys://counter/'.$k;
    return igk_get_env($sk, null);
}
///<summary></summary>
///<param name="k"></param>
/**
* 
* @param mixed $k
*/
function igk_env_count_reset($k){
    $sk='sys://counter/'.$k;
    igk_set_env($sk, null);
}
///<summary> for chain ajx mecanism ask for target node replacement</summary>
/**
*  for chain ajx mecanism ask for target node replacement
*/
function igk_env_get_replace_view(){
    $g=igk_get_env("sys://nodes/replaceview");
    if($g){
        igk_set_env("sys://nodes/replaceview", null);
    }
    return $g;
}
///<summary>start environment session</summary>
/**
* start environment session
*/
function igk_env_session_start($dir){
    igk_initenv($dir);
    igk_start_session();
    IGKApp::Init(__FILE__);
}
///<summary> for chain ajx mecanism set  target node replacement</summary>
/**
*  for chain ajx mecanism set target node replacement
*/
function igk_env_set_replace_view($target){
    igk_set_env("sys://nodes/replaceview", $target);
}
///<summary></summary>
/**
* 
*/
function igk_environment(){
    return IGK\IGKEnvironment::getInstance();
}
///<summary>function igk_error</summary>
///<param name="code"></param>
/**
* function igk_error
* @param mixed $code
*/
function igk_error($code){
    return igk_getv(igk_get_env("sys://error_codes"), $code);
}
///<summary>function igk_error_def_error</summary>
///<param name="msg"></param>
///<param name="code"></param>
///<param name="msg_key"></param>
/**
* function igk_error_def_error
* @param mixed $msg
* @param mixed $code
* @param mixed $msg_key
*/
function igk_error_def_error($msg, $code, $msg_key){
    $igk_error_codes=igk_get_env("sys://error_codes", function(){
        return array();
    });
    $igk_error_codes[$msg]=array(
            "Key"=>$msg,
            "Code"=>$code,
            "Msg"=>($msg_key == null) ? str_replace("_",
            ".",
            $msg): $msg_key
        );
    define($msg, $msg);
    igk_set_env("sys://error_codes", $igk_error_codes);
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_error_page404($msg){
    $file=IGK_LIB_DIR."/Views/error/404.phtml";
    if(file_exists($file)){
        $title="Error - ".IGKErrors::ConfigMisConfiguration;
        $headers="";
        $trace_css = "";
        $buri=igk_io_baseuri();
        if(file_exists($d=igk_io_resourcesdir()."/Fonts/google/Roboto100,200,400,700,900.css")){
            $headers .= "<link rel=\"stylesheet\" href='".igk_html_uri(igk_io_baseuri()."/".igk_io_baserelativepath($d))."'/>";
            $trace_css .= "body h1{ font-family: 'Roboto', arial, sans-serif; font-weight: 100; }";
        }
        else{
            igk_wln_e("not exit");
        }
        $uri= igk_io_html_link(IGK_LIB_DIR."/Default/".IGK_RES_FOLDER."/Img/cfavicon.ico")->getValue();
        $headers .= '<link title="Favicon" rel="shortcut icon" type="image/x-icon" href="'.$uri.'" />';
        $headers .= "<style>".igk_io_read_allfile(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/error404.css")."</style>";
        $headers .= "<style>".igk_io_read_allfile(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/trace.css")."</style>";
        $txtoptions="$(-><-)";
        igk_set_header(404);
        include($file);
        igk_exit();
    }
}
///<summary>igk eval source script</summary>
///<param name="src">source to evaluate</param>
///<param name="ctrl">controller to pass to source</param>
///<param name="raw">data to pass</param>
///<remark>if raw to pass is an array data will override to pass
/**
* 
* @param mixed $src
* @param mixed $ctrl
* @param mixed $raw
*/
function igk_eval_in_context($src, $ctrl, $raw){

    if($ctrl){
        extract(igk_extract_context($ctrl));
    }  
    ($raw) && is_array($raw) && extract($raw, EXTR_OVERWRITE, "__scope");
    extract(igk_get_context_args());
    igk_environment()->set("eval_script", $src);
    $__result =  @eval($src);     
	return $__result;
}

function igk_init_context_array_diff($args){
	igk_set_env("context/args", $args);
}

function igk_get_attrib_raw_context($n_context){
    $o =  igk_get_article_root_context();
    if ($o== null){
        return null;
    }
    $raw = null;
    if ( is_object($n_context) && isset($n_context->raw)){
        $raw = is_array($n_context->raw) && array_key_exists("raw", $n_context->raw) ? $n_context->raw["raw"] : $n_context->raw;
    } else {
        if (is_array($n_context)){
            $raw = igk_getv($n_context, "raw");
        }else { 
            if (igk_environment()->is("DEV")){
                igk_trace();
                igk_exit();
                igk_ilog("context does't provide a raw object");
            }
        }
    }
    return [
        "ctrl"=>$o->ctrl,
        "raw"=> $raw,
        "root_context"=>(object)[
            "ctrl"=>$o->ctrl,
            "raw"=>IGKRawDataBinding::Create($o->raw)
        ]
    ];
}

function igk_get_article_root_context(){
    // igk_wln( "Count: ", igk_env_count(__FUNCTION__));

    $r = null;
    $g = igk_get_env("sys://article_chain");
    if ( is_array($g) && ($c = count($g)) >0){
        $c= $g[0]["data"]; 
        return $c;
    }
    return null;
}
function igk_get_context_args($arg=null, $reset=0){


	if (!($r = igk_get_env($k = "context/args")))
	{
		if ($arg !==null){
			return null;
		}
		return [];
	}
	if ($arg !==null){
		$c = igk_getv($r, $arg);
		if($reset){
			unset($r[$arg]);
			igk_set_env($k, $r);
		}
		return $c;
	}
	return $r;
}

///<summary></summary>
///<param name="$c"></param>
/**
* 
* @param mixed $c
*/
function igk_eval_last_script($c){
    igk_set_env("sys://eval/lastscript", $c);
}
///<summary>evaluation script in context</summary>
///<remark>script must be free of " symbol</remark>
/**
* evaluation script in context
*/
function igk_eval_script_in_context($context, $script){
    if($context)
        extract($context);
    unset($context);
    $gp=get_defined_vars();
    $script=<<<EOF
return "{$script}";
EOF;
    try {
        igk_eval_last_script($script);
        $r=igk_eval_in_context($script, isset($ctrl) ? $ctrl: null, $gp);
        igk_eval_last_script(null);
        igk_sys_handle_error($script);
        return $r;
    }
    catch(\Throwable $ex){
        igk_wln_e("ERROR:Script eval error : ".$ex->getMessage(), "{$script}");
    }
    return null;
}
///<summary>write a message in a stderror</summary>
/**
* write a message in a stderror
*/
function igk_ewln($msg){
    if(defined("STDERR")){
        if(is_array($msg)){
            ob_start();
            igk_wln($msg);
            $s=ob_get_contents();
            ob_end_clean();
            $msg=$s;
        }
        fwrite(STDERR, $msg.IGK_LF);
    }
}
///<summary>calculate execution time</summary>
/**
* calculate execution time
*/
function igk_execute_time($name=null, $time=null){
    $t=igk_get_env("sys://env/starttime".($name ? "/{$name}": ""), 0);
    return (float)($time ?? microtime(true)) - (float)$t;
}
///<summary> encapsulate exit function. used for debugging purpose</summary>
/**
*  encapsulate exit function. used for debugging purpose
*  @throws Exception
*  @endcode exit
*/
function igk_exit($close=1, $clean_buffer=0){
    
    // if ($clean_buffer && (ob_get_level()>0)){
    //      ob_flush();
    //      igk_ob_clean();
    // }
   // igk_trace();
	
    if($close && !empty(session_id())){
        igk_raise_event("sys://event/onbeforeexit", array(igk_app(), null));
        session_write_close();
        unset($_SESSION);
    }
    exit;
} 
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_extract_context($ctrl){
    $script_obj=igk_html_databinding_getobjforscripting($ctrl);
    if($script_obj && $script_obj->args){
        return $script_obj->args;
    }
    return [];
}

///<summary></summary>
///<param name="dirorfile"></param>
///<param name="mode"></param>
///<param name="recursif" default="false"></param>
/**
* 
* @param mixed $dirorfile
* @param mixed $mode
* @param mixed $recursif the default value is false
*/
function igk_file_chmod($dirorfile, $mode, $recursif=false){
    $out=true;
    if($recursif && is_dir($dirorfile)){
        $hdir=@opendir($dirorfile);
        if($hdir){
            while($r=readdir($hdir)){
                if(($r == ".") || ($r == ".."))
                    continue;
                $f=igk_io_dir($dirorfile."/".$r);
                if(is_dir($f)){
                    $out=igk_file_chmod($f, $mode, $recursif) && $out;
                }
                else if(file_exists($f)){
                    if(!@chmod($f, $mode))
                        $out=false;
                }
            }
            closedir($hdir);
        }
    }
    $out=@chmod($dirorfile, $mode) && $out;
    return $out;
}
///<summary></summary>
///<param name="file"></param>
///<param name="parentFile"></param>
/**
* 
* @param mixed $file
* @param mixed $parentFile
*/
function igk_file_isdirectchildof($file, $parentFile){
    $tab=get_included_files();
    $c=igk_count($tab)-1;
    $r=0;
    while($c > 0){
        if(!$r){
            $r=($tab[$c] == $file);
        }
        else{
            $tab[$c] == $parentFile;
            return 1;
        }
        $c--;
    }
    return 0;
}
///<summary>check if a file is included</summary>
/**
* check if a file is included
*/
function igk_file_isnotincluded($file){
    $tab=get_included_files();
    if(igk_phar_available()){
        $index=1;
    }
    else{
        $index=0;
    }
    return ($index>=0) && ($index < count($tab)) && $tab[$index] == $file;
}
///<summary>flush data.</summary>
///<note>flush data cause the header to be send.</note>
/**
* flush data.
*/
function igk_flush_data(){
    $l=ob_get_level();
    if($l > 0){
        @ob_flush();
    }
    flush();
}
///<summary>begin flushing data </summary>
/**
* begin flushing data
*/
function igk_flush_start(){
    while(ob_get_level()){
        ob_end_flush();
    }
    ob_start();
}
///<summary>write data</summary>
/**
* write data
*/
function igk_flush_write($data, $eventtype=null){
    if($eventtype){
        igk_wl('event:'.$eventtype."\n");
    }
    igk_wl("data: ". $data. "\n\n");
}
///<summary>utility that combine flush_write and flush_data</summary>
/**
* utility that combine flush_write and flush_data
*/
function igk_flush_write_data($data){
    igk_flush_write($data);
    igk_flush_data();
}
///<summary>utility to do foreach on table or object with a callback</summary>
/**
* utility to do foreach on table or object with a callback
* @param mixed $i entry data to loop
* @return mixed
*/
function igk_foreach($i, $callback){
    if(!$i){
        return null;
    }
    if(is_string($i)){
        return $callback(0, $i);
    }
    foreach($i as $k=>$v){
        $callback($k, $v);
    }
    return null;
}
///<summary>convert format data</summary>
///<param name="v">value to convert</param>
///<param name="in">value format</param>
///<param name="out">output format</param>
/**
* convert format data
* @param mixed $v value to convert
* @param mixed $invalue format
* @param mixed $outoutput format
*/
function igk_format_date($v, $in, $out){
    $span=igk_time_span($in, $v);
    return date($out, $span);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="id"></param>
///<param name="uri" default="null"></param>
///<param name="closeuri" default="."></param>
///<param name="title" default="null"></param>
///<param name="target" default="null"></param>
///<param name="buttonmodel"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $id
* @param mixed $uri the default value is null
* @param mixed $closeuri the default value is "."
* @param mixed $title the default value is null
* @param mixed $target the default value is null
* @param mixed $buttonmodel the default value is 0
*/
function igk_frame_add_confirm($ctrl, $id, $uri=null, $closeuri=".", $title=null, $target=null, $buttonmodel=0){
    $_id=base64_encode($id);
    $frame=igk_html_frame($ctrl, $_id, $closeuri, $target);
    $frame->Title=($title == null) ? __(IGK_CONFIRM_TITLE): $title;
    $frame->closeMethodUri=$uri;
    $frame->callbackMethod="igk_frame_close_frame_callback";
    $d=$frame->BoxContent;
    $d->ClearChilds();
    $igk=igk_app();
    $frame->Form=$d->addForm();
    $frame->Form["action"]=$frame->closeUri;
    $frame->Form["igk-confirmframe-response-target"]=$ctrl->TargetNode["id"];
    $frame->Form->Div=$frame->Form->addDiv();
    $frame->Form->addHSep();
    $frame->Form->addInput("confirm", "hidden", 1);
    $frame->Form->addInput("frame-id", "hidden", $_id);
    $frame->Form->addInput("frame-close-uri", "hidden", igk_getctrl(IGK_FRAME_CTRL)->getUri("closeFrame_ajx&navigate=false&id=".$_id));
    $frame->Form->addScript()->Content="window.igk.winui.framebox.init_confirm_frame(ns_igk.getLastScript(), '".$frame->closeUri."&cancel=1"."', ".($igk->Session->URI_AJX_CONTEXT ? 'true': 'false').")";
    $canceluri=$frame->closeUri."&cancel=1";
    $acbar = $frame->Form->actionbar();
    switch($buttonmodel){
        case 0:
        $btn= $acbar->addBtn("btn_yes", __("btn.yes"), "submit");
        $btn["onclick"]=$igk->Session->URI_AJX_CONTEXT ? "javascript: return ns_igk.winui.framebox.btn.yes(this);": null;
        IGKHtmlUtils::AddBtnLnk($acbar, __("btn.cancel"), "javascript: ".igk_js_post_frame_cmd($canceluri). " this['igk:framebox'].close(); return false;");
        break;
        case 1: 
        $acbar->addBtn("btn_ok", __("btn.ok"), "submit", array("onclick"=>$igk->Session->URI_AJX_CONTEXT ? "javascript:return ns_igk.winui.framebox.btn.yes(this);": null));
        IGKHtmlUtils::AddBtnLnk($acbar, __("btn.cancel"), "javascript: ".igk_js_post_frame_cmd($canceluri). " this['igk:framebox'].close(); return false;");
        break;
    }
    if($ctrl->CurrentPageFolder == "Configs"){
        $frame["class"]="+igk-cnf-framebox";
    }
    return $frame;
}
///<summary></summary>
///<param name="target"></param>
///<param name="buttonmodel"></param>
///<param name="canceluri" default=""></param>
/**
* 
* @param mixed $target
* @param mixed $buttonmodel the default value is 0
* @param mixed $canceluri the default value is ""
*/
function igk_frame_bind_action($target, $buttonmodel=0, $canceluri=""){
    $igk=igk_app();
    switch($buttonmodel){
        case 0:
        $btn=$target->addBtn("btn_yes", __("btn.yes"), "submit");
        $btn["onclick"]=$igk->Session->URI_AJX_CONTEXT ? "javascript: return ns_igk.winui.framebox.btn.yes(this);": null;
        IGKHtmlUtils::AddBtnLnk($target, __("btn.cancel"), "javascript: ".igk_js_post_frame_cmd($canceluri). " this['igk:framebox'].close(); return false;");
        break;
        case 1:
        $target->addBtn("btn_ok", __("btn.ok"), "submit", array("onclick"=>$igk->Session->URI_AJX_CONTEXT ? "javascript:return ns_igk.winui.framebox.btn.yes(this);": null));
        IGKHtmlUtils::AddBtnLnk($target, __("btn.cancel"), "javascript: ".igk_js_post_frame_cmd($canceluri). " this['igk:framebox'].close(); return false;");
        break;
    }
}
///<summary></summary>
///<param name="name"></param>
///<param name="navigate" default="null"></param>
/**
* 
* @param mixed $name
* @param mixed $navigate the default value is null
*/
function igk_frame_close($name, $navigate=null){
    return igk_getctrl(IGK_FRAME_CTRL)->closeFrame($name, $navigate);
}
///<summary></summary>
///<param name="frame"></param>
/**
* 
* @param mixed $frame
*/
function igk_frame_close_frame_callback($frame){
    $p = null;
    if(igk_qr_confirm()){
        igk_set_env("sys://notsystemurihandle", 1);
        $p=$frame->Owner->App->getControllerManager()->InvokeUri($frame->closeMethodUri);
        igk_set_env("sys://notsystemurihandle", null);
    }
        return $p;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="id"></param>
///<param name="title" default="null"></param>
///<param name="closeuri" default="."></param>
///<param name="target" default="null"></param>
///<param name="reloadcallback" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $id
* @param mixed $title the default value is null
* @param mixed $closeuri the default value is "."
* @param mixed $target the default value is null
* @param mixed $reloadcallback the default value is null
*/
function igk_frame_confirm($ctrl, $id, $title=null, $closeuri=".", $target=null, $reloadcallback=null, $buttonmodel=0){
    $frame=igk_getctrl(IGK_FRAME_CTRL)->createFrame($id, $ctrl, $closeuri, $reloadcallback);
    if($target === null)
        $target=igk_app()->Doc->body;
    igk_html_add($frame, $target);
    $frame->Title=($title == null) ? __(IGK_CONFIRM_TITLE): $title;
    $d=$frame->BoxContent;
    $d->ClearChilds();
    $igk=$ctrl->App;
    $frame->Form=$d->addForm();
    $frame->Form["action"]=$frame->closeUri;
    $frame->Form["igk-confirmframe-response-target"]=$ctrl->TargetNode["id"];
    $frame->Form->Div=$frame->Form->addDiv();
    $frame->Form->addHSep();
    $frame->Form->addInput("confirm", "hidden", 1);
    $frame->Form->addInput("frame-id", "hidden", $id);
    $frame->Form->addInput("frame-close-uri", "hidden", igk_getctrl(IGK_FRAME_CTRL)->getUri("closeFrame_ajx&navigate=false&id=".$id));
    $frame->Form->addScript()->Content="igk.winui.framebox.init_confirm_frame(igk.getLastScript(), '".$frame->closeUri."&cancel=1"."', ".($igk->Session->URI_AJX_CONTEXT ? 'true': 'false'). ")";
    $canceluri=$frame->closeUri."&cancel=1";
    switch($buttonmodel){
        case 0:
        $btn=$frame->Form->addBtn("btn_yes", __("btn.yes"), "submit");
        $btn["onclick"]=$igk->Session->URI_AJX_CONTEXT ? "javascript: return ns_igk.winui.framebbox.btn.yes(this);": null;
        IGKHtmlUtils::addBtnLnk($frame->Form, __("btn.no"), "javascript: ".igk_js_post_frame_cmd($canceluri)." this.frame.close(); ");
        break;
        case 1:
        $frame->Form->addBtn("btn_ok", __("btn.ok"), "submit", array("onclick"=>$igk->Session->URI_AJX_CONTEXT ? "javascript:return ns_igk.winui.framebox.btn.yes(this);": null));
        IGKHtmlUtils::addBtnLnk($frame->Form, __("btn.cancel"), "javascript: ".igk_js_post_frame_cmd($canceluri)." this.frame.close()");
        break;
    }
    $frame->Script->Content=new IGKFrameScript($frame, "c");
    return $frame;
}
///<summary></summary>
///<param name="frame"></param>
/**
* 
* @param mixed $frame
*/
function igk_frame_is_available($frame){
    return igk_getctrl(IGK_FRAME_CTRL)->IsFrameAvailable($frame);
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_frame_js_postform_ref($ctrl){
    return "javascript: return (function(q,s){ IGK.winui.frameBox.postForm(q.form, q.form.action, s); return false;})(this, '".$ctrl->TargetNode["id"]."');";
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="id"></param>
///<param name="closeuri" default="."></param>
///<param name="target" default="null"></param>
///<param name="reloadcallback" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $id
* @param mixed $closeuri the default value is "."
* @param mixed $target the default value is null
* @param mixed $reloadcallback the default value is null
*/
function igk_frame_new($ctrl, $id, $closeuri=".", $target=null, $reloadcallback=null){
    $frm=igk_getctrl(IGK_FRAME_CTRL)->createFrame($id, $ctrl, $closeuri, $reloadcallback);
    if($target === null)
        $target=igk_app()->Doc->body;
    igk_html_add($frm, $target);
    $frm->Script->Content=new IGKFrameScript($frm, "confirm");
    return $frm;
}
///<summary></summary>
///<param name="classname"></param>
/**
* 
* @param mixed $classname
*/
function igk_free_component($classname){
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
    $t=$ctrl->getParam("sys://class_component");
    if($t){
        unset($t[$classname]);
    }
}
///<summary></summary>
///<param name="k"></param>
/**
* 
* @param mixed $k
*/
function igk_free_document($k){
    $v=igk_app()->Session->getParam(IGK_KEY_DOCUMENTS);
    if(is_object($k)){
        $k->Dispose();
        $k=$k->getParam(IGK_DOC_ID_PARAM);
    }
    if($v){
        $doc=igk_getv($v, $k);
        if($doc){
            unset($v[$k]);
            igk_app()->Session->setParam(IGK_KEY_DOCUMENTS, $v);
        }
    }
}
///<summary></summary>
///<param name="name"></param>
///<param name="args"></param>
/**
* 
* @param mixed $name
* @param mixed $args
*/
function igk_get_action_uri($name, $args){
    return igk_io_baseuri()."/@!actions/{$name}/".$args;
}
///<summary></summary>
///<param name="ad"></param>
/**
* 
* @param mixed $ad
*/
function igk_get_adapter_name($ad){
    if(!is_object($ad))
        return;
    $c=get_class($ad);
    if(preg_match_all("/IGK(?P<name>(.)+)DataAdapter/i", $c, $tab)){
        return igk_getv($tab["name"], 0);
    }
    return null;
}
///<summary>Retrieve all default page controller</summary>
/**
* Retrieve all default page controller
*/
function igk_get_all_default_pagectrl(){
    $igk=igk_app();
    if($igk == null)
        return;
    $t=array();
    foreach($igk->getControllerManager()->getControllers() as $k){
        $cl=get_class($k);
        $v_rc=new ReflectionClass($cl);
        if($v_rc->isAbstract() || !igk_reflection_class_extends($cl, IGK_CTRLWEBPAGEBASECLASS))
            continue;
        $t[]=$k;
    }
    return $t;
}
function igk_get_session_prefix(){
	$prefix = "sess_";
	if (defined("IGK_SESS_DIR"))
		$prefix = IGK_SESSION_FILE_PREFIX;
	return $prefix;
}
function igk_get_all_session_files(){
	$d=ini_get("session.save_path");
	$tab=igk_io_getfiles($d);
	sort($tab);
	$sess = [];
	$prefix = igk_get_session_prefix();

	foreach($tab as $k){
		if(preg_match("/^".$prefix."/i", basename($k))){
			$id=substr(basename($k), strlen($prefix));
			$sess[$id] = $k;
		}
	}
	return $sess;
}

function igk_get_all_session_file_infos($max=null){
	$d=ini_get("session.save_path");
	$tab=igk_io_getfiles($d);
	sort($tab);
	$sess = [];
	$prefix = igk_get_session_prefix();

	foreach($tab as $k){
		if(preg_match("/^".$prefix."/i", basename($k))){
			$id=substr(basename($k), strlen($prefix));
			$sess[$id] = (object)[
				"file"=>$k,
				"size"=>IGKIO::GetFileSize(filesize($k)),
				"createtime"=> date("Y-m-d H:i:s",  filemtime($k))
			];
        }
        if ($max && (igk_count($sess[$id]) >= $max)){
            break;
        }
	}
	return $sess;
}
///<summary>retrieve an array of session info</summary>
/**
* retrieve an array of session info
*/
function igk_get_all_sessions(){
    $d=ini_get("session.save_path");
    $dt=null;
	$prefix = igk_get_session_prefix();
    $ssid=session_id();
    $v_capp=igk_app();
    session_write_close();
    $sess_key=IGK_APP_SESSION_KEY;
    $_SESSION[$sess_key]=null;
    if(is_dir($d)){
        $dt=array();
        $tab=igk_io_getfiles($d);
        sort($tab);
        foreach($tab as $k){
            if(preg_match("/^".$prefix."/i", basename($k))){
                $id=substr(basename($k), strlen($prefix));
                $obj=(object)["location"=>$k, "sessid"=>$id, "start"=>"00:00:00", "ip"=>"127.0.0.1"];
                if($ssid == $id){
                    $app=$v_capp;
                }
                else{
                    unset($_SESSION[$sess_key]);
                    igk_bind_session_id($id);
                    session_start();
                    $app=$_SESSION[$sess_key];
                    session_write_close();
                    unset($_SESSION[$sess_key]);
                }
                if($app){
                    $obj->start=$app->getcreateAt();
                    $serverInfo=$app->getServerInfo();
                    if($serverInfo){
                        $obj->ip=igk_getv($serverInfo, "ip");
                        $obj->serverInfo=$serverInfo;
                    }
                }
                $dt[]=$obj;
            }
        }
    }
    unset($_SESSION[$sess_key]);
    igk_bind_session_id($ssid);
    session_start();
    $_SESSION[$sess_key]=$v_capp;
    return $dt;
}
///<summary>Retrieve all user uri page controller</summary>
/**
* Retrieve all user uri page controller
*/
function igk_get_all_uri_page_ctrl(){
    $t=array(
            "@base"=>igk_app()->getControllerManager()->getUserControllers(function($v){
                return igk_reflection_class_implement($v, IIGKUriActionRegistrableController::class);
            }),
            "@templates"=>function_exists('igk_template_get_ctrls') ? igk_template_get_ctrls(): null
        );
    return $t;
}
///<summary></summary>
/**
* 
*/
function igk_get_all_user_page_ctrl(){
    return igk_app()->getControllerManager()->getUserControllers();
}
///<summary>bind my how header</summary>
/**
* bind my how header
*/
function igk_get_allheaders(){
    return igk_get_env(__FUNCTION__, function(){
        $tab=array();
        if(function_exists("getallheaders")){
            $t=getallheaders();
            foreach($t as $k=>$v){
                $k=strtoupper(str_replace('-', '_', $k));
                $tab[$k]=$v;
            }
        }
        foreach($_SERVER as $name=>$value){
            if(substr($name, 0, 5) == 'HTTP_'){
                $name=str_replace(' ', '-', substr($name, 5));
                $tab[$name]=$value;
            }
            else if($name == "CONTENT_TYPE"){
                $tab["Content-Type"]=$value;
            }
            else if($name == "CONTENT_LENGTH"){
                $tab["Content-Length"]=$value;
            }
        }
        return $tab;
    });
}
///<summary></summary>
///<param name="v"></param>
///<param name="currency" default="'EUR'"></param>
/**
* 
* @param mixed $v the default value is 0
* @param mixed $currency the default value is 'EUR'
*/
function igk_get_amount($v=0, $currency='EUR'){
    return __("lb.amount_2", $v, igk_get_currency_symbol($currency));
}
///<summary> shortcut : get conntroller's article </summary>
/**
*  shortcut : get conntroller's article
*/
function igk_get_article($ctrl, $name){
    return $ctrl->getArticle($name);
}
///<summary></summary>
///<param name="lang" default="null"></param>
/**
* 
* @param mixed $lang the default value is null
*/
function igk_get_article_ext($lang=null){
    if($lang){
        return strtolower(".".$lang.".".IGK_DEFAULT_VIEW_EXT);
    }
    return strtolower(".".R::GetCurrentLang().".".IGK_DEFAULT_VIEW_EXT);
}
///<summary></summary>
/**
* 
*/
function igk_get_basestyle(){
    $bf=__FILE__;
    $rdir=igk_realpath(IGK_APP_DIR);
    // $rdir= igk_io_basedir();// igk_realpath(IGK_APP_DIR);
    $date = date('Ymd H:i:s');
    $v=<<<EOF
<?php
// desc: generate balafon.css file
// date: {$date}
// author: C.A.D. BONDJE DOUE

defined("IGK_FORCSS") || define("IGK_FORCSS", 1);
define("IGK_NO_WEB", 1);
if (!defined('IGK_FRAMEWORK')){
	require_once('{$bf}');
}
igk_css_balafon_index('{$rdir}');
EOF;
    return $v;
}
///<summary>get a builder engine</summary>
/**
* get a builder engine
*/
function igk_get_builder_engine($name, $frm, $selected=0){
    $tab=igk_get_env("sys://form/builderengines");
    if((($name) || ($name=igk_get_selected_builder_engine())) && isset($tab[$name])){
        $c=$tab[$name];
        if(is_object($c)){
            $c->setView($frm);
        }
        else{
            $c=new $c($frm);
            $tab[$name]=$c;
        }
        if($selected)
            igk_set_selected_builder_engine($name);
        return $c;
    }
    else{
        return new IGKFormBuilderEngine($frm);
    }
}
///<summary></summary>
///<param name="n"></param>
///<param name="def" default="null"></param>
/**
* 
* @param mixed $n
* @param mixed $def the default value is null
*/
function igk_get_cached($n, $def=null){
    $igk=igk_app();
    $c=$igk->Session->getParam("sys://cache");
    if($c == null){
        $c=array();
        $igk->Session->setParam("sys://cache", $c);
    }
    if(isset($c[$n]) && !igk_cache_expired($c[$n]))
        return $c[$n]->data;
    return $def;
}
///<summary></summary>
/**
* 
*/
function igk_get_cached_manifest(){
    header("Content-Type: text/cache-manifest");
    igk_wl(igk_get_manifest_content());
}
///<summary>utility function get call_user_func_array argument</summary>
/**
* utility function get call_user_func_array argument
*/
function igk_get_call_args($t){
    if(!is_array($t))
        $t=array($t);
    return $t;
}
///<summary>return constants within the class</summary>
/**
* return constants within the class
*/
function igk_get_class_constants($classname){
    $r=new ReflectionClass($classname);
    return $r->getConstants();
}
///<summary>return class instance for atomic design pattern</summary>
/**
* return class instance for atomic design pattern
*/
function igk_get_class_instance($classname, $callback){
    $k=igk_get_instance_key($classname);
    $s=igk_app()->Session;
    if(!$s){
        return null;
    }
    $keyid=IGKSession::IGK_INSTANCES_SESS_PARAM;
    $tab=$s->getParam($keyid, array());
    $o=igk_getv($tab, $k);
    if(!$o){
        if(method_exists($callback, "bindTo"))
            $callback->bindTo(null, $classname);
        $o=$callback();
        $tab[$k]=$o;
        $s->setParam($keyid, $tab);
    }
    return $o;
}
///<summary></summary>
///<param name="classname" default="null"></param>
/**
* 
* @param mixed $classname the default value is null
*/
function igk_get_class_location($classname=null){
    $c=igk_get_reg_class_file($classname);
    if($c){
        $t=new ReflectionClass($classname);
        return (object)array("file"=>$c, "line"=>$t->getStartLine(), "included"=>1);
    }
    $c=new ReflectionClass($classname);
    return (object)array("file"=>$c->getFileName(), "line"=>$c->getStartLine());
}
///<summary></summary>
///<param name="ob"></param>
///<param name="name"></param>
/**
* 
* @param mixed $ob
* @param mixed $name
*/
function igk_get_class_method_location($ob, $name){
    $cl=get_class($ob);
    if(empty($cl))
        return null;
    $c=new ReflectionMethod($cl, $name);
    return (object)array("file"=>$c->getFileName(), "line"=>$c->getStartLine());
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_get_cmd_command($name){
    $t=igk_get_env("sys://cmd/commands");
    return ($t && $name) ? igk_getv($t, $name): null;
}
///<summary></summary>
///<param name="id"></param>
/**
* 
* @param mixed $id
*/
function igk_get_component($id){
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL);
    return $ctrl->getParam("sys://globalcomponent/{$id}");
}
function igk_get_component_uri_key($guid){
    $s = !igk_io_basedir_is_root() ? "index.php/":""; 
    return  igk_io_query_info()->root_uri.$s."{".$guid."}";
}
///<summary>get component by id</summary>
/**
* get component by id
*/
function igk_get_component_by_id($id){
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
    if($ctrl){
        return $ctrl->getComponentById($id);
    }
    return null;
}
///<summary>register and get the component id</summary>
/**
* register and get the component id
*/
function igk_get_component_id($n){
    $id=$n->getParam(IGK_COMPONENT_ID_KEY)->getValue();
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
    if($id && $ctrl->Exists($n)){
        return $id;
    }
    else{
        if($ctrl->Register($n, false)){
            $n->setParam(IGK_COMPONENT_ID_KEY, new IGKHtmlComponentIdValue($n));
            return $n->getParam(IGK_COMPONENT_ID_KEY)->getValue();
        }
    }
    return null;
}
///<summary></summary>
///<param name="cmpname"></param>
/**
* 
* @param mixed $cmpname
*/
function igk_get_component_info($cmpname){
    return igk_get_env(IGK_ENV_HTML_COMPONENTS);
	//$t=array();
	//$g=igk_createnode($cmpname);
	//if($g){
	//    $t["node"]=$g;
	//}
	//else{
	//    $t["error"]=1;
	//    $t["desc"]="component {$cmpname} not found";
	//}
	//return $t;
}
///<summary>register a node as a component uri</summary>
///<param name="node">the item that will host function callback</param>
///<param name="func">the fonction name registrated to a node</param>
///<return>the component registrated uri</return>
///<exemple> igk_get_component_uri($div, 'getIsVisible')</exemple>
/**
* register a node as a component uri
* @param mixed $node the item that will host function callback
* @param mixed $unc the fonction name registrated to a node
*/
function igk_get_component_uri($node, $func){
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
    $u=null;
    if($ctrl->Exists($node)){
        $u=$ctrl->getUri($func, $node);
    }
    else{
        if($ctrl->Register($node, false)){
            $node->setParam(IGK_COMPONENT_ID_KEY, new IGKHtmlComponentIdValue($node));
            $u=$ctrl->getUri($func, $node);
        }
    }
    return $u;
}
///<summary></summary>
///<param name="name"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $name
* @param mixed $callback
*/
function igk_get_config_action($name, $callback){
    $t=igk_get_env("sys://configs/options", array());
    $t[$name]=$callback;
    igk_get_env("sys://configs/options", array());
}
///<summary></summary>
/**
* 
*/
function igk_get_configs_menu_settings(){
    return igk_get_env("sys://configs/menu");
}
///<summary>get controller view content</summary>
/**
* get controller view content
*/
function igk_get_contents($ctrl, $type, $params){
    $f=$ctrl->getContentDir()."/{$type}.php";
    if(file_exists($f)){
        BaseController::ViewInContext($ctrl, $f, $params);
        igk_exit();
    }
    return 0;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_get_cookie($n){
    $n=igk_get_cookie_name(igk_sys_domain_name()."/".$n);
    if(!isset($_COOKIE)){
        if(!igk_sys_env_production()){
            igk_die("cookie variable not found. ".$n);
        }
        return null;
    }
    return igk_getv($_COOKIE, $n);
}
///<summary></summary>
/**
* 
*/
function igk_get_cookie_domain(){ 
    $srv=igk_server();
    $p=igk_server()->HTTP_HOST; 
   
    
    if((IGKValidator::IsIPAddress($p) && ($srv->SERVER_NAME == $srv->SERVER_ADDR))){
        return null; 
    }
    $tab=parse_url($p);
 
    if(isset($tab['path']))
        $p=$tab['path'];
    else if(isset($tab['host'])){ 
        $p = $tab['host'];  
    }
    return  (strpos($p, ".")!==false?".":"").$p;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_get_cookie_name($n){
    return str_replace('.', '_', $n);
}
///<summary></summary>
///<param name="b" default="null"></param>
/**
* 
* @param mixed $b the default value is null
*/
function igk_get_cookie_path($b=null){
    return $b ? "/".$b: "/";
}
///<summary>get controller parameter shorcut</summary>
/**
* get controller parameter shorcut
*/
function igk_get_cp($ctrl, $name, $reset=1){
    ($n=$ctrl->getParam($name)) && $reset && $ctrl->setParam($name, null);
    return $n;
}
///<summary></summary>
///<param name="curr" default="'EUR'"></param>
/**
* 
* @param mixed $curr the default value is 'EUR'
*/
function igk_get_currency_symbol($curr='EUR'){
    $t=array("EUR"=>"â¬", "USD"=>"$");
    return igk_getv($t, $curr);
}
///<summary>get the current base controller</summary>
/**
* get the current base controller
*/
function igk_get_current_base_ctrl(){
    $a=igk_app();
    $g=$a->getSubDomainCtrl() ?? $a->getBaseCurrentCtrl() ?? igk_get_defaultwebpagectrl();
    if($g !== null){
        return $g;
    }
    return null;
}
///<summary></summary>
///<param name="dir" default="null"></param>
///<param name="secured" default="false"></param>
/**
* 
* @param mixed $dir the default value is null
* @param mixed $secured the default value is false
*/
function igk_get_current_base_uri($dir=null, $secured=false){
    $igk=igk_app();
    if($igk->CurrentPageFolder != IGK_HOME_PAGEFOLDER)
        $out=igk_io_baseuri($igk->CurrentPageFolder, $secured);
    else
        $out=igk_io_baseuri(null, $secured);
    if($dir)
        $out .= "/".$dir;
    return $out;
}
///<summary></summary>
/**
* 
*/
function igk_get_current_package(){
    $key="sys://components/packages";
    $n=igk_get_env("sys://components/currentpackage");
    if($n)
        return ($t=igk_getv(igk_get_env($key), $n)) ? $t["callback"]: null;
    return null;
}
///<summary>get the current page controller.</summary>
/**
* get the current page controller.
*/
function igk_get_currentpagectrl(){
    $igk=igk_app();
    $tab=igk_get_all_uri_page_ctrl();
    $page=$igk->getCurrentPage();
    if($tab && (count($tab) > 0)){
        foreach($tab as $v){
            if(igk_getv($v->Configs, "clDefaultPage") == $page){
                return $v;
            }
        }
    }
    return null;
}
///<summary>get adapter system data adapter</summary>
/**
* get adapter system data adapter
*/
function igk_get_data_adapter($controllerOrAdpaterName, $throwException=false){
    $n=IGK_STR_EMPTY;
    if(is_string($controllerOrAdpaterName)){
        if(empty($controllerOrAdpaterName)){
            return null;
        }
        $n=$controllerOrAdpaterName;
    }
    else if(is_object($controllerOrAdpaterName)){
        if(igk_reflection_class_extends($controllerOrAdpaterName, "IGKDataAdapter"))
            return $controllerOrAdpaterName;
        if(igk_is_controller($controllerOrAdpaterName))
            $n=$controllerOrAdpaterName->getDataAdapterName();
    }
    $r=IGKDataAdapter::CreateDataAdapter($n, $throwException);
    return $r;
}
///<summary>Return the core default style file</summary>
/**
* Return the core default style content
*/
function igk_get_default_style(){
    return igk_io_read_allfile(IGK_LIB_DIR."/Default/".IGK_STYLE_FOLDER."/default.pcss");
}
///<summary>get default view content</summary>
/**
* get default view content
*/
function igk_get_default_view_content($ctrl){
    return "<?php \n";
}
///<summary></summary>
/**
* 
*/
function igk_get_defaultconfigdata(){
    $servname=igk_getv($_SERVER, "SERVER_NAME", "igkdev.com");
    $const="constant";
    $v=<<<EOF
admin_login,admin
admin_pwd,21232f297a57a5a743894a0e4a801fc3
app_default_controller_tag_name,div
show_powered,1
show_debug,0
menu_defaultPage,default
allow_debugging,0
allow_log,0
allow_article_config,0
allow_auto_cache_page,0
cache_loaded_file,0
website_domain,{$servname}
website_title, {$servname}
company_name, igkdev
mail_server,relay.skynet.be
mail_port,25
mail_admin,administrator@igkdev.com
mail_contact,info@igkdev.com
db_server,localhost
db_user,root
db_name,igkdev
db_pwd,
db_prefix, {$const('IGK_DEFAULT_DB_PREFIX')}
default_controller,defaultpagectrl
powered_message,
meta_description,default page description
meta_copyright,igkdev@igkdev.com
meta_enctype,text/html; charset=utf-8
meta_keysword,"IGKDEV, .NET, C#, BONDJE DOUE, Developper, PHP, HTML5, WEBDEV, PLATEFORM, BALAFON"
meta_title, igkdev.be
website_prefix, igk,
copyright, {$const('IGK_COPYRIGHT')}
EOF;
    return $v;
}
///str_replace(" ", "_", str_replace("=","_", $n));
/**
*/
function igk_get_defaultview_content(){
    $date=date("Y/m/d - H:i:s");
    $author=igk_app()->Configs->defaultAuthor ?? IGK_AUTHOR;
    return <<<EOF
<?php
// +-
// author: {$author}
// view file: {$date}
// +-

\$t->clearChilds();
\$doc->Title = \$fname." - ".\$this->Name;
\$t->addDiv()->Content = "200 - Empty view";

EOF;
}
///<summary>get default web page controller.</summary>
/**
* get default web page controller.
*/
function igk_get_defaultwebpagectrl(){
    $igk=igk_app();
    $n= $igk->Configs->default_controller;

    if(!class_exists($n, false)){
        return null;
    }
    else{
        if(!is_subclass_of($n, BaseController::class)){
            die(__("Default class is not a Balafon controller : {0}", $n));
        }
        if(method_exists($n, "getInstance")){
            return $n::getInstance();
        }
        else{
            $b=igk_getctrl($n);

            if($b === null){
                $b=igk_app()->session->createInstance($n);
			}

            return $b;
        }
    }
    //  return igk_getctrl($n) ?? ((function_exists('igk_template_create_ctrl')) ? igk_template_create_ctrl($n): null);
}
///<summary></summary>
///<param name="node"></param>
///<param name="s" ref="true"></param>
///<param name="options"></param>
/**
* 
* @param mixed $node
* @param mixed * $s
* @param mixed $options
*/
function igk_get_defined_ns($node, & $s, $options){
    $attr=$node->Attributes;
    $g=$attr ? $attr->getNS(): null;
    if($g){
        $b=0;
        foreach($g as $k=>$v){
            if($b)
                $s .= " ";
            if($k == "@global")
                $s .= "xmlns";
            else
                $s .= "xmlns:".$k;
            $b=1;
            $s .= "=\"".$v."\"";
        }
    }
}
///<summary>get the document</summary>
///<param name="key">key to register document </param>
/**
* get the document
* @param mixed $key key to register document
*/
function igk_get_document($key, $clear=false, $init=false){
    if(!IGKApp::IsInit() || (is_string($key) && empty($key)) || ($key == null))
        return null;
    $k=$key;
    $_obj=is_object($k);
    $doc=null;
    if($_obj)
        $k=$k->getName();
    $app=igk_app();
	if (!isset($app->settings->appInfo->{IGK_KEY_DOCUMENTS})){
		$app->settings->appInfo->{IGK_KEY_DOCUMENTS} = [];
	}
	if (!isset(igk_environment()->documents)){
		igk_environment()->documents = array();
	}

    $v= $app->settings->appInfo->{IGK_KEY_DOCUMENTS}; //$app->Session->getParam(IGK_KEY_DOCUMENTS);
    // $v=$app->Session->getParam(IGK_KEY_DOCUMENTS);
    $doc_index = igk_getv($v, $k);
	$rdoc = & igk_environment()->get("documents");
    if($doc_index === null){

        $doc= IGKHtmlDoc::CreateDocument(__FUNCTION__);
        $doc->setParam(IGK_DOC_ID_PARAM, $key);
		$app->settings->appInfo->{IGK_KEY_DOCUMENTS}[$k] = $doc->getId();
		$doc_index = $doc->getId();

        if($v === null){
            $v=array($k=>$doc);
        }
        else{
            $v[$k]=$doc;
            if($doc === $app->getDoc()){
                igk_ilog("2. your new document is equal to global document some error behaviour");
                igk_die("strange behaviour . not valid");
            }
        }
		$rdoc[$doc_index] = $doc;
    } else {
		if (!isset(igk_environment()->documents[$doc_index])){
			$doc = new IGKHtmlDoc($doc_index);
			$rdoc[$doc_index] = $doc;
		}else{
			$doc = igk_environment()->documents[$doc_index];
		}
	}

    if($doc && $clear){
        $doc->Body->BodyBox->ClearChilds();
    }
    if($_obj && $init && method_exists($key, 'initDocument')){
        $key->initDocument($doc);
    }
    return $doc;
}
///<summary>return the sub created documents attached to system</summary>
/**
* return the sub created documents attached to system
*/
function igk_get_documents(){
    return igk_app()->Session->getParam(IGK_KEY_DOCUMENTS);
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_get_domain($n){
    if(preg_match_all(IGK_DOMAIN_REGEX, $n, $v)){
        return $v["domain"][0];
    }
    return IGK_STR_EMPTY;
}
///<summary>extract root domain from uri</summary>
/**
* extract root domain from uri
*/
function igk_get_domain_name($n){
    if(preg_match_all(IGK_DOMAIN_NAME_REGEX, $n, $v)){
        return $v["domain"][0];
    }
    return IGK_STR_EMPTY;
}
///<summary></summary>
///<param name="k"></param>
///<param name="default" default="null"></param>
/**
* 
* @param mixed $k
* @param mixed $default the default value is null
*/
function igk_get_env($k, $default=null){
    $IGK_ENV=igk_environment();
    if(empty($k) || is_object($k) || is_array($k)){
        igk_die("illegal offset : ", __FUNCTION__);
    }
    if(isset($IGK_ENV[$k])){
        return $IGK_ENV[$k];
    }
    if(($default != null) && igk_is_callable($default)){
        $m=call_user_func_array($default, array());
        $IGK_ENV[$k]=$m;
        return $m;
    }
    return igk_getv($IGK_ENV, $k, $default);
}
///<summary>get all environment variable that match the pattern</summary>
/**
* get all environment variable that match the pattern
*/
function igk_get_env_all($match){
    $t=array();
    $IGK_ENV=igk_environment();
    foreach($IGK_ENV as $k=>$v){
        if(strstr($k, $match)){
            $t[$k]=$v;
        }
    }
    return $t;
}
///<summary></summary>
///<param name="key"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $key
* @param mixed $callback
*/
function igk_get_env_init($key, $callback){
    $c=igk_get_env($key);
    if($c == null){
        $c=$callback();
        igk_set_env($key, $c);
    }
    return $c;
}
///<summary></summary>
///<param name="v" default="null"></param>
/**
* 
* @param mixed $v the default value is null
*/
function igk_get_env_lib_loaded($v=null){
    $k="sys://libloaded";
    igk_set_env($k, $v);
    return igk_get_env($k, 0);
}
///<summary>retrieve environment variable as object</summary>
/**
* retrieve environment variable as object
*/
function igk_get_env_obj($ns){
    $c=igk_get_env_all($ns);
    if(!$c)
        return null;
    $t=array();
    $ln=strlen($ns) + 1;
    $ln -= $ns[$ln-2] == '/' ? 1: 0;
    foreach($c as $k=>$v){
        $n=substr($k, $ln);
        $tt=explode("/", $n);
        if(igk_count($tt) == 1){
            $t[$n]=$v;
        }
        else{
            $g=null;
            $nn=array_pop($tt);
            foreach($tt as $m){
                if(($g == null)){
                    if(isset($t[$m])){
                        $g=$t[$m];
                    }
                    else{
                        $g=igk_createobj();
                        $t[$m]=$g;
                    }
                }
                else{
                    if(!isset($g->$m)){
                        $g->$m=igk_createobj();
                        $g=$g->$m;
                    }
                }
            }
            $g->$nn=$v;
        }
    }
    return (object)$t;
}
///<summary>get all global environments table</summary>
/**
* get all global environments table
*/
function igk_get_envs(){
    $IGK_ENV=igk_environment();
    return $IGK_ENV;
}
///<summary>return all error</summary>
/**
* return all error
*/
function igk_get_error($tag=null){
    $tab=igk_get_env("sys://igk_set_error");
    if($tag != null){
        $o=array();
        foreach($tab as $v){
            if($v["tag"] == $tag){
                $o[]=$v;
            }
        }
        return $o;
    }
    igk_set_env("sys://igk_set_error", null);
    return $tab;
}
///<summary>parse error key</summary>
///<param name="code"></param>
/**
* parse error key
* @param mixed $code
*/
function igk_get_error_key($code){
    return igk_error($code)["Msg"];
}
///<summary></summary>
/**
* 
*/
function igk_get_eval_global_script_actions(){
    return igk_get_env("sys://article/eval_script_global", []);
}
///<summary>get event keys</summary>
/**
* get event keys
*/
function igk_get_event_key($ctrl, $name){
    return strtolower("sys://".$ctrl->Name."/event/".$name);
}
///<summary>get exception from eval inclusion</summary>
/**
* get exception from eval inclusion
*/
function igk_get_exception_eval($Ex, $traces=null){
    $content="";
    $traces=$traces ?? $Ex->getTrace();
    if(strpos($Ex->getFile(), "eval()") !== false){
        if($traces && ($tr=igk_getv($traces, 0))){
            $s="";
            $c=igk_getv($tr, "class");
            if($c){
                $s="_class_:". igk_get_reg_class_file($c);
            }
            else{
                $s=igk_get_reg_func_file(strtolower($tr["function"]));
            }
            if($s){
                if(igk_is_cmd()){
                    $content .= $s. ":".$Ex->getLine()."";
                }
                else
                    $content .= "<li><b>Eval on file</b>: ". $s. ":".$Ex->getLine()."</li>";
            }
        }
    }
    return $content;
}
///<summary></summary>
///<param name="id" default="null"></param>
/**
* 
* @param mixed $id the default value is null
*/
function igk_get_form_args($id=null){
    $tab=igk_get_env("sys://form_args");
    if($id == null)
        return $tab;
    if($tab != null)
        return igk_getv($tab, $id);
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_get_form_builder_engines(){
    $tab=igk_get_env("sys://form/builderengines");
    if($tab)
        return array_keys($tab);
    return null;
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_get_frame($name){
    return igk_getctrl(IGK_FRAME_CTRL)->getFrame($name);
}
///<summary></summary>
/**
* 
*/
function igk_get_frame_ext(){
    return strtolower(".frame.phtml");
}
///<summary>return function location</summary>
/**
* return function location
*/
function igk_get_func_location($func){
    if(function_exists($func)){
        $fc=new ReflectionFunction($func);
        return (object)array(
                "file"=>$fc->getFileName(),
                "line"=>$fc->getStartLine()
            );
    }
    return null;
}
///<summary></summary>
///<param name="func"></param>
/**
* 
* @param mixed $func
*/
function igk_get_func_location_str($func){
    return ($g=igk_get_func_location($func)) ? $g->file: null;
}
///COOKIE FUNCTION
/**
*/
function igk_get_global_cookie($n, $default=0){
    return igk_getv($_COOKIE, $default);
}
///<summary>get plateform header info</summary>
/**
* get plateform header info
*/
function igk_get_header_obj(){
    $obj=igk_createobj();
    $m="/^IGK_/i";
    foreach(igk_get_allheaders() as $k=>$v){
        if(!preg_match($m, $k))
            continue;
        $s=substr($k, 4);
        $obj->$s=$v;
    }
    return $obj;
}
///<summary> used to created a hosted component</summary>
/**
*  used to created a hosted component
*/
function igk_get_host_component($host, $name, $callback){
    $t=$host->getParam(IGK_NAMED_NODE_PARAM);
    if($n=($t != null ? igk_getv($t, $name): null) ?? $callback()){
        $t[$name]=$n;
        $host->setParam(IGK_NAMED_NODE_PARAM, $t);
    }
    return $n;
}
///<summary>get package name component</summary>
///<param name="name">name of registrated package. name can be null or empty to list all components</param>
/**
* get package name component
* @param mixed name name of registrated package. name can be null or empty to list all components
*/
function igk_get_html_components($name, $sortbykey=0){
    $t=array();
    $nk=IGK_ENV_HTML_COMPONENTS;
    $cp=igk_get_env($nk);
    $userfunc=get_defined_functions()["user"];
    foreach($userfunc as $l=>$v){
        if(preg_match("/^".IGK_FUNC_NODE_PREFIX."{$name}(?P<name>(.)+)$/i", $v, $tab))
            $t[$tab["name"]]=["type"=>"f", "name"=>$tab[0]];
    }
    $classes=get_declared_classes();
    foreach($classes as $l=>$v){
        if(preg_match("/^IGKHtml{$name}(?P<name>(.)+)Item$/i", $v, $tab)){
            $t[$tab["name"]]=["type"=>"c", "name"=>$tab[0]];
        }
    }
    if($sortbykey)
        igk_array_sortbykey($t);
    return $t;
}
///<summary>convert to identifier</summary>
/**
* convert to identifier
*/
function igk_get_identifier($n){
    return preg_replace("/([^0-9a-z])/i", "_", $n);
}
///<summary></summary>
///<param name="options"></param>
///<param name="src"></param>
/**
* 
* @param mixed $options
* @param mixed $src
*/
function igk_get_image_uri($options, $src){
    $lnk=$src;
    $m=igk_xml_is_mailoptions($options);
    if($m){
        $uri=new IGKHtmlUri();
        $uri->setValue($lnk);
        $r=new IGKHtmlItem("img");
        if($options->Attachement){
            $d=null;
            if(file_exists($lnk)){
                $d=$options->Attachement->attachFile(igk_realpath($lnk), "images/pictures", null);
            }
            else{
                $q=igk_curl_post_uri($lnk);
                if(!empty($q)){
                    $d=$options->Attachement->attachContent($q, "images/pictures", null);
                }
            }
            if($d)
                $s="cid:".$d->CID;
        }
        else{
            $s=$uri->getValue($options);
        }
        return $s;
    }
    if(strstr($lnk, "..")){
        $lnk=str_replace("../", IGK_STR_EMPTY, $lnk);
    }
    $s=IGK_STR_EMPTY;
    $k=igk_html_uri($lnk);
    $rf=null;
    if(!empty($k)){
        if(IGKValidator::IsUri($k) || (preg_match("#^file://#i", $k)) || (preg_match("#^\{(.)*\}$#i", $k))){
            $s=$k;
        }
        else{
            $f=igk_getv(explode("?", $lnk), 0);
            if(file_exists($f)){
                $rf=igk_realpath($f);
                if(igk_is_ajx_demand()){
                    $s=igk_io_baseuri()."/".igk_html_uri(igk_io_basepath($rf));
                }
                else{
                    $s=igk_io_fullpath2uri($rf, true);
                }
            }
            else{
                $s="";
                $bf=igk_html_uri(igk_io_currentrelativepath($f));
                if(!file_exists($bf)){
                    $bf=null;
                }
                $s=$bf;
            }
        }
    }
    else
        $s=$k;
    if(($s != null) && (($kc=strpos($lnk, "?")) !== false)){
        $s .= "?".substr($lnk, $kc + 1);
    }
    return $s;
}
///<summary>get index file basename</summary>
/**
* get index file basename
*/
function igk_get_index($dir, $default='index.php'){
    $dab=igk_io_getfiles($dir, "/\index\.(php|phtml|html|htm)$/", false);
    return basename(igk_getv($dab, 0, $default));
}
///<summary></summary>
///<param name="classname"></param>
/**
* 
* @param mixed $classname
*/
function igk_get_instance_key($classname){
    $r=igk_get_env(strtolower(trim("sys://instance/key/".$classname)));
    $g=$r ?? strtolower("sys://".$classname."::ise");
    return $g;
}
///<summary>get last rendered document</summary>
/**
* get last rendered document
*/
function igk_get_last_rendered_document(){
    return IGKHtmlDoc::LastRenderedDocument();
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="name"></param>
///<param name="callback"></param>
///<param name="duration" default="10"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $name
* @param mixed $callback
* @param mixed $duration the default value is 10
*/
function igk_get_live_data($ctrl, $name, $callback=null, $duration=10){
    $t=$ctrl->getParam("sys://liveddata", array());
    $mt=igk_getv($t, $name);
    if ($mt && $mt->duration){
        $duration = $mt->duration;
    }
      

    if(!$mt || ((time() - $mt->time) > $duration)){
        if ($callback){
            $o=$callback();
            $mt=(object)array("time"=>time(), "data"=>$o, "duration"=>$duration);
            $t[$name]=$mt;
            $ctrl->setParam("sys://liveddata", $t);
        }else {
            igk_wln("duration exeed : ".$duration, $mt);
            return null;
        }
    }
    else
        $o=$mt->data;
    return $o;
}
///<summary></summary>
///<param name="fi"></param>
///<param name="ctrl" default="null"></param>
/**
* 
* @param mixed $fi
* @param mixed $ctrl the default value is null
*/
function igk_get_local_file($fi, $ctrl=null){
    $s=igk_io_dir($fi);
    $s=igk_html_resolv_img_uri($s);
    return $s;
}
///<summary></summary>
/**
* 
*/
function igk_get_manifest_content(){
    $info="igkapp_manifest";
    $out=<<<EOF
CACHE MANIFEST
#{$info} - manifest
EOF;
}
///<summary></summary>
///<param name="id"></param>
/**
* 
* @param mixed $id
*/
function igk_get_module($id){
    return igk_init_module($id);
}
///<summary></summary>
/**
* 
*/
function igk_get_module_dir(){
    if(is_dir(igk_const("IGK_MODULE_DIR"))){
        return IGK_MODULE_DIR;
    }
    return igk_io_dir(igk_get_packages_dir()."/Modules");
}
///<summary></summary>
///<param name="dir"></param>
/**
* 
* @param mixed $dir
*/
function igk_get_module_name($dir){
    $moddir= realpath(igk_get_module_dir());
    $dir = realpath($dir);
    //because of window
    if(stristr($dir, $moddir)){
        return igk_html_uri(substr($dir, strlen($moddir)+1));
    }
    return null;
}
///<summary>retrieve the active installed module</summary>
/**
* retrieve the active installed module
*/
function igk_get_modules(){
    $d=igk_io_basedir()."/".IGK_DATA_FOLDER."/.modules.json";
    if(!file_exists($d))
        return null;
    return igk_json_parse(igk_io_read_allfile($d));
}
///<summary>create a new data adapter from existing</summary>
/**
* create a new data adapter from existing
*/
function igk_get_new_data_adapter($controllerOrAdpaterName, $throwException=false){
    $ad=igk_get_data_adapter($controllerOrAdpaterName, false);
    if($ad !== null){
        $n=get_class($ad);
        $r=igk_create_adapter_from_classname($n);
        
        return $r;
    }
    return null;
}
///<summary>get new relative html relative uri value</summary>
/**
* get new relative html relative uri value
*/
function igk_get_nhru($value){
    return new IGKHtmlRelativeUriValueAttribute($value);
}
///<summary></summary>
///<param name="attr"></param>
///<param name="value"></param>
/**
* 
* @param mixed $attr
* @param mixed $value
*/
function igk_get_node_attr_value($attr, $value){
    if($value == null)
        return null;
    if(is_string($value))
        return IGKHtmlItem::GetStringAttribute($value, null);
    switch($attr){
        case "Ctrl":
        return IGKHtmlItem::GetStringAttribute($value->getName(), null);

    }
    return IGKHtmlItem::GetStringAttribute($value, null);
}
///<summary> used to retrieve node expression. inverse selection</summary>
/**
*  used to retrieve node expression. inverse selection
*/
function igk_get_node_expression($node, $dp=0){
    $d=get_class($node);
    if($node->tagName == "igk:text"){
        return $node->Content;
    }
    $o="";
    $tag=$node->tagName;
    $n="";
    if(preg_match(IGK_HTML_NODE_REGEX, $d)){
        $n=igk_preg_match(IGK_HTML_NODE_REGEX, $d, 'name');
        $tag="igk:".$n;
    }
    $o .= "<".$tag;
    if($n){
        $attr=$node->getExpressionAttributes();
        if($attr != null){
            foreach($attr as $v=>$t){
                $o .= " igk:".$v."=". igk_get_node_attr_value($v, $t);
            }
        }
    }
    if($node->HasAttributes){
        $s=trim($node->getAttributeString(null));
        if(!empty($s))
            $o .= " ".$s;
    }
    $c=IGKHtmlUtils::GetContentValue($node);
    $cc=trim($c);
    if(!$node->hasChilds && empty($cc)){
        $o .= "/>";
    }
    else{
        $o .= ">";
        $t=$node->Childs;
        $o .= $cc;
        if($t){
            foreach($t as $v){
                $o .= igk_get_node_expression($v, $dp);
            }
        }
        $o .= "</".$tag.">";
    }
    return $o;
}
///<summary>get registrated namespace</summary>
/**
* get registrated namespace
*/
function igk_get_ns(){
    return igk_reg_ns();
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_get_ns_func($name){
    $ns=__NAMESPACE__;
    if(!empty($ns))
        return $ns. "\\".$name;
    return $name;
}
///<summary></summary>
/**
* 
*/
function igk_get_packages_dir(){
    if (defined("IGK_PACKAGE_DIR"))
        return constant('IGK_PACKAGE_DIR');
    if (defined("IGK_APP_DIR"))
        return igk_io_dir(IGK_APP_DIR."/".IGK_PACKAGES_FOLDER);
    
}
///<summary></summary>
///<param name="palname" default="default"></param>
/**
* 
* @param mixed $palname the default value is "default"
*/
function igk_get_palette($palname="default"){
    $cp=igk_getctrl(IGK_PALETTE_CTRL, false);
    if($cp == null){
        return null;
    }
    $p=$palname == "default" ? igk_getv(igk_app()->Configs, "CurrentPaletteName", "default"): $palname;
    return igk_getv($cp->Palettes, $p, null);
}
///<summary></summary>
///<param name="ext"></param>
/**
* 
* @param mixed $ext
*/
function igk_get_path_exec($ext){
    $t=igk_get_env("sys://env//path_exec");
    return igk_getv($t, $ext);
}
///<summary></summary>
/**
* 
*/
function igk_get_platform_header_array(){
    return array(
            'igk-server: '.IGK_PLATEFORM_NAME,
            'igk-server-admin: bondje.doue@igkdev.com',
            'igk-server-build: '.IGK_PLATEFORM_NAME.'('.IGK_VERSION.')',
            'igk-cref: '.igk_app()->Session->getCRef()
        );
}
///<summary>get query option array from string</summary>
/**
* get query option array from string
*/
function igk_get_query_options($query_options){
    $data=array();
    preg_replace_callback("/(?P<name>[^;]+)=(?P<value>[^;]+)/i", function($m) use (& $data){
        $data[$m["name"]]=$m["value"];
    }
    , $query_options);
    return $data;
}
///<summary></summary>
///<param name="className"></param>
/**
* 
* @param mixed $className
*/
function igk_get_reg_class_file($className){
    return igk_get_reg_file("sys://reflection/class", $className);
}
///<summary></summary>
///<param name="key"></param>
///<param name="name"></param>
/**
* 
* @param mixed $key
* @param mixed $name
*/
function igk_get_reg_file($key, $name){
    $tkey="sys://functable";
    $fkey="sys://files";
    $g=igk_get_env($key);
    if($g && isset($g[$tkey][$name])){
        return $g[$fkey][$g[$tkey][$name]];
    }
    return null;
}
///<summary></summary>
///<param name="functionname"></param>
/**
* 
* @param mixed $functionname
*/
function igk_get_reg_func_file($functionname){
    return igk_get_reg_file("sys://reflection/funcs", $functionname);
}
///<summary>register global system controller</summary>
/**
* register global system controller
*/
function igk_get_regctrl($name){
    if(!IGKApp::IsInit()){
        return null;
    }
    return igk_app()->getControllerManager()->getRegCtrl($name);
}
///<summary> get rendering node</summary>
/**
*  get rendering node
*/
function igk_get_rendering_node(){
    return igk_get_env("sys://igk_html_rendered_node/node");
}
function igk_get_robjs($list, $replace=0, $request=null){
    return igk_get_robj(is_string($list)? explode("|", $list): $list, $replace, $request);
}
///<summary>retreive requested object as object</summary>
///<param name="callbackfilter">callable that will filter the request available key</param>
/**
* retreive requested object as object
* @param mixed $closure callbackfilter callable that will filter the request available key
*/
function igk_get_robj($callbackfilter=null, $replace=0, $request=null){
    $t=array();
    $m = $callbackfilter;
    if($m === null){
        $callbackfilter=function(& $k, $v, $rp){
            $rgx="/^cl/i";
            $p=preg_match($rgx, $k);
            if($p && $rp)
                $k=preg_replace($rgx, "", $k);
            return $p;
        };
    }
    else{
        if(is_string($m)){
            $callbackfilter=function(& $k, $v, $rp) use ($m){
                $rgx="/".$m."/i";
                $p=preg_match($rgx, $k);
                if($p && $rp){
                    $k=preg_replace($rgx, "", $k);
                }
                return $p;
            }; 
        }elseif (is_array($m)){
            $t = array_fill_keys($m, null);
            $callbackfilter = function (& $k, $v, $rp)use($m){
                if (in_array($k, $m)){
                    return true;
                }
                return false;
            };
        }
    }
    $request=$request ?? $_REQUEST;
    foreach($request as $k=>$v){
        if($callbackfilter($k, $v, $replace)){
            $t[$k]=igk_str_quotes($v);
        }
    }
    return (object)$t;
}
///<summary>get run script</summary>
/**
* get run script
*/
function igk_get_run_script_path(){
    return igk_getv(igk_app()->Configs, "php_run_script");
}
///<summary></summary>
/**
* 
*/
function igk_get_selected_builder_engine(){
    return igk_get_env("sys://form/selectedbuilderengine");
}
///<summary>return the map selection fo the node</summary>
///<return >array of selection</return>
/**
* return the map selection fo the node
*/
function igk_get_selector_map($node){
    $o=array();
    $toi=IGK_STR_EMPTY;
    $c=0;
    while($node){
        $oi="((\s|^)(".$node->tagName;
        $h=($cl=$node["class"]) ? $cl->getValue(): null;
        $id=$node["id"];
        $tf=IGK_STR_EMPTY;
        if(!empty($id)){
            $tf .= "(#".$id.")";
        }
        if(empty($h) == false){
            $b=explode(" ", $h);
            if(count($b) > 0){
                $i=0;
                $rk=IGK_STR_EMPTY;
                foreach($b as $r=>$s){
                    if(!empty($s)){
                        if($i)
                            $rk .= "|";
                        $rk .= "\.".$s;
                        $i=1;
                    }
                }
                if($i){
                    if(!empty($tf)){
                        $tf .= "|(".$rk.")";
                    }
                    else
                        $tf .= "(".$rk.")";
                }
            }
        }
        if(!empty($tf))
            $oi .= $tf."*|".$tf;
        $oi .= ")";
        if(empty($toi))
            $toi=$oi."$)".$toi;
        else{
            $toi="(((".$oi.")"."(|>))*".$toi."))";
        }
        $node=$node->getParentNode();
        if(!$node || ($node->tagName == "body")){
            break;
        }
        $c++;
        $o[]="/(".$toi.")/im";
    }
    $o[]="/(".$toi.")/im";
    return $o;
}
///<summary></summary>
///<param name="servicename"></param>
/**
* 
* @param mixed $servicename
*/
function igk_get_services($servicename){
    $k="sys://services/".$servicename;
    return igk_get_env($k);
}
///<summary>shortcut to get session param value</summary>
/**
* shortcut to get session param value
*/
function igk_get_session($name){
    return igk_app()->Session->$name;
}
///<summary>get session event by name </summary>
///<param name="name">the key of the name session to get</param>
/**
* get session event by name
* @param mixed name the key of the name session to get
*/
function igk_get_session_event($name){
    $ctx=igk_current_context();
    $key="sys://global_events";
    $e=strpos("running|starting", $ctx) !== false;
    $empty=array();
    $primary=igk_get_env($key, array());
    if($e){
        $c=array_merge_recursive($primary, igk_app()->Session->Events ?? array());
        $s=igk_getv($c, $name);
        return $s;
    }
    else{
        return igk_getv($primary, $name);
    }
}
///<summary>get controller session event handler</summary>
/**
* get controller session event handler
*/
function igk_get_session_event_handler(){
    $evtlist_controller=igk_get_env("sys://event/ctrl/handler");
    $m=igk_app()->getControllerManager();
    if(($evtlist_controller == null) && $m){
        $evtlist_controller=array();
        $ctrls=$m->getControllers();
        foreach($ctrls as $k){
            if((get_class($k) != __PHP_Incomplete_Class::class) && method_exists($k, "onHandleSystemEvent")){
                $evtlist_controller[]=$k;
            }
        }
        igk_set_env("sys://event/ctrl/handler", $evtlist_controller);
    }
    return $evtlist_controller;
}
///<summary>convert value to presentation</summary>
/**
* convert value to presentation
*/
function igk_get_sizev($v, $round=4){
    $sm_sizeFormat=array(
            "Tb"=>1099511627776,
            "Gb"=>1073741824,
            "Mb"=>1048576,
            "Kb"=>1024,
            "B"=>1
        );
    if($v == 0)
        return "0 byte";
    foreach($sm_sizeFormat as $k=>$vv){
        if($v > $vv){
            return round(($v/$vv), $round)." ".__("enum.memoryunit.".$k, $k);
        }
    }
    return "0 byte";
}
///<summary></summary>
/**
* 
*/
function igk_get_stack_depth(){
    return igk_count(debug_backtrace()) - 1;
}
///<summary>create a formatted string data object by retreive the {index} with args</summary>
/**
* create a formatted string data object by retreive the {index} with args
*/
function igk_get_string_format($str){
    $n=null;
    $tab=func_get_args();
    if(defined("__NAMESPACE__"))
        $n=__NAMESPACE__. 'IGKFormatString::Create';
    else
        $n='IGKFormatString::Create';
    return call_user_func_array($n, $tab);
}
///<summary></summary>
///<param name="obj"></param>
///<param name="property"></param>
/**
* 
* @param mixed $obj
* @param mixed $property
*/
function igk_get_string_propvalue($obj, $property){
    return IGKFormatGetValueString::Create($obj, $property);
}
///<summary></summary>
/**
* 
*/
function igk_get_system_user(){
    return igk_get_user_bylogin(IGK_SYS_USER_LOGIN) ?? igk_die("no system user found");
}
///<summary>get template binding attribute</summary>
/**
* get template binding attribute
*/
function igk_get_template_bindingattributes(){
    static $binding=null;
    if(!($o=igk_get_env($key="sys://template/bindingProperties"))){
        if(($binding === null) && file_exists($file = IGK_LIB_DIR."/Inc/igk_default_template_register.php")){
            include_once($file);
            $binding=1;
            $o=igk_get_env($key);
        }
    }
    return $o;
}
///<summary> used to get traceable array</summary>
/**
*  used to get traceable array
*/
function igk_get_trace_array($Ex, $level=0){
    $t=array();
    $i=0;
    foreach($Ex->getTrace() as $v){
        if($i>=$level){
            if(isset($v["file"])){
                $t[]=array($v["file"]=>$v["line"]);
            }
        }
        $i++;
    }
    return $t;
}
///<summary>get the type of the var </summary>
/**
* get the type of the var
*/
function igk_get_type($n){
    if(is_string($n))
        return "String";
    if(is_array($n)){
        return "Array";
    }
    if(is_object($n))
        return get_class($n);
    if(is_numeric($n))
        return "Number";
    return "Unknow";
}
///<summary></summary>
///<param name="uid"></param>
/**
* 
* @param mixed $uid
*/
function igk_get_user($uid){
    return IGK\Models\Users::select_row($uid);
}
///<summary></summary>
///<param name="login"></param>
/**
* 
* @param mixed $login
*/
function igk_get_user_bylogin($login){
    $conditions = [];
    if (!IGKValidator::IsEmail($login)){
        $conditions[] = (object)["operand"=>"OR",
        "conditions"=>[
            "clLogin"=>$login,
            "clLogin"=>$login."@".igk_app()->Configs->website_domain
        ]
           ];
    }else {
        $conditions["clLogin"] =$login;
    }
    return IGK\Models\Users::select_row($conditions);
}
///<summary></summary>
///<param name="name"></param>
///<param name="default" default="null"></param>
///<param name="reg" default="false"></param>
///<param name="comment" default="null"></param>
/**
* 
* @param mixed $name
* @param mixed $default the default value is null
* @param mixed $reg the default value is false
* @param mixed $comment the default value is null
*/
function igk_get_uvar($name, $default=null, $reg=false, $comment=null){
    if(empty($name))
        return $default;
    $ctrl=igk_getctrl(IGK_USERVARS_CTRL);
    if($ctrl == null)
        return $default;
    $t=igk_getv($ctrl->Vars, $name);
    if($t)
        return $t["value"];
    if($reg && $ctrl){
        $ctrl->regVars($name, $default, $comment);
        $ctrl->__storeVars();
    }
    return $default;
}
///<summary></summary>
///<param name="obj"></param>
///<param name="path"></param>
/**
* 
* @param mixed $obj
* @param mixed $path
*/
function igk_get_value($obj, $path){
    $c=explode("/", $path);
    $o=null;
    while($obj && (igk_count($c) > 0)){
        $g=null;
        $n=array_shift($c);
        if(is_object($obj)){
            $g=$obj->$n;
        }
        else if(is_array($obj)){
            if(!isset($obj[$n])){
                igk_die("faile to ge value ".$n);
            }
            $g=$obj[$n];
        }
        $obj=$g;
        $o=$g;
    }
    return $obj;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="name"></param>
///<param name="default" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $name
* @param mixed $default the default value is null
*/
function igk_get_view_arg($ctrl, $name, $default=null){
    $vars=$ctrl->getSystemVars();
    return igk_getv($vars, $name, $default);
}
///<summary>get current view args</summary>
/**
* get current view args
*/
function igk_get_view_args(){
    return igk_get_env(IGKEnvKeys::CTRL_CONTEXT_VIEW_ARGS);
}
///<summary></summary>
///<param name="param"></param>
/**
* 
* @param mixed $param
*/
function igk_get_viewparam($param){
    if(is_string($param)){
        return array($param);
    }
    return $param;
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_get_web_content($uri){
    igk_die("not implement ", __FUNCTION__);
}
///<summary>get web page content utility</summary>
/**
* get web page content utility
*/
function igk_get_webpagecontent(){
    if(igk_app()->CurrentPageFolder == IGK_CONFIG_PAGEFOLDER){
        return igk_getconfigwebpagectrl()->ConfigNode;
    }
    else{
        $c=igk_get_defaultwebpagectrl();
        if($c)
            return $c->page_content;
        else{
            $igk=igk_app();
            return $igk->Doc->bodycontent;
        }
    }
}
///<summary></summary>
/**
* 
*/
function igk_get_widgets(){
    return igk_get_env(IGK_ENV_WIDGETS_KEY);
}
///<summary></summary>
/**
* 
*/
function igk_getbase_access(){
    $server_n=igk_io_dir(igk_io_server_name());
    $rdir=igk_io_rootdir();
    $bdir=igk_io_basedir();
    $is_baseroot=$rdir == $bdir;
    $root_dir=igk_html_uri(igk_io_rootbasedir());
    $root_dir=igk_str_rm_start(igk_str_rm_last($root_dir, "/"), "/");
    $root_dir=!empty($root_dir) ? "\"/".$root_dir: "\"";
    $_rd=$root_dir."/Lib/igk/igk_redirection.php";
    $error_404=$_rd."?__c=404&__e=1\"";
    $error_403=$_rd."?__c=403&__e=1\"";
    $error_901=$_rd."?__c=901\"";
    $berror_901="Lib/igk/igk_redirection.php?__c=901";
    $const="constant";
    $domain=igk_io_currentbasedomainuri();
    $config=IGK_CONFIG_PAGEFOLDER;
    $out=eval("?>".igk_io_read_allfile(IGK_LIB_DIR."/Inc/.htaccess.index.default"));
    return $out;
}
///return the base index.php content
/**
*/
function igk_getbaseindex_src($libfile){
    $showError="";
    $inf=igk_createobj();
    $inf->date=igk_date_now();
    $inf->lib= $libfile; 
    $inf->comment=__(<<<EOF
this file is generate by balafon service. please do not modify until you know what you are doing.
EOF
    );
    $s = <<<EOF
<?php
// file: index.php
// date : {$inf->date}
// author : C.A.D. BONDJE DOUE
// mail: bondje.doue@igkdev.com
// generator: balafon service
// note: {$inf->comment}

{$showError}
//
//require framework
//
!defined('IGK_APP_DIR') && define('IGK_APP_DIR',dirname(__FILE__));
@require_once('{$inf->lib}');
igk_sys_render_index(__FILE__);
EOF;

return $s;

}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_getbool($v){
    if(is_bool($v))
        return $v;
    if(is_string($v)){
        switch(strtolower($v)){
            case "true":
            case "1":
            return true;
        }
        return false;
    }
    if($v)
        return true;
    return false;
}
///<summary></summary>
/**
* 
*/
function igk_getconfig_access(){
    $root_dir=igk_html_uri(igk_io_rootbasedir());
    $root_dir=igk_str_rm_start(igk_str_rm_last($root_dir, "/"), "/");
    $root_dir=!empty($root_dir) ? "\"/".$root_dir: "\"";
    $error_404=$root_dir."/Lib/igk/igk_redirection.php?__c=404&m=config\"";
    $error_403=$root_dir."/Lib/igk/igk_redirection.php?__c=403&m=config\"";
    $out=<<<EIO
#SetEnv PHP_VER 5_4
Options -Indexes
ErrorDocument 404 {$error_404}
ErrorDocument 403 {$error_403}

#no mod rewrite
<IfModule rewrite_module>
RewriteEngine On
#redirect all to index.php
RewriteCond "%{REQUEST_FILENAME}" !-f
RewriteCond "%{REQUEST_FILENAME}" !-d
RewriteRule ^(/)?(.)*$  "index.php" [QSA,L]
</IfModule>
EIO;
    return $out;
}
///<summary>get the configuration web page controller. </summary>
/**
* get the configuration web page controller.
*/
function igk_getconfigwebpagectrl(){
    $igk=igk_app();
    return igk_getctrl(IGK_CONF_CTRL);
}
///<summary>controller entry function </summary>
///<param name="ctrlname" type="mixed" >mixed string or class name </param>
/**
* controller entry function
* @param mixed ctrlname mixed string or class name
*/
function igk_getctrl($ctrlname, $throwex=true){
     
    if(!IGKApp::IsInit()){
        if($throwex){ 
            igk_die("/!\\ Application not initialized. can't get controller ".$ctrlname);
        }
        return igk_init_ctrl($ctrlname);
    }
    $app=igk_app();
    if(is_string($ctrlname)){
        $ctrlname=trim($ctrlname);
        if (empty($ctrlname)){
            return null;
        }
        $cc=$app->getControllerManager();
        if($cc === null || !is_object($cc)){
            if($throwex){
                igk_die("igk_app() ControllerManager is null. Session probably destroyed.".IGKApp::IsInit());
            }
            return null;
        }
        $v=$cc->$ctrlname;
        if($v == null){
            $v=igk_init_ctrl($ctrlname);
        }
        if($throwex && ($v === null)){               
            igk_die(__("Controller [{0}] not found", $ctrlname));
        }
        return $v;
    }
    else{
        if(is_object($ctrlname) && igk_is_ctrl($ctrlname)){
            return $ctrlname;
        }
    }
    return null;
}
///<summary>return a controller by clRegisterName</summary>
/**
* return a controller by clRegisterName
*/
function igk_getctrl_byid($id){
    if(!IGKApp::IsInit()){
        igk_die("application not initialized. can't get controller ".$id);
    }
    $app=igk_app();
    if(is_string($id)){
        $id=trim($id);
        $cc=$app->getControllerManager();
        $v=$cc->getRegisters()->$id;
        return $v;
    }
    return null;
}
///<summary></summary>
///<param name="className"></param>
/**
* 
* @param mixed $className
*/
function igk_getctrl_from_classname($className){
    if(!IGKApp::IsInit()){
        return null;
    }
    if(class_exists($className)){
        return igk_app()->getControllerManager()->getControllerFromClass($className);
    }
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_getctrls(){
    return igk_app()->getControllerManager()->getControllers();
}
///<summary>get conditional value. is condition return $value or null</summary>
/**
* get conditional value. is condition return $value or null
*/
function igk_getcv($condition, $value){
    if($condition)
        return $value;
    return null;
}
///<summary></summary>
///<param name="v"></param>
///<param name="default" default="null"></param>
/**
* 
* @param mixed $v
* @param mixed $default the default value is null
*/
function igk_getdv($v, $default=null){
    if(isset($v))
        return $v;
    return $default;
}
///<summary>function igk_geterror_code</summary>
///<param name="code"></param>
/**
* function igk_geterror_code
* @param mixed $code
*/
function igk_geterror_code($code){
    return igk_error($code)["Code"];
}
///<summary>get the value between value and default. if $value is empty or null default. default can be a callable expression</summary>
/**
* get the value between value and default. if $value is empty or null default. default can be a callable expression
*/
function igk_getev($value, $default){
    if(($value == null) || empty($value)){
        if(is_callable($default) && ($default instanceof Closure))
            return $default();
        return $default;
    }
    return $value;
}
///<summary>get font name</summary>
/**
* get font name
*/
function igk_getfn($f){
    return str_replace(" ", "-", $f);
}
///<summary>get GET value</summary>
/**
* get GET value
*/
function igk_getg($key, $value=null){
    return igk_getrequest($_GET, $key, $value);
}
///<summary>get a check POST value</summary>
/**
* get a check POST value
*/
function igk_getp($key, $value=null){
    return igk_getrequest($_POST, $key, $value);
}
///get object property value
/**
*/
function igk_getprop($obj, $prop){
    if($obj == null)
        return;
    return $obj->$prop;
}
///<summary></summary>
///<param name="array"></param>
///<param name="key"></param>
///<param name="default" default="null"></param>
/**
* 
* @param mixed $array
* @param mixed $key
* @param mixed $default the default value is null
*/
function igk_getpv($array, $key, $default=null){
    $n=$key;
    if(!is_array($n)){
        $n=explode("/", $n);
    }
    if(($array === null) || (empty($key) && ($key !== 0))){
        return $default;
    }
    if($key === null){
        igk_die(__FUNCTION__." key not defined");
    } 
    $def=$default;
    $o=null;
    $ckey=""; 
    while($array && (($q=array_shift($n)) || ($q === 0))){
        $o=null;
        $ckey=$q;
        if(is_array($array) && isset($array[$q]))
            $o=$array[$q];
        else if(is_object($array)){ 
            if(isset($array->$q))
                $o=$array->$q;
            else{
                $t=class_implements(get_class($array));
                if(isset($t["ArrayAccess"])){
                    $o=$array[$q];
                }
            }
        }
        $array=$o;
    }
    if($o === null){
        if( !is_string($def) && igk_is_callable($def)){           
            $o=call_user_func_array($def, array());
            $array[$ckey]=$o;
        }
        else{
            $o=$def;
        }
    }
    return $o;
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_getquery_args($uri){
    $q=parse_url($uri);
    $tab=array();
    if(isset($q["query"])){
        $uri = $q["query"];
    }
    parse_str($uri, $tab);
    return $tab;
}
///<summary> get request value</summary>
/**
*  get request value
*/
function igk_getr($key, $value=null){    
    return igk_getrequest($_REQUEST, $key, $value);
}
///<summary>get uploaded file info</summary>
function igk_getf($file){
	if ($c = igk_getv($_FILES, $file)){
        if (!isset($c["error"]) && is_array($c)){
            $t = [];
            foreach($c as $m){
                if ($m["error"] == 0){
                    $t[] = (object)$m;
                }
            }
            if (count($t)>0){
                return $t;
            }
            return null;
        }

		if ($c["error"] == 0){
			return (object)$c;
		}
	}
	return null;
}
///<summary></summary>
///<param name="tab"></param>
///<param name="inTab" default="null"></param>
/**
* 
* @param mixed $tab array of keys
* @param mixed $inTab default arrray
*/
function igk_getr_k($tab, $inTab=null){
    $o=array();
    $inTab=$inTab ?? $_REQUEST;
    foreach($tab as $k){
        $o[$k]=igk_getv($inTab, $k);
    }
    return (object)$o;
}
///<summary></summary>
///<param name="values"></param>
///<param name="tab" default="null"></param>
/**
* 
* @param mixed $values
* @param mixed $tab the default value is null
*/
function igk_getr_kv($values, $tab=null){
    if($tab == null)
        $tab=$_REQUEST;
    $o=[];
    foreach($values as $k=>$v){
        $o[$k]=igk_getv($tab, $k, $v);
    }
    return $o;
}
///<summary></summary>
///<param name="tab"></param>
///<param name="key"></param>
///<param name="value" default="null"></param>
/**
* 
* @param mixed $tab
* @param mixed $key
* @param mixed|closure $value the default value is null
*/
function igk_getrequest($tab, $key, $value=null){
    if(is_object($key))
        return $value;
    if(isset($tab[$key])){
        $t=$tab[$key];
        if(!is_array($t))
            return igk_str_quotes($t);
        return $t;
    }
    if ( is_callable($value) && ($value instanceof closure)){        
        return $value();
    }
    return $value;
}
///<summary>get filtered request values</summary>
///<exemple>igk_getrs("data", "file", "text") | igk_getrs([..])</exemple>
/**
* get filtered request values
* param mixed 
*/
function igk_getrs(){
    if( ($c = func_num_args()) > 0){
        $tab=array();
        $tm = func_get_args();
        if (($c==1 ) && is_array($m = func_get_arg(0))){
            $tm = $m;
        }
        foreach($m as $v){
            $t=igk_getr($v);
            $tab[$v]=$t;
        }        
        return $tab;
    }
    return $_REQUEST;
}
function igk_getre($n, $default=null){
    if (empty($b = igk_getr($n)))
        {
            $b = $default;
        }
    return $b;
}
///get request object value
/**
*/
function igk_getru($key, $value=null){
    if(is_object($key))
        return $value;
    if(isset($_REQUEST[$key]))
        return str_replace("-", "_", igk_str_quotes($_REQUEST[$key]));
    return $value;
}
///<summary>get session param value</summary>
/**
* get session param value
*/
function igk_gets($key, $value=null){
    return igk_getrequest($_SESSION, $key, $value);
}
///<summary></summary>
/**
* 
*/
function igk_getserverinfo(){
    return array();
}
///<summary>get the setted-value</summary>
/**
* get the setted-value
*/
function igk_getsv($value, $default=null){
    if(isset($value)){
        return $value;
    }
    return $default;
}
///<summaryt>get path value</summary>
///<param name="d">object where to get value</param>
///<param name="n">path to value.</param>
///<param name="def">default value in case path not match</summary>
///<exemple>igk_gettsv($r, "info/index")</exemple>
///<test ref="../test/test_gettsv"></test>
/**
* @param mixed $d object where to get value
* @param mixed $n path to value.
* @param mixed $def default value in case path not match
*/
function igk_gettsv($d, $n, $def=null){
    return igk_conf_get($d, $n, $def);
}
///<summary>get the value between value and default. if $value is empty or null default</summary>
/**
* get the value between value and default. if $value is empty or null default
*/
function igk_gettv($value, $default){
    if(($value == null) || empty($value))
        return $default;
    return $value;
}
///<summary> get value in array</summary>
///<param name="default"> mixed, default value or callback expression </param>
/**
*  get value in array
* @param mixed default value or callback expression
*/
function igk_getv($array, $key, $default=null){
    return igk_getpv($array, array($key), $default);
}
function igk_getv_fallback($item, $keys){
    if (is_string($keys)){
        $keys = explode("|", $keys);
    }
    foreach($keys as $r){
        if (! ($m = igk_getv($item, $r))){
            return $m;
        }
    }
    return null;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_globalvars($n){
    $s=igk_app()->Session->getParam(IGKSession::GLOBALVARS);
    return igk_getv($s, $n);
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_globalvars_isset($n){
    $s=igk_app()->Session->getParam(IGKSession::GLOBALVARS);
    if(($s == null) || !isset($s[$n]))
        return false;
    return true;
}
///<summary></summary>
/**
* 
*/
function igk_handle_cmd_line(){
    $tab=array_slice(igk_getv($_SERVER, "argv"), 1);
    $n=igk_getv($tab, 0);
    if($n && ($g=igk_getv(igk_get_env("sys://cmd/args"), $n))){
        call_user_func_array($g->callback, array_slice($tab, 1));
        return true;
    }
    return false;
}
///<summary>handle component uri</summary>
/**
* handle component uri
*/
function igk_handle_component_uri(){
    $uri=trim(igk_getv(explode('?', igk_io_request_uri()), 1));
    if(!empty($uri) && ($uri[0] == "!")){
        $k="^!/:id(/|(/:function(/|/:params+)?)?)";
        $s=igk_pattern_matcher_get_pattern($k);
        if(preg_match($s, $uri)){
            $keys=igk_str_get_pattern_keys($k);
            $s=igk_pattern_get_matches($s, $uri, $keys);
            extract($s);
            $doc=igk_get_last_rendered_document();
            $comp=$doc->getComponent($id);
            $c=igk_getv($comp->getParam(IGK_COMPONENT_REG_FUNC_KEY), $function);
            if(is_callable($c)){
                $t=array($comp);
                if(is_string($params) && (strlen($params=trim($params)) > 0))
                    $params=array($params);
                if($params)
                    $t=array_merge($t, $params);
                if(is_array($c))
                    call_user_func_array($c, $t);
                else
                    call_user_func_array($c, $t);
            }
            return true;
        }
    }
    return false;
}
///<summary> used to handle a view command with function list</summary>
/**
*  used to handle a view command with function list
*/
function igk_handle_view_cmd($params, $fclist){
    include(IGK_LIB_DIR."/Inc/igk_fc_call.pinc");
    return $fc_result;
}
///<summary>specifu cache output</summary>
/**
* specifu cache output
*/
function igk_header_cache_output($second=3600){
    $ts=gmdate("D, d M Y H:i:s", time() + $second). " GMT";
    header("Expires: {$ts}");
    header("Pragma: cache");
    header("Cache-Control: max-age={$second}, public");
}
///<summary></summary>
///<param name="file"></param>
/**
* 
* @param mixed $file
*/
function igk_header_content_file($file){
    igk_header_set_contenttype(strtolower(igk_io_path_ext($file)));
}
///<summary> return mime type</summary>
/**
*  return mime type
*/
function igk_header_mime(){
    $is_chrome=IGKUserAgent::IsChrome();
    if($is_chrome && !isset($_SERVER["HTTP_REFERER"])){
        $is_chrome=0;
    }
    $mime=igk_get_env("sys://mimetype") ?? array(
            "svg"=>"image/svg+xml",
            "xml"=>$is_chrome ? "text/html": "application/xml",
            "pdf"=>"application/pdf",
            "json"=>(igk_check_ie_version() || $is_chrome) ? "text/html": "application/json",
            "png"=>"image/png",
            "jpeg"=>"image/jpeg",
            "jpg"=>"image/jpeg",
            "ico"=>"image/png",
            "html"=>"text/html",
            "txt"=>IGK_CT_PLAIN_TEXT,
            "js"=>"text/javascript",
            "css"=>"text/css",
            "ics"=>"text/calendar",
            "woff"=>"application/font-woff",
            "woff2"=>"application/font-woff2",
            "ttf"=>"application/x-font-ttf",
            "xsl"=>igk_check_ie_version(12) ? IGK_CT_PLAIN_TEXT: "text/xsl"
        );
    return $mime;
}
///<summary></summary>
/**
* 
*/
function igk_header_no_cache(){
    $t="Thu, 04 Aug 1983 21:00:00 GMT";
    header("Expires: Thu, 04 Aug 1983 21:00:00 GMT");
    header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
    header("Cache-Control: post-check=0, pre-check=0", false);
    header("Pragma: no-cache");
    // chrome reset connexion if uncomment
    header("Last-Modified: ". $t);
    header("Connection: close");
}
///<summary></summary>
///<param name="type"></param>
///<param name="charset" default="charset=utf-8"></param>
/**
* 
* @param mixed $type
* @param mixed $charset the default value is "charset=utf-8"
*/
function igk_header_set_contenttype($type, $charset="charset=utf-8"){
    $data="";
    $mime=igk_header_mime();
    if($charset)
        $charset=";".$charset;
    $data=igk_getv($mime, $type, IGK_CT_PLAIN_TEXT).$charset;
    header("Content-Type: ".$data);
}
///<summary></summary>
///<param name="code"></param>
/**
* 
* @param mixed $code
*/
function igk_header_status($code){
    return igk_getv(igk_get_env("sys://header/statuscode", function(){
        $t=array(
            301=>"301 Move Permanently",
            302=>"302 Found",
            403=>"403 Forbiden. You have no authorisation to perform that request",
            404=>"404 Page Not found",
            414=>"414 Request too long",
            500=>"500 Server Error",
            501=>"501 Misconfiguration",
            502=>"502 Requirement missing"
        );
        return $t;
    }), $code);
}
///<summary>convert header string to associative array</summary>
/**
* convert header string to associative array
*/
function igk_header_str2array($s){
    $tab=array();
    $ot=array();
    $n="";
    $tab=explode("\r\n", $s);
    foreach($tab as $line){
        if(empty(trim($line)))
            continue;
        $ton=explode(":", $line);
        $on=trim($ton[0]);
        if(!empty($on) && preg_match("/^[a-z-]+$/i", trim($on))){
            $n=$on;
            $v=trim(substr($line, strpos($line, ":") + 1));
        }
        else{
            $v=$ot[$n]."\r\n".$line;
        }
        $ot[$n]=$v;
    }
    return $ot;
}
///<summary></summary>
///<param name="name"></param>
///<param name="args"></param>
/**
* 
* @param mixed $name
* @param mixed $args the default value is
* @param mixed $options to pass to to okthe default value is
*/
function igk_hook($name, $args=array(), $options=null){ 
    $def = null;
    if ($options){
        $def = igk_get_robjs("default|output", 0, (object)$options);        
    }
    $hooks=igk_environment()->{"sys://hooks"};
    if(!$hooks){
        $hooks=array();
    }
    // igk_wln_e($name);

    $tab=igk_getv($hooks, $name);
    if($tab){
        $list=& $tab->list;
        if($tab->changed){
            usort($list, function($a, $b){
                if($a->priority < $b->priority)
                    return -1;
                if($a->priority == $b->priority)
                    return 0;
                return 1;
            });
            $tab->changed=0;
        }
        $cargs=array((object)array("args"=>$args, "handle"=>0, "lastoutput"=>null, "output"=>$def ? $def->output: null));
        $count=0;
        foreach($list as $v){
            if(!is_callable($v->callback)){
                if(is_object($v->callback)){ 
                    $cargs[0]->lastoutput = igk_invoke_callback_obj(null, $v->callback, $cargs);
                }
                else{
                    igk_wln_e(__FILE__.':'.__LINE__,
                    " : not a callable ", $name, $v->callback);
                    continue;
                }
            }
            else
                $cargs[0]->lastoutput = call_user_func_array($v->callback, $cargs);
            if($cargs[0]->handle){
                break;
            }
            $count++;
        }
        return $cargs[0]->output;
    }
    return $def ? $def->output : $args;
}

function igk_html_use($p){
    static $presets;
    if ($presets === null)
        $presets = [];
    if (!isset($presets[$p])){
        $f = IGK_LIB_DIR."/Data/presets/".$p.".html";
        if (file_exists($f)){
            $presets[$p] = file_get_contents($f);
        }
    }
    return igk_getv($presets, $p, "preset view : ".$p);
}

///<summary></summary>
///<param name="target"></param>
///<param name="hrefuri"></param>
///<param name="clickuri" default="null"></param>
/**
* 
* @param mixed $target
* @param mixed $hrefuri
* @param mixed $clickuri the default value is null
*/
function igk_html_a_link($target, $hrefuri, $clickuri=null){
    $a=$target->add("a");
    if($a){
        $a["href"]=$hrefuri;
        if($clickuri)
            $a["onclick"]="javascript:".$clickuri." return false;";
    }
    return $a;
}
///<summary></summary>
///<param name="item"></param>
///<param name="target"></param>
///<param name="index" default="null"></param>
/**
* 
* @param mixed $item
* @param mixed $target
* @param mixed $index the default value is null
*/
function igk_html_add($item, $target, $index=null){
    IGKHtmlUtils::AddItem($item, $target, $index);
}
///<summary></summary>
///<param name="doc"></param>
///<param name="file"></param>
///<param name="temp"></param>
/**
* 
* @param mixed $doc
* @param mixed $file
* @param mixed $temp the default value is 0
*/
function igk_html_add_balafonjsscriptfile($doc, $file, $temp=0){
    $g=$doc->getParam("sys://igk/tempbalafonjs", array());
    $host=$doc->getParam("sys://igk/tempbalafonjs/node", function() use ($doc){
        $b=igk_createnotagnode();
        $doc->add($b);
        $doc->setParam("sys://igk/tempbalafonjs/node", $b);
        return $b;
    });
    $b=null;
    if(isset($g[$file])){
        $b=$g[$file];
    }
    else if(file_exists($file)){
        $b=igk_createnode("balafonJS");
        if($temp){
            $host->add(new IGKHtmlSingleNodeViewer($b, igk_create_func_callback("igk_rm_balafonscriptfile_callback", array("file"=>$file, "doc"=>$doc))));
        }
        else{
            $host->add($b);
        }
        $g[$file]=$b;
    }
    if($b){
        $b->Content=igk_io_read_allfile($file);
    }
    $doc->setParam("sys://igk/tempbalafonjs", $g);
}
///<summary>utility add confirm input</summary>
/**
* utility add confirm input
*/
function igk_html_add_confirm($frm){
    $frm->addInput("confirm", "hidden", 1);
}
///<summary></summary>
///<param name="doc"></param>
///<param name="file"></param>
///<param name="temp"></param>
/**
* 
* @param mixed $doc
* @param mixed $file
* @param mixed $temp the default value is 0
*/
function igk_html_add_doc_script($doc, $file, $temp=0){
    $g=$doc->getParam("sys://igk/tempbalafonjs", array());
    $host=$doc->getParam("sys://igk/tempbalafonjs/node", function() use ($doc){
        $b=igk_createnotagnode();
        $doc->head->add($b);
        $doc->setParam("sys://igk/tempbalafonjs/node", $b);
        return $b;
    });
    $b=null;
    if(isset($g[$file])){
        $b=$g[$file];
    }
    else if(file_exists($file)){
        $b=igk_createnode("script");
        if($temp){
            $host->add(new IGKHtmlSingleNodeViewer($b, igk_create_func_callback("igk_rm_balafonscriptfile_callback", array("file"=>$file, "doc"=>$doc))));
        }
        else{
            $host->add($b);
        }
        $g[$file]=$b;
    }
    if($b){
        $b->Content=igk_io_read_allfile($file);
    }
    $doc->setParam("sys://igk/tempbalafonjs", $g);
}
///<summary>html utility . get attributes string presentation</summary>
/**
* html utility . get attributes string presentation
*/
function igk_html_array_attrs($tab){
    $s="";
    foreach($tab as $k=>$v){
        $kv=IGKHtmlItem::GetStringAttribute($v, null);
        if($kv){
            $s .= " ".$k."=".$kv."";
        }
    }
    return $s;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="name"></param>
///<param name="target"></param>
///<param name="data" default="null"></param>
///<param name="tagname" default="null"></param>
///<param name="forcecreation" default="true"></param>
///<param name="evalExpression" default="true"></param>
///<param name="articleoptions" default="true"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $name
* @param mixed $target
* @param mixed $data to pass to article. the default value is null
* @param mixed $tagname the default value is null
* @param mixed $forcecreation the default value is true
* @param mixed $evalExpression the default value is true
* @param mixed $articleoptions the default value is true
* @return mixed|void
*/
function igk_html_article($ctrl, $name, $target, $data=null, $tagname=null, $forcecreation=true, $evalExpression=true, $articleoptions=true){
    $f=$name;
    $n=null;
    $d=dirname($name);
    if(!file_exists($f)){
        if(!empty($d) && ($d != ".") && is_dir($d) || IGKString::StartWith($d, igk_io_basedir())){
            $f=$ctrl->getArticleInDir(basename($name), $d);
            if(!is_dir($d) && !IGKIO::CreateDir($d)){
                igk_ilog(__FUNCTION__." create directory [{$d}] failed.");
                return;
            }
        }
        else{
            if(!file_exists($name) && ($ctrl != null))
                $f=$ctrl->getArticle($name);
            else
                return;
        }
    }
    if($forcecreation && !file_exists($f)){
        igk_io_save_file_as_utf8_wbom($f, IGK_STR_EMPTY, true);
    }
    if(($target == null) && ($tagname == null)){
        return;
    }

    if($tagname == null){
        $n=$target;
    }
    else{
        $n=$target->add($tagname);
    }
    if($n == null)
        igk_die(__FUNCTION__."::target is null");
    $ldcontext=igk_createloading_context($ctrl, $data);
    
    igk_push_article_chain($f, $ldcontext);
    if(!is_dir($f) && file_exists($f)){
        $content=igk_io_read_allfile($f);
        if($evalExpression){
            $content=igk_html_eval_global_script($content, $ctrl, $data, basename($f));
        }
        
        if($tagname == null){
            $n=$target;
        }
        if($n != null){  
            $n->Load($content, $ldcontext);
            igk_html_treatinput($n);
        }
    }
    if($articleoptions){
        $s=igk_html_article_options($ctrl, $n, $f);
    }
    igk_pop_article_chain();
    return $n;
}
///<summary>add articles options</summary>
/**
* add articles options
* @return mixed|void
*/
function igk_html_article_options($ctrl, $node, $filename, $force=0){
    $app=igk_app();
    if(!$force && !($app->Configs->allow_article_config && $app->ConfigMode && ($node != null))){
        return;
    }
    $c=new IGKHtmlArticleConfigNode($ctrl, $node, $filename, $force);
    $c->Index=-1000;
    return $c;
}
///<summary></summary>
///<param name="value"></param>
/**
* 
* @param mixed $value
*/
function igk_html_beginbinding($value){
    igk_die("obselete :".__FUNCTION__);
}
///<summary>bind content</summary>
///<remark></remark>
///<param name="ctrl">source controller.can be null</param>
///<param name="content">the content to evaluate</param>
///<param name="raw">row data to pass</param>
/**
* bind content
* @param mixed $ctrl source controller.can be null
* @param mixed $content the content to evaluate
* @param mixed $rawrow data to pass
*/
function igk_html_bind_content($ctrl, $content, $raw=null){
    $t=igk_createnode("div");
    igk_html_bind_target($ctrl, $t, $content, $raw);
    return $t->innerHTML;
}
///<summary>bind node to data model</summary>
///<param name="ctrl">the controller</param>
///<param name="model">the node model to bind</param>
///<param name="targetnode">cibing node</param>
/**
* bind node to data model
* @param mixed $ctrl the controller
* @param mixed $modelthe node model to bind
* @param mixed $targetnode cibing node
*/
function igk_html_bind_node($ctrl, $model, $targetnode, $entries=null, $rendertarget=true, & $bindchild=false){
    $o=array();
    if($model && $model->HasChilds){
        $c=$model;
        if($c == null)
            return;
        $tabinfo=0;
        $v_info_count=0;
        $tabinfo=igk_html_bindinginfo($c);
        $v_info_count=igk_count($tabinfo);
        if(($v_info_count > 0) && $entries){
            igk_html_bindentry($ctrl, $entries, $tabinfo, $o, $c);
            $bindchild=true;
        }
        else{
            $i=$c->innerHTML;
            if(is_array($entries)){
                igk_set_env("sys://html/bindentries", 1);
                foreach($entries as $k=>$v){
                    igk_set_env("sys://html/bindkey", $k);
                    $o[]=(object)array(
                            "src"=>igk_html_treat_content($i, $ctrl, $v)->render(),
                            "raw"=>$v,
                            "key"=>$k
                        );
                }
                igk_set_env("sys://html/bindentries", null);
                igk_set_env("sys://html/bindkey", null);
            }
            else{
                $o[]=(object)array(
                        "src"=>igk_html_treat_content($i, $ctrl, $entries)->render(),
                        "raw"=>$entries,
                        "key"=>0
                    );
            }
        }
    }
    if($targetnode == null)
        $targetnode=$c;
    $ctx=igk_createobj(array(
            "ctrl"=>$ctrl,
            "entries"=>$entries,
            "parent"=>$targetnode,
            "raw"=>$entries,
            "key"=>null
        ));
    foreach($o as $k=>$v){
        if(!is_object($v)){
            $b=$targetnode->Load($v, $ctx);
            continue;
        }
        $ctx->row=$v->row;
        $ctx->key=$v->key;
        $b=$targetnode->Load($v->src, $ctx);
    }
    if($rendertarget){
        return $targetnode->Render();
    }
    return IGK_STR_EMPTY;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="targetnode"></param>
///<param name="textcontent"></param>
///<param name="entries" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $targetnode
* @param mixed $textcontent
* @param mixed $entries the default value is null
*/
function igk_html_bind_target($ctrl, $targetnode, $textcontent, $entries=null){
    $d=igk_createnode("div");
    $d->LoadExpression($textcontent);
    return igk_html_bind_node($ctrl, $d, $targetnode, $entries);
}
///<summary>html bind data to target node</summary>
///<param name="ctrl">the controller</param>
///<param name="targetnode">cibling node</param>
///<param name="templateArticleName">template or article for bindding</param>
///<param name="entries">data entries</param>
///<param name="rendertarget">render target node</param>
///<param name="createIfNoExists" default="true" >create template view if not exists</param>
///<param name="showAdminOption" default="true" >attach administration options</param>
/**
* html bind data to target node
* @param mixed $ctrl the controller
* @param mixed $targetnode cibling node
* @param mixed $templateArticleName template or article for bindding
* @param mixed $entries data entries
* @param mixed $rendertargetrender target node
* @param mixed $createIfNoExists create template view if not exists
* @param mixed $showAdminOption attach administration options
*/
function igk_html_binddata($ctrl, $targetnode, $templateArticleName, $entries=null, $rendertarget=true, $createIfNoExists=true, $showAdminOption=1){
    $d=igk_createnode("div");
    if(!file_exists($templateArticleName)){
        if($ctrl)
            $templateArticleName=$ctrl->getArticle($templateArticleName);
        if(!file_exists($templateArticleName)){
            if(!$createIfNoExists)
                return;
            IGKIO::WriteToFileAsUTF8WBOM($templateArticleName, "", true);
        }
    }
    $d->LoadExpression(igk_html_initbindexpression(IGKIO::ReadAllText($templateArticleName)), null);
    $n=igk_html_bind_node($ctrl, $d, $targetnode, $entries, $rendertarget);
    if($showAdminOption)
        $s=igk_html_article_options($ctrl, $targetnode, $templateArticleName);
    return $n;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="entries"></param>
///<param name="tabinfo"></param>
///<param name="o" ref="true"></param>
///<param name="$c" ref="true"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $entries
* @param mixed $tabinfo
* @param mixed * $o
* @param mixed * $c
*/
function igk_html_bindentry($ctrl, $entries, $tabinfo, & $o, & $c){
    $r=igk_getv($entries, "Rows");
    if($r != null){
        foreach($entries->Rows as $keys=>$k){
            igk_html_bindsetup($ctrl, $tabinfo, $k, $keys);
        }
    }
    else{
        if(is_array($entries)){
            foreach($entries as $keys=>$k){
                igk_html_bindsetup($ctrl, $tabinfo, $k, $keys);
            }
        }
        else{
            igk_html_bindsetup($ctrl, $tabinfo, $entries);
        }
    }
    $s=$c->getinnerHtml(null);
    $o[]=$s;
    $c->ClearChilds();
}
///<summary>return array of data binding node info</summary>
/**
* return array of data binding node info
*/
function igk_html_bindinginfo($node){
    $tab=igk_html_getallchilds($node);
    $c=array();
    $visiblerows=igk_getv(igk_app()->Configs, "app_visible_row", 50);
    foreach($node->Childs as $k){
        if(($h=igk_getv($k, "igk-data-binding")) != null){
            $c[]=(object)array(
                    "node"=>$k,
                    "binding"=>$h,
                    "type"=>"igk-data-binding",
                    "visiblerow"=>igk_getv($k,
                    "igk-data-binding-visible-row",
                    $visiblerows)
                );
        }
        else if(igk_getbool(($h=igk_getv($k, "igk-data-row-binding"))) == true){
            $p=$k->getParentNode();
            $c[]=(object)array(
                    "node"=>$k,
                    "parent"=>$p,
                    "Index"=>$k->Index,
                    "binding"=>$h,
                    "data"=>igk_getv($k,
                    "igk-data-row-data",
                    null),
                    "type"=>"igk-data-row-binding",
                    "visiblerow"=>igk_getv($k,
                    "igk-data-binding-visible-row",
                    $visiblerows),
                    "rowcheckExpression"=>igk_getv($k,
                    "igk-data-row-checkexpression",
                    null),
                    "key"=>0
                );
            igk_html_unset_template_properties($k);
            igk_html_rm($k);
            return $c;
        }
        else if(igk_getbool(($h=igk_getv($k, "igk-data-full-row-binding"))) == true){
            $c[]=(object)array(
                    "node"=>$k,
                    "parent"=>$k->getParentNode(),
                    "binding"=>$h,
                    "type"=>"igk-data-full-row-binding",
                    "tag"=>igk_getv($k,
                    "igk-data-full-row-binding-tag"),
                    "visiblerow"=>igk_getv($k,
                    "igk-data-binding-visible-row",
                    igk_getv(igk_app()->Configs,
                    "app_visible_row",
                    50))
                );
            igk_html_rm($k);
        }
        igk_html_unset_template_properties($k);
        if($k->HasChilds){
            $c=array_merge(igk_html_bindinginfo($k));
        }
    }
    return $c;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="tabinfo"></param>
///<param name="row"></param>
///<param name="keys"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $tabinfo
* @param mixed $row
* @param mixed $keys the default value is 0
*/
function igk_html_bindsetup($ctrl, $tabinfo, $row, $keys=0){
    foreach($tabinfo as $info){
        $info->key=$keys;
        igk_html_treatbinding($info, $row, $ctrl);
    }
}
///<summary>utility used to build a form</summary>
///<exemple>
///igk_html_build_form_array($node, [IGK_FD_NAME=>["type"=>]]
///</exemple>
/**
* utility used to build a form
*/
function igk_html_build_form_array($ul, $param, $targettagname="li"){
    foreach($param as $k){
        $id=$k[0];
        $type=strtolower($k[1]);
        $required=igk_getv($k, 2);
        $args=igk_getv($k, 3);
        $li=$ul->add($targettagname);
        $a=null;
        $lb=$li->add("label", array("for"=>$id));
        $lb->Content=__("lb.".$id);
        if($required){
            $lb->setClass("clrequired");
        }
        switch($type){
            case "textarea":
            $a=$li->addTextArea($id);
            $a->Content=$args;
            break;
            case "radio":
            case "checkbox":
            $a=$li->addInput($id, $type);
            if(igk_getr($id)){
                $a["checked"]="true";
            }
            break;
            case "hidden":
            case "text":
            case "password":default:
            $a=$li->addInput($id, $type);
            $a["type"]=strtolower($type);
            $a["value"]=$args ? igk_getv($args, "value", igk_getr($id)): igk_getr($id);
            break;
        }
        $a["id"]=
        $a["name"]=$id;
        $args=igk_getv($k, 3);
        if($args != null){
            $a->AppendAttributes($args);
        }
    }
}
///<summary></summary>
///<param name="queryresult"></param>
/**
* 
* @param mixed $queryresult
*/
function igk_html_build_query_result_table($queryresult){
    $table=igk_createnode("table");
    if(!is_bool($queryresult))
        igk_html_db_build_table($table, $queryresult);
    return $table;
}
///<summary>build select options with array</summary>
///<note>data is array of object with (text | select) property .
///selected will be used to set the selected option. if not null
///</note>
/**
* build select options with array
*/
function igk_html_build_select_array($sl, $data, $selected=null){
    foreach($data as $k=>$v){
        $opt=$sl->add("option");
        $opt["value"]=$k;
        $opt->Content=$v->text;
        if(($selected == $k) || (($selected == null) && igk_getv($v, "select")))
            $opt->setAttribute("selected", "true");
    }
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="target"></param>
///<param name="name"></param>
///<param name="option"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $target
* @param mixed $name
* @param mixed $option
*/
function igk_html_build_select_model($ctrl, $target, $name, $option){
    igk_html_binddata($ctrl, $target, $name, $option);
}
///<summary>build select options</summary>
///<param name="target">select node</param>
///<note>
///in selectedattributes[] displaykey: pipe expression
///</note>
/**
* build select options
* @param mixed $target select node
*/
function igk_html_build_select_option($target, $tab, $selectattributes=null, $selectedvalue=null){
    $a=$selectattributes;
    if(igk_getv($a, "allowEmpty"))
        $target->add("option", array(
            "value"=>igk_getsv(igk_getv($a,
            "emptyValue",
            IGK_STR_EMPTY))
        ))->Content=IGK_HTML_SPACE;
    $kv=igk_getsv(igk_getv($a, "valuekey"));
    $dv=igk_getsv(igk_getv($a, "displaykey"));
    $piping=null;
    if($dv){
        $_p=array_values(array_filter(explode("|", $dv)));
        if(count($_p) > 1){
            $dv=$_p[0];
            $piping=implode('|', array_slice($_p, 1));
        }
    }
    $resolvtext=igk_getv($a, "resolvtext");
    $selectedv=igk_getv($a, "selected", $selectedvalue);
    if(is_array($tab)){
        foreach($tab as $k=>$v){
            $opt=$target->add("option");
            $_v=igk_getv($v, $kv, $k);
            $opt["value"]=$_v;
            if($resolvtext)
                $opt->Content=__("enum.".igk_getv($v, $dv, $v));
            else
                $opt->Content=($_s=igk_getv($v, $dv, $v)) && $piping ? igk_str_pipe_value($_s, $piping): $_s;
       
            if($_v == $selectedv){
                $opt["selected"]=true;
            }
        }
    }
}
///<summary>utility render mixed value data</summary>
/**
* utility render mixed value data
*/
function igk_html_buildview($mix, $target="div", $item="li"){
    $t=igk_createnode($target);
    if(is_object($mix)){
        foreach($mix as $k=>$v){
            $t->add($item)->setClass("{$k}")->Content=$v;
        }
    }
    else if(is_array($mix)){
        foreach($mix as $k=>$v){
            $t->add($item)->setClass("i i-{$k}")->Content=$v;
        }
    }
    else{
        $t->Content=$mix;
    }
    return $t;
}
///<summary>is webmaster callback</summary>
/**
* is webmaster callback
*/
function igk_html_callback_is_webmaster(){
    return igk_app()->IsSupportViewMode(IGKViewMode::WEBMASTER);
}
///<summary></summary>
///<param name="a"></param>
/**
* 
* @param mixed $a
*/
function igk_html_callback_production_minifycontent($a){
    $s=$a->Content;
    if(igk_sys_env_production()){
        if(igk_is_callback_obj($s)){
            $s=igk_invoke_callback_obj($a, $s);
        }
        else if(!is_string($s) && method_exists($s, IGK_GET_VALUE_METHOD)){
            $s=$s->getValue();
        }
        return igk_js_minify($s);
    }
    return $s;
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_html_clearbindinfo($ctrl){
    $key=IGK_DATABINDING_RESPONSE_NAME;
    $obj=$ctrl->getEnvParam($key);
    if($obj != null){
        unset($obj);
        $ctrl->setEnvParam($key, null);
    }
}
///<summary></summary>
///<param name="node"></param>
/**
* 
* @param mixed $node
*/
function igk_html_clonenode($node){
    $g=IGKHtmlReader::Load($node->Render());
    return $g ? igk_getv($g->Childs, 0): null;
}
///<summary>utility function to create tab selection</summary>
/**
* utility function to create tab selection
*/
function igk_html_create_db_tab_select($tag, $ctrl, $id, $table){
    $sl=igk_createnode($tag);
    $sl->addLabel($id);
    $sl->addCtrlSelect()->setId($id)->setCtrl($ctrl)->setTable($table)->loadingComplete();
    return $sl;
}
///<summary>utility function. create html menu node</summary>
/**
* utility function. create html menu node
*/
function igk_html_createmenu($name, $uri){
    return (object)array(
            IGK_FD_ID=>igk_new_id(),
            IGK_FD_NAME=>$name,
            "clUri"=>$uri
        );
}
///<summary>used to create submenu item</summary>
/**
* used to create submenu item
*/
function igk_html_createmenui($uri, $submenu){
    return new IGKMenuItemObject($uri, $submenu);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="target"></param>
///<param name="titlekey"></param>
///<param name="descfile" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $target
* @param mixed $titlekey
* @param mixed $descfile the default value is null
*/
function igk_html_ctrl_view_config($ctrl, $target, $titlekey, $descfile=null){
    $box=$target->addPanelBox();
    igk_html_add_title($box, $titlekey);
    if($descfile && file_exists($f=$ctrl->getArticle($descfile))){
        igk_html_article($ctrl, $f, $box->addDiv());
    }
    return $box;
}
///<summary>get registrated for object's scripting</summary>
/**
* get registrated for object's scripting
*/
function & igk_html_databinding_getobjforscripting($ctrl){
    $name=IGK_DATABINDING_RESPONSE_NAME;
    $obj=null;
    if($ctrl == null)
        return $obj;
    $obj=$ctrl->getEnvParam($name);
    if($obj == null){
        $obj=new IGKDataBindingScript();
        $ctrl->setEnvParam($name, $obj);
    }
    return $obj;
}
///<summary></summary>
///<param name="obj" ref="true"></param>
///<param name="value"></param>
///<param name="ctrl"></param>
///<param name="row"></param>
/**
* 
* @param mixed * $obj
* @param mixed $value
* @param mixed $ctrl
* @param mixed $row
*/
function igk_html_databinding_read_obj_litteral(& $obj, $value, $ctrl, $row){
    $pos=0;
    $obj->args=array();
    $ln=strlen($value);
    $tab=array();
    $_NS="_abcdefghijklmnopqrstuvwxyz123456789";
    $_mode=0;
    $_v="";
    $_n="";
    while($pos < $ln){
        $ch=$value[$pos];
        $pos++;
        if($_mode == 0){
            if(strpos($_NS, strtolower($ch)) === false){
                $_v=trim($_v);
                if(!empty($_v)){
                    if($_mode == 0){
                        $tab[$_v]="";
                        $_mode=1;
                        $_n=$_v;
                    }
                    else{
                        $_mode=0;
                        $tab[$_n]=$_v;
                    }
                    $_v="";
                }
                continue;
            }
        }
        else{
            $depth=array();
            $dp=0;
            $pos--;
            while($pos < $ln){
                $ch=$value[$pos];
                $r=0;
                switch($ch){
                    case '{':
                    case '(':
                    case '[':
                    isset($depth[$ch]) ? $depth[$ch]++:
                    $depth[$ch]=1;
                    $dp++;
                    break;
                    case '}':
                    $depth['{']--;
                    $dp--;
                    break;
                    case ')':
                    $depth['(']--;
                    $dp--;
                    break;
                    case ']':
                    $depth['[']--;
                    $dp--;
                    break;
                    case "'":
                    case "\"":
                    $g=igk_str_read_brank($value, $pos, $ch, $ch);
                    $_v .= $g;
                    $pos++;
                    $r=1;
                    break;
                    case ',':
                    if($dp<=0){
                        $tab[$_n]=$_v;
                        $_v="";
                        $_mode=0;
                        $pos++;
                        break 2;
                    }
                    break;
                }
                if(!$r){
                    $_v .= $ch;
                }
                $pos++;
            }
            $pos++;
            continue;
        }
        $_v .= $ch;
    }
    if(!empty($_v)){
        $tab[$_n]=$_v;
    }
    foreach($tab as $k=>$v){
        $obj->args[$k]=$v;
    }
}
///<summary>treat string data binding response before eval</summary>
///<param name="rep">reponse</param>
///<param name="$ctrl">controller</param>
///<param name="$row">row data to pass</param>
///<param name="$ctx" type="mixed" >extra context data. </param>
/**
* treat string data binding response before eval
* @param mixed $repreponse
* @param mixed $ctrl controller
* @param mixed $row row data to pass
* @param mixed $ctx extra context data.
*/
function igk_html_databinding_treatresponse($rep, $ctrl, $raw, $ctx=null, $a = 0){
    if(!is_string($rep)){ 
        igk_die("operation not allowed. \$rep is not a string");
    }
    $script_obj=null;
    $global_scope=1;
    if(is_array($ctx) && isset($ctx["scope"])){
        $global_scope=$ctx["scope"];
        $script_obj=igk_html_databinding_getobjforscripting($ctrl);
    }

    if ( is_array($raw) && key_exists("raw", $raw)){     
        $raw = array_merge($raw, ["raw"=>$raw["raw"]]);    
    }
    $regexpression=IGK_TEMPLATE_EXPRESSION_REGEX;
    $reg_comment='/(?P<comment>(\<\!--(?P<value>(.)+)--\>))/i';
    $comment=array();
    if(preg_match($reg_comment, $rep)){
        if(($c=preg_match_all($reg_comment, $rep, $match))){
            for($i=0; $i < $c; $i++){
                $value=$match['comment'][$i];
                $rep=str_replace($value, "__COMMENT__".$i."__", $rep);
                $comment["__COMMENT__".$i."__"]=$value;
            }
        }
    }
    $tmatch=array();
    $match=array();
    $c=0;
    $v=$rep; 
    $c=preg_match_all($regexpression, $rep, $match, PREG_OFFSET_CAPTURE, 0);
    if($c){
        $tmatch[]=$match;
    }
    // $counter=igk_env_count(__FUNCTION__);
    $offset=0; 
    foreach($tmatch as $match){
         
 
        $c=igk_count($match[0]);
        if(isset($match["expression"])){

            if (!empty($match["escape"][0][0])){ 
                $ln = strlen($match["escape"][0][0]);
                $offset = $match["escape"][0][1];
                $v=$offset==0? substr($v,$ln) : $v; 
                continue;
            } 

            $express_data=[];
            for($i=0; $i < $c; $i++){
                $v_m=$match[0][$i];
                if($v_m[0][0] == "@"){
                    igk_die("context expression not allowed", "core", $rep);
                }
                $value=$match['expression'][$i];
                if(!isset($express_data[$value[0]])){
                    $rm=$value[0];
                    $args=[];
                    if($script_obj)
                        $args=$script_obj->args;
                    $m= igk_html_php_eval($args, $ctrl, $raw, $rm, $a);
                    if($m && !is_string(($m))){

                        if(is_array($m)){
                            $m="[array_expression]";
                        }else {
                            $m="[object:".get_class($m)."]";
                        }
                    }
                    $express_data[$value[0]]=$m;
                }
                else{
                    $m=$express_data[$value[0]];
                }
                $y=$v_m[1] - $offset;
                $g=strlen($v_m[0]);
                $v=substr($v, 0, $y).$m.substr($v, $y + $g);

                if (!is_string($m)){
                    igk_wln_e("data", $m);
                    $m = "";
                }
                $offset += ($g - strlen($m));
            }
        }
        else{
            igk_wln_e("evaluate global script here is obsolete: please use eval global_expression method");
        }
    }
    if(($ctx == null) && (igk_get_env("sys://html/bindentries") === 1)){
        $e=igk_get_env("sys://html/bindkey");
        $v=preg_replace("#\[\[:@row]]#i", "[[:@entries[".$e. "]]]", $v);
    }
    foreach($comment as $k=>$s){
        $v=str_replace($k, $s, $v);
    }
    return $v;
}
///<summary></summary>
///<param name="table"></param>
///<param name="queryresult"></param>
/**
* 
* @param mixed $table
* @param mixed $queryresult
*/
function igk_html_db_build_table($table, $queryresult){
    $r=$queryresult;
    if(!$r || is_bool($r))
        return;
    if($r->ResultTypeIsBoolean()){
        $tr=$table->addTr();
        $tr->addTd()->Content="Result";
        $tr=$table->addTr();
        $xr=((object)$r->getRowAtIndex(0));
        $tr->addTd()->Content=isset($xr->clResult) && igk_parsebool($xr->clResult);
        return;
    }
    $tr=$table->addTr();
    foreach($r->Columns as $v){
        $tr->add("th")->Content=$v->name;
    }
    foreach($r->Rows as $v){
        $tr=$table->addTr();
        foreach($v as $mm){
            $tr->addTd()->Content=$mm;
        }
    }
}
///<summary></summary>
///<param name="m"></param>
/**
* 
* @param mixed $m
*/
function igk_html_debug_m($m){
    return "<div style=\"background-color:#B92900; color:FFC193;\">{$m}</div>";
}
///<summary>detect that a node must be an empty node</summary>
/**
* detect that a node must be an empty node
*/
function igk_html_emptynode($n){
    if(get_class($n) == "IGKXmlNode"){
        return 0;
    }
    return igk_html_emptytag($n->TagName);
}
///<summary>detect that a tag must be an empty tag</summary>
/**
* detect that a tag must be an empty tag
*/
function igk_html_emptytag($tagname){
    return isset(IGKHtmlOptions::$EmptyTag[strtolower($tagname)]);
}
///<summary></summary>
///<param name="value"></param>
/**
* 
* @param mixed $value
*/
function igk_html_endbinding($value){
    igk_die("obselete :".__FUNCTION__);
}
///<summary></summary>
///<param name="content"></param>
///<param name="params" default="null"></param>
/**
* 
* @param mixed $content
* @param mixed $params the default value is null
*/
function igk_html_eval_article($content, $params=null){
    igk_push_article_chain(__FUNCTION__, $params);
    extract(func_get_arg(1));
    $t = igk_createtextnode();
    
    if($evalExpression){
        $content=igk_html_eval_global_script($content, null, $params, "::SRC");
    }
    $content = igk_html_treat_content($content, null, $params);
    $src = $content->render();
    igk_pop_article_chain();
    return $src;
}
///<summary> evaluate global script</summary>
/**
*  evaluate global script
*/
function igk_html_eval_global_script($src, $ctrl, $raw, $context=null){
    $match=[];
    if(empty($src) || !($g=preg_match_all(IGK_TEMPLATE_GLOBAL_EXPRESSION_REGEX, $src, $match, PREG_OFFSET_CAPTURE, 0))){
        return $src;
    }
    $tab=igk_get_eval_global_script_actions();
    $c=0;
    $regex_script="";
    $c=igk_count($match[0]);
    $v=$src;
    for($i=0; $i < $c; $i++){
        $v_m=$match[0][$i];
        // $type=strtolower($match['name'][$i][0]);
        // $value=$match['value'][$i][0];
        $exp=$match["exp"][$i];
		$v_pos = $v_m[1];
		$bar = igk_str_read_brank($src, $v_pos, "]", "[" ,null, 0, 0);
		if ($v_pos > strlen($src) )
			igk_die("/!\\ failed to read global expression : ");
		$v_m = $bar;
		$g = strpos($bar, ":");
		$type = trim(substr($bar, 1, $g-1));
		$value = trim(substr($bar, $g+1,-1));
		// var_dump($v_m[1]); // match[0][]);

		// "bar:".$bar,
		// "type : ".$type,
		// "expression:".$value,
		// "c : ".$c

		// );

        if(isset($tab[$type])){
            $fc=$tab[$type];
            igk_wln_e("handle with regitered global action");
            continue;
        }
        if(($match[1][$i]) == '[' && ($match[6][$i] == ']')){
            $v=str_replace($v_m, $exp, $v);
            continue;
        }
        switch($type){
            case "curi":
            if($ctrl){
                $v=str_replace($v_m, igk_io_baseuri()."/".$ctrl->getUri($value), $v);
            }
            else
                $v=str_replace($v_m, igk_io_baseuri()."/".igk_html_uri($value), $v);
            break;
            case "uri":
            $v=str_replace($v_m, igk_io_baseuri()."/".igk_html_uri($value), $v);
            break;
            case "guri":
            $uri=igk_io_baseuri()."/".igk_html_uri($value);
            $result=igk_io_baseuri()."/".igk_getctrl(IGK_SYSACTION_CTRL)->getUri($value);
            $v=str_replace($v_m, $result, $v);
            break;
            case "lang":
            $value=trim($value);
            if(!empty($value)){
                $v=str_replace($v_m, __($value), $v);
            }
            else
                $v=str_replace($v_m, $value, $v);
            break;
            case "conf":
            $v=str_replace($v_m, igk_sys_getconfig($value), $v);
            break;
            case "func":
            $obj=igk_html_databinding_getobjforscripting($ctrl);
            $rm=$value;
            $m=igk_html_php_eval($obj->args, $ctrl, $raw, $rm, 1);
            $v=str_replace($v_m, $m, $v);
            break; 
            case "funce":
            $tab=explode("=", trim($value));
            if(igk_count($tab) > 1){
                $obj=igk_html_databinding_getobjforscripting($ctrl);
                igk_html_databinding_read_obj_litteral($obj, $value, $ctrl, $raw);
                $out = $src;
                foreach($obj->args as $k=>$tv){
                    $rm=igk_html_treat_content($out, $ctrl, $raw)->render();//($tv, $ctrl, $raw, IGK_HTML_BINDING_EVAL_CONTEXT);
                    $obj->args[$k]=igk_html_php_eval($obj, $ctrl, $raw, $rm, 1);
                    $v=str_replace($v_m, IGK_STR_EMPTY, $v);
                    $v=preg_replace("/^(\\s)+$/i", "", $v);
                }
            }
            else
                $v=str_replace($v_m, IGK_STR_EMPTY, $v);
            break;
            case "exp":
            $tab=explode(":", $value);
            if(igk_count($tab) > 1){
                $rm=substr($value, strpos($tab[0], $value) + strlen($tab[0]) + 1);
                $obj=igk_html_databinding_getobjforscripting($ctrl);
                $obj->args[$tab[0]]=$rm;
                $v=str_replace($v_m, IGK_STR_EMPTY, $v);
            }
            break;
            case "eval":
            $v=str_replace($v_m, str_replace("$", "\\$", $v_m), $v);
            break;default:
            break;
        }
    }
    return $v;
}
///<summary>used to evaluate expression script</summary>
///<param name="script">used to evaluate expression script</summary>
/**
* used to evaluate expression script
* @param mixed $script used to evaluate expression script
*/
function igk_html_eval_script($src, $ctrl, $raw, $context=null){
	error_log(__FUNCTION__." is obselete will be remove on next version . please use ");
    igk_die("obselete ".__FUNCTION__);
}
///<summary></summary>
///<param name="script"></param>
///<param name="context"></param>
/**
* 
* @param mixed $script
* @param mixed $context
*/
function igk_html_eval_value_in_context($script, $context){
    $__g_context=(array)$context;
    extract($__g_context);
    unset($$__g_context);
    $vars=get_defined_vars();
    $m=trim($script);
    if(IGKString::EndWith($m, ";") == false)
        $m .= ";";
    $c=preg_match_all("/(?P<name>(\\$(?P<value>([0-9a-z_]+))))/i", $m, $tab);
    if($c > 0){
        for($i=0; $i < $c; $i++){
            $n=$tab["name"][$i];
            $key=$tab["value"][$i];
            if(!isset($vars[$key])){
                return "[eval:".$script."]";
            }
        }
    }
    $d=eval(<<<EOF
{$m}
EOF
    );
    if(!empty($s)){
        igk_wl("Error on execution ".$m."<br />".$s);
    }
    return $d;
}
///<summary></summary>
///<param name="token"></param>
/**
* 
* @param mixed $token
*/
function igk_html_form_is_valid_token($token){
    return igk_html_form_tokenid() == $token;
}
///<summary>cref doken id</summary>
/**
* cref doken id
*/
function igk_html_form_tokenid(){
    $cref=igk_app()->Session->getCRef();
    return md5($cref);
}
///<summary>validate form's object field</summary>
/**
* validate form's object field
*/
function igk_html_form_validate($o, $settings, & $errors){
    $r=true;
    foreach($settings as $k=>$v){
        $s=igk_getv($o, $k);
        if(!$s){
            $errors[$k]=is_string($v) ? $v: igk_getv($v, "Message");
            $r=$r && false;
        }
        else{
            $rgx=igk_getv($v, "Regex");
            $callback=igk_getv($v, "Callback");
            if($rgx && !preg_match($rgx, $s)){
                $errors[$k]=igk_getv($v, "Message", __("err.validation_1", $k));
                $r=$r && false;
            }
            else if($callback && is_callable($callback) && !call_user_func_array($callback, [$s])){
                $errors[$k]=igk_getv($v, "Message", __("err.validation_1", $k));
                $r=$r && false;
            }
        }
    }
    return $r;
}
///<summary>craete a balafon uri frame</summary>
///<remark> Remark: closeuri : uri callback when closing</remark>
///<note>target: receive that will the frame. if null will be add to global document body and will be render at the when body requested</note>
/**
* craete a balafon uri frame
*/
function igk_html_frame($ctrl, $name, $closeuri=null, $target=null, $reloadcallback=null){
    $frame=igk_getctrl(IGK_FRAME_CTRL)->createFrame($name, $ctrl, $closeuri, $reloadcallback);
    if($target === null)
        $target=igk_app()->Doc->body;
    IGKHtmlUtils::AddItem($frame, $target);
    return $frame;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="id"></param>
///<param name="title"></param>
///<param name="uri"></param>
///<param name="form" ref="true"></param>
///<param name="closed" default="false"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $id
* @param mixed $title
* @param mixed $uri
* @param mixed * $form
* @param mixed $closed the default value is false
*/
function igk_html_frame_ex($ctrl, $id, $title, $uri, & $form, $closed=false){
    $frame=igk_html_frame($ctrl, $id);
    $div=$frame->BoxContent;
    $div->ClearChilds();
    $frame->Title=$title;
    $frm=$div->addForm();
    $frm["action"]=$uri;
    $frm["igk-ajx-lnk-tg-response"]=$ctrl->TargetNode["id"];
    if($closed)
        $frm["igk-frame-close"]="1";
    $form=$frm;
    return $frame;
}
///<summary>convert string litteral to string html text presentation</summary>
/**
* convert string litteral to string html text presentation
*/
function igk_html_from_string($str, $block="p"){
    $tstr=explode(IGK_LF, $str);
    $t=igk_createnode("div");
    foreach($tstr as $v){
        $g=trim($v);
        if(empty($g)){
            $t->addBr();
        }
        else
            $t->add($block)->setContent(trim($v));
    }
    return $t->Render();
}
///<summary>used to get the component demo keys</summary>
/**
* used to get the component demo keys
*/
function igk_html_get_component_demo(){
    return igk_get_env("sys://html/components/demos");
}
function igk_html_set_document_class($doc, $classname){
    $cl = $doc->getTempFlag(IGK_DOCUMENT_CLASS);
    if (! $cl) {
        $cl = new IGKHtmlClassValueAttribute();
        $doc->setTempFlag(IGK_DOCUMENT_CLASS, $cl);
    }
    $cl->add($classname); 
}
function igk_html_get_document_class($doc){
    $cl = $doc->getTempFlag(IGK_DOCUMENT_CLASS); 
    if ($cl){
        return $cl->getValue();
    }
    return "igk-web-page"; 
}
///<summary>shortcut list igk_html_reg_compoent_package</summary>
/**
* shortcut list igk_html_reg_compoent_package
*/
function igk_html_get_component_packages(){
    return igk_html_reg_component_package();
}

function igk_html_reg_component_package($component=null){

}

///<summary></summary>
///<param name="src"></param>
///<param name="options" default="null" ref="true"></param>
/**
* 
* @param mixed $src
* @param mixed * $options the default value is null
*/
function igk_html_get_depth_indent($src, & $options=null){
    if(($options == null) || (isset($options->Indent) && (!$options->Indent)))
        return null;
    $c=igk_getv($options, "Depth", 0);
    $q=$src;
    $s=IGK_STR_EMPTY;
    while($c > 0){
        $s .= "\t";
        $c--;
    }
    return $s;
}
///<summary></summary>
///<param name="expression"></param>
///<param name="tab" ref="true"></param>
/**
* 
* @param mixed $expression
* @param mixed * $tab
*/
function igk_html_get_expression($expression, & $tab){
    $ln=strlen($expression);
    $ch="";
    $pos=0;
    $v="";
    $pipe="";
    while($pos < $ln){
        $ch=$expression[$pos];
        switch($ch){
            case "'":
            case '"':
            $v .= igk_str_read_brank($expression, $pos, $ch, $ch, null, 1);
            break;
            case "|":
            if(($rp=$pos-1) > 0){
                if($expression[$rp] == "\\"){
                    $v=substr($v, 0, -1).$ch;
                    break;
                }
            }
            if((($rp=($pos + 1)) < $ln) && ($expression[$rp] != '|')){
                $pipe=substr($expression, $rp);
                break 2;
            }
            break;default: $v .= $ch;
            break;
        }
        $pos++;
    }
    $tab["value"]=trim($v);
    $tab["pipe"]=$pipe;
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_html_get_func_param($name){
    return igk_getv(igk_app()->Session->getParam("system://igk_html_func_param"), $name);
}
///<summary></summary>
///<param name="node"></param>
///<param name="type" default="text"></param>
///<param name="depth"></param>
/**
* 
* @param mixed $node
* @param mixed $type the default value is "text"
* @param mixed $depth the default value is 0
*/
function igk_html_get_heararchi($node, $type="text", $depth=0){
    $o="";
    $dp="";
    switch($type){
        case "text":
        $o .= $dp.get_class($node).IGK_LF;
        $depth++;
        if($depth > 0){
            $dp=igk_str_repeat("\t", $depth);
        }
        foreach($node->Childs as $k){
            $o .= $dp.igk_html_get_heararchi($k, $type, $depth);
        }
        break;
        case "expression":
        $o .= $dp.igk_get_node_expression($node, $depth).IGK_LF;
        break;
    }
    return $o;
}
///<summary></summary>
///<param name="node"></param>
///<param name="type" default="text"></param>
///<param name="depth"></param>
/**
* 
* @param mixed $node
* @param mixed $type the default value is "text"
* @param mixed $depth the default value is 0
*/
function igk_html_get_inner_heararchi($node, $type="text", $depth=0){
    $o="";
    if($node && $node->HasChilds){
        foreach($node->Childs as $v){
            $o .= igk_html_get_heararchi($v, $type, $depth);
        }
    }
    return $o;
}
///<summary>get system uri for link</summary>
/**
* get system uri for link
*/
function igk_html_get_system_uri($link, $option=null){
    if($option && !isset($option->StandAlone)){
        igk_die("No StandAlone in options query");
    }
    
    $src="";
    if(!empty($link)){
        if(IGKValidator::IsUri($link)){
            $src=$link;
        }
        else{
            $s="";
            $k=explode("?", $link);
            if(file_exists($k[0])){
                $s=igk_io_basepath($k[0]);
                if(count($k) > 1)
                    $s .= "?".implode("?", array_slice($k, 1));
            }
            else{
                $s=$link;
            }
        
            if($option && ($option->Context == IGK_WEB_CONTEXT) && $option->Cache){
                $src=$s;
                return igk_html_uri($s);
            }
            if($option && ($option->StandAlone) || igk_is_webapp()){
                $src=igk_html_uri(igk_io_baseuri().$s);
                return $src;
            }
            else{
                $src=igk_io_currentrelativeuri($s);
            }
        }
    }
    else{
        $src=igk_io_currentrelativeuri();
    }
    return $src;
}
///<summary>summary get context controller title</summary>
/**
* summary get context controller title
*/
function igk_html_get_title($ctrl, $def=null){
    return igk_getv($ctrl->Configs, 'clTitle', igk_sys_getconfig("website_title"));
}
///<summary></summary>
///<param name="node"></param>
/**
* 
* @param mixed $node
*/
function igk_html_getallchilds($node){
    $tab=array();
    if($node->HasChilds){
        foreach($node->Childs as $k){
            $tab[]=$k;
            $c=igk_html_getallchilds($k);
            if(igk_count($c) > 0)
                $tab=array_merge($tab, $c);
        }
    }
    return $tab;
}
///<summary></summary>
///<param name="n"></param>
///<param name="level" default="-1"></param>
///<param name="mode" default="t"></param>
///<param name="callback" default="null"></param>
/**
* 
* @param mixed $n
* @param mixed $level the default value is -1
* @param mixed $mode the default value is "t"
* @param mixed $callback the default value is null
*/
function igk_html_hearachi($n, $level=-1, $mode="t", $callback=null){
    $q=array((object)array("node"=>$n, "level"=>0));
    $so="";
    while($s=array_pop($q)){
        if(($level > 0) && $s->level > $level)
            continue;
        $so .= str_repeat("\t", $s->level);
        $so .= get_class($s->node).":".($s->node->TagName ?? get_class($s->node));
        if($callback){
            $callback($s->node, $so);
        }
        $so .= IGK_LF;
        $ch=$s->node->Childs;
        $tab=$ch ? $ch->ToArray(): array();
        for($c=count($tab)-1; $c>=0; $c--){
            array_push($q, (object)array("node"=>$tab[$c], "level"=>$s->level + 1));
        }
    }
    return $so;
}
///<summary></summary>
///<param name="option" default="null"></param>
/**
* 
* @param mixed $option the default value is null
*/
function igk_html_indent_line($option=null){
    if(($option == null) || (!isset($option->Indent) || (!$option->Indent)))
        return null;
    return IGK_LF;
}
///<summary>get real index of node in parent</summary>
/**
* get real index of node in parent
*/
function igk_html_index_of($node){
    $p=$node->getParentNode();
    if($p == null)
        return null;
    $i=0;
    foreach($p->Childs as $v){
        if($v === $node)
            return $i;
        $i++;
    }
    return $i;
}
///<summary></summary>
///<param name="t"></param>
/**
* 
* @param mixed $t
*/
function igk_html_init_node_page($t){
    $t->setClass("fit igk-parentscroll igk-powered-viewer overflow-y-a");
}
///<summary></summary>
///<param name="text"></param>
/**
* 
* @param mixed $text
*/
function igk_html_initbindexpression($text){
    $text=preg_replace("/<!--\\s*(.)+\\s*-->/i", "", $text);
    return $text;
}
///<summary>create a body main script</summary>
/**
* create a body main script
*/
function igk_html_initbodymainscript(){
    $s="";
    if(!igk_io_basedir_is_root()){
        $s="{baseuri:'".igk_io_baseuri()."'}";
    }
    return new IGKHtmlBodyMainScript("if(window.ns_igk)ns_igk.init_document(${s});");
}
///<summary>used to initalize a form with data object</summary>
/**
* used to initalize a form with data object
*/
function igk_html_initform($form, $obj, $formtab){
    $s=array();
    foreach($obj as $k=>$v){
        if($formtab && array_key_exists($k, $formtab)){
            $s[$k]=$formtab[$k];
        }
        else{
            $d=igk_createnode();
            if(is_array($v)){
                $d->addSLabelInput($k, igk_getv($v, "type", "text"), igk_getv($v, "value"));
            }
            else{
                if(igk_reflection_class_extends($v, IGK_HTML_ITEMBASE_CLASS))
                    $d->add($v);
                else
                    $d->addSLabelInput($k, "text", $v);
            }
            $s[$k]=$d;
        }
    }
    foreach($s as $i=>$v){
        if($v == null)
            continue;
        $form->add($v);
    }
}
///<summary>shortcut to init menu</summary>
/**
* shortcut to init menu
*/
function igk_html_initmenu($name, $ctrl, $target, $tab, $tag="li", $selected=null){
    igk_getctrl(IGK_MENU_CTRL)->initCustomMenu($name, $ctrl, $target, $tab, $tag, $selected);
}
///<summary></summary>
///<param name="type"></param>
///<param name="content"></param>
/**
* 
* @param mixed $type
* @param mixed $content
*/
function igk_html_inlinedata($type, $content){
    return 'data:'.$type.";base64,".base64_encode($content);
}
///<summary>check if sytem request a full uri</summary>
/**
* check if sytem request a full uri
*/
function igk_html_is_fullurirequest($options=null){
    return igk_is_ajx_demand() || preg_match("#^\/!@#i", igk_io_request_uri()) || ($options && (igk_xml_is_mailoptions($options) || $options->StandAlone));
}
///<summary>check if this node is in ns</summary>
///<retrurn >true if empty ns or parent ns is on the same ns. true to render xmlns or false</retrurn>
/**
* check if this node is in ns
*/
function igk_html_is_ns_child($n){
    $q=$n;
    $g=$n->getParam(IGK_NS_PARAM_KEY);
    if(empty($g))
        return true;
    $q=$q->getParentNode();
    if($q){
        $ns=$q->getParam(IGK_NS_PARAM_KEY);
        if($ns !== $g)
            return true;
        return false;
    }
    return true;
}
///<summary>get if this is a valid tag name</summary>
/**
* get if this is a valid tag name
*/
function igk_html_is_tagname($v){
    return preg_match("/^".IGK_TAGNAME_CHAR_REGEX."+$/i", $v);
}
///<summary></summary>
///<param name="t"></param>
/**
* 
* @param mixed $t
*/
function igk_html_loading_frame($t){
    $uri=R::GetImgUri("waitcursor");
    if($uri)
        $t->addDiv(array("class"=>"dispib"))->addBalafonJS()->Content="igk.media.webplayer.init(this.parentNode,'{$uri}');";
}
///<summary></summary>
///<param name="tagname"></param>
/**
* 
* @param mixed $tagname
*/
function igk_html_mustclosetag($tagname){
    // $l = strtolower($tagname);
    // if(IGKString::StartWith($l, "igk-"))
    //     return true;
    return !igk_html_emptytag($tagname); 
   
}
///<summary></summary>
///<param name="node"></param>
///<param name="attributes" default="null"></param>
/**
* 
* @param mixed $node
* @param mixed $attributes the default value is null
*/
function igk_html_new($node, $attributes=null){
    return igk_createnode($node, $attributes);
}
///<summary>create new node</summary>
/**
* create new node
*/
function igk_html_newnode($tag){
    return new IGKHtmlItem($tag);
}

///<summary></summary>
///<param name="code"></param>
/**
* 
* @param mixed $code
*/
function igk_html_output($code){
    $g=igk_header_status($code);
    header("Status: ".$g);
}
///<summary>get the base of the creation node</summary>
/**
* get the base of the creation node
*/
function igk_html_parent_node(){
    $p=igk_get_env(IGK_XML_CREATOR_PARENT_KEY);
    if(($c=igk_count($p)) > 0){
        return $p[$c-1];
    }
    return null;
}
function igk_html_engine_parent_node(){
	$p=igk_get_env(IGK_XML_HTML_TEMPLATE_PARENT_KEY);
    if(($c=igk_count($p)) > 0){
        return $p[$c-1];
    }
    return null;
}
function igk_html_engine_parent_push_node($n){
	igk_push_env(IGK_XML_HTML_TEMPLATE_PARENT_KEY, $n);
}
function igk_html_engine_parent_pop_node(){
	return igk_pop_env(IGK_XML_HTML_TEMPLATE_PARENT_KEY);
}

///<summary>php eval data binding</summary>
///<param name="obj"> object that will contains data calculated in script. in args. (note : obj, ctrl , row, expression, trimExpression, and script are reserved )</param>
///<param name="ctrl"></param>
///<param name="row"></param>
///<param name="expression">expression string</param>
/**
* php eval data binding
* @param mixed $obj object that will contains data calculated in script. in args. (note : obj, ctrl , row, expression, trimExpression, and script are reserved )
* @param mixed $ctrl
* @param mixed $row
* @param mixed $expression expression string
* @auto localisation evaluation
*/
function igk_html_php_eval($obj, $ctrl, $raw, $expression, $a=0){
    if(!is_string($expression)){
        igk_die("expression is not a string");
    }
    if(($expression == null) || empty($expression))
        return null;
    $bindingInfo=igk_get_env("sys://html-data");
    $key=null;
    if($bindingInfo)
        $key=$bindingInfo->key;
    try {
        $trimExpression=trim($expression);
        $piped=0;
        igk_html_get_expression($expression, $tab);
        $v=$tab["value"];
        $pipe=$tab["pipe"];
        if(preg_match("/^(?P<a>@)?(\'|\")(?P<v>([^'\"]*))\\2$/", $v, $otab)){
            if(isset($otab['a']) && !empty($otab['a'])){
                $a=1;
                $v=substr($v, 1);
            }
        }
        if(!IGKString::StartWith($v, "return ")){
            $v="return ".$v;
            if(!IGKString::EndWith($v, ";"))
                $v .= ";";
        }
        IGKOb::Start();
        igk_eval_last_script($v);
        if($obj && is_array($obj)){
            $raw=array_merge($obj, ["raw"=>$raw]);
        }
        $m=igk_eval_in_context($v, $ctrl, $raw);
        igk_eval_last_script(null);
        $c=IGKOb::Content();
        IGKOb::Clear();
        igk_sys_handle_error($v, $c);

		$tb = ["v"=>$m, "pipe"=>!empty($pipe) ? $pipe: [], "a"=>$a];
		 
        $m=igk_html_php_evallocalized_expression($v, $tb); // ["v"=>$m, "pipe"=>!empty($pipe) ? $pipe: [], "a"=>$a]);
    }
    catch(Exception $ex){
        igk_notifyctrl()->addError(igk_getv($ex, "Message"));
        igk_show_prev("ERROR: ".htmlentities($ex));
        igk_exit();
    }
    catch(Throwable $ex){
        igk_notifyctrl()->addError(igk_getv($ex, "Message"));
        igk_show_prev("ERROR: ".htmlentities($ex));
        igk_exit();
    }
    return $m;
}
///<summary>localize une expression </summary>
///<exemple> 'donnee: {0|uppercase}', info => 'donnee : INFO'</exemple>
///<remark> passer des options tab array of info :
///v: the value to eval
///a: 0|1 use real value
///pipe : | list of pipe expression
///</remark>
/**
* localize une expression
*/
function igk_html_php_evallocalized_expression($expression, $tab=null){
    if($tab == null){
        igk_html_get_expression($expression, $tab);
        if(!$expression || !preg_match(IGK_LOCALIZE_EXPRESSION_REGEX, $expression, $tab)){
            return null;
        }
    }
    $v=igk_getv($tab, "v");
    $pipe=igk_getv($tab, "pipe");
    if(empty($v) && (!is_numeric($v))){ 
        return '';
	}
    if(is_string($v) && !igk_getv($tab, 'a')){
        $v=__($v);
    }
    if($pipe){
		 $v=igk_str_pipe_value($v, $pipe);
    }
    return $v;
}
///<summary></summary>
/**
* 
*/
function igk_html_pop_node_parent(){

    $p=igk_get_env(IGK_XML_CREATOR_PARENT_KEY);
    if($p != null){
        array_pop($p);
        igk_set_env(IGK_XML_CREATOR_PARENT_KEY, $p);
    }
}
///<summary>used to pop the target node data</summary>
/**
* used to pop the target node data
*/
function igk_html_popt(& $t){
    $s=igk_pop_env("sys://push/targetnode");
    if($s)
        $t=$s;
}
///<summary>store the creator node parent</summary>
/**
* store the creator node parent
*/
function igk_html_push_node_parent($n){
    $p=igk_get_env(IGK_XML_CREATOR_PARENT_KEY);
    if($p == null){
        $p=array();
    }
    array_push($p, $n);
    igk_set_env(IGK_XML_CREATOR_PARENT_KEY, $p);
}
///<summary>push targetnode. in inclusion scenario required</summary>
/**
* push targetnode. in inclusion scenario required
*/
function igk_html_pusht(& $t){
    igk_push_env("sys://push/targetnode", $t);
    return $t;
}
///<summary></summary>
///<param name="s"></param>
/**
* 
* @param mixed $s
*/
function igk_html_query_parse($s){
    $ln=strlen($s);
    $pos=0;
    $o="";
    while($ln > $pos){
        $ch=$s[$pos];
        switch($ch){
            case '`':
            $h=igk_str_read_brank($s, $pos, '`', '`');
            $o .= "<font color='#67009D'>".$h."</font>";
            break;
            case "'":
            $h=igk_str_read_brank($s, $pos, '\'', '\'');
            $o .= "<font color='#A90A07'>".$h."</font>";
            break;default: $o .= $ch;
            break;
        }
        $pos++;
    }
    return $o;
}
///<summary>used to register a component demonstration</summary>
///<remark>in case you don't what to populate the framework with {igk_html_demo_[compenentNanem]} function convention</remark>
///<param name="ns">the full namespace to  component</param>
///<param name="callback">the callback that will be called by system to initialize a demonstration view</param>
/**
* used to register a component demonstration
* @param mixed $ns the full namespace to component
* @param mixed $closure callback the callback that will be called by system to initialize a demonstration view
*/
function igk_html_reg_component_demo($ns, $callback){
    igk_set_env_keys("sys://html/components/demos", $ns, $callback);
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_html_render_all($n){
    $t=null;
    $s=null;
    return igk_html_render_node($n, $s, $t, false, 0);
}
///<summary>render node in chain hierachie</summary>
/**
* render node in chain hierachie
*/
function igk_html_render_node($n, & $options, $tab=null, $textonly=false, $chain=1){

	 
    $p=null;
    $q=null;
    $s="";
    $d=null;
    $ct=0;
    $ri=0;
    if($tab == null)
        $tab=array();
    if(igk_count($tab) == 0){
        array_push($tab, $n);
    }
    else
        $tab=array_reverse($tab);
    $q=array_pop($tab);
    $overridingkey="sys://html/overriding_render";
    if(igk_peek_env($overridingkey) === $q){
        igk_die(__FUNCTION__." : Possible recursion detected. Operation not allowed.");
    }
    $depth=0;
    $g=0;
    $ns=array();
    $rdinfo=null;
    $v_iline=igk_html_indent_line($options);
    $inner="";
    if($options){
        if(isset($options->Depth))
            $options->Depth++;
        else
            $options->Depth=1;
        igk_xml_initialize($options, array("Stop"=>0, "Indent"=>0, "Context"=>"XML"));
    }
    else{
        $options=igk_xml_create_render_option();
    }
    $depth=$options->Indent && ($options->Depth > 0) ? str_repeat("\t", $options->Depth-1): null;
    $gg=null;
    $count_t=0;

	if (!isset($options->Context)){
		igk_die("no context");
	} 

    while($q && !$options->Stop){
    
        $closep=false;
        if($p && ($p === $q)){
            $inner=$s;
            $s=$rdinfo->text;
            if($rdinfo->pinfo)
                $p=$rdinfo->pinfo->parent;
            else
                $p=null;
            if($rdinfo->udateddepth)
                $options->Depth--;
            $rdinfo=$rdinfo->pinfo;
            $closep=true;
            $depth=$options->Indent && ($options->Depth > 0) ? str_repeat("\t", $options->Depth-1): null;
        }
        else{
            if(is_object($q) && !is_subclass_of(get_class($q), IGKHtmlItemBase::class)){
                if(method_exists($q, "Render")){
                    $s .= $q->Render();
                }
                $q=array_pop($tab);
                continue;
            }
            if($chain && !$q->AcceptRender($options)){ 
                $q=array_pop($tab);
                continue;
            }
            $ct++;
            if(igk_is_html_node_overriding_view($q)){
                igk_push_env($overridingkey, $q);
                $s .= $q->Render($options).$v_iline;
                igk_pop_env($overridingkey);
                $q->RenderComplete($options);
                $v=array_pop($tab);
                if($v === $q){
                    igk_die("Save value not allowed: ".get_class($q));
                }
                $q=$v;
                continue;
            }
        }
        if(!$closep){
            $updatedepth=1;
            if(!$textonly && $q->getIsRenderTagName()){
                if(!empty($rdinfo->content)){
                    $s .= $v_iline.$depth;
                    $rdinfo->content=null;
                }
                else
                    $s .= $depth;
                $s .= "<".$q->tagName;

                $k=$q->getAttributeString($options);
                if(isset($options->ns)){
                    array_push($ns, $options->ns);
                }
                if(!empty($k)){
                    $s .= " ".$k;
                }
            }
            else
                $updatedepth=0;
            $inner=IGK_STR_EMPTY;
            $c_childs=$q->GetRenderingChildren($options);
            $c_tchild=igk_count($c_childs);
            $c = IGKHtmlUtils::GetContentValue($q, $options); 
            $inner .=  $c;
            if($c_tchild > 0){
                if($updatedepth){
                    $options->Depth++;
                    $depth .= $options->Indent ? "\t": null;
                }
                $rdinfo=(object)array(
                        "pinfo"=>$rdinfo,
                        "parent"=>$q,
                        "text"=>$s,
                        "content"=>$c,
                        "childs"=>$c_tchild,
                        "udateddepth"=>$updatedepth
                    );
                $tab[]=$q;
                $tab=array_merge($tab, array_reverse($c_childs));
                $p=$q;
                $q=array_pop($tab);
                $s=$inner;
                continue;
            }
        }
        if(!$textonly && $q->getIsRenderTagName()){
            if(igk_html_emptynode($q) || (!is_numeric($inner) && empty($inner) && !$q->closeWithCloseTag($options, $q->tagName))){
                $s .= " />".$v_iline;
            }
            else{
                $s .= ">";
                $sk=trim($inner);
                $ri=0;
                if($closep)
                    $s .= $v_iline."";
                if(is_numeric($sk) || !empty($sk)){
                    $sk=$inner;
                    $ri=1;
                }
                if(($sk == '0') || !empty($sk)){
                    $s .= $sk;
                }
                if($closep && $ri)
                    $s .= $depth;
                $s .= "</".$q->TagName.">";
                if(count($tab) > 0){
                    $s .= $v_iline;
                }
            }
        }
        else{
            $sk=trim($inner);
            if(is_numeric($sk) || !empty($sk)){
                $s .= $inner;
            }
        }
        $q->RenderComplete($options);
        $q=array_pop($tab);
        $options->ns=array_pop($ns);
    }
    if(!igk_sys_env_production() && ($q == null) && (($c=count($tab)) > 0)){
        igk_wln_e("rendering failed ::", __FUNCTION__.':'.__LINE__, "stop ".$options->Stop, $c." item(s) not rendered");
    } 
    // if ($options && $options->mail_output){
    //     $s .= $options->mail_output->render();
    // }
    return $s;
}
///<summary> render text node</summary>
/**
*  render text node
*/
function igk_html_render_text_node($n){
    $t=null;
    $s=null;
    return igk_html_render_node($n, $s, $t, true);
}
///<summary></summary>
///<param name="item"></param>
/**
* 
* @param mixed $item
*/
function igk_html_render_xml($item){
    if(!$item)
        return null;
    ob_start();
    igk_wl(igk_xml_header().IGK_LF);
    igk_wl($item->Render(new IGKXmlRenderOptions()));
    $s= ob_get_clean();
    return $s;
}
///<summary></summary>
/**
* 
*/
function igk_html_reset_func_param(){
    igk_app()->Session->setParam("system://igk_html_func_param", null);
}
///<summary></summary>
///<param name="path"></param>
/**
* 
* @param mixed $path
*/
function igk_html_resolv_img_uri($path){
    $f=igk_io_currentrelativepath($path);
    if(!empty($f) && file_exists($f)){
        $r=igk_realpath($f);
        $s=igk_io_basepath($f);
        if($s == $r){
            $m=igk_html_uri(igk_io_baseuri()."/".$f);
            return $m;
        }
        $v_uri=igk_html_uri(igk_io_baseuri()."/".$s);
        return $v_uri;
    }
    return null;
}
///<summary></summary>
///<param name="item"></param>
///<param name="dispose" default="false"></param>
/**
* 
* @param mixed $item
* @param mixed $dispose the default value is false
*/
function igk_html_rm($item, $dispose=false){
    return IGKHtmlUtils::RemoveItem($item);
}
///<summary>remove base uri</summary>
/**
* remove base uri
*/
function igk_html_rm_base_uri($v){
    $s=igk_io_baseuri();
    $rg="/((".str_replace("/", "\\/", $s)."(\/)?)+)/i";
    if(preg_match($rg, $v)){
        $v=preg_replace($rg, IGK_STR_EMPTY, $v);
    }
    return $v;
}
///<summary></summary>
///<param name="doc"></param>
///<param name="file"></param>
/**
* 
* @param mixed $doc
* @param mixed $file
*/
function igk_html_save_doc_formail($doc, $file){
    $opt=igk_xml_create_render_option();
    $opt->Context="mail";
    $maildoc=IGKHtmlMailDoc::CreateFromDocument($doc);
    igk_io_save_file_as_utf8_wbom($file, $maildoc->Render($opt), true);
}
///<summary>used to select in node expression</summary>
/**
* used to select in node expression
*/
function igk_html_select($node, $expression){
    $r=array();
    $q=$node;
    $list=array();
    $searchmode=1;
    while($q){
        switch($searchmode){
            case 1:default:
            if(strtolower($q->TagName) == $expression){
                $r[]=$q;
            }
            break;
        }
        if($q->HasChilds){
            foreach($q->Childs as $k){
                array_push($list, $k);
            }
        }
        $q=array_pop($list);
    }
    return $r;
}
///<summary></summary>
///<param name="name"></param>
///<param name="v"></param>
/**
* 
* @param mixed $name
* @param mixed $v
*/
function igk_html_set_func_param($name, $v){
    $tab=igk_app()->Session->getParam("system://igk_html_func_param");
    if($tab == null)
        $tab=array();
    $tab[$name]=$v;
    igk_getv(igk_app()->Session->setParam("system://igk_html_func_param"), $tab);
}
///<summary></summary>
///<param name="doc"></param>
///<param name="file"></param>
/**
* 
* @param mixed $doc
* @param mixed $file
*/
function igk_html_store_doc_form_mailtransport($doc, $file){
    $opt=igk_xml_create_render_option();
    $opt->Context="mail";
    igk_io_save_file_as_utf8_wbom($file, $doc->Render($opt), true);
}
///<summary></summary>
///<param name="$c"></param>
/**
* 
* @param mixed $c
*/
function igk_html_strip_comment($c){
    while(($t=strpos($c, "<!--")) !== false){
        $end=strpos($c, "-->");
        if($end === false){
            $c=substr($c, 0, $t);
        }
        else{
            $c=substr($c, 0, $t).substr($c, $end + 3);
        }
    }
    return $c;
}
function igk_html_skip_comment($c, & $pos){

}
///push child into the list
/**
*/
function igk_html_toggle_class($target, $childtag="tr", $startindex=1, $class1="table_darkrow", $class2="table_lightrow"){
    IGKHtmlUtils::ToggleTableClassColor($target, $childtag, $startindex, $class1, $class2);
}
///<summary>treat html content. Evaluate expression within </summary>
///<param name="$content" type="string"> string to evaluate </summary>
///<param name="$ctrl" type="controller"> the controller that request . it can be null</summary>
///<param name="$raw" type="mixed"> string or context array definition</summary>
///<param name="$target" type="node"> node for requesting . it can be null</summary> 
/**
* treat html content. Evaluate expression within
* @param mixed $string $content  string to evaluate
* @param mixed $controller $ctrl  the controller that request . it can be null
* @param mixed $raw  string or context array definition
* @param mixed $node $target  node for requesting . it can be null 
*/
function igk_html_treat_content($content, $ctrl, $raw, $target=null){
    if(empty($content))
        return;
    $ldcontext=igk_createloading_context($ctrl, $raw);
    if($target == null){
        $target=igk_createnotagnode();
    }
    $target->Load($content, $ldcontext);
    igk_html_treatinput($target);
    return $target;
}
///<summary></summary>
///<param name="info"></param>
///<param name="row"></param>
///<param name="ctrl" default="null"></param>
///<param name="artcontext" default="null"></param>
/**
* 
* @param mixed $info
* @param mixed $row
* @param mixed $ctrl the default value is null
* @param mixed $artcontext the default value is null
*/
function igk_html_treatbinding($info, $row, $ctrl=null, $artcontext=null){
    if($info->visiblerow<=0){
        return;}
    $output=array();
    $info->visiblerow--;
    $ctx=array(
            "ctrl"=>$ctrl,
            "raw"=>$row,
            "key"=>igk_getv($info,"key",0)
        );
    if($ctrl){
        $ctx=array_merge($ctrl->getSystemVars(), $ctx);
    }
    switch(strtolower($info->type)){
        case "igk-data-binding":
        if(preg_match_all("/^(?P<tagname>(".IGK_TAGNAME_CHAR_REGEX.")+)\s*:(?P<value>(.)+)$/i", $info->binding, $output)){
            $s=$output["tagname"];
            $r=$info->node->add($output["tagname"][0]);{
                $s=igk_html_treatbinding_evaldata($output['value'][0], $row, $ctrl, $artcontext);
                $r->Load($s);
            }
        }
        else{
            $rtab=explode(":", $info->binding);
            $c=igk_count($rtab);
            switch($c){
                case 1:
                $info->node->Content=igk_html_treatbinding_evaldata($rtab[0], $row, $ctrl, $artcontext);
                break;
                case 2:
                if(igk_html_is_tagname($rtab[0])){
                    $r=$info->node->add($rtab[0]);{
                        $s=igk_html_treatbinding_evaldata($rtab[1], $row, $ctrl, $artcontext);
                        $r->Content=$s;
                    }
                }
                else{
                    return false;
                }
                break;default:
                return false;
            }
        }
        break;
        case "igk-data-row-binding":
        if(isset($info->rowcheckExpression)){
            $o=igk_html_eval_value_in_context("return ".$info->rowcheckExpression.";", $ctx);
            if($o == false)
                break;
        }
        $r=igk_createnode($info->node->TagName);
        $r->copyAttributes($info->node);
        $m="";
        $m=igk_html_get_inner_heararchi($info->node, "expression");
        $r->LoadExpression($m);
        if(isset($info->data)){
            $g=igk_html_eval_value_in_context($info->data, $ctx);
            if($g){
                $it=0;
                foreach($g as $k=>$v){
                    $tt=$info->parent->add($info->node->TagName);
                    $tt->copyAttributes($info->node);
                    igk_html_bind_node($ctrl, $r, $tt, $v);
                    $it++;
                    $tt->Index=$info->Index + $it;
                }
            }
        }
        else{
            $bindchild=false;
            $k=$info->parent->add($info->node->TagName, null, $info->Index);
            $k->copyAttributes($info->node);
            $key="sys://html-data";
            igk_set_env($key, $info);
            igk_html_bind_node($ctrl, $r, $k, $row, false, $bindchild);
            igk_set_env($key, null);
            $k->Index=$info->Index;
            $info->Index++;
            if($bindchild){
                $m=igk_html_get_inner_heararchi($k, "expression");
                $k->ClearChilds();
                $m=str_replace("\"", "__''__", $m);
                $m=igk_html_treatbinding_evaldata($m, $row, $ctrl, $artcontext);
                $m=str_replace("__''__", "\"", $m);
                $k->Load($m, igk_createloading_context($ctrl, $row));
            }
        }
        break;
        case "igk-data-full-row-binding":
        $m=$info->node->getinnerHtml();
        $tag=$info->tag;
        if($tag){
            $r=igk_createnode($info->node->TagName);
            foreach($row as $k){
                $r->add($tag)->Content=$k;
            }
            $s=$info->parent->add($r);
        }
        else{
            foreach($row as $k){
                $r=igk_createnode($info->node->TagName);
                $r->copyAttributes($info->node);
                $r->Content=$k;
                $s=$info->parent->add($r);
            }
        }
        break;
    }
    return true;
}
///<summary>Evaluate data by applying current row entries</summary>
///<remark>used to evaluate $value by replacing the current row data expression column</remark>
///<param name="value">expression to evaluate</param>
///<param name="row">current cibling row</param>
///<param name="ctrl">passed controller</param>
///<param name="ctx">context  if IGK_HTML_BINDING_EVAL_CONTEXT or null</param>
/**
* Evaluate data by applying current row entries
* @param mixed $value expression to evaluate
* @param mixed $rowcurrent cibling row
* @param mixed $ctrl passed controller
* @param mixed $ctx context if IGK_HTML_BINDING_EVAL_CONTEXT or null
*/
function igk_html_treatbinding_evaldata($value, $raw, $ctrl=null, $ctx=null){
    igk_trace();
    igk_wln('evaluate data:', igk_html_wtag("textarea", $value, ["style"=>"width:300px; height: 200px"]));
    return $value;
}
///<summary></summary>
///<param name="node"></param>
/**
* 
* @param mixed $node
*/
function igk_html_treatinput($node){
    if($node == null)
        return;
    $d=$node->getElementsByTagName("input");
    if($d && (igk_count($d) > 0)){
        foreach($d as $k){
            if(($k["class"] == null) && ($k["type"] != null)){
                $k["class"]="cl".strtolower($k["type"]);
            }
        }
    }
}
///<summary>call this to unregister a callback node</summary>
/**
* call this to unregister a callback node
*/
function igk_html_unreg_callback_node($sender){
    $p=$sender->getParentNode();
    $s=$sender->getParam(IGK_NAMED_ID_PARAM);
    if($s && $p){
        $t=$p->getParam(IGK_NAMED_NODE_PARAM);
        if(isset($t[$s])){
            unset($t[$s]);
            $p->setParam(IGK_NAMED_NODE_PARAM, $t);
        }
    }
}
///unscape text area content
/**
*/
function igk_html_unscape($out){
    $reg="/(?P<name>([\\][\"\'\\\\]))/i";
    $c=preg_match_all($reg, $out, $t);
    for($i=0; $i < $c; $i++){
        switch($t["name"][$i]){
            case '\\"':
            $out=str_replace('\\"', '"', $out);
            break;
            case "\\'":
            $out=str_replace("\\'", '\'', $out);
            break;
            case '\\':
            $out=str_replace('\\', "\\", $out);
            break;
        }
    }
    return $out;
}
///<summary>unset template default attribute properties</summary>
/**
* unset template default attribute properties
*/
function igk_html_unset_template_properties($node){
    $node["igk-data-binding"]=null;
    $node["igk-data-binding-visible-row"]=null;
    $node["igk-data-full-row-binding"]=null;
    $node["igk-data-full-row-binding-tag"]=null;
    $node["igk-data-row-checkexpression"]=null;
    $node["igk-data-row-binding"]=null;
    $node["igk-data-row-data"]=null;
    if($t=igk_get_env("sys://template/bindingProperties")){
        foreach($t as $k){
            $node[$k]=null;
        }
    }
}
///<summary>render on node type shortcut function</summary>
/**
* render on node type shortcut function
*/
function igk_html_view($nodeType, $content){
    $n=igk_createnode($nodeType);
    $n->addObData($content);
    $n->RenderAJX();
}
///<summary></summary>
///<param name="key"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $key
* @param mixed $msg
*/
function igk_html_wln_log($key, $msg){
    $s=igk_wln_ob_get($msg);
    $d=igk_createnode();
    $d->setStyle("font-size:0.94em");
    $d->addDiv()->Content=$key;
    $d->addDiv()->setStyle("color: #ddd; background-color: #444")->addQuote()->Content=$s;
    $d->RenderAJX();
}

///<summary>shortcut utilisty to dump variable: to log</summary>
function igk_ilog_dump($o){
	igk_ilog(igk_ob_get_func("var_dump", $o));
}
///<summary>write log to IGK_LOG_FILE</summary>
/**
* write log to IGK_LOG_FILE
* @param mixed $msg
* @param mixed $tag
* @param mixed $traceindex
*/
function igk_ilog($msg, $tag=null, $traceindex=0){
    //+ igk_trace();
    //+ igk_exit();

    if(is_array($msg)){
        $s="Array(".count($msg)."):[\n";
        $o="";
        foreach($msg as $k=>$v){
            $s .= $k.":";
            if(is_array($v)){
                $s .= "Array";
            }
            else if(is_object($v))
                $s .= get_class($v);
            else
                $s .= $v;
            $s .= "\n";
        }
        $s .= "]";
        $msg=$s;
    }
    $f="";
    if(!($f = igk_const("IGK_LOG_FILE")))
        $f=igk_ilog_file();
    if(!defined('IGK_NO_TRACELOG')){
        if(!igk_sys_env_production()){
            igk_ilog_trace(igk_trace_function(2 + $traceindex));
            $msg=array("msg"=>$msg, "trace"=>igk_ilog_get_trace());
        }
    }
    igk_log_append($f, $msg, $tag);
}
///<summary></summary>
///<param name="cond"></param>
///<param name="msg"></param>
///<param name="tag" default="null"></param>
/**
* 
* @param mixed $cond
* @param mixed $msg
* @param mixed $tag the default value is null
*/
function igk_ilog_assert($cond, $msg, $tag=null){
    if($cond){
        igk_ilog($msg, $tag);
    }
}
///<summary></summary>
/**
* 
*/
function igk_ilog_clear(){
    $logfile=igk_ilog_file();
    igk_io_w2file($logfile, "", true);
}
///<summary></summary>
/**
* 
*/
function igk_ilog_file(){
    $f="";
    if(!($f = igk_const("IGK_LOG_FILE")))
    {
        if(defined('IGK_APP_DIR'))
            $f=igk_io_dir(IGK_APP_DIR."/".IGKLog::LOGFILE);
        else
            $f=igk_io_dir(IGK_LIB_DIR."/../../".IGKLog::LOGFILE);
    }
    return $f;
}
///<summary></summary>
/**
* 
*/
function igk_ilog_get_trace(){
    return igk_get_env("sys://ilog/trace");
}
///<summary></summary>
///<param name="trace" default="null"></param>
/**
* 
* @param mixed $trace the default value is null
*/
function igk_ilog_trace($trace=null){
    igk_set_env("sys://ilog/trace", $trace);
}
///<summary></summary>
///<param name="glue"></param>
///<param name="tab"></param>
///<param name="callback"></param>
///<param name="ignore" default="1"></param>
/**
* 
* @param mixed $glue
* @param mixed $tab
* @param mixed $callback
* @param mixed $ignore the default value is 1
*/
function igk_implode($glue, $tab, $callback, $ignore=1){
    $o="";
    $g=0;
    foreach($tab as $k){
        $s=$callback($k);
        if(empty($s) && $ignore)
            continue;
        if($g)
            $o .= $glue;
        $o .= $s;
        $g=1;
    }
    return $o;
}
function igk_glue($glue){

    if (func_num_args()>1){
        return call_user_func_array("implode",
            array($glue, array_slice(func_get_args(), 1))
        );
    }
}
///<summary>add article and treat image source as link</summary>
/**
* add article and treat image source as link
*/
function igk_in_article($ctrl, $name, $target, $tagname=null){
    if($target == null)
        igk_die("igk_in_article::target is null");
    $f=$ctrl->getArticle($name);
    if(file_exists($f)){
        $uri=igk_io_baseuri()."/". igk_io_basepath($f);
        if($tagname == null){
            $target->Load(igk_io_read_allfile($f));
        }
        else{
            $s=$target->add($tagname);
            $s->Load(igk_io_read_allfile($f));
        }
    }
    $m=$target->getElementsByTagName("image");
    if($m){
        $dir=dirname(igk_io_basepath($f));
        foreach($m as $v){
            if(!IGKValidator::IsUri($v->lnk) && is_file(igk_io_dir($dir."/".$v->lnk))){
                $v->lnk=igk_io_baseuri()."/". $dir."/".$v->lnk;
            }
        }
    }
    return null;
}
///<summary>include file: with params</summary>
///<param name='file'>full path </param>
/**
* include file: with params
* @param mixed $ile full path
*/
function igk_include($file, $params=null, $target=null){
    $__tfile=$file;
    $params=$params ?? igk_get_view_args();
    is_array($params) ? extract($params): null;
    $file=$__tfile;
    unset($__tfile);
    if(isset($bindto)){
        $args=get_defined_vars();
        unset($args["bindto"]);
        $fc=function() use ($args, $target, $file){
            extract($args);
            $context="igk_include::callback";
            if($target)
                $t=$target;
            if(file_exists($file)){
                include($file);
            }
        };
        $fc=$fc->bindTo($bindto);
        $fc();
    }
    else{
        if($target)
            $t=$target;
        extract($args);
        $context="igk_include::inline";
        if(file_exists($file)){
            include($file);
        }
    }
}
///<summary>include file</summary>
/**
* include file
*/
function igk_include_file($file, $args=null){
    if(!file_exists($file))
        return;
    if($args){
        foreach($args as $k=>$v){
            $$k=& $args[$k];
        }
    }
    include($file);
}
///<summary>include on global context</summary>
///<param name="f">file to include</param>
///<param name="g">global argument</param>
/**
* include on global context
* @param mixed $ file to include
* @param mixed $gglobal argument
*/
function igk_include_on_global($f, $g=null){
    
    extract($GLOBALS);
    include($f);
}
///<summary>include script in plugin lib</summary>
///<param name="file">mixed file or array </param>
///<param name="extra">preload script content </param>
///<param name="namespace">namespace to define</param>
/**
* include script in plugin lib
* @param mixed $ile mixed file or array
* @param mixed $extra preload script content
* @param mixed namespace namespace to define
*/
function igk_include_script($file, $namespace=null, $extra=null){
    if(is_string($file) && !file_exists($file))
        return;
    $n="";
    $l=igk_get_env("sys://include/init") ?? igk_init_include();
    $tab=$file;
    if(!is_array($file)){
        $tab=array($tab);
    }
    $to=[];
    while($file=array_pop($tab)){
        if($namespace)
            $n="namespace ".$namespace."; {$extra} ?>".igk_io_read_allfile($file);
        else
            $n="?>"."<?php return include(igk_realpath('{$file}')); ?>";
        igk_set_env(__FUNCTION__, $file);
        $o=@eval($n);
        igk_update_include($file);
        igk_set_env(__FUNCTION__, null);
        $to[]=$file;
    }
    return $to;
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_include_set_view($f){
    $t=igk_get_env(IGKEnvKeys::VIEW_INC_VIEW);
    if($t == null){
        $t=array();
    }
    $t[igk_io_dir($f)
    ]=1;
    igk_set_env(IGKEnvKeys::VIEW_INC_VIEW, $t);
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_include_unset_view($f){
    $t=igk_get_env(IGKEnvKeys::VIEW_INC_VIEW);
    unset($t[$f]);
    igk_set_env(IGKEnvKeys::VIEW_INC_VIEW, $t);
}
///<summary></summary>
/**
* 
*/
function igk_include_utils(){
    include_once(IGK_LIB_DIR."/Inc/igk_utils.func.pinc");
}
///<summary>include view</summary>
///<param name="ctrl">the controller that will be used</param>
///<param name="target">target node that will recieve the content of the view</param>
///<param name="file">file path or relative name to view file</param>
///<param name="create">create file if not exists. default is false</param>
///<param name="args">array data to pass to view file </param>
/**
* include view
* @param mixed $ctrl the controller that will be used
* @param mixed $target target node that will recieve the content of the view
* @param mixed $ile file path or relative name to view file
* @param mixed $create create file if not exists. default is false
* @param mixed $args array data to pass to view file
*/
function igk_include_view($ctrl, $target, $file, $args=null, $create=false){
    if($f=file_exists($file) ? $file: $ctrl->getViewFile($file)){
        $s_args=igk_get_view_args();
        if($s_args && !igk_is_included_view($f)){
            $id=spl_object_hash($ctrl);
            if(!($c=igk_get_env(IGKEnvKeys::CTRL_CONTEXT_SOURCE_VIEW_ARGS))){
                $c=[];
            }
            if(!isset($c[$id])){
                $c[$id]=$s_args;
                igk_set_env(IGKEnvKeys::CTRL_CONTEXT_SOURCE_VIEW_ARGS, $c);
            }
        }
        igk_include_set_view($f);
        $ctrl->getViewContent($file, $target, $create, $args);
        igk_include_unset_view($f);
    }
}
///<summary></summary>
///<param name="dirname" default="null"></param>
/**
* 
* @param mixed $dirname the default value is null
*/
function igk_init_access($dirname=null){
    $v_access="";
    if($dirname == null)
        $dirname=IGK_APP_DIR;
    $v_access=$dirname. "/.htaccess";
    igk_io_save_file_as_utf8($v_access, igk_getbase_access(), true);
}
///<summary>init controller with a source creation listener</summary>
/**
* init controller with a source creation listener
*/
function igk_init_controller($listener){
    $grantaccess="allow from all";
    $denyaccess='deny from all';
    $listener->addDir(IGK_VIEW_FOLDER);
    $listener->addDir(IGK_ARTICLES_FOLDER);
    $listener->addDir(IGK_DATA_FOLDER);
    $listener->addDir(IGK_SCRIPT_FOLDER);
    $listener->addDir(IGK_STYLE_FOLDER);
    $listener->addDir(IGK_CONTENT_FOLDER);
    $listener->addDir(implode("/", [IGK_LIB_FOLDER,IGK_CLASSES_FOLDER]));
    $listener->addDir(implode("/", [IGK_LIB_FOLDER,IGK_TESTS_FOLDER]));    
    $listener->addDir(IGK_CONF_FOLDER);
    $listener->addSource(IGK_DATA_FOLDER."/.htaccess", $grantaccess);
    $listener->addSource(IGK_SCRIPT_FOLDER."/.htaccess", $grantaccess);
    $listener->addSource(IGK_STYLE_FOLDER."/.htaccess", $grantaccess);
    $listener->addSource(IGK_CONTENT_FOLDER."/.htaccess", $denyaccess);
    $listener->addSource(IGK_LIB_FOLDER."/.htaccess", $denyaccess);
    $listener->addSource(IGK_CONF_FOLDER."/.htaccess", $denyaccess);
    $listener->addSource(IGK_STYLE_FOLDER."/default.pcss", igk_get_default_style(), false);
}
///<summary></summary>
///<param name="ctrlname"></param>
/**
* 
* @param mixed $ctrlname
*/
function igk_init_ctrl($ctrlname){
   
    $n=igk_sys_get_controller($ctrlname);
    if ($n===null && class_exists($ctrlname)){
        $n = $ctrlname;
    } 
    
    if(!empty($n) && class_exists($n)){
        if ($man=igk_app()->getControllermanager()){   
            $o = $man->getControllerInstance($n);
            return $o;
        }
    }
    return null;
}
///<summary>init html basic method</summary>
/**
* init html basic method
*/
function igk_init_html_basic_method(){
    IGKHtmlItemBase::$BasicMethod=array("AcceptRender"=>"__AcceptRender");
}
///<summary></summary>
/**
* 
*/
function igk_init_include(){
    $functions=get_defined_functions()["user"];
    $classes=get_declared_classes();
    $source=igk_count($functions);
    $clcount=igk_count($classes);
    $t=array("funcs"=>$source, "classes"=>$clcount);
    igk_set_env("sys://include/init", $t);
    return $t;
}
///<summary></summary>
///<param name="path"></param>
/**
* 
* @param mixed $path
*/
function igk_init_module($path){
    $k="sys://modules/".strtolower(str_replace("/", ".", igk_html_uri($path)));
    $b=igk_get_env("sys://modules", array());
    if(isset($b[$k]))
        return $b[$k];
    $dir=igk_io_dir(igk_get_module_dir(). "/{$path}");
    if(!file_exists($dir))
        return null;  

    $ob=new IGKAppModule($dir);
    $b[$k]=$ob;
    igk_set_env("sys://modules", $b);
    return $ob;
}
///<summary>init user global info setting</summary>
/**
* init user global info setting
*/
function igk_init_user_info(){
    igk_user_set_info("TOKENID", "", "(.)+", 1, 1);
}
///<summary>init environame</summary>
///<param name="dirname">starting directory</param>
/**
* init environame
* @param mixed $dirname starting directory
* @return mixed
*/
function igk_initenv($dirname){
    if(!is_dir($dirname))
        return -9;
    $confFILE=$dirname."/Data/configure";
    $Rfile=$dirname."/".IGK_RES_FOLDER."/R.class.php";
    if(!defined("IGK_APP_DIR"))
        define("IGK_APP_DIR", $dirname);
    if(defined("IGK_INIT") && IGK_INIT){
        return;}
    if(defined('IGK_SESS_DIR') && IGKIO::CreateDir(IGK_SESS_DIR)){
        ini_set("session.save_path", IGK_SESS_DIR);
    }
    if(!(defined('IGK_INIT') && IGK_INIT) && file_exists($confFILE)){
        //
        // | check core environment 
        //
        foreach([
            igk_io_cachedir(), 
            igk_io_basedir()."/".IGK_RES_FOLDER
        ] as $cdir) {
            if (!is_dir($cdir) && IGKIO::Createdir($cdir)){               
                if (igk_server_is_local()){
                    @chmod($cdir, 0775);
                }
            }
        }
        if(file_exists($Rfile))
            include_once($Rfile);
        if(!IGKSysCache::LoadCacheLibFiles()){
            $t_files=igk_load_env_files($dirname, array(igk_io_projectdir()));
            igk_reglib($t_files);
            IGKSysCache::CacheLibFiles(true);
        }
        IGKSubDomainManager::Init();
        !defined('IGK_INIT') && define('IGK_INIT', 1);
        return;
    }
    $hdir=null;
    if(is_dir($dirname))
        $hdir=opendir($dirname);
    if(!$hdir)
        return;
    IGKApp::$INITENV=1;
   
    $access="deny from all";
    $old=umask(0);
    IGKIO::CreateDir($dirname."/Configs");
    $idx=IGK_BASE_DIR."/index.php";
    $v_access=IGK_BASE_DIR."/.htaccess";
    if(!file_exists($idx)){
        $indexsrc=igk_getbaseindex_src(__FILE__);
        igk_io_save_file_as_utf8($idx, $indexsrc);
    }
    if(!file_exists($v_access)){
        igk_io_save_file_as_utf8($v_access, igk_getbase_access(), true);
    }
 
    igk_io_save_file_as_utf8($dirname."/Lib/.htaccess", $access, true);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER);
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/.htaccess", "allow from localhost", true);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER."/Img");
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/.htaccess", "allow from all", true);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER."/Layouts");
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/.htaccess", "allow from all", true);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER."/Styles");
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/.htaccess", "allow from all", true);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER."/Fonts");
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/Fonts/.htaccess", "allow from all", false);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER."/Videos");
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/ie.css", "@import url(\"base.css\");", true);
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/mod.css", "@import url(\"base.css\");", true);
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/base.css", igk_css_getdefaultstyle(), true);
    igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/balafon.css.php", igk_get_basestyle(), true);
    IGKIO::CreateDir($dirname."/".IGK_RES_FOLDER."/Themes");
    $theme=IGK_DEFAULT_THEME_FOLDER."/default.theme";
    $v_f=IGKIO::ReadAllText($theme);
    if(!empty($v_f)){
        igk_io_save_file_as_utf8($dirname."/".IGK_RES_FOLDER."/Themes/default.theme", $v_f, false);
    }
    $project_dir=igk_io_projectdir();
    IGKIO::CreateDir($project_dir);
    IGKIO::CreateDir($dirname."/".IGK_PACKAGES_FOLDER);
    igk_io_save_file_as_utf8($dirname."/".IGK_PACKAGES_FOLDER."/.htaccess", $access);
    igk_io_save_file_as_utf8($project_dir."/.htaccess", $access, true);
    $data_dir=$dirname."/".IGK_DATA_FOLDER;
    IGKIO::CreateDir($data_dir);
    IGKIO::CreateDir($data_dir."/Lang");
    IGKIO::CopyFiles(IGK_LIB_DIR."/Default/Data", $dirname."/".IGK_DATA_FOLDER, true);
    igk_io_save_file_as_utf8($dirname."/".IGK_DATA_FOLDER."/.htaccess", $access, false);
    igk_io_save_file_as_utf8($dirname."/".IGK_CONF_DATA, igk_get_defaultconfigdata(), false);
    IGKIO::CreateDir($dirname."/".IGK_SCRIPT_FOLDER);
    IGKIO::CreateDir($dirname."/".IGK_INC_FOLDER);
    igk_io_save_file_as_utf8($dirname."/".IGK_INC_FOLDER."/.htaccess", "deny from all");
    IGKIO::CreateDir($dirname."/".IGK_CACHE_FOLDER, 0775);
    igk_io_save_file_as_utf8($dirname."/".IGK_CACHE_FOLDER."/.htaccess", "deny from all");
    igk_load_env_files(IGK_LIB_DIR);
    igk_loadcontroller($dirname."/".IGK_INC_FOLDER);
    igk_loadcontroller($project_dir);
    igk_io_save_file_as_utf8($confFILE, "1", false);
    $ips=igk_io_server_name();
    igk_io_save_file_as_utf8($dirname."/".IGK_DATA_FOLDER."/domain.conf", !IGKValidator::IsIPAddress($ips) ? $ips: IGK_DOMAIN, true);
    $cgi=IGK_LIB_DIR."/cgi-bin";
    if(!igk_phar_running() && ($ctab = igk_io_getfiles($cgi, "/\.cgi$/"))){
        foreach($ctab as $k){
            @chmod($k, octdec("0755"));
        }
    }
    igk_io_save_file_as_utf8($dirname."/Configs/index.php", igk_config_php_index_content(), false);
    igk_io_save_file_as_utf8($dirname."/Configs/.htaccess", igk_getconfig_access(), false);
    closedir($hdir);
    umask($old);
    igk_raise_initenv_callback();
    IGKApp::$INITENV=0;
    IGKSubDomainManager::Init();
}
///<summary></summary>
///<param name="zipfile"></param>
/**
* 
* @param mixed $zipfile
*/
function igk_install_module($zipfile){
    throw new IGKNotImplementException(__FUNCTION__);
}
///<summary></summary>
/**
* 
*/
function igk_internal_reslinkaccess(){
    if(!igk_get_env($key="sys://res/linkaccess")){
        $fdir=igk_io_cacheddist_jsdir();
        $access=$fdir."/.htaccess";
        $resolver=IGKResourceUriResolver::getInstance();
        $bck=igk_server()->REQUEST_URI;
        igk_server()->REQUEST_URI="/";
        $access2=$resolver->resolveOnly($access);
        if(!file_exists($access2)){
            $resolver->resolve($access);
        }
        igk_server()->REQUEST_URI=$bck;
        igk_set_env($key, 1);
    }
}
///GLOBAL FUNCTION DEFINITION
///<summary>utility invalidate opcache</summary>
/**
* utility invalidate opcache
*/
function igk_invalidate_opcache($f){
    if(function_exists("opcache_invalidate"))
        opcache_invalidate($f, true);
}
///<summary>invoke a callback object</summary>
///<param name="bind">object that will be the host </param>
///<param name="bind">object to bind</param>
///<param name="extra">extra information</param>
/**
* invoke a callback object
* @param mixed $bind object that will be the host
* @param mixed $bind object to bind
* @param mixed $extra extra information
*/
function igk_invoke_callback_obj($bind, $obj, $extra=null){
    if(is_callable($obj)){
        if("Closure" == get_class($obj)){
            $fc=$obj->bindTo($bind);
            return call_user_func_array($fc, $extra ?? array());
        }
        igk_die(__FUNCTION__.": object is callable. Not allowed. ".get_class($obj));
    }
    switch($obj->clType){
        case "node":
        if(is_callable($obj->clFunc)){
            if(igk_is_closure($obj->clFunc)){
                $tab=array_merge(array(), (array)$obj->clParam, $extra != null ? $extra: array());
                $fc=$obj->clFunc->bindTo($bind);
                return call_user_func_array($fc, $tab);
            }
            $tab=array($bind);
            $tab=array_merge($tab, (array)$obj->clParam, $extra != null ? $extra: array());
            return call_user_func_array($obj->clFunc, array_values($tab));
        }
            igk_ilog("/!\\ not a valid callable: ", __FUNCTION__);
            return false;

        case "func":
        if(is_callable($obj->clFunc)){
            $tab= array_values(array_merge((array)$obj->clParam, $extra != null ? $extra: array()));
            if(igk_is_closure($obj->clFunc)){
                $fc=$obj->clFunc->bindTo($bind);
                return call_user_func_array($fc, $tab);
            }
            if($bind){
                array_push($tab, $bind);
            }
            return call_user_func_array($obj->clFunc, $tab);
        }
            igk_ilog("/!\\ not a valid callable: ", __FUNCTION__);
            return false;

        case "exp":
        if($obj->clParam)
            extract($obj->clParam);
        $fc_args=igk_getv($obj->clParam, "func:args");
        igk_set_env(IGK_LAST_EVAL_KEY, $obj->clFunc);
        $o=eval($obj->clFunc);
        igk_set_env(IGK_LAST_EVAL_KEY, null);
        return $o;
        case "file":
        if(class_exists("Closure")){
            $ex=function() use ($bind, $obj){
                $this->_include_file_on_context($obj->clFile);
                $func=$obj->clFunc;
                ob_clean();
                if(isset($func))
                    $func($bind, $obj);
                igk_exit();
            };
            $f=$ex->bindTo($obj->Ctrl, $obj->Ctrl);
            $f();
        }
        break;
        default: igk_debug_wln("failed to send ");
        return false;
    }
    return false ;
}
///<summary></summary>
/**
* 
*/
function igk_invoke_export_callback(){
    $func=igk_get_env("sys://export_callback");
    if($func){
        call_user_func_array($func, func_get_args());
    }
}
///<summary>invoke a function in the session id context</summary>
///<remark>the current session must be write first</remark>
/**
* invoke a function in the session id context
*/
function igk_invoke_in_session($sid, $callback){
    $app=igk_app();
    igk_bind_session_id($sid);
    session_start();
    $o=$callback($app);
    session_write_close();
    return $o;
}
///<summary></summary>
///<param name="obj"></param>
///<param name="n"></param>
///<param name="k"></param>
///<param name="offset" default="1"></param>
/**
* 
* @param mixed $obj
* @param mixed $n
* @param mixed $k
* @param mixed $offset the default value is 1
*/
function igk_invoke_param($obj, $n, $k, $offset=1){
    if(igk_is_callable($n)){
        return call_user_func_array($n, array_slice($obj->clParam, $offset));
    }
    return call_user_func_array(array($n, $k), array_slice($obj->clParam, $offset));
}
///<summary>invoke pipe expression</summary>
/**
* invoke pipe expression
*/
function igk_invoke_pipe($name, $value, $options=null){
    $loc_t=igk_reg_pipe(null);
    $s=$name;
    $args=[$value];
    if(($pos=strpos($s, ";")) !== false){
        $exp=substr($s, $pos + 1);
        $s=substr($s, 0, $pos);
        $tab=igk_get_query_options($exp);
        if($tab)
            $args[]=$tab;
    }
    $fc=igk_getv($loc_t, $s);
    $v=$value;
    if($fc && igk_is_callable($fc)){
        $v=igk_invoke_callback_obj(null, $fc, $args);
    }
    return $v;
}
///<summary></summary>
///<param name="f"></param>
///<param name="args" default="null"></param>
/**
* 
* @param mixed $f
* @param mixed $args the default value is null
*/
function igk_invoke_script($f, $args=null){
    $f=igk_io_dir($f);
    if(file_exists($f)){
        $o=igk_get_path_exec(igk_io_path_ext($f))." ".$f;
        if($args)
            $o .= " ".$args;
        $c=shell_exec($o);
        return $c;
    }
    return -1;
}
///<summary>invoke session registrated event</summary>
/**
* invoke session registrated event
*/
function igk_invoke_session_event($name, $param){
    $key="sys://global_events";
    $primary=igk_get_env($key, array());
    $ctx=igk_current_context();
    $p=igk_get_session_event($name);
    $evtlist_controller=igk_get_session_event_handler();
    if(!is_array($param))
        $param=array($param);
    $data=array_merge(array($name), $param);
    if($evtlist_controller){
        foreach($evtlist_controller as $k){
            call_user_func_array(array($k, 'onHandleSystemEvent'), $data);
        }
    }
    if($p){
        igk_push_env(__FUNCTION__, $name);
        foreach($p as $k){
            if(igk_is_closure($k)){
                $k($param[0], igk_getv($param, 1));
            }
            else{
                $ss=(igk_getv($k, 1) ?? igk_getv($k, 0));
                call_user_func_array($k, $param);
            }
        }
        igk_pop_env(__FUNCTION__);
    }
}
///<summary>from wordpress template edition</summary>
/**
* from wordpress template edition
* @return mixed 
*/
function igk_invoke_widget_zone($name, $args=null){}
///<summary>append to file</summary>
/**
* append to file
*/
function igk_io_a2file($file, $content, $overwrite=true){
    return igk_io_save_file_as_utf8_wbom($file, $content, $overwrite, IGK_DEFAULT_FILE_MASK, "a+");
}
///<summary></summary>
/**
* 
*/
function igk_io_access(){
    return igk_get_env("sys://currenturiaccess", igk_io_baseuri());
}
///<summary></summary>
///<param name="file"></param>
///<param name="data"></param>
/**
* 
* @param mixed $file
* @param mixed $data
*/
function igk_io_append_to_file($file, $data){
    $r=@fopen($file, file_exists($file) ? "a+": "w+");
    if($r){
        fwrite($r, $data);
        fclose($r);
    }
    else{
        igk_log_write_i("func:".__FUNCTION__, "file ".$file." can't be writed ");
    }
}
///<summary>return application data folder</summary>
/**
* return application data folder
*/
function igk_io_applicationdatadir(){
    return igk_io_applicationdir().DIRECTORY_SEPARATOR.IGK_DATA_FOLDER;
}
///<summary></summary>
/**
* 
*/
function igk_io_applicationdir(){
    if(!defined('IGK_APP_DIR')){
        igk_die("application directory not defined", IGKErrors::NoAPPDIRDEFINED);
    }
    return IGK_APP_DIR;
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_io_arg_from($f){
    $arg=null;
    if(strstr($f, "/")){
        $a=explode("/", $f);
        $f=$a[0];
        $b=array_slice($a, 1);
        if(igk_count($b) == 1){
            $arg=$b[0];
        }
        else
            $arg=$b;
    }
    return $arg;
}
///<summary>return the base request uri - start at $basedir</summary>
/**
* return the base request uri - start at $basedir
*/
function igk_io_base_request_uri($rm_redirectvar=1){
    $s=igk_io_baseuri();
    $d=igk_io_fullrequesturi();
    $o='/'.igk_str_rm_start(substr($d, strlen($s)), '/');
    ($rm_redirectvar) && igk_io_rm_redirectvar($o);

    return $o;
}
///<summary> parse base request uri info</summary>
/**
*  parse base request uri info
*/
function igk_io_base_request_uri_info(){
    $t=parse_url(igk_io_base_request_uri());
    return $t;
}
///<summary>get global base dir: </summary>
/**
* get global base dir:
*/
function igk_io_basedatadir($dir=null){
    return igk_io_dir(igk_io_basedir()."/".IGK_DATA_FOLDER.$dir);
}
///<summary>get path to base directory</summary>
///<remark>return the directory full path according to base directory</remark>
/**
* get path from base directory
*/
function igk_io_basedir($dir=null){
    if(!defined("IGK_BASE_DIR"))
        return null;
    $l=igk_io_dir(IGK_BASE_DIR);
    if($dir == null)
        return $l;
    if(file_exists($dir) && (($hdir=igk_io_dir($dir)) == igk_realpath($dir))){
        $rpath=IGKIO::GetRelativePath($hdir, $l);
        if($rpath)
            return igk_io_dir($l. DIRECTORY_SEPARATOR.$rpath);
        return $dir;
    }
    $s=str_replace("\\", "\\\\", $l);
    $egext="#^(".$s.")#";
    $dir=igk_io_dir($dir);
    if($s && preg_match($egext, $dir))
        return $dir;
    return igk_io_dir(IGK_BASE_DIR."/".$dir);
}
///<summary> get if the base directory is equal to server document root</summary>
/**
*  get if the base directory is equal to server document root
*/
function igk_io_basedir_is_root(){
    $doc_root=igk_io_rootdir();
    $base_dir=igk_io_basedir();
    return $doc_root == $base_dir;
}
///<summary> get full current domain uri</summary>
/**
*  get full current domain uri
*/
function igk_io_basedomainuri($secured=null){
    $app=igk_app();
    if(IGKServerInfo::IsLocal()){
        $s=igk_io_baseuri();
    }
    else{
        $s=igk_sys_srv_uri_scheme()."://". igk_getv($app->Configs, "website_domain");
    }
    $s=igk_secure_uri($s, $secured);
    return $s;
}
///igk_wln(IGKIO::GetRelativePath($l, $hdir));
///<summary> retourne le chemin relatif Ã Â partir de la racine du site. si le repertoire existe.</summary>
///<param name="dir">cwd path or full path</param>
///<remark>$dir must exist</remark>
/**
*  retourne le chemin relatif Ã Â partir de la racine du site. si le repertoire existe.
* @param string $dir cwd path or full path
*/
function igk_io_basepath($dir, $sep=DIRECTORY_SEPARATOR){
    $p=igk_realpath($dir);
    if(empty($p)){
        if(is_file($dir)){
            if(strstr($dir, IGK_LIB_DIR)){
                return '%lib%'.substr($dir, strlen(IGK_LIB_DIR));
            }
            return $dir;
        }
        return null;
    }
    if(is_link($dir)){
        $g=igk_io_realpath($dir);
        return igk_io_baserelativepath($g);
    }
    return igk_io_baserelativepath($p, null, $sep);
}
///<summary></summary>
///<param name="dir"></param>
///<param name="basedir" default="null"></param>
///<param name="separator" default="DIRECTORY_SEPARATOR"></param>
/**
* 
* @param mixed $dir
* @param mixed $basedir the default value is null
* @param mixed $separator the default value is DIRECTORY_SEPARATOR
*/
function igk_io_baserelativepath($dir, $basedir=null, $separator=DIRECTORY_SEPARATOR){
    if(empty($dir)){
        return IGK_STR_EMPTY;
    }
    $dir=igk_html_uri($dir);
    $bdir=igk_html_uri($basedir == null ? igk_io_basedir(): $basedir);
    // $separator="/";
    if(empty($bdir)){
        igk_die("basedir is empty");
    }
    if($bdir == $dir)
        return IGK_STR_EMPTY;
    if(igk_io_is_subdir($bdir, $dir)){
        return IGKIO::GetChildRelativePath($bdir, $dir, $separator);
    }
    $dir1=explode($separator, $bdir);
    $dir2=explode($separator, $dir);
    $r=0;
    $c=0;
    while(!$r && ($c < igk_count($dir1)) && ($c < igk_count($dir2))){
        if($dir1[$c] == $dir2[$c]){
            $c++;
        }
        else{
            $r=1;
            break;
        }
    }
    if($r){
        $lv=igk_count($dir1);
        $td=count(array_slice($dir1, $c));
        $st="";
        if($c > 0)
            $st=str_repeat("../", $td);
        else if($c == 1)
            $st="./";
        $ro=igk_io_dir($st.join($separator, array_slice($dir2, $c)));
        return $ro;
    }
    igk_die("Not resolving failed : {$dir} ");
}
///<summary></summary>
///<param name="dir"></param>
/**
* 
* @param mixed $dir
*/
function igk_io_baserelativeuri($dir){
    return igk_html_uri(igk_io_baserelativepath($dir));
}
///<summary>shortcut to IGKIO::GetBaseUri</summary>
///<param name="dir">null or existing fullpath directory or file element. </param>
///<return>full base uri path</return>
/**
* shortcut to IGKIO::GetBaseUri
* @param mixed $dir null or existing fullpath directory or file element.
*/
function igk_io_baseuri($dir=null, $secured=null, & $path=null){
    $secured=$secured === null ? igk_getv($_SERVER, 'HTTPS') == 'on': $secured;
    $path=null;
    $out=IGK_STR_EMPTY;
    $v_dir=igk_io_basedir($dir);
    $root=igk_io_rootdir();
    if(!($s=strstr($v_dir, $root))){
        return null;
    }
    $t=igk_str_rm_start(igk_html_uri(substr($v_dir, strlen($root))), '/');
    if($secured){
        $out='https://';
    }
    else{
        $out='http://';
    }
    $n=igk_str_rm_last(igk_io_server_name(), '/');
    if(!empty($n))
        $out .= $n;
    if($c=IGKIO::GetPort($secured)){
        $out .= ':'.$c;
    }
    if(!empty($t))
        $out .= '/'.$t;
    $out=str_replace('\\', '/', $out);
    $path=$t;
    $s=igk_html_uri($out);
    while($path && IGKString::EndWith($s, '/') && (($k=strlen($s)) > 0)){
        $s=substr($s, 0, $k-1);
    }
    return $s;
}
///<summary></summary>
///<param name="dir"></param>
///<param name="secured" default="null"></param>
/**
* 
* @param mixed $dir
* @param mixed $secured the default value is null
*/
function igk_io_baseuri_i($dir, $secured=null){
    if(empty($dir))
        return IGK_STR_EMPTY;
    return igk_io_baseuri($dir, $secured);
}
///<summary>return cached distribution script</summary>
/**
* return cached distribution script
*/
function igk_io_cacheddist_jsdir(){
    return igk_io_cacheinfo()->js;
}
///<summary>get folder where to cache some file</summary>
/**
* get folder where to cache some file
*/
function igk_io_cachedir(){
    return igk_html_uri(igk_io_applicationdir().DIRECTORY_SEPARATOR.IGK_CACHE_FOLDER);
}
function igk_io_packagesdir(){
    return igk_get_packages_dir();
}
///<summary></summary>
/**
* 
*/
function igk_io_cacheinfo(){
    static $cache=null;
    if($cache == null){
        $dir=igk_io_cachedir();
        $cache=(object)array(
                "dir"=>$dir,
                "js"=>$dir."/dist/js",
                "css"=>$dir."/dist/css",
                "img"=>$dir."/dist/img",
                "value"=>$dir."/dist/value"
            );
    }
    return $cache;
}
///io shortcut
///<summary> used to check if uri is directory. used internally </summary>
/**
*  used to check if uri is directory. used internally
*/
function igk_io_check_request_file($uri, $failedcallback=null){
    $c=igk_str_rm_start($uri, '/');
    if(!empty($c)){
        $bdir=igk_io_basedir();
        $dir=igk_io_dir(dirname(igk_io_basedir()."/".$c));
        if(($bdir != $dir) && is_dir($dir)){
            igk_html_output(404);
            header("HTTP/1.0 404 Not Found");
            if($failedcallback){
                $failedcallback();
            }
            igk_exit();
        }
    }
}
///<summary>collapse system path</summary>
/**
* collapse system path
*/
function igk_io_collapse_path($str){
    $path = igk_html_uri($str);
    foreach([
        IGK_LIB_DIR=>"%lib%",
        igk_io_projectdir()=>"%project%",
        igk_io_applicationdir()=>"%app%",
        igk_io_basedir()=>"%basedir%"
        ] as $c=>$t){
        if (strpos($path , $c)===0){
            $path = str_replace($c, $t, $path);
            break;
        }
    }
    return $path;
    // $str=str_replace(IGK_LIB_DIR, "%lib%", igk_html_uri($str));
    // $app=igk_io_applicationdir();
    // $str=str_replace($app, "%app%", $str);
    // return $str;
}
///<summary>combine path</summary>
///<param name="list*">list of string arguments</param>
/**
* combine path
* @param mixed $list* list of string arguments
*/
function igk_io_combine(){
    $dir=igk_io_dir(implode(DIRECTORY_SEPARATOR, func_get_args()));
    if(strpos($dir, 'phar:') === 0)
        return igk_html_uri($dir);
    return $dir;
}
///<summary>return a controller working classes path</summary>
/**
*  return system expected working classes path
*/
function igk_io_controller_classes_lib_dir($ctrl){
    return igk_io_combine($ctrl->getDeclaredDir(), implode("/",[IGK_LIB_FOLDER, IGK_CLASSES_FOLDER]));
}
///<summary>return a controller working tests classes path</summary>
/**
*  return system expected controller working test classes path
*/
function igk_io_controller_tests_lib_dir($ctrl){
    return igk_io_combine($ctrl->getDeclaredDir(), implode("/",[IGK_LIB_FOLDER, IGK_TESTS_FOLDER]));
}

///<summary>copy stream function</summary>
/**
* copy stream function
*/
function igk_io_copy_stream($in, $out, $buffer=4096, $close=0){
    $size=0;
    while(!feof($in)){
        $size += fwrite($out, fread($in, $buffer));
    }
    if($close){
        fclose($in);
        fclose($out);
    }
    return $size;
}
///<summary></summary>
/**
* 
*/
function igk_io_corejs_uri(){ 
    return igk_io_baseuri(IGK_RES_FOLDER."/".IGK_SCRIPT_FOLDER."/balafon.js?v=".IGK_BALAFON_JS_VERSION);
}
///<summary></summary>
/**
* 
*/
function igk_io_corestyle_uri(){
    return igk_io_baseuri(IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/balafon.css?v=".IGK_VERSION);
}
///<summary></summary>
///<param name="dirname"></param>
///<param name="mode" default="IGK_DEFAULT_FOLDER_MASK"></param>
/**
* 
* @param mixed $dirname
* @param mixed $mode the default value is IGK_DEFAULT_FOLDER_MASK
*/
function igk_io_createdir($dirname, $mode=IGK_DEFAULT_FOLDER_MASK){
    $dirname = igk_io_dir($dirname);    

    if(preg_match("/^phar:/i", $dirname)){
        igk_die("InvalidOperation#1200");
    }
    $pdir=array($dirname);
    $i=1;
    while($dirname=array_pop($pdir)){
        if(empty($dirname))
            return false;
        if(is_dir($dirname))
            continue;
        if(empty($dirname))
            return false;
        if(is_dir($dirname))
            continue;
        $p=dirname($dirname);
        if(empty($p))
            continue;
        if(is_dir($p) && !is_file($dirname) && !is_dir($dirname) ){ 
            if (@mkdir($dirname)){
                chmod($dirname, $mode);
            }else{
                igk_ilog("failed to create : ".$dirname); 
            }
        }
        else{
            array_push($pdir, $dirname);
            array_push($pdir, dirname($dirname));
        }
        if($i > 10)
            break;
        $i++;
    }
    return igk_count($pdir) == 0;
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_io_ctrl_db_dir($ctrl){
    $dir=$ctrl->getDataDir()."/DataBase";
    if(!is_dir($dir) && (igk_io_createdir($dir) || igk_die("can't create directory"))){
        igk_io_save_file_as_utf8_wbom($dir."/.htaccess", "deny from all");
    }
    return $dir;
}
///<summary>utility to handle controller app uri</summary>
///<param name="ctrl">the controller</param>
///<param name="u">mixed . uri:string or SysParamInfo </param>
///<param name="fc">callback to call with request of func and parameters</param>
/**
* utility to handle controller app uri
* @param mixed $ctrl the controller
* @param mixed $u mixed . uri:string or SysParamInfo
* @param mixed $c callback to call with request of func and parameters
*/
function igk_io_ctrl_handle_uri($ctrl, $u, $fc){
    if(igk_app()->getControllerManager()->InvokeUri()){
        igk_exit();
    }
    $p="";
    $params=null;
    if(is_string($u)){
        $p=igk_str_array_rm_empty(explode("/", explode("?", $u)[0]));
    }
    else{
        $params=$u->getQueryParams();
        return $fc($params["function"], $params["params"]);
    }
    return $fc(igk_getv($p, 0), array_slice($p, 1));
}
///<summary>return the current page folder</summary>
/**
* return the current page folder
*/
function igk_io_current_page_folder(){
    $_is_phar=defined("IGK_PHAR_CONTEXT");
    if($_is_phar){
        $buri=igk_io_baseuri();
        $fulluri=igk_getv(explode("?", igk_io_fullrequesturi()), 0);
        if($buri != $fulluri){
            $ba=igk_io_dir(substr(igk_str_rm_last($fulluri, '/'), strlen($buri) + 1));
            if((strlen($ba) > 0) && is_dir(igk_io_basedir($ba))){
                return $ba;
            }
        }
    }
    else{
        if(defined("IGK_CURRENT_PAGEFOLDER")){
            return IGK_CURRENT_PAGEFOLDER;
        }
        $cdir=IGKIO::GetCurrentDir();
        $bdir=IGKIO::GetBaseDir();
        if($cdir != $bdir)
            return IGKIO::GetChildRelativePath($bdir, $cdir);
    }
    return IGK_HOME_PAGEFOLDER;
}
///<summary>return the current request uri according to IGK_APP_DIR</summary>
/**
* return the current request uri according to IGK_APP_DIR
*/
function igk_io_current_request_uri(){
    $rq=igk_io_request_uri();
    $doc_request=igk_io_doc_root_request_uri();
    $bdir=igk_io_basedir();
    if(!$bdir){
        $lib=IGK_LIB_DIR;
        $root_dir=igk_html_uri(igk_io_rootdir());
        if(!empty($root_dir) && strpos($lib, $root_dir) === 0){
            $t=explode('/', substr($lib, strlen($root_dir) + 1));
            $q=explode('/', igk_str_rm_start(explode('?', $rq)[0], '/'));
            $c=0;
            while(($m=array_shift($t)) && ($n=array_shift($q)) && ($m == $n)){
                if($c === 0)
                    $c="";
                $c .= "/".$m;
            }
            if($c !== 0){
                $rq=substr($rq, strlen($c));
            }
            return $rq;
        }
        else{
            return "/";
        }
    }
    return substr($doc_request, strlen($bdir));
}
///<summary>get base current domain uri</summary>
/**
* get base current domain uri
*/
function igk_io_currentbasedomainuri(){
    $n=igk_sys_srv_uri_scheme()."://".IGKSubDomainManager::GetBaseDomain();
    return $n;
}
///<summary></summary>
/**
* 
*/
function igk_io_currentdomainuri(){
    $n=igk_sys_srv_uri_scheme()."://".(igk_sys_is_subdomain() ? igk_sys_current_domain_name(): IGKSubDomainManager::GetBaseDomain());
    return $n;
}
///<summary>shortcut to IGKIO::GetCurrentRelativePath</summary>
///<remark></remark>
///<param name="dir"> $dir : sever absolute path or basedir relative path</param>
///<param name="mustexists" default="1"> directery must exists</param>
///<param name="separator" default="DIRECTORY_SEPARATOR">directory separator</param>
/**
* shortcut to IGKIO::GetCurrentRelativePath
* @param mixed $dir  $dir : sever absolute path or basedir relative path
* @param mixed $mustexists directery must exists
* @param mixed $separator directory separator
*/
function igk_io_currentrelativepath($dir, $mustexists=1, $separator=DIRECTORY_SEPARATOR){
    return IGKIO::GetCurrentDirRelativePath($dir, $mustexists, $separator);
}
///<summary> shortcut to IGKIO::GetCurrentRelativeUri</summary>
/**
*  shortcut to IGKIO::GetCurrentRelativeUri
*/
function igk_io_currentrelativeuri($dir=IGK_STR_EMPTY){
    return IGKIO::GetCurrentRelativeUri($dir);
}
///<summary>return request base uri without query string</summary>
/**
* return request base uri without query string
*/
function igk_io_currenturi(){
    $s=IGK_STR_EMPTY;
    $root=igk_str_rm_last(igk_io_rootdir(), '/');
    $bdir=igk_html_uri($root."/".IGKIO::GetRootBaseDir());
    $fdir=igk_html_uri($root.igk_getv(explode("?", igk_io_request_uri()), 0));
    $s=igk_io_baseuri(substr($fdir, strlen($bdir)));
    return $s;
}
///<summary></summary>
///<param name="dir"></param>
/**
* 
* @param mixed $dir
*/
function igk_io_cwdrelativepath($dir){
    return IGKIO::GetRelativePath($dir, getcwd());
}

///<summary></summary>
/**
* 
*/
function igk_io_dir_level(){
    return igk_get_env("sys://io/relative_dir_level", 0);
}
///<summary>get child directories</summary>
/**
* get child directories
*/
function igk_io_dirs($dir, $match=IGK_ALL_REGEX, $recursive=true, $ignoredname=null, & $ignored_dirs=null){
    $tab=array();
    $tq=array($dir);
    $fc=function(){
        return false;
    };
    if(is_string($ignoredname)){
        $fc=function($d, $m, $ignoredname){
            return preg_match($ignoredname, $m);
        };
    }
    else if(is_array($ignoredname)){
        $fc=function($d, $m, $ignoredname){
            return isset($ignoredname[$m]) || isset($ignoredname[$d]);
        };
    }
    while($q=array_pop($tq)){
        if(is_dir($q) && ($hdir=opendir($q))){
            while($f=readdir($hdir)){
                if(($f == ".") || ($f == "..")){
                    continue;
                }
                if(is_dir($c=igk_realpath($q.DIRECTORY_SEPARATOR.$f))){
                    if($fc($c, $f, $ignoredname)){
                        $ignored_dirs[$c]=$c;
                        continue;
                    }
                    $tab[]=$c;
                    if($recursive){
                        array_push($tq, $c);
                    }
                }
            }
            closedir($hdir);
        }
    }
    return $tab;
}
///<summary>function used to serve file from view directory</summary>
/**
* function used to serve file from view directory
*/
function igk_io_dispatch_file($dir, $params, $callback=null, $cacheout=3600){
    if((igk_count($params) > 0) && (file_exists($f=$dir."/".implode("/", $params))) && (!$callback || $callback($f))){
        igk_header_content_file($f);
        igk_header_cache_output($cacheout);
        igk_zip_output(igk_io_read_allfile($f));
        igk_exit();
    }
    return 0;
}
///<summary>get the full document uri</summary>
/**
* get the full document uri
*/
function igk_io_doc_root_request_uri(){
    return igk_html_uri(igk_io_rootdir().igk_io_request_uri());
}
///<summary>get current domain from uri</summary>
/**
* get current domain from uri
*/
function igk_io_domain_uri_name($uri=null){
    $domain=$uri == null ? igk_io_baseuri(): $uri;
    $domain=preg_replace_callback("#((http(s)?://)?(www\.)?){0,1}#i", function($tmatch){
        return "";
    }
    , $domain);
    return igk_getv(explode("/", $domain), 0);
}
///<summary>existing file path to root entry path</summary>
/**
* existing file path to root entry path
*/
function igk_io_entry_path_uri($file){
    return igk_html_uri(igk_io_query_info()->entryuri.igk_io_basepath($file));
}
///<summary>return entry relative path from existing file</summary>
/**
* return entry relative path from existing file
*/
function igk_io_entry_relative_path_uri($file){
    return (new IGKHtmlRelativeUriValueAttribute(igk_io_basepath($file)))->getValue();
}
///<summary> expand system path </summary>
/**
*  expand system path
*/
function igk_io_expand_path($str, $callback=null){
    if(preg_match("/^(\"|')/", $str)){
        $str=substr($str, 1, -1);
    }
    foreach(
        [
            "%project%"=>igk_io_projectdir(),
            "%lib%"=>IGK_LIB_DIR,
            "%basedir%"=>igk_io_basedir()
        ]
         as $k=>$f){
            $str=str_replace($k, $f, $str);
    }
    // $str=str_replace("%lib%", IGK_LIB_DIR, $str);
    // $app=igk_io_applicationdir();
    // $str=str_replace("%app%", $app, $str);
    if ($callback){
        $str = $callback($str);
    }
    return $str;
}
///<summary></summary>
///<param name="type"></param>
/**
* 
* @param mixed $type
*/
function igk_io_fileispicture($type){
    $t=array(
            "image/png"=>1,
            "image/jpeg"=>1,
            "image/svg+xml"=>1,
            "image/tiff"=>1,
            "image/gkds"=>1
        );
    return isset($t[$type]);
}
///<summary>force directory entry on view context</summary>
///<param name="ctrl">controller that will request</param>
///<param name="fname">view entry name path</param>
///<param name="redirect_request" ref="true"> retrieve the redirected uri</param>
/**
* force directory entry on view context
* @param mixed $ctrl controller that will request
* @param mixed $name view entry name path
* @param mixed $redirect_request  retrieve the redirected uri
*/
function igk_io_force_dir_entry($ctrl, $fname, & $redirect_request=null){
    $appuri=dirname($ctrl->getAppUri($fname));
    $ruri=igk_io_baseuri().igk_getv(explode('?', igk_io_base_request_uri()), 0);
    $buri=strstr($appuri, igk_io_baseuri());
    $entry_is_dir=0;
    if(igk_sys_is_subdomain() && ($ctrl === igk_app()->SubDomainCtrl)){
        $g=igk_io_base_request_uri();
        $entry_is_dir=strlen($g) > 0 && $g[0] == "/";
    }
    else{
        $s="";
        if(strstr($ruri, $buri)){
            $s=substr($ruri, strlen($buri));
            $entry_is_dir=(strlen($s) > 0) && $s[0] == "/";
        }
    }
    if(!$entry_is_dir){
        $ctrl->setParam("redirect_request", ['request'=>$_REQUEST]);
        igk_navto($appuri."/");
    }
    else{
        $redirect_request=$ctrl->getParam("redirect_request");
        $ctrl->setParam("redirect_request", null);
    }
}

///<summary>return the full base uri</summary>
/**
* return the full base uri
*/
function igk_io_fullbaserequesturi(){
    return igk_html_uri(igk_str_rm_last(IGKIO::GetRootUri(), "/")."/".igk_str_rm_last(igk_getv(explode('?', igk_str_rm_start(igk_io_request_uri(), '/')), 0), '/'));
}
///<summary></summary>
///<param name="$c"></param>
///<param name="base" default="null" ref="true"></param>
/**
* 
* @param mixed $c
* @param mixed * $base the default value is null
*/
function igk_io_fullpath($c, & $base=null){
    $scheme="";
    $base=$base ?? getcwd();
    $d=igk_html_uri($c);
    if(preg_match("/^(\/|[a-z]+:\/\/)/i", $d, $data)){
        $scheme=$data[0];
        $d=substr($d, strlen($scheme));
    }
    $t=explode('/', $d);
    $b=[];
    foreach($t as $k){
        if(empty($k))
            continue;
        if($k == '..'){
            if(count($b) > 0){
                array_pop($b);
            }
            else{
                $base=dirname($base);
            }
        }
        else if($k == '.'){}
        else{
            $b[]=$k;
        }
    }
    return $scheme. implode('/', $b);
}
///<summary>get the full uri of full path</summary>
/**
* get the full uri of full path
*/
function igk_io_fullpath2fulluri($file){
    $root_uri = IGKIO::GetRootUri();
    if($ruri=IGKResourceUriResolver::getInstance()->resolve($file, null, 0)){ 
        $s= $root_uri."/".str_replace("../", "", $ruri);
        return $s;
    }
    $s=igk_io_currentrelativepath($file);
    if(igk_io_is_subdir(IGK_APP_DIR, $file)){
        $s=str_replace("../", "", igk_html_uri($s));
        return igk_html_uri($root_uri."/".$s);
    }
    $s=igk_html_uri(igk_get_current_base_uri()."/".$s);
    return $s;
}
///<summary>return the relative uri according to BASEDIR</summary>
/**
* return the relative uri according to BASEDIR
*/
function igk_io_fullpath2uri($file, $img=false){
    $f=igk_io_currentrelativeuri(igk_io_baserelativepath($file));
    if($img){
        $f=igk_io_treat_lnk_referer($f);
    }
    return $f;
}
///<summary>return the full request uri</summary>
/**
* return the full request uri
*/
function igk_io_fullrequesturi(){
    return igk_html_uri(urldecode(igk_str_rm_last(IGKIO::GetRootUri(), "/")."/".igk_str_rm_start(igk_io_request_uri(), '/')));
}
///<summary>convert full path to base directory</summary>
/**
* convert full path to base directory
*/
function igk_io_fulluri2basedir($uri){
    $bdir=igk_io_baseuri();
    if(strstr($uri, $bdir)){
        return igk_io_dir(igk_io_basedir()."/".substr($uri, strlen($bdir) + 1));
    }
    return null;
}
///<summary>get article in folder</summary>
/**
* get article in folder
*/
function igk_io_get_article($name, $dir=null){
    if($dir == null){
        $dir=IGK_LIB_DIR."/".IGK_ARTICLES_FOLDER;
    }
    $f=$dir."/".$name;
    if(file_exists($f))
        return $f;
    $s=IGK_ARTICLE_TEMPLATE_REGEX;
    if(preg_match($s, $name)){
        return igk_io_dir($dir."/".$name);
    }
    $lang=R::GetCurrentLang();
	foreach([".".$lang,""] as $lg){
		foreach(["phtml", 'html'] as  $v){
			$f=igk_io_dir($dir."/{$name}{$lg}.{$v}");
			if(file_exists($f))
				return $f;
		}
	}
    $ext=igk_get_article_ext();
    return igk_io_dir($dir."/".$name.$ext);
}
///<summary></summary>
///<param name="name"></param>
///<param name="dir"></param>
///<param name="lang" default="null"></param>
/**
* 
* @param mixed $name
* @param mixed $dir
* @param mixed $lang the default value is null
*/
function igk_io_get_article_file($name, $dir, $lang=null){
    if($lang == null){
        $lang=R::GetDefaultLang();
    }
    $file=IGK_STR_EMPTY;
    if(preg_match(IGK_ARTICLE_TEMPLATE_REGEX, $name))
        $file=$dir."/".$name;
    else{
        $file=$dir."/".$name.".".strtolower($lang).".".IGK_DEFAULT_VIEW_EXT;
        if(!file_exists($file) && file_exists($cf=$dir."/".$name.".".IGK_DEFAULT_VIEW_EXT)){
            $file=$cf;
        }
    }
    return $file;
}
///<summary>get application entry request uri</summary>
///<param name="uri">/uri according to view application view files</param>
/**
* get application entry request uri
* @param mixed $uri according to view application view files
*/
function igk_io_get_entry_uri($ctrl, $uri){
    $s="";
    $appuri=$ctrl->getAppUri();
    $baseuri=igk_io_baseuri();
    $s=substr($appuri, strlen($baseuri));
    return $s.$uri;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="params"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $params
*/
function igk_io_get_full_entry_uri($ctrl, $params){
    $e=igk_io_get_entry_uri($ctrl, "/".implode("/", $params));
    return igk_io_baseuri($e);
}
///<summary></summary>
///<param name="uri" default="null"></param>
/**
* 
* @param mixed $uri the default value is null
*/
function igk_io_get_relative_currenturi($uri=null){
    if(IGKString::StartWith($uri, '#'))
        $uri="./".$uri;
    $page=igk_app()->CurrentPageFolder;
    $t=IGK_STR_EMPTY;
    if(strtolower($page) != IGK_HOME_PAGEFOLDER){
        $t=($uri) ? IGK_STR_EMPTY.($page)."/".$uri: $page;
    }
    else{
        if($uri !== null)
            $t=$uri;
    }
    return $t;
}
///<summary></summary>
/**
* 
*/
function igk_io_get_uploaded_data(){
    $fin=fopen("php://input", "r");
    if(!$fin)
        return 0;
    $buffsize=4096;
    $s="";
    while(($c=fread($fin, $buffsize))){
        $s .= $c;
    }
    fclose($fin);
    return $s;
}
///<summary>retrieve the current uri</summary>
/**
* retrieve the current uri
*/
function igk_io_get_uri(){
    $s=igk_sys_srv_uri_scheme()."://".igk_io_server_name().igk_io_request_uri();
    return $s;
}
///<summary>get a list of include files that have a BOM header. testing functions</summary>
/**
* get a list of include files that have a BOM header. testing functions
*/
function igk_io_get_wbom_files(){
    $i=0;
    $t=array();
    foreach(get_included_files() as  $v){
        if(filesize($v) < 3)
            continue;
        $txt=igk_io_read_allfile($v);
        if((ord($txt[0]) === 239) && (ord($txt[1]) === 187) && (ord($txt[2]) === 191)){
            $i++;
            $t[]=$v;
            igk_wln($v);
        }
    }
    return $t;
}
///<summary></summary>
///<param name="dir"></param>
/**
* 
* @param mixed $dir
*/
function igk_io_getconf_file($dir){
    return igk_io_dir($dir."/".IGK_DATA_FOLDER."/".IGK_CTRL_CONF_FILE);
}
///<summary></summary>
///<param name="dir"></param>
/**
* 
* @param mixed $dir
*/
function igk_io_getdbconf_file($dir){
    return igk_io_dir($dir."/".IGK_DATA_FOLDER."/".IGK_CTRL_DBCONF_FILE);
}
///<summary>shortcut to get files from directory</summary>
///<param name="dir">directory</param>
///<param name="match">mixed, string regex expression or callback</param>
///<param name="recursive">recursive</param>
///<param name="excludir" ref="true" >list of directory to exclude</param>
/**
* shortcut to get files from directory
* @param mixed $dir directory
* @param mixed $matchmixed, string regex expression or callback
* @param mixed $recursiverecursive
* @param mixed $excludir list of directory to exclude
*/
function igk_io_getfiles($dir, $match=IGK_ALL_REGEX, $recursive=true, & $excludedir=null){
    return IGKIO::GetFiles($dir, $match, $recursive, $excludedir);
}
function igk_io_scandir($dir){
    if (!is_dir($dir)){
        return [];
    }
    $tab = array_filter( scandir($dir) , function($v){
        return (($v!=".") && ($v!=".."));
    });
    if (!$tab ) $tab = [];
    $tab = array_map(function($d)use($dir){
        return $dir.DIRECTORY_SEPARATOR.$d;
    }, $tab);
    return $tab;
}
///retourne le chemin complet . si chemin relatif fournit c'est le cwd qui intervient
/**
*/
function igk_io_getfullpath($path){
    return igk_realpath($path);
}
///<summary></summary>
///<param name="source"></param>
///<param name="target"></param>
/**
* 
* @param mixed $source
* @param mixed $target
*/
function igk_io_getrelativepath($source, $target){
    if(empty($target))
        return './';
    $o=IGK_STR_EMPTY;
    $v=$target;
    $sdir=$source;
    $i=strpos($target, $source);
    if($i !== false){
        $o="./". igk_str_rm_start(substr($v, $i + strlen($sdir)), '/');
    }
    else{
        $o=$v;
        $i=strpos($v, $sdir);
        $p="../";
        $sdir=dirname($sdir);
        $ci=0;
        while(!empty($sdir) && ($sdir != $v)){
            $ci++;
            if($sdir == ($gdir=dirname($sdir))){
                igk_trace();
                igk_wln_e("Window top dir dectected : ".$sdir, $source, $target, igk_realpath($target));
            }
            $sdir=dirname($sdir);
            if(strpos($v, $sdir) === false){
                $p .= "../";
            }
            else
                break;
        }
        if($sdir){
            $o=igk_io_dir($p.igk_str_rm_start(substr($v, $i + strlen($sdir)), '/'));
        }
    }
    return $o;
}
///<summary></summary>
///<param name="file"></param>
///<param name="dir"></param>
/**
* 
* @param mixed $file
* @param mixed $dir
*/
function igk_io_getviewname($file, $dir){
    $v_s="";
    if($h=strstr(igk_io_dir($file), $g=$dir)){
        $h=igk_html_uri(substr($h, strlen($g) + 1));
        $dir=dirname($h);
        $v_s=(($dir != '.') ? $dir."/": "").igk_io_basenamewithoutext(basename($h));
        unset($h);
        unset($g);
    }
    else
        $v_s=igk_io_basenamewithoutext($file);
    return $v_s;
}
///<summary></summary>
/**
* 
*/
function igk_io_global_uri(){
    return igk_get_env("sys://io/globaluri");
}
///<summary> handle redirection uri</summary>
///<param name="actionctrl">listener of action </param>
/**
*  handle redirection uri
* @param mixed $actionctrl listener of action
*/
function igk_io_handle_redirection_uri($actionctrl, $uri, $params=null, $redirection=0, $render=1){
    $app=igk_app();

    if($actionctrl && ($e=$actionctrl->matche($uri))){
        $e->requestparams=$params;
        $app->Session->RedirectionContext=$redirection;
        try {
            $actionctrl->invokeUriPattern($e, $render);
        }
        catch(Exception $e){
            igk_show_exception($e);
            igk_exit();
        }
        return true;
    }
    return false;
}
///<summary>handle system command</summary>
/**
* handle system command
*/
function igk_io_handle_system_command($uri){
    $rx="#^(".igk_io_baseuri().")?\/!@(?P<type>".IGK_IDENTIFIER_RX.")\/(\/)?(?P<ctrl>".IGK_FQN_NS_RX.")\/(?P<function>".IGK_IDENTIFIER_RX.")(\/(?P<args>(.)*))?$#i";
    $c=preg_match_all($rx, explode("?", $uri)[0], $ctab);
    if($c > 0){
        igk_getctrl(IGK_SYSACTION_CTRL)->invokePageAction($ctab["type"][0], $ctab["ctrl"][0], $ctab["function"][0], explode("?", $ctab["args"][0])[0]);
        return true;
    }
    return false;
}
///<summary>shortcut to create new IGKHtmlRelativeUriValueAttribute</summary>
/**
* shortcut to create new IGKHtmlRelativeUriValueAttribute
*/
function igk_io_html_link($file){
    return new IGKHtmlRelativeUriValueAttribute($file);
}
///<summary>get the web site full uri according to uri file pass form basedir</summary>
///<note>if you pass string "info" to this function and your website is http://www.igkdev.com the response will be
///http://www.igkdev.be/info
///</note>
/**
* get the web site full uri according to uri file pass form basedir
*/
function igk_io_htmluri($uri=null){
    return igk_str_rm_last(igk_io_baseuri(), '/'). (($uri) ? "/".igk_html_uri($uri): IGK_STR_EMPTY);
}
///<summary></summary>
///<param name="dir"></param>
///<param name="match" default="IGK_ALL_REGEX"></param>
///<param name="recursive" default="true"></param>
///<param name="ignoredname" default="null"></param>
/**
* 
* @param mixed $dir
* @param mixed $match the default value is IGK_ALL_REGEX
* @param mixed $recursive the default value is true
* @param mixed $ignoredname the default value is null
*/
function igk_io_idirs($dir, $match=IGK_ALL_REGEX, $recursive=true, $ignoredname=null){
    $idir=array();
    igk_io_dirs($dir, $match, $recursive, $ignoredname, $idir);
    return $idir;
}
///<summary></summary>
///<param name="uri"></param>
///<param name="render" default="1"></param>
/**
* 
* @param mixed $uri
* @param mixed $render the default value is 1
*/
function igk_io_invoke_uri($uri, $render=1){
    $uri=igk_str_rm_last($uri, "/");
    $v_buri=igk_io_baseuri();
    $s=strstr($uri, $v_buri);
    if(!$s)
        return false;
    $c=igk_sys_get_subdomain_ctrl($uri);
    $app=igk_app();
    $v_ruri=igk_str_rm_start(substr($uri, strlen($v_buri)), "/");
    $tab=explode('?', $v_ruri);
    $p=igk_getv($tab, 0);
    $params=igk_getv($tab, 1);
    $page="/".$p;
    $actionctrl=igk_getctrl(IGK_SYSACTION_CTRL);
    igk_set_env("sys://io_invoke_uri", 1);
    igk_set_env("sys://no_render", !$render);
    if($c !== false){
        $k="sys://env/state/subdomain";
        igk_push_env($k, $c);
        $k=IGK_REG_ACTION_METH;
        $pattern=igk_sys_ac_getpattern($k);
        $e=new IGKSystemUriActionPatternInfo(array(
                "action"=>$k,
                "value"=>$c->getRegInvokeUri(),
                "pattern"=>$pattern,
                "uri"=>$page,
                "keys"=>igk_str_get_pattern_keys($k),
                "ctrl"=>$c,
                "requestparams"=>$params
            ));
        if($actionctrl && ($c !== $actionctrl)){
           
            if(!$c->NoGlobalAction && ($ce=$actionctrl->matche_global($page))){
                try {
                    $ce->ctrl=null;
                    $actionctrl->invokeUriPattern($ce);
                }
                catch(Exception $e){
                    igk_show_exception($e);
                    igk_exit();
                }
            }
            else{
                $actionctrl->invokeCtrlUriPattern($c, $e, false);
            }
        }
        igk_pop_env($k);
    }
    else{
        $app->getControllerManager()->InvokeUri($uri);
        if(!igk_io_handle_redirection_uri($actionctrl, $page, $params, 1, $render)){
            $defctrl=igk_get_defaultwebpagectrl();
            if($defctrl && method_exists($defctrl, "handle_redirection_uri")){
                $defctrl->handle_redirection_uri($page);
            }
        }
    }
    igk_set_env("sys://no_render", null);
    igk_set_env("sys://io_invoke_uri", 0);
    return 1;
}
///<summary>check if there is a controller that override uri pattern</summary>
/**
* check if there is a controller that override uri pattern
*/
function igk_io_is_ctrl_uri($uri=null, $file=1, & $data=null){
    $uri=$uri ?? igk_io_base_request_uri();
    if($file && igk_io_is_file(igk_io_basedir().$uri)){
        return 1;
    }
    $actionctrl=igk_getctrl(IGK_SYSACTION_CTRL);
    return $actionctrl && (($data=$actionctrl->matche($uri)) !== null);
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_io_is_file($f){
    return file_exists($f) && !is_dir($f);
}
///<summary> check if full path</summary>
///<remark>path mus exists</remark>
/**
*  check if full path
*/
function igk_io_is_fullpath($d){
    $k=igk_io_dir($d);
    $c=igk_realpath($k);
    if($c){
        return $k == $c;
    }
    $droot=igk_html_uri(igk_io_rootdir());
    $d=igk_html_uri($d);
    if(IGKString::StartWith(strtolower($d), strtolower($droot))){
        return true;
    }
    return false;
}
///<summary>check if is sub directory</summary>
/**
* check if is sub directory
*/
function igk_io_is_subdir($p, $c){
    if(DIRECTORY_SEPARATOR != "/"){
        $p=str_replace("\\", "/", $p);
        $c=str_replace("\\", "/", $c);
    }
    if(empty($p)){
        igk_die(__FUNCTION__."::p is empty ");
    }
    if(empty($c)){
        igk_die(__FUNCTION__."::c is empty");
    }
    return (strpos($c, $p) === 0);
}
///<summary></summary>
///<param name="uri" default="null"></param>
/**
* 
* @param mixed $uri the default value is null
*/
function igk_io_is_subdomain_uri($uri=null){
    $s=igk_io_subdomain_uri_name($uri);
    return !empty($s);
}
///<summary></summary>
///<param name="file"></param>
///<param name="options" default="null"></param>
/**
* 
* @param mixed $file
* @param mixed $options the default value is null
*/
function igk_io_libdiruri($file, $options=null){
    $target=substr($file, strlen(IGK_LIB_DIR) + 1);
    return igk_html_get_system_uri("/".IGK_RES_FOLDER."/_lib_/{$target}", $options);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="$c" ref="true"></param>
///<param name="p" ref="true"></param>
/**
* 
* @param mixed $ctrl
* @param mixed * $c
* @param mixed * $p
*/
function igk_io_locate_view_file($ctrl, & $c, & $p){
    $d=$ctrl->getViewDir()."/{$c}";
    $h=$p;
    if(is_dir($d)){
        if(is_string($h)){
            if(!preg_match("/\.".IGK_VIEW_FILE_EXT_REGEX."/i", $h)){
                if(!is_dir($c_d=$d."/".$h)){
                    $h .= ".".IGK_DEFAULT_VIEW_EXT;
                }
            }
            if(file_exists($d."/".$h)){
                $c=$c."/".$p;
                $p=array();
            }
        }
        else if(is_array($h)){
            $cdir=$d;
            $ftype=0;
            $ctype=0;
            foreach($h as $d){
                $tfile=$cdir."/".$d;
                if(is_dir($tfile)){
                    $cdir .= $tfile;
                    $ftype=1;
                }
                else{
                    if(!preg_match("/\.".IGK_VIEW_FILE_EXT_REGEX."/i", $tfile)){
                        $tfile .= ".".IGK_DEFAULT_VIEW_EXT;
                    }
                    if(file_exists($tfile)){
                        $cdir .= "/".$d;
                        $ftype=1;
                        $ctype++;
                    }
                    break;
                }
                $ctype++;
            }
            if($ctype > 0){
                $c .= "/".implode("/", array_slice($h, 0, $ctype));
                $p=array_slice($h, $ctype);
            }
        }
    }
}
///<summary>move uploaded file to destination</summary>
/**
* move uploaded file to destination
*/
function igk_io_move_uploaded_file($file, $destination){
    if(!@move_uploaded_file($file, $destination)){
        return false;
    }
    return true;
}
///<summary></summary>
///<param name="name"></param>
///<param name="dir"></param>
///<param name="pattern" default="pics_%d%"></param>
/**
* 
* @param mixed $name
* @param mixed $dir
* @param mixed $pattern the default value is "pics_%d%"
*/
function igk_io_moveuploadedfiletodatafolder($name, $dir, $pattern="pics_%d%"){
    $img=igk_getv($_FILES, $name);
    if($img){
        if(IGKIO::CreateDir($dir)){
            if(!file_exists($dir."/.htaccess")){
                IGKIO::WriteToFile($dir."/.htaccess", "allow from all");
            }
            for($i=0; $i < igk_count($img["name"]); $i++){
                if(igk_getv($img["error"], $i) == 0){
                    $r=str_replace("%d%", $i, $pattern);
                    $f=$img["tmp_name"][$i];
                    $o=$dir.$r.".".igk_io_path_ext($img["name"][$i]);
                    igk_io_move_uploaded_file($f, $o);
                }
            }
        }
    }
}
///<summary>return where global project are stored</summary>
/**
* return where global project are stored
*/
function igk_io_projectdir(){
    $key="IGK_PROJECT_DIR";
    $pdir=igk_get_env($key);
    if($pdir == null){
        if(defined("IGK_PROJECT_DIR")){
            $pdir=IGK_PROJECT_DIR;
        }
        else
            $pdir=igk_getv($_SERVER, 'IGK_PROJECT_DIR', igk_io_applicationdir()."/".IGK_PROJECTS_FOLDER);
        igk_set_env($key, $pdir);
    }
    $pdir || die("project dir not setup properly");
    return igk_io_dir($pdir);
}
///<summary>protect the full request uri</summary>
/**
* protect the full request uri
*/
function igk_io_protect_request($uri){
    $uri=igk_str_rm_last($uri, "/");
    $buri=igk_str_rm_last(igk_io_fullrequesturi(), "/");
    if($buri !== $uri){
        igk_navto($uri);
        igk_exit();
    }
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_io_protect_request_ajx($uri){
    if(igk_is_ajx_demand()){
        igk_createnode("script")->setContent("window.location.href='{$uri}';")->RenderAJX();
        igk_exit();
    }
}
///<summary></summary>
///<param name="d"></param>
/**
* 
* @param mixed $d
*/
function igk_io_push_request_uri($d){
    igk_set_env("sys://io/globaluri", $d);
}
///<summary> return the global primary query information</summary>
/**
*  return the global primary query information
*/
function igk_io_query_info(){
    $k="sys://io/query/info";
    $v=igk_get_env($k, function(){
        $obj=igk_createObjStorage();
        $obj->base_uri=igk_io_baseuri();
        $obj->base_dir=igk_io_basedir();
        $obj->referer=igk_server()->HTTP_REFERER;
        $obj->fname=null;
        $obj->ctrl=null;
        $obj->entryuri=igk_io_request_uri_path();
        $obj->root_uri=igk_io_root_entryuri();
        $obj->fullentry = igk_io_baseuri().$obj->entryuri;
        if ($path_info = igk_server()->PATH_INFO){
            $obj->params = $g=array_slice(explode("/", ($path_info)), 1);
        }
        return $obj;
    });
    return $v;
}
///<summary> return the query uri without GET QUERY ARGS</summary>
/**
*  return the query uri without GET QUERY ARGS
*/
function igk_io_query_request_uri(){
    $buri=igk_getv(explode("?", igk_io_request_uri()), 0);
    return $buri;
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_io_read_allfile($f){
    if(file_exists($f))
        return IGKIO::ReadAllText($f);
    return IGK_STR_EMPTY;
}
///<summary></summary>
///<param name="f"></param>
///<param name="endpattern"></param>
/**
* 
* @param mixed $f
* @param mixed $endpattern
*/
function igk_io_read_header($f, $endpattern){
    if(!file_exists($f))
        return false;
    $hf=fopen($f, "r");
    $s=IGK_STR_EMPTY;
    while(($c=fread($hf, 1)) !== null){
        $s .= $c;
        if(preg_match($endpattern, $s))
            break;
    }
    fclose($hf);
    return $s;
}
///<summary>get real path without resolving like realpath does</summary>
/**
* get real path without resolving like realpath does
*/
function igk_io_realpath($dir){
    $g=null;
    if(file_exists($dir)){
        if(strpos($g, $wd=getcwd()) !== 0){
            $g=igk_io_dir($wd."/".$dir);
        }
    }
    return $g;
}
///<summary>because php realpath failed to resolve symlink path that contains ../../dir+ </summary>
function igk_realpath($path){
    $o = "";
    $path = igk_html_uri($path);
    $offset = 0;
    if ($o = realpath($path)){
        return $o;
    }else {
		//check if contains
		$found = 0;
        while(($pos = strpos( $path,"../", $offset))!==false){
			$found = 1;
            if (!($ch = realpath(substr($path, 0, $pos+3)))){
                return false;
            }
            $path = igk_html_uri($ch) ."/".substr($path, $pos+3);
            $offset =strlen($ch);
        }
		if (!$found)
			return null;
    }
    // if (!$b){

    // }

    // while($c = preg_match("#(?P<n>(\.\.\/)+)#", $path, $tab, PREG_OFFSET_CAPTURE, $offset)){

    //     $d = $tab[0];
    //     if ($cc = igk_realpath(substr($path, 0, $noff = $d[1]+strlen($d[0])))){
    //         $path = igk_html_uri($cc)."/".substr($path, $noff);
    //     }else {
    //         $failed = 1;
    //         break;
    //     }
    // }
    // if (!$failed){
    //     $o = $path;
    // }
    return $path;
}
///<summary></summary>
///<param name="txt"></param>
/**
* 
* @param mixed $txt
*/
function igk_io_remove_bom($txt){
    if((strlen($txt) > 3) && (ord($txt[0]) === 239) && (ord($txt[1]) === 187) && (ord($txt[2]) === 191)){
        return substr($txt, 3);
    }
    return $txt;
}
///<summary> use to remove empty line from file</summary>
/**
*  use to remove empty line from file
*/
function igk_io_removeemptyline($file){
    if(!file_exists($file))
        return;
    $f=IGKIO::ReadAllText($file);
    $o=igk_str_remove_empty_line($f);
    igk_io_save_file_as_utf8($file, $o, true);
}
///<summary> render resources file </summary>
/**
*  render resources file
*/
function igk_io_render_res_file($dir, $query, $second=3600){
    if(preg_match("/^res\.(?P<lang>[^\.]+)\.(?P<ext>(e?js(on)?|txt|xml|bin|dat))$/i", basename($query), $tab)){
        $t=substr($tab["lang"], 0, 2);
        $ext=strtolower($tab["ext"]);
        $ext=igk_getv(["ejson"=>"json"], $ext, $ext);
        $rwf=igk_getr("rwf");
        $c1=$dir."/res.".$t.".".$ext;
        if(!file_exists($c1)){
            $c1=igk_io_basedir().dirname($query)."/res.".$t.".".$ext;
        }
        if(file_exists($c1)){
            igk_clear_header_list();
            igk_header_set_contenttype($ext);
            igk_header_cache_output($second);
            igk_zip_output(igk_io_read_allfile($c1));
            igk_exit();
        }
    }
    igk_die(igk_str_format("{0|lang}", "Resource not found"));
}
///<summary>get request uri entry according to base dir</summary>
///<note>sample: request_uri /local.com/data/sample/param
///sample: script_name = /local.com/index.php
///output: /data/sample/</note>
/**
* get request uri entry according to base dir
*/
function igk_io_request_entry(){
    $b=igk_io_request_uri();
    $t=igk_html_uri(dirname((($g=igk_server()->SCRIPT_NAME) ? $g: igk_server()->PHP_SELF)));
    $s=$b;
    if(strstr($b, $t)){
        $s="/".ltrim(substr($b, strlen($t)), "/");
    }
    return urldecode($s);
}
///<summary>request for Firefox thumbnails demand</summary>
///<remark>controller can adapt their view to match that requirement</remark>
/**
* request for Firefox thumbnails demand
*/
function igk_io_request_for_firefox_thumbnails(){
    $b=false;
    if(strstr(igk_server()->HTTP_USER_AGENT, "Firefox")){
        $b=igk_server()->HTTP_CACHE_CONTROL === 'no-cache' && igk_server()->HTTP_PRAGMA == 'no-cache';
    }
    return $b;
}
///<summary>alias to system SERVER : REQUEST_URI</summary>
/**
* alias to system SERVER : REQUEST_URI
*/
function igk_io_request_uri(){
    return igk_server()->REQUEST_URI;
}
///<summary>get request uri path</summary>
/**
* get request uri path
*/
function igk_io_request_uri_path(){
    return igk_getv(parse_url(igk_io_request_uri()), "path");
}
///<summary>reset the query information</summary>
/**
* reset the query information
*/
function igk_io_reset_query_info(){
    igk_set_env("sys://io/query/info", null);
    return igk_io_query_info();
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="uri"></param>
///<param name="view" default=""></param>
/**
* 
* @param mixed $ctrl
* @param mixed $uri
* @param mixed $view the default value is ''
*/
function igk_io_resolv($ctrl, $uri, $view=''){
    $str=str_replace("%appuri%", $ctrl->getAppUri(), $uri);
    $str=str_replace("%view%", $view, $str);
    return $str;
}
///<summary>get the global resource folder</summary>
/**
* get the global resource folder
*/
function igk_io_resourcesdir(){
    return igk_io_combine(igk_io_basedir(), IGK_RES_FOLDER);
}
///<summary>remove redirected query var form query</summary>
/**
* remove redirected query var form query
*/
function igk_io_rm_redirectvar(& $uri, $force=0){
    if($force || igk_server()->REDIRECT_STATUS == 200){
        $g=parse_url($uri);
        $tab=array();
        if(isset($g["query"])){
            parse_str($g["query"], $tab);
			// unset redirection variable
			foreach(array_keys($tab) as $k){
				if (strpos($k , "__") === 0){
					unset($tab[$k]);
				}
			}
            unset($tab["__c"]);
            unset($tab["__e"]);
        }
        $uri=$g["path"];
        if(count($tab) > 0){
            $uri .= "?".http_build_query($tab);
        }
    }
}
///<summary>retrieve root entry uri</summary>
/**
* retrieve root entry uri
*/
function igk_io_root_entryuri(){
    $dir="";
    if(!igk_io_basedir_is_root()){
        $sbdir=igk_html_uri(igk_io_basedir());
        $srdir=igk_html_uri(igk_io_rootdir());
        if(strstr($sbdir, $srdir)){
            $child=substr($sbdir, strlen($srdir));
            $dir=$child.DIRECTORY_SEPARATOR.$dir;
        }
        else{
            return null;
        }
    }
    else{
        $dir="/";
    }
    $cdir=igk_html_uri($dir);
    return $cdir;
}
///<summary>convert dir to uri from document root</summary>
/**
* convert dir to uri from document root
*/
function igk_io_root_pathrequest($dir){
    return igk_html_uri(igk_io_root_entryuri().igk_io_basepath($dir));
}
///<summary></summary>
/**
* 
*/
function igk_io_root_uri(){
    return IGKIO::GetRootUri();
}
///<summary>return the dir from document root</summary>
/**
* return the dir from document root
*/
function igk_io_rootbasedir($dir=null){
    return IGKIO::GetRootBaseDir($dir);
}
///<summary>return the root base request uri. starting with </summary>
///<remark > old function [igk_io_root_base_uri] rename to [igk_io_rootBaseRequestUri]</remark >
/**
* return the root base request uri. starting with
*/
function igk_io_rootbaserequesturi(){
    $v_ruri=igk_io_base_request_uri();
    $tab=explode('?', $v_ruri);
    $uri=igk_getv($tab, 0);
    return "/".$uri;
}
///<summary>return the server rootdir or IGK_APP_DIR</summary>
/**
* return the server rootdir or IGK_APP_DIR
*/
function igk_io_rootdir(){
    if(!empty($doc_root=igk_server()->IGK_DOCUMENT_ROOT) || (defined('IGK_APP_DIR') && !empty($doc_root=constant('IGK_APP_DIR')))){
        $doc_root=igk_str_rm_last(igk_io_dir($doc_root), DIRECTORY_SEPARATOR);
    }
    return $doc_root;
}
///<summary>get the fully request root request uri base on DocumentRoot with IGK_APP_DIR</summary>
/**
* get the fully request root request uri base on DocumentRoot with IGK_APP_DIR
*/
function igk_io_rootrequesturi(){
    $o="";
    if(igk_io_basedir_is_root()){
        $o=igk_io_baseuri().igk_io_request_uri();
    }
    else{
        $k=substr(igk_io_doc_root_request_uri(), strlen(igk_io_basedir()));
        $o=igk_io_baseuri().$k;
    }
    return $o;
}
///<summary></summary>
///<param name="filename"></param>
///<param name="content"></param>
///<param name="override" default="true"></param>
///<param name="transform" default="true"></param>
/**
* 
* @param mixed $filename
* @param mixed $content
* @param mixed $override the default value is true
* @param mixed $transform the default value is true
*/
function igk_io_save_file_as_utf8($filename, $content, $override=true, $transform=true){
    $r=$transform ? igk_ansi2utf8(utf8_encode($content)): $content;
    return IGKIO::WriteToFile($filename, $r, $override);
}
///<summary>shortcut to igk_io_save_file_as_utf8</summary>
/**
* shortcut to igk_io_save_file_as_utf8
*/
function igk_io_save_file_as_utf8_wbom($filename, $content, $overwrite=true, $chmod=IGK_DEFAULT_FILE_MASK, $type="w+"){
    
    if(empty($filename))
        igk_die("filename is empty or null", __FUNCTION__);
    $filename=igk_io_dir($filename);
    if(!is_dir(dirname($filename))){
        if(!IGKIO::CreateDir(dirname($filename)))
            return false;
    }
    if(is_file($filename) && !$overwrite){
        return false;
    }
    $hf=@fopen($filename, $type);
    if(!$hf){
        igk_ilog("Failed to write ".$filename, __FUNCTION__);    
        return false;
    }
    // $v_iempty=empty($content);
    fwrite($hf, $content);
    fflush($hf);
    fclose($hf);
    if($chmod){ 
        if(!@chmod($filename, $chmod)){
            if (igk_current_context() == IGKAppContext::running){
                if(IGKApp::IsInit()){
                    igk_notify_error("/!\\ chmod failed ". $filename. " : ".$chmod);
                }
                igk_ilog(__FUNCTION__."::chmodfailed");
            }
        }        
    }
    return true;
}
///<summary></summary>
///<param name="id"></param>
///<param name="folder"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $id
* @param mixed $folder
* @param mixed $callback
*/
function igk_io_save_posted_file($id, $folder, $callback){
    $f=igk_getv($_FILES, $id);
    $n=igk_getr(IGK_FD_NAME);
    if(($f["error"] == 0) && igk_qr_confirm()){
        if(IGKIO::CreateDir($folder)){
            $destination=igk_io_dir($folder."/".$f["name"]);
            if(!file_exists($destination)){
                if(!igk_io_move_uploaded_file($f["tmp_name"], $destination)){
                    igk_notifyctrl()->addError("move upload file failed");
                }
                else{
                    $d=igk_html_uri(igk_io_basepath($destination));
                    igk_notifyctrl()->addMsgr("msg.FileAdded_1", $d);
                    $callback($n, $d);
                }
            }
            else{
                igk_notifyctrl()->addWarningr("warn.FileAlreadyExists");
                $d=igk_io_basepath($destination);
                $callback($n, $d);
                return 0;
            }
        }
        else{
            igk_notifyctrl()->addError("can't create a directory");
            return 0;
        }
    }
    else{
        igk_notifyctrl()->addErrorr("err.NotFileToAdd_1". $f["error"]);
        return 0;
    }
    return 1;
}
///<summary></summary>
///<param name="file"></param>
///<param name="content"></param>
///<param name="overwrite" default="true"></param>
/**
* 
* @param mixed $file
* @param mixed $content
* @param mixed $overwrite the default value is true
*/
function igk_io_savecontentfromtextarea($file, $content, $overwrite=true){
    if(ini_get("magic_quotes_gpc")){
        $content=stripcslashes($content);
    }
    return igk_io_save_file_as_utf8($file, $content, $overwrite);
}
///<summary> utility function to get server name</summary>
/**
*  utility function to get server name
*/
function igk_io_server_name(){
    return igk_getv($_SERVER, "SERVER_NAME");
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_io_set_dir_level($v){
    igk_set_env("sys://io/relative_dir_level", $v);
}
///<summary>store ajx uploaded data to folder</summary>
/**
* store ajx uploaded data to folder
*/
function igk_io_store_ajx_uploaded_data($folder, $fname=null){
    $tab=igk_get_allheaders();
    if((igk_getv($tab, "IGK_UPLOADFILE", false) == false) || !IGKIO::CreateDir($folder)){
        return false;
    }
    $fsize=igk_getv($tab, "IGK_UP_FILE_SIZE");
    $type =igk_getv($tab, "IGK_UP_FILE_TYPE", "text/html");
    $fname=$fname === null ? igk_getv($tab, "IGK_FILE_NAME", "file.data"): $fname;
    $bfname=igk_io_basenamewithoutext($fname);
    $of=igk_io_dir($folder."/".$fname);
    $v_gh=fopen("php://input", "r");
    $v_wh=fopen($of, "w");
    if($v_wh){
        igk_io_copy_stream($v_gh, $v_wh, 8192, 1);
        if(filesize($of) == $fsize){
            return $of;
        }
        unlink($of);
        return null;
    }
    else{
        @fclose($v_gh);
    }
    return null;
}
///<summary></summary>
///<param name="file"></param>
///<param name="cnf"></param>
///<param name="tagname" default="config"></param>
///<param name="callback" default="null"></param>
/**
* 
* @param mixed $file
* @param mixed $cnf
* @param mixed $tagname the default value is "config"
* @param mixed $callback the default value is null
*/
function igk_io_store_conf($file, $cnf, $tagname="config", $callback=null){
    $d=igk_createnode($tagname);
    foreach($cnf as $k=>$v){
        igk_conf_store_value($d, $k, $v);
    }
    $s=$d->Render();
    if(igk_io_save_file_as_utf8($file, $s)){
        if($callback){
            $callback();
        }
        return true;
    }
    return false;
}
///<summary>store base64 encoding data to outfile</summary>
/**
* store base64 encoding data to outfile
*/
function igk_io_store_uploaded_base64($outfile, $data){
    if(empty($data))
        return 0;
    list($d, $v)
    =explode(";", $data);
    $g=base64_decode(trim(explode(",", str_replace(" ", "+", $v))[1]));
    return igk_io_save_file_as_utf8_wbom($outfile, $g, true);
}
///<summary></summary>
///<param name="file"></param>
/**
* 
* @param mixed $file
*/
function igk_io_store_uploaded_file($file){
    if(!IGKIO::CreateDir(dirname($file)))
        return 0;
    $fin=fopen("php://input", "r");
    if(!$fin)
        return 0;
    $fo=fopen($file, "w+");
    $buffsize=4096;
    $r = 0;
    while(($c=fread($fin, $buffsize))){
        fwrite($fo, $c, strlen($c));
        $r = 1;
    }
    fclose($fo);
    fclose($fin);
    if ($r == 0){
        unlink($file);
        return 0;
    }
    return 1;
}
///<summary> get the current subdomain from uri</summary>
///<remark> The subdomain name is independant of configured domain uri</remark>
/**
*  get the current subdomain from uri
*/
function igk_io_subdomain_uri_name($uri=null){
    $domain=igk_io_domain_uri_name($uri);
    $bdom=IGKSubDomainManager::GetBaseDomain();
    $s="";
    if(($domain === $bdom) || IGKValidator::IsIpAddress($domain) || ($domain == "localhost")){
        return $s;
    }
    $tab=array();
    if(preg_match_all(IGK_SUBDOMAIN_URI_NAME_REGEX, trim($domain), $tab))
        $s=igk_getv($tab["name"], 0);
    return $s;
}
///<summary>target, cibling le lien</summary>
///<param name="target">: link to create</param>
///<param name="cibling">: lien a crÃ©er</param>
/**
* target, cibling le lien
* @param mixed $target : chemin existant
* @param mixed $cibling : lien a crÃ©er
*/
function igk_io_symlink($target, $link){ 

    $r = false;
     if(!igk_server()->WINDIR){
        if(!is_dir($h=$link)){
            $h=dirname($h);
        }
        $target=igk_io_baserelativepath($target, $h);
        if(defined("IGK_TESTING")){
            igk_wln("resolv target : ", $target);
        }
    }
    if (!file_exists($link) && !is_link($link) && !($r = @symlink($target, $link))){        
        igk_ilog("symlink failed: source: ".$target. " cibling: ".$link);        
    }
    return $r;
}
///<summary>retrice the data folder </summary>
/**
* retrice the data folder
*/
function igk_io_sys_datadir(){
    return igk_io_applicationdir().DIRECTORY_SEPARATOR.IGK_DATA_FOLDER;
}
/**
 * return system io classes dir
 */
function igk_io_sys_classes_dir(){
    return IGK_LIB_DIR."/".IGK_LIB_FOLDER."/".IGK_CLASSES_FOLDER;
}
function igk_io_sys_test_classes_dir(){
    return IGK_LIB_DIR."/".IGK_LIB_FOLDER."/".IGK_TESTS_FOLDER;
}
///<summary></summary>
///<param name="prefix"></param>
/**
* 
* @param mixed $prefix
*/
function igk_io_sys_tempnam($prefix){
    return tempnam(sys_get_temp_dir(), $prefix);
}
///<summary>return the system full path according to BASEDIR.</summary>
///<code>exemple: in window will return c://wamp/website/[$relativepath]</code>
/**
* return the system full path according to BASEDIR.
*/
function igk_io_syspath($relativepath=null){ 
    return igk_io_dir(igk_io_applicationdir()."/".$relativepath);
}
///<summary>convert file to uri offline presentation </summary>
/**
* convert file to uri offline presentation
*/
function igk_io_to_uri($f, $exist=1){
    if(file_exists($f) || !$exist){
        return "file:////".igk_html_uri(igk_realpath($f));
    }
    return 0;
}
///<summary>shortcut to save file</summary>
///<param name="filename">file to touch</param>
///<param name="defaultContent" default="">default content</param>
/**
* shortcut to save file
* @param mixed $ilename file to touch
* @param mixed $defaultContent default content
*/
function igk_io_touch($filename, $content=''){
    return igk_io_save_file_as_utf8_wbom($filename, $content, 1);
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_io_treat_lnk_referer($f){
    if(igk_is_ajx_demand()){
        $str=trim(igk_getv(explode('?', igk_server()->HTTP_REFERER), 0));
        if(!empty($str) && !IGKString::EndWith($str, '/')){
            if(IGKString::StartWith($f, '../'))
                $f=substr($f, 3);
        }
    }
    return $f;
}
///<summary>return a unix presentation path</summary>
/**
* return a unix presentation path
*/
function igk_io_unix_path($p){
    return str_replace("\\", "/", $p);
}
///<summary>unlink file if exists</summary>
/**
* unlink file if exists
*/
function igk_io_unlink($file){
    if(file_exists($file)){
        return @unlink($file);
    }
    return 0;
}
///<summary>determine that a local uri target a directory</summary>
/**
* determine that a local uri target a directory
*/
function igk_io_uri_is_dir($uri){
    $buri=igk_io_baseuri();
    $s=strstr($uri, $buri);
    if(empty($s))
        return 0;
    $bdir=igk_str_rm_last(igk_io_basedir(), DIRECTORY_SEPARATOR);
    $b=igk_io_dir(str_replace($buri, $bdir, $uri));
    return is_dir($b);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="fname" default=""></param>
/**
* 
* @param mixed $ctrl
* @param mixed $fname the default value is ""
*/
function igk_io_view_entry_uri($ctrl, $fname=""){
    $c=$fname;
    if(!empty($fname)){
        if(!($c=dirname($fname)))
            $c=$fname;
        if($c == '.')
            $c='';
    }
    return $ctrl->getAppUri($c);
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="fname" default=""></param>
/**
* 
* @param mixed $ctrl
* @param mixed $fname the default value is ""
*/
function igk_io_view_root_entry_uri($ctrl, $fname=""){
    $buri=igk_io_baseuri();
    return substr(igk_io_view_entry_uri($ctrl, $fname), strlen($buri));
}
///<summary></summary>
///<param name="file"></param>
///<param name="content"></param>
///<param name="overwrite" default="true"></param>
///<param name="chmod" default="IGK_DEFAULT_FILE_MASK"></param>
///<param name="type" default="w+"></param>
/**
* 
* @param mixed $file
* @param mixed $content
* @param mixed $overwrite the default value is true
* @param mixed $chmod the default value is IGK_DEFAULT_FILE_MASK
* @param mixed $type the default value is "w+"
*/
function igk_io_w2file($file, $content, $overwrite=true, $chmod=IGK_DEFAULT_FILE_MASK, $type="w+"){
    if (strpos($file, "PWA")){
        igk_trace("kjd");
        igk_wln_e("kljd");
    } 
    return igk_io_save_file_as_utf8_wbom($file, $content, $overwrite, $chmod, $type);
}
///<summary>get if is ajx demand</summary>
/**
* get if is ajx demand
*/
function igk_is_ajx_demand(){
    $t=!(igk_get_env(IGK_ENV_NO_AJX_TEST) == 1) && (igk_getv(igk_get_allheaders(), "IGK_X_REQUESTED_WITH"));
    return $t;
}
function igk_is_ajx_form_request(){
    return igk_getr("igk-ajx-form") == 1;
}
///<summary></summary>
///<param name="o"></param>
///<param name="k"></param>
/**
* 
* @param mixed $o
* @param mixed $k
*/
function igk_is_array_key_present($o, $k){
    $t= is_object($o) ? (array)$o: (is_array($o) ? $o: null);
    if($t == null)
        return false;
    if(!is_array($k))
        return false;
    foreach($k as $s){
        if(!isset($t[$s])){ 
            return false;
        }
    }
    return true;
}
///<summary>get if framework is in atomic mode</summary>
/**
* get if framework is in atomic mode
*/
function igk_is_atomic(){
    return defined("IGK_FRAMEWORK_ATOMIC");
}
///<summary> extend is callable function for igk usage</summary>
///<remark> used echo to write something. igk_wln failed nested looping for tracing data. because of igk_getv</remark>
/**
*  extend is callable function for igk usage
*/
function igk_is_callable($tab){
    if($tab == null)
        return 0;
    if(is_callable($tab))
        return true;
    if(is_array($tab) && count($tab) > 2){
        $c=array_slice($tab, 0, 2);
        return is_callable($c);
    }
    return igk_is_callback_obj($tab);
}
///<summary>check if $c is a framework callback object</summary>
///<param name="$c">the callback object to check</param>
/**
* Represente check if $c is a framework callback object
* @param mixed $c the callback object to check
*/
function igk_is_callback_obj($c){
    $s=IGK_OBJ_TYPE_FD;
    return (is_array($c) && isset($c[$s]) && ($c[$s] == "_callback")) || (is_object($c) && !is_callable($c) && isset($c->$s) && ($c->$s == "_callback"));
}
///<summary>check if the defined class is included as script evaluation object</summary>
/**
* check if the defined class is included as script evaluation object
*/
function igk_is_class_included($classname){
    $c=igk_get_reg_class_file($classname);
    if($c){
        return true;
    }
    return false;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_is_class_incomplete($n){
    return get_class($n) === __PHP_Incomplete_Class::class;
}
///<summary>check if an object is instance or subclass of a class</summary>
function igk_is_class_instance_of($n, $class){
	return (get_class($n) == $class ) || is_subclass_of($n,$class);
}
///<summary>get if an object is typeof closure</summary>
/**
* get if an object is typeof closure
*/
function igk_is_closure($f){
    return is_callable($f) && is_object($f) && strtolower(get_class($f)) == "closure";
}
///<summary></summary>
/**
* 
*/
function igk_is_conf_connected(){
    return ($c=igk_getconfigwebpagectrl()) && $c->getIsConnected();
}
///<summary></summary>
/**
* 
*/
function igk_is_confpagefolder(){
    return ($c=igk_getconfigwebpagectrl()) && ($c->getCurrentPageFolder() == IGK_CONFIG_PAGEFOLDER);
}
///<summary>check if a constant is present on tubestr</summary>
/**
* check if a constant is present on tubestr
*/
function igk_is_const_defined($tubestr){
    $r=explode("|", $tubestr);
    foreach($r as  $v){
        if(defined(trim($v)))
            return 1;
    }
    return false;
}
///<summary></summary>
///<param name="obj"></param>
/**
* 
* @param mixed $obj
*/
function igk_is_controller($obj){
    return is_object($obj) && igk_reflection_class_extends($obj, IGK_ROOT_CTRLBASECLASS);
}
///<summary> check if an object is a controller</summary>
/**
*  check if an object is a controller
*/
function igk_is_ctrl($ctrl){
    if(is_object($ctrl) && igk_reflection_class_extends(get_class($ctrl), IGK_CTRLBASECLASS)){
        return true;
    }
    return false;
}
///<summary>get if APP DEBUG is active</summary>
/**
* get if APP DEBUG is active
*/
function igk_is_debug(){
    return IGKApp::$DEBUG;
}
///<summary>get if APP allow debugging</summary>
/**
* get if APP allow debugging
*/
function igk_is_debuging(){
    $App=igk_app();
    return (IGKServerInfo::IsLocal() && ($App->Configs->allow_debugging ? $App->Configs->allow_debugging: false));
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_is_defaultwebpagectrl($ctrl){
    return igk_get_defaultwebpagectrl() === $ctrl;
}
///<summary>check if this is presently on design mode</summary>
/**
* check if this is presently on design mode
*/
function igk_is_design_mode(){
    return igk_get_env("sys://designmode") == 1;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_is_domain_name($n){
    return (strtolower($n) == "localhost") || (igk_get_domain_name($n) === $n);
}
///<summary></summary>
///<param name="t"></param>
///<param name="default" default=""></param>
/**
* 
* @param mixed $t
* @param mixed $default the default value is ''
*/
function igk_is_empty($t, $default=''){
    if(empty($t)){
        return $default;
    }
    return $t;
}
///<summary></summary>
///<param name="func"></param>
/**
* 
* @param mixed $func
*/
function igk_is_function_disable($func){
    return in_array($func, explode(",", ini_get("disable_functions")));
}
///<summary>check if the node is html item</summary>
/**
* check if the node is html item
*/
function igk_is_html($n){
    return is_object($n) && is_subclass_of(get_class($n), IGK_HTML_ITEMBASE_CLASS);
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_is_html_node_overriding_view($n){
    if(get_class($n) == "IGKXmlNode")
        return false;
    $t=method_exists($n, 'Render');
    if($t && !$n->NoOverride){
        $v_cln=get_class($n);
        $v_minfo=new ReflectionMethod($v_cln, 'Render');
        return ($v_minfo->{'class'}
         == $v_cln);
    }
    return false;
}
///<summary> check if the name if a valid identifier</summary>
/**
*  check if the name if a valid identifier
*/
function igk_is_identifier($name){
    return preg_match(IGK_ISIDENTIFIER_REGEX, $name);
}
///<summary></summary>
///<param name="file"></param>
/**
* 
* @param mixed $file
*/
function igk_is_included_view($file){
    return ($g=igk_get_env(IGKEnvKeys::VIEW_INC_VIEW)) && isset($g[igk_io_dir($file)]);
}
///<summary>check for module presence</summary>
/**
* check for module presence
*/
function igk_is_module_present($modulename){
    $v_k="sys://require_mods";
    $g=igk_get_env($v_k, array());
    if(isset($g[$modulename]))
        return 1;
    return 0;
}
///<summary></summary>
/**
* 
*/
function igk_is_singlecore_app(){
    return  igk_const("IGK_SINGLE_CONTROLLER_APP") || igk_sys_getconfig("force_single_controller_app");
}
///<summary>determine that the request is coming from this local server</summary>
/**
* determine that the request is coming from this local server
*/
function igk_is_srv_request(){
    $tab=igk_get_allheaders();
    $s=(igk_server()->HTTP_HOST == igk_io_server_name() || die("server not match")) && ((igk_getv($tab, "IGK_SERVER") == IGK_PLATEFORM_NAME) || die("server ")) && ((igk_getv($tab, "IGK_CREF") == igk_app()->Session->getCref()) || die("cref"));
    return $s;
}
///<summary>get if the current request is a thumnail request</summary>
/**
* get if the current request is a thumnail request
*/
function igk_is_thumbnail_request(){
    return !isset($_SERVER["HTTP_COOKIE"]) && (igk_server()->HTTP_CACHE_CONTROL == "no-cache") && (igk_server()->HTTP_PRAGMA == "no-cache");
}
///<summary>check if $uri command came from an uri request</summary>
/**
* check if $uri command came from an uri request
*/
function igk_is_uri_demand($uri){
    return igk_uri_is_match(igk_io_currenturi(), $uri);
}

///<summary></summary>
/**
* 
*/
function igk_is_webapp(){
    return igk_server()->IGK_IS_WEBAPP == 1;
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_is_xmlnode($n){
    return is_object($n) && igk_reflection_class_extends($n, IGK_HTML_ITEMBASE_CLASS);
}
///<summary> get a javascript link uri contain in a form </summary>
/**
*  get a javascript link uri contain in a form
*/
function igk_js_a_postform($uri){
    return "javascript: return (function(q){var f = window.igk.getParentByTagName(q, 'form');  if (f){f.action ='".$uri."'; f.submit();return false;}})(this);";
}
///<summary>get a link javascript a posturi</summary>
/**
* get a link javascript a posturi
*/
function igk_js_ajx_aposturi($uri, $targetNodeId){
    return "javascript: window.igk.ajx.aposturi('".$uri."', '".$targetNodeId."');";
}
///<summary></summary>
///<param name="uri"></param>
///<param name="method" default="null"></param>
/**
* 
* @param mixed $uri
* @param mixed $method the default value is null
*/
function igk_js_ajx_post_auri($uri, $method=null){
    return "javascript: window.igk.web.a_posturi(this,'".$uri."', ".(($method == null) ? 'null': $method).");";
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_js_ajx_post_body_uri($uri){
    $funcd="function(xhr){ if (this.isReady()){ this.replaceBody();}} ";
    return "javascript: \$ns_igk.ajx.post('".$uri."', null,  ".$funcd."); return false; ";
}
///<summary>post a link uri</summary>
/**
* post a link uri
*/
function igk_js_ajx_post_luri($parentTag){
    return "javascript: return window.igk.ajx.a_postResponse(this, '".$parentTag."');";
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_js_ajx_postform_frame($uri){
    return "javascript:  \$ns_igk.ajx.postform(\$igk(this).getForm(), '".$uri."' , function(xhr){ if (this.isReady()){ \$ns_igk.ctrl.frames.appendFrameResponseToBody(xhr.responseText);  }});  return false;";
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_js_ajx_view_ctrl($ctrl){
    $id=$ctrl->TargetNode["igk-type-id"];
    igk_js_render_script("ns_igk.ajx.fn.getfortarget('".$ctrl->getUri("ViewAJX")."', ns_igk.ctrl.getCtrlById('".$id."'));");
}
///<summary></summary>
///<param name="folder"></param>
/**
* 
* @param mixed $folder
*/
function igk_js_bind_script_folder($folder){
    $folder=igk_html_uri($folder);
    if(!is_dir($folder))
        return;
    if (!($tab = igk_environment()->get("ScriptFolder"))){
        $tab = [];
    }
    if(!isset($tab[$folder])){
        $tab[$folder] = igk_io_dir($folder);
    }
    igk_environment()->set("ScriptFolder", $tab);

}
///<summary>used to bind script for wui component</summary>
/**
* used to bind script for wui component
*/
function igk_js_bind_wuiscript($document, $ctrl, $file, $node=null){
    $f=igk_realpath($ctrl->getScriptDir()."/".$file);
    $document=$document ?? igk_get_last_rendered_document();
    $node=$node ?? igk_get_rendering_node();
    if(empty($f) || ($document == null) || $document->ScriptManager->isLoaded($f)){
        return;}
    $src=igk_createnode("script");
    $src->setContent(igk_io_read_allfile($f));
    if(igk_is_ajx_demand()){
        $src->RenderAJX();
    }
    else{
        if($node){
            $node->add(new IGKHtmlSingleNodeViewer($src));
        }
    }
    $document->addScript($f, 'temp');
}
///<summary>used to post frame to uri. used in href of <a></a> element </summary>
///<remark>if frame need to be shown used ajax mecanism</remark>
///<param name="ctrl"> controller to where response must be send in ajax syntax</param>
///<param name="uri"> request uri</param>
/**
* used to post frame to uri. used in href of
* @param mixed $ctrl  controller to where response must be send in ajax syntax
* @param mixed $uri  request uri
*/
function igk_js_ctrl_posturi($ctrl, $uri){
    $q=IGK_STR_EMPTY;
    if($ctrl != null){
        $q=",'".$ctrl->TargetNode["id"]."'";
    }
    else
        $q=",null";
    return "javascript:window.igk.ctrl.frames.postframe(this, '".$ctrl->getUri($uri)."&ajx=1'".$q.");";
}
///<summary>distribute js files </summary>
/**
* distribute js files
*/
function igk_js_dist_scripts($files){
    $out="";
    $mergescallback=function($file, $n=''){
        $src=trim(str_replace("\"use strict\";", "", igk_js_minify(file_get_contents($file))));
        if(!empty($src)){
            $header="/*file:".$n."*/".IGK_LF;
            echo $header.$src.IGK_LF;
        }
    };

    foreach($files as $file){
        if (!file_exists($file))
            continue;
        ob_start();
        $c=$mergescallback($file, igk_io_basepath($file));
        $output=ob_get_contents();
        ob_clean();
        $out .= $output.IGK_LF;
    }
    return $out;
}
///<summary>used to enable tinymce on element with textarea</summary>
/**
* used to enable tinymce on element with textarea
*/
function igk_js_enable_tinymce($target, $elements=null, $op=null, $doc=null){
    if(!($mce=igk_require_module("tinymce", true, 0))){
        return;
    }
    $mce->initdoc($doc ?? igk_app()->Doc);
    $element_txt='null';
    if($elements){
        if(is_array($elements)){
            $element_txt="{elements: \"".implode(',', $elements)."\"}";
        }
        else
            $element_txt="{elements: \"".$elements."\"}";
    }
	$opt = "";
	if ($op){
		$opt.=", ".json_encode($op);
	}
    $script=<<<EOF
if (ns_igk.tinyMCE){
	ns_igk.tinyMCE.runOn({$element_txt}{$opt});
}
EOF;
    $sc=$target->add("script");
    $sc->Content=$script;
    return $sc;
}
///<summary></summary>
///<param name="target"></param>
///<param name="uri"></param>
///<param name="func" default="null"></param>
///<param name="saveState" default="false"></param>
/**
* 
* @param mixed $target
* @param mixed $uri
* @param mixed $func the default value is null
* @param mixed $saveState the default value is false
*/
function igk_js_get_posturi($target, $uri, $func=null, $saveState=false){
    $func=($func == null) ? "function(xhr){ if (this.isReady()){ this.setResponseTo(self);}}": $func;
    $out="javascript: (function(a){ var self = a; var q = igk.getParentById(self, '".$target["id"]."'); igk.ajx.post('".$uri."', null, ".$func.", ".igk_parsebool($saveState)."); })(this); ";
    return $out;
}
///<summary></summary>
/**
* 
*/
function igk_js_get_temp_script_files(){
    $h=igk_js_get_temp_script_host();
    if($h){
        return $h->targetNode->getParam("files");
    }
    return null;
}
///<summary>get tempory script host</summary>
/**
* get tempory script host
*/
function igk_js_get_temp_script_host(){
    return igk_get_env("sys://temp/script");
}
///<summary>init document to load</summary>
/**
* init document to load
*/
function igk_js_init(){
    $c=igk_createnode("script");
    $c->Content=igk_html_initbodymainscript();
    $c->RenderAJX();
}
///<summary>bind script  to document</summary>
/**
* bind script to document
*/
function igk_js_init_doc($doc){
    $key = "loadingscript";
    if(igk_get_env($key) === $doc)
        return;
   
    igk_set_env($key, $doc);
    $cache=IGKHtmlScriptAssocInfo::GetCacheFile();
    $r=1;
    if(!(!IGKServerInfo::IsLocal() && file_exists($cache))){
        igk_js_load_script($doc, IGK_LIB_DIR."/".IGK_SCRIPT_FOLDER, 'igk');
        igk_js_load_script($doc, igk_io_dir(IGK_APP_DIR."/".IGK_SCRIPT_FOLDER), 'sys');
        igk_js_load_found_script($doc, igk_io_dir(IGK_LIB_DIR."/Ext"), 'ext');
        $r=2;
    }
    igk_set_env($key, null);
    return $r;
}

function igk_js_inline_text($msg, $attrib=1){
	$msg = str_replace("\\", "\\\\", $msg);
	$msg = str_replace("'", "\\'", $msg);
	if ($attrib){
		$msg = str_replace('"','\\&quot;', $msg);
	}
	return "['".implode("','", explode("\n", $msg))."'].join(String.fromCharCode(10))";
}

///<summary></summary>
///<param name="text"></param>
/**
* 
* @param mixed $text
*/
function igk_js_lnk_confirm($text){
    return "if (ns_igk) ns_igk.form.confirmLink(this, '$text'); return false;";
}
///<summary></summary>
///<param name="doc"></param>
///<param name="dirname"></param>
/**
* 
* @param mixed $doc
* @param mixed $dirname
*/
function igk_js_load_found_script($doc, $dirname){
    $dirname=igk_io_dir($dirname);
    $tab = igk_environment()->get("ScriptFolder");
    if(($doc == null) || !is_dir($dirname) || isset($tab[$dirname])){
        return;}
    $tdir=[$dirname];
    while(($dirname=array_pop($tdir)) && ($hdir=@opendir($dirname))){
        if(!$hdir){
            igk_debug_wln("scripts dirname can not be opened [".$dirname."]");
            return false;
        }
        while($fd=readdir($hdir)){
            if(($fd == ".") || ($fd == ".."))
                continue;
            $f=$dirname."/".$fd;
            if(is_dir($f)){
                if(($fd == IGK_SCRIPT_FOLDER)){
                    igk_js_load_script($doc, $f);
                }
                else{
                    array_push($tdir, $f);
                }
            }
        }
        closedir($hdir);
    }
    return true;
}
///<summary>load javascript document from directory</summary>
///<param name="doc">document where to load</param>
///<param name="dirname">target directory</param>
///<param name="tag">registration tag</param>
///<param name="regtype">registration type. use for building regex searching expression. 0|1 1= for all script</param>
/**
* load javascript document from directory
* @param IGKHtmlDoc $doc document where to load
* @param mixed $dirname target directory
* @param mixed $tag registration tag
* @param mixed $regtyperegistration type. use for building regex searching expression. 0|1 1= for all script
*/
function igk_js_load_script($doc, $dirname, $tag='priv', $regtype=0){
    if (get_class($doc) === stdClass::class){
        igk_trace();
        die("not allowed");
    }
    $dirname=igk_html_uri($dirname);
    $tab=igk_get_env($key="sys://js/loaded_folder", array());
    if(isset($tab[$dirname])){
        return;
    }
    $tab[$dirname]=1;
    igk_set_env($key, $tab);
    $reg="(^[^\.](.)*\.js$)";
    if ($regtype==1){
        $reg="\.js$";
    }

    $dirname=igk_html_uri($dirname);
    if (!($tab = igk_environment()->get("ScriptFolder"))){
        $tab = [];
    }
    if(($doc == null) || !is_dir($dirname) || isset($tab[$dirname])){
        return;}
    $bregex="/(".$reg."|\.(json|xml|xsl|html)$)/";
    $idir=igk_sys_js_ignore();
    if(isset($idir[$dirname])){
        return false;
    }
    $rdir = $dirname;
    igk_js_bind_script_folder($rdir);

    $res_files=igk_get_env($reskey="sys://res_files", array());
    $scriptFolder=array($dirname);
    $srcdir=$dirname;
    $stag="\"{$tag}\"";
    $resolver=IGKResourceUriResolver::getInstance();
    $callback=function($f) use ($resolver){
        if(!igk_environment()->is("production")){
            $h=$resolver->resolve($f);
        }
    };
    while($dirname=array_pop($scriptFolder)){
        $hdir=@opendir($dirname);
        if(!$hdir){
            igk_debug_wln("scripts dirname can not be opened [".$dirname."]");
            return false;
        }
        $f=null;
        $fd=null;
        while($fd=readdir($hdir)){
            if(($fd == ".") || ($fd == ".."))
                continue;
            $f=$dirname."/".$fd;
            if(is_dir($f)){
                if(isset($idir[$f])){
                    continue;
                }
                $scriptFolder[]=$f;
            }
            else{
                if(preg_match($bregex, $bf=basename($f))){
                    $res_files[$f]=$stag;
                    if(igk_io_path_ext($bf) == "js"){
                        $doc->addScript($f, $tag);
                    }
                    else{
                        $callback($f);
                    }
                }
            }
        }
        closedir($hdir);
    }
    igk_set_env($reskey, $res_files);
    return true;
}
///<summary>min javascript source</summary>
///<param name="compact">No compact char</param>
///<param name="nocompactchar">No compact char</param>
/**
* min javascript source
* @param mixed $compact No compact char
* @param mixed $nocompactchar No compact char
*/
function igk_js_minify($s, $compact=1, $nocompactchar=' '){
    $count=strlen($s);
    $i=0;
    $o="";
    $m=0;
    $stop=0;
    $symbolspace="=;()\{\}+-*:<>[]|, ";
    $symbols="+-<>=\{\}(),|[]*%";
    while($i < $count){
        $ch=$s[$i];
        $i++;
        if($m == 2){
            if($ch == $stop){
                $m=0;
            }
            continue;
        }
        if($m == 1){
            if($ch == "/"){
                $m=2;
                $stop=IGK_LF;
                continue;
            }
            if($ch == "*"){
                $e=0;
                $cm="";
                while($i < $count){
                    $ch=$s[$i];
                    if($ch == "/"){
                        if($s[$i-1] == "*"){
                            $e=1;
                            $cm=substr($cm, 0, strlen($cm)-1);
                            break;
                        }
                    }
                    $cm .= $ch;
                    $i++;
                }
                if($e)
                    $i++;
            }
            else{
                if(!preg_match_all("#(\||&|!|:|\+|=|-|\()\s*$#i", $o, $ctab)){
                    $m=0;
                    $o .= "/".$ch;
                    continue;
                }
                $i--;
                $rgx="/".igk_str_read_brank($s, $i, "/", "/", null, 1);
                $i++;
                while(($i < $count) && (preg_match("/(g|i|m|u|y)/", $s[$i]))){
                    $rgx .= $s[$i];
                    $i++;
                }
                $o .= $rgx;
            }
            $ch="";
        }
        switch($ch){
            case "/":
            if(($m % 5) == 0){
                $m=1;
            }
            else if($m == 1){
                $m=2;
                $stop=IGK_LF;
            }
            break;
            case "\"":
            case "'":
            if(($m % 5) == 0){
                $i--;
                $rgx=igk_str_read_brank($s, $i, $ch, $ch, null, 1);
                $o .= $rgx;
                $m=4;
                $i++;
                $ch="";
            }
            break;
            case "\t":
            case IGK_LF:
            case "\r":
            if($m != 5){
                $m=5;
            }
            break;
            case " ":
            if(($m % 5) == 0){
                $lni=strlen($o);
                $_last=$lni > 0 ? $o[$lni-1]: '';
                if(($lni > 0) && (!$compact && (strpos($nocompactchar, $_last) === false)) || (strpos($symbolspace, $_last) === false))
                    $o .= $ch;
                else
                    igk_ilog_assert(igk_is_debug(), ":::ignore space '".$_last."'");
                $m=5;
            }
            break;default:
            if($m == 5){
                if((($lni=strlen($o)) > 0) && (strpos($symbolspace, $o[$lni-1]) === false))
                    $o .= " ";
                else if($compact && ($lni > 0) && ($o[$lni-1] == ' ') && (strpos($symbols, $ch) !== false)){
                    $o=substr($o, 0, $lni-1);
                }
                else{
                    $ct=strlen($o);
                    if(($ct > 0) && (strpos("+-", $o[$ct-1]) !== false))
                        $o .= " ";
                }
            }
            $m=0;
            break;
        }
        if($m == 0)
            $o .= $ch;
        if($m == 4)
            $m=0;
    }
    if($m == 1)
        $o .= "/";
    return $o;
}
///<summary>no script loading shortcut</summary>
/**
* no script loading shortcut
* @param string $dir path to directory to ignore
*/
function igk_js_no_autoload($dir){
    return igk_sys_js_ignore($dir);
}
///<summary></summary>
///<param name="m"></param>
/**
* 
* @param mixed $m
*/
function igk_js_notify_danger($m){
    $d=igk_createnode($m);
    $d->setClass("igk-notify igk-notify-danger");
    $d->Content=$m;
    $d->RenderAJX();
}
///<summary>get a javascript expression to from parent form variable to uri expression</summary>
///<args name="uri" >uri where to post form</args>
///<args name="jsfunc" >javascript function expression to pass</args>
/**
* get a javascript expression to from parent form variable to uri expression
*/
function igk_js_post_form_uri($uri, $jsfunc=null){
    $c=IGK_STR_EMPTY;
    if($jsfunc)
        $c .= ",".$jsfunc;
    return "javascript: window.igk.ajx.postform(this.form, '".$uri."' ".$c."); ";
}
///<summary>used to get javascript uri component to post frame on the javascript context</summary>
///<param name="uri">string uri or object(Listener)</param>
/**
* used to get javascript uri component to post frame on the javascript context
* @param mixed $uri string uri or object(Listener)
*/
function igk_js_post_frame($uri, $ctrlid=null, $global=true){
    if(is_string($uri))
        return "javascript:".igk_js_post_frame_cmd($uri, $ctrlid, $global);
    else{
        return new IGKJSPostFrameCmd($uri, $ctrlid, $global);
    }
}
///<summary>get the post frame javascript command</summary>
/**
* get the post frame javascript command
*/
function igk_js_post_frame_cmd($uri, $ctrl=null, $global=true){
    $q=IGK_STR_EMPTY;
    if($ctrl != null){
        if(is_string($ctrl)){
            $q=",'".$ctrl."'";
        }
        else
            $q=",'".$ctrl->TargetNode["id"]."'";
    }
    else
        $q=",null";
    if($global)
        $q .= ",true";
    else
        $q .= ",false";
    return "ns_igk.ctrl.frames.postframe(this, '".$uri."&ajx=1'".$q.");";
}
///<summary> get a javascript src that will post uri to server</summary>
/**
*  get a javascript src that will post uri to server
*/
function igk_js_post_uri($uri, $jsfunc=null){
    $jsfunc=$jsfunc ? $jsfunc: "null";
    return "javascript: window.igk.ajx.post('".$uri."', null, {$jsfunc});";
}
///<summary>render history</summary>
/**
* render history
*/
function igk_js_push_history_ajx($uri, $data=null){
    $n=igk_createnode("script");
    $n->Content="igk.winui.history.push('{$uri}',{uri:'{$data}','src':'balafonjs'}, null);";
    $n->RenderAJX();
}
///<summary></summary>
///<param name="u"></param>
/**
* 
* @param mixed $u
*/
function igk_js_reg_global_script($u){
    if(file_exists($u)){
        $tab=igk_get_env(IGK_ENV_GLOBAL_SCRIPT_KEY, array());
        $tab[igk_realpath($u)
        ]=1;
        igk_set_env(IGK_ENV_GLOBAL_SCRIPT_KEY, $tab);
        return true;
    }
    else{
        igk_wln("file not exists [$u]");
    }
    return false;
}
///<summary> render script node content</summary>
/**
*  render script node content
*/
function igk_js_render_script($script){
    $s=igk_createnode("script");
    $s->setContent($script);
    $s->RenderAJX();
}
///<summary>init history</summary>
/**
* init history
*/
function igk_js_winui_init_history($t, $cn, $page=IGK_HOME, $src=IGK_BALAFON_JS){
    $id=igk_get_component_id($cn);
    if($id){
        $t->addScript()->Content="igk.winui.history.push(null,{id:'{$id}', src:'{$src}', page:'{$page}'});";
    }
}
///<summary></summary>
///<param name="msg"></param>
///<param name="exit"></param>
/**
* 
* @param mixed $msg
* @param mixed $exit the default value is 0
*/
function igk_json($msg, $exit=0){
    igk_header_set_contenttype("json");
    echo $msg;
    if($exit)
        igk_exit();
}
///<summary>parse expression. multi json object expression</summary>
///<param name="exp">param or semi column expression</param>
/**
* parse expression. multi json object expression
* @param mixed $exp param or semi column expression
*/
function igk_json_array_parse($exp, & $err=null){
    throw new IGKException("Obsolete: ".__FUNCTION__);
}
///<summary>transform object to json string presentation</summary>
/**
* transform object to json string presentation
*/
function igk_json_encode($t, $options=null){
    return json_encode($t, $options);
}
///<summary>transform the reading string value to php entity data</summary>
function igk_json_value($v){
	if(is_numeric($c = trim($v))){
		if (is_scalar($v))
			return floatval($v);
		return intval($v);
	}
	return $v;
}

///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
// function igk_json_value($n){
    // if(preg_match_all("/^(?P<delimiter>('|\"))(?P<key>(.)+)\\1$/i", $n, $tab)){
        // return $tab["key"][0];
    // }
    // return $n;
// }
///<summary></summary>
///<param name="exp"></param>
/**
* 
* @param mixed $exp
*/
function igk_json_expression($exp){
    if(is_string($exp) == false)
        return -2;
    $o=null;
    $m=0;
    $ch='';
    $ln=0;
    $pos=0;
    $tab=[];
    $v='';
    $k='';
    $q=null;
    $Tpos=0;
    $valid_identifier="/^[_a-z][_a-z0-9]*$/i";
    array_push($tab, ["exp"=>$exp, "pos"=>$pos, "q"=>$q, "m"=>$m, "k"=>$k, "v"=>$v]);
    $rp=0;

	$_json_value = function($v){
		return igk_json_value($v);
	};

    while($cpop=array_pop($tab)){
        $exp=$cpop["exp"];
        $pos=$cpop["pos"];
        $q=$cpop["q"];
        $ln=strlen($exp);
        $m=$cpop["m"];
        $k=$cpop["k"];
        $v=$cpop["v"];

        while($pos < $ln){
            $ch=$exp[$pos];


            switch($ch){
                case '{':
                if(($m == 0) || ($m == 4) || ($m == 1)){
                    if($q == null){
                        $q=new StdClass();
                        $o=$q;
                    }
                    else{
                        if($m == 4){
                            $t=igk_str_read_brank($exp, $pos, '}', $ch, null, 1);
                            array_push($tab, ["exp"=>$exp, "pos"=>$pos + 1, "q"=>$q, "v"=>"", "k"=>$k, "m"=>$m]);
                            $exp=$t;
                            $pos=0;
                            $ln=strlen($exp);
                            $qv=new StdClass();
                            $q->$k=$qv;
                            $s=$q;
                            unset($q);
                            $q=$qv;
                            $m=2;
                            break;
                        }
                        else if(empty($v=trim($v))){
                            igk_wln("error: identifier is empty: ".$m. " - ".$v. " . ".$pos, " k : ".$k, $q);
                            return -1;
                        }
                        $k=$v;
                        $q->$v=new StdClass();
                    }
                    $m=2;
                }
                else if($m == 6){
                    if(!empty($v=trim($v))){
                        igk_wln_e("value is not empty and {:".$v);
                        return -1;
                    }
                    $t=igk_str_read_brank($exp, $pos, '}', $ch, null, 1);
                    array_push($tab, ["exp"=>$exp, "pos"=>$pos + 1, "q"=>$q, "v"=>"", "k"=>$k, "m"=>$m]);
                    $exp=$t;
                    $ln=strlen($exp);
                    $pos=0;
                    unset($q);
                    $q=new StdClass();
                    $o[]=$q;
                    $m=2;
                    break;
                }
                else{
                    igk_set_env('error://'.__FUNCTION__, "error: { not correctly detected: ".$m. "pos : ".$pos);
                    return -1;
                }
                break;
                case '[':
                $t=igk_str_read_brank($exp, $pos, ']', $ch, null, 1);
                if(($m == 0) || ($m == 4) || ($m == 6)){
                    if($m == 4){
                        if(!empty(trim($v))){
                            $v .= $t;
                            break;
                        }
                    }
                    array_push($tab, ["exp"=>$exp, "pos"=>$pos + 1, "q"=>$q, "v"=>"", "k"=>$k, "m"=>$m]);
                    $exp=$t;
                    $pos=0;
                    $ln=strlen($exp);
                    $m=6;
                    if($o == null){
                        $o=[];
                        $q=& $o;
                    }
                    else{
                        $qv=[];
                        if(is_array($q)){
                            $q[]=$qv;
                            unset($q);
                            $q=[];
                        }
                        else{
                            $q->$k=$qv;
                            unset($q);
                            $q=& $qv;
                        }
                    }
                    break;
                }
                else{
                    igk_wln_e("error: starting array not starting mode:{$m} ".$exp);
                }
                break;
                case ',':
				 // igk_wln("end ".$v);
                if($m == 4){
                    $q->$k=$v;
                    $m=2;
                    $v='';
                    $k='';
                }
                else if($m == 6){
                    $q[]=$v;
                    $v="";
                    $k="";
                }
                else{
                    igk_set_env('error://'.__FUNCTION__, "error: comma found outsite a module context. mode:".$m." pos:".$pos);
                    return -1;
                }
                break;
                case ':':
					if($m == 3){
						$m=4;
					}
					else if($m == 4){
						$v .= $ch;
					}
					else if($m == 2){
						if(empty($v=trim($v)) || !preg_match($valid_identifier, $v)){
							igk_set_env('error://'.__FUNCTION__, "error: not a valid identifier ".$v);
							return -1;
						}
						$k=$v;
						$v="";
						$m=4;
					}
					else{
						igk_set_env('error://'.__FUNCTION__, "error: ':' detected not on good expression: mode:".$m. " pos:".$pos);
						return -1;
					}
                break;
                case '}':
				$v = $_json_value($v);
                if($m == 4){
                    if(!isset($q->$k) ||  !is_object($q->$k)){
                        $q->$k=$v;
                    }
                    $m=2;
                }
                else{

					 if ($m == 2){
						 return $q;
					 }
                    return -1;
                }
                $k="";
                $v="";
                break;
                case ']':
                if($m == 6){
                    if(!empty($v)){
                        $q[]=is_string($v) ? trim($v): $v;
                    }
                    $v="";
                    if(($_ct=count($tab)) > 0){
                        $tab[$_ct-1]["v"]=$q;
                    }
                    else{
                        $v=$q;
                    }
                }
                else{
                    igk_set_env('error://'.__FUNCTION__, "error: not valid char detected ]");
                    return -1;
                }
                break;
                case '"':
                case "'":
                $t=trim(igk_str_read_brank($exp, $pos, $ch, $ch, null, 1));


                if($m == 2){
                    $v='';
                    $k=$t;
                    if(($id=substr($k, 1, strlen($k)-2)) && preg_match($valid_identifier, $id)){
                        $k=$id;
                        $t=$id;
                        unset($id);
					}else{
					$id = str_replace('\"', "", $id);
						$t = $id;
						$k = $id;
					}
                    $q->$t=null;
                    $m=3;
                }
                else if($m == 4){
                    $v .= stripslashes(str_replace('\"', "", substr($t, 1, strlen($t)-2)));
                    $q->$k=$v;
                }
                else if($m == 6){
                    $v .= $t;
                }
                else{
                    igk_set_env('error://'.__FUNCTION__, "error: string not managed ".$pos);
                    return -1;
                }
                break;
				default:
					// igk_wln("by default : {$m} :  ".$ch);
					if ($m != 4)
						$v .= $ch;
					else if (!empty(trim($ch))){
						//read number data
						$s = $ch;
						$pos++;
						$dec = 0;
						while($pos < $ln){
							$ch = $exp[$pos];
							if (($ch ==".") ){
								if ( $dec)
									return -1;
								$dec = 1;
							}
							else{
								$nch = ord($ch);
								//igk_wln("ord : ".$nch ." = ".$ch . " ".ord('9'));
								if (($nch< 48) || ($nch>57)){
									$pos--;
									break;
								}
							}
							$pos++;
							$s.= $ch;
						}
						if ($dec){
							$v = floatval($s);
						}else
							$v.= $s;

					}
                break;
            }
            $pos++;
        }
        if($m == 6){
            if(!empty($v)){
                $q[]=trim($v);
                $v="";
                $k="";
            }
            unset($q);
        }
    }
    if(($m != 0) && !empty($v)){ 
        igk_set_env('error://'.__FUNCTION__, "some data remain : ".$v);
        return -1;
    }
    return $o;
}
function igk_json_expression_error(){
	return igk_get_env("error://igk_json_expression");
}
///<summary>convert json string expression to object</summary>
/**
* convert json string expression to object
*/
function igk_json_parse($expression){
    $k="sys://volatile/instance/".__FUNCTION__;
    $r=igk_get_env($k);
    if(!$r){
        $r=new IGKCoreJSon();
        igk_set_env($k, $r);
    }
    return $r->ToDictionary($expression);
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_json_readarray($v){
    throw new IGKException("Obsolete:".__FUNCTION__);
}

///<summary>default key sort callback</summary>
/**
* default key sort callback
*/
function igk_key_sort($k, $v){
    return strcmp($k, $v);
}
///<summary>destroy all stored session</summary>
///<note>administrative function</note>
/**
* destroy all stored session
*/
function igk_kill_all_sessions($exclude=null, & $outtab=null){
    $d=ini_get("session.save_path");
    $i=0;
    if(!empty($d) && is_dir($d)){
        $outtab=$outtab ?? array();
        session_write_close();
        $_SESSION=array();
        $_COOKIE=array();
        $f=IGKIO::GetFiles($d, "/^(.)+$/i", false);
        if($f){
            foreach($f as $v){
                if($exclude && (preg_match("#".$exclude."$#i", basename($v)))){
                    continue;
                }
                $s=@filesize($v);
                if($s){
                    $outtab[$v]=$s;
                    unlink($v);
                }
                $i++;
            }
        }
    }
    return $i;
}
///<summary></summary>
/**
* 
*/
function igk_kill_trace(){
    $file=igk_io_basedir()."/Data/.trace";
    if(file_exists($file))
        unlink($file);
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_last($tab){
    if(($i=igk_count($tab)) > 0)
        return $tab[$i-1];
    return null;
}
///<summary>load environment files</summary>
/**
* load environment files
*/
function igk_load_env_files($dirname, $tab=[IGK_INC_FOLDER, IGK_PROJECTS_FOLDER]){
    $t_files=array(); 
    igk_raise_event("sys://event/cachelibreload", array(null, (object)array("files"=>& $t_files)));
    $tab=$tab == null ? array(IGK_INC_FOLDER, IGK_PROJECTS_FOLDER): $tab;
    foreach($tab as  $s){
        $dir=$s;
        if(empty($dir)){
            igk_wln(igk_show_trace());
            igk_wln_e("enr:");
        }
        if(!is_dir($s))
            $dir=$dirname."/".$s;
        $g_files=igk_loadcontroller($dir);
        if(is_array($g_files))
            $t_files=array_merge($t_files, $g_files);
    }
    return $t_files;
}
///<summary></summary>
///<param name="dirname"></param>
/**
* 
* @param mixed $dirname
*/
function igk_loadcontroller($dirname){
    $files=igk_loadlib($dirname, ".php");
    return $files;
}
///<summary>used to load library files</summary>
/**
* used to load library files
*/
function igk_loadlib($dir, $ext="php", $excludedir=null){
    $IGK_ENV=igk_environment();
    $sdir=is_dir($dir) ? $dir: igk_io_dir(igk_realpath($dir));
    if(empty($sdir)){
        return;}
    $dir=$sdir;
    $dirs=array($dir);
    $files=array();
    $excluded_key="sys://lib/ignoredir";
    $excludedir=$excludedir ?? array_merge(igk_get_env($excluded_key) ?? [], igk_default_ignore_lib());
    if(!$excludedir)
        $excludedir=array();
    $m = & $excludedir;
    $IGK_ENV[$excluded_key] = $m; 

    while(igk_count($dirs) > 0){
        $dir=array_shift($dirs);
        if(isset($excludedir[$dir]))
            continue;
        $hdir=@opendir($dir);
        if(!$hdir)
            continue;
        $file=IGK_STR_EMPTY;
        if (file_exists($gdir = $dir."/.global.php")){
            include_once($gdir);            
            if (isset(igk_environment()->{$excluded_key}[$dir])){
                closedir($hdir);
                continue;
            }
        }
        while($fdir=readdir($hdir)){
            $excludedir = igk_environment()->{$excluded_key};
            if(($fdir == ".") || ($fdir == "..") || isset($excludedir[$fdir]))
                continue;
            $file=$dir.DIRECTORY_SEPARATOR.$fdir;
            if(is_dir($file)){
                if(isset($excludedir[$file]) || ($fdir[0] == ".")){
                    $excludedir[$file]=1;
                    continue;
                }
                $dirs[]=$file;
            }
            else{
                if(strstr($file, ".".IGK_DEFAULT_VIEW_EXT) || !IGKString::EndWith($file, $ext))
                    continue;
                // + igk_dev_wln("include : ".$file);
                include_once($file);
                $files[]=igk_html_uri($file);
            }
        }
        closedir($hdir);
        if(count($dirs) > 1){
            sort($dirs);
        }
    }
    return $files;
}
///<summary></summary>
///<param name="uri"></param>
/**
* 
* @param mixed $uri
*/
function igk_loadr($uri){
    if(count($uri) == 0)
        return;
    $tab=array();
    $t=parse_url($uri);
    $q=$t["query"];
    parse_str($q, $tab);
    $_REQUEST=$tab;
}

///<summary> force loading class</summary>
function igk_load_class($classname){
    if (class_exists($classname))
        return 1;
    die(__("class not found [{0}]", $classname));
}

///<summary>shurtcut to igk_log_append</summary>
/**
* shurtcut to igk_log_append
*/
function igk_log($msg, $file, $tag=null){
    igk_log_append($file, $msg, $tag);
}
///<summary>append log to file</summary>
/**
* append log to file
*/
function igk_log_append($file, $msg, $tag=IGK_LOG_SYS){
    $s=date("d-m-Y H:i:s:");
    if ($query = igk_server()->REQUEST_URI)
        $s.=" ".$query." ";
    igk_set_env("igk_log_var_dump", "text");
    if($msg && is_array($msg) || is_object($msg)){
        $msg=(function() use ($msg){
            $s=(IGK_LF);
            foreach($msg as $k=>$v){
                $s .= $k. " : ";
                if(is_object($v) || is_array($v)){
                    $s .= igk_ob_get_func("igk_log_var_dump", array($v));
                }
                else{
                    $s .= $v;
                }
                $s .= IGK_LF;
            }
            return $s;
        })();
    }
    igk_set_env("igk_log_var_dump", null);
    if($tag){
        $s .= "[{$tag}] - ";
    }
    $s .= $msg."\r".IGK_LF;
    if(!file_exists($file)){
        igk_io_save_file_as_utf8_wbom($file, $s, true);
    }
    else{
        if ($r = @fopen($file, "a+")){
            fwrite($r, $s);
            fclose($r);
        }
    }
}
///<summary></summary>
/**
* 
*/
function igk_log_enabled(){
    return igk_const_defined("IGK_WRITE_LOG") || IGKServerInfo::IsLocal();
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_log_var_dump($tab, $lf=null){
    if($lf === null){
        if(!($lf=igk_get_env(IGK_LF_KEY))){
            $v_iscmd=igk_is_cmd();
            $lf=$v_iscmd ? IGK_CLF: "<br />";
        }
    }
    if(is_numeric($tab) || is_bool($tab)){
        igk_wl($tab); 
        igk_wl($lf); 
        return;
    }
    $textmode=(igk_is_cmd() || igk_get_env("igk_log_var_dump") == 'text');
    $cl=array("array"=>"#84a");
    $s="";
    $LF= $lf;
    $TAB=($textmode) ? '': "\t";
    $is_obj=is_object($tab);
    $is_cmd=$textmode;
    if($is_obj){
        $s .= 'Type: '.get_class($tab);
    }
    else if(is_array($tab)){
        $s .= 'Type: ';
        if(!$textmode){
            $s .= '<span style="color: '.$cl['array'].'">';
        }
        $s .= " IsArray: ";
        if(!$textmode)
            $s .= "</span>";
    }
    $msg=$s.$LF."(".$LF;
    if($tab){
        foreach($tab as $k=>$v){
            $msg .= "{$TAB}{$k}";
            if(is_object($v)){
                $msg .= ":Object";
            }
            else if(is_array($v)){
                $msg .= ":Array";
            }
            else
                $msg .= " => ".$v;
            $msg .= $LF;
        }
    }
    igk_wl($msg.")");
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_log_write($msg){
    if(!igk_log_enabled())
        return;
    $s=igk_getctrl(IGK_LOG_CTRL);
    if($s){
        $s->write($msg);
    }
}
///<summary></summary>
///<param name="tag"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $tag
* @param mixed $msg
*/
function igk_log_write_i($tag, $msg){
    if(!igk_log_enabled())
        return;
    $s=igk_getctrl(IGK_LOG_CTRL);
    if($s){
        $s->write_i($tag, $msg);
    }
    else{
        IGKLog::getInstance()->write_i($tag, $msg);
    }
}
///<summary></summary>
///<param name="tag"></param>
///<param name="data"></param>
/**
* 
* @param mixed $tag
* @param mixed $data
*/
function igk_log_write_i_data($tag, $data){
    if(!igk_log_enabled())
        return;
    $s=igk_getctrl(IGK_LOG_CTRL);
    if($s){
        $s->write_i_data($tag, $data);
    }
    else{
        IGKLog::getInstance()->write_i_data($tag, $data);
    }
}
/**
 * create mail options
 */
function igk_mail_option(){
    $opt = igk_xml_create_render_option();
    $opt->Context = "mail";
    return $opt;
}
///<summary></summary>
///<param name="msg"></param>
///<param name="title" default="admin mail"></param>
/**
* 
* @param mixed $msg
* @param mixed $title the default value is "admin mail"
*/
function igk_mail_admin_send($msg, $title="admin mail"){
    $app=igk_app();
    $mail=$app->Configs->mail_admin;
    $domain=$app->App->Configs->website_domain;
    igk_mail_sendmail($mail, "no-reply@".$domain, $title, $msg, null);
}
///<summary>return the system's @from mail </summary>
///<param name="ctrl">controller to get system mail</param>
/**
* return the system's @from mail
* @param mixed $ctrl controller to get system mail
*/
function igk_mail_from($ctrl=null){
    $m=null;
    if($ctrl && (!$m=$ctrl->Configs->mailSystem)){}
    if(!$m)
        $m=igk_mail_noreply_address();
    return $m;
}
///<summary>get mail no reply address</summary>
/**
* get mail no reply address
*/
function igk_mail_noreply_address(){
    return igk_sys_getconfig("mail_noreply", "no-reply@".igk_sys_getconfig("website_domain"));
}
///<summary>send mail to from</summary>
///<return>false if mail controller not found or sending mail failed</return>
/**
* send mail to from
*/
function igk_mail_sendmail($to, $from, $title, $message, $replyto=null, $attachement=null, $type="text/html"){
    $mail_ctrl=igk_getctrl(IGK_MAIL_CTRL);
    if($mail_ctrl){
        return $mail_ctrl->sendmail($from, $to, $title, $message, $replyto, $attachement, $type);
    }
    return false;
}
///<summary>utility function used to split string</summary>
/**
* utility function used to split string
*/
function igk_mail_split_str($s, $ln=75, $sep=IGK_LF){
    $n="";
    while(!empty($s)){
        if(!empty($n))
            $n .= $sep;
        $h=substr($s, 0, $ln);
        $s=substr($s, strlen($h));
        $n .= $h;
    }
    return $n;
}
///<summary>get mail style sheet</summary>
/**
* get mail style sheet
*/
function igk_mail_stylesheet(){
    $s=IGKHtmlItem::CreateWebNode("style");
    $s["type"]="text/css";
    $f=igk_io_currentrelativepath(igk_sys_getconfig("mail_style_sheet", igk_io_basepath(igk_io_dir(IGK_LIB_DIR."/Default/".IGK_STYLE_FOLDER."/mail.css"))));
    if(file_exists($f)){
        $v_s=igk_str_remove_lines(IGKIO::ReadAllText($f));
        $v_s=igk_css_treat(igk_app()->getDoc()->getTheme(), $v_s);
        $s->setContent($v_s);
    }
    else{
        igk_debug_wln(getcwd());
        igk_debug_wln("file not exists ".$f);
    }
    return $s->Render();
}
///retrive menu by name
/**
*/
function igk_menu_getmenu($name){
    return igk_getctrl(IGK_MENU_CTRL)->getMenu($name);
}
///get the root menu of this item
/**
*/
function igk_menu_getrootmenu($name){
    return igk_getctrl(IGK_MENU_CTRL)->getRootMenu($name);
}
///<summary></summary>
/**
* 
*/
function igk_menu_getroots(){
    return igk_getctrl(IGK_MENU_CTRL)->getRoots();
}
///<summary></summary>
///<param name="tab"></param>
///<param name="level" default="1"></param>
///<param name="auth"></param>
/**
* 
* @param mixed $tab
* @param mixed $level the default value is 1
* @param mixed $auth the default value is 0
*/
function igk_menu_option_i($tab, $level=1, $auth=0){
    $o=new StdClass();
    if(is_array($tab)){
        $o->key=igk_getv($tab, "key");
        $o->level=igk_getv($tab, "level");
    }
    else{
        $o->key=$tab;
        $o->level=$level;
    }
    $o->auth=$auth;
    return $o;
}
///<summary>return font code</summary>
///<summary>navigate to session redirection parameter</summary>
/**
* return font code
* navigate to session redirection parameter
*/
function igk_nav_session(){
    $s=igk_get_session(IGKSession::IGK_REDIRECTION_SESS_PARAM);
    if($s){
        ob_clean();
        igk_navto($s);
    }
    igk_navtocurrent();
}
///<summary></summary>
///<param name="uri"></param>
///<param name="headerStatus" default="null"></param>
/**
* 
* @param mixed $uri
* @param mixed $headerStatus the default value is null
*/
function igk_navto($uri, $headerStatus=null){ 
   if(($headerStatus !== null) && $headerStatus){
        igk_ilog("the status ".($headerStatus == null));
        igk_set_header($headerStatus);
    }
    $buri = igk_io_baseuri();
    if (strpos($uri , $buri) === 0){
        $uri = trim(substr($uri, strlen($buri)));
        //+ OVH ONLY Support 
        if (empty($uri))
            $uri = $buri; 
    } 
    igk_set_header(301);
    header("Location: ".$uri);  
    igk_exit();
}
///<summary></summary>
///<param name="ctrl" default="null"></param>
/**
* 
* @param mixed $ctrl the default value is null
*/
function igk_navto_home($ctrl=null){
    if($ctrl){
        $u=$ctrl->MainView == IGK_DEFAULT_VIEW ? null: $ctrl->MainView;
        igk_navto($ctrl->getAppUri($u));
    }
    else{
        igk_navto(igk_io_baseuri());
    }
}
///<summary></summary>
///<param name="failuri" default="null"></param>
/**
* 
* @param mixed $failuri the default value is null
*/
function igk_navto_referer($failuri=null){
    $u=igk_getv(explode("?", igk_server()->HTTP_REFERER), 0);
    if(empty($u)){
        if($failuri){
            $u = $failuri;
        }
        else {
            if(igk_sys_env_production()){
                $u = igk_io_baseuri();
            }else        
                igk_die("no referer");
        }

    }
    
    igk_navto($u);
}
///<summary></summary>
///<param name="path" default="null"></param>
/**
* 
* @param mixed $path the default value is null
*/
function igk_navtobase($path=null){
    if(defined('IGK_NO_WEB_REDIRECT'))
        return;
    $s=null;
    if($path == null){
        $s=igk_io_currentrelativepath(IGK_STR_EMPTY, "/");
    }
    else{
        $s=igk_io_currentrelativepath($path, "/");
    }
    if(empty($s)){
        if(igk_server_is_redirecting()){
            if(function_exists("igk_get_app_ctrl")){
                $ctrl=igk_get_app_ctrl();
                if($ctrl){
                    igk_navto($ctrl->getAppUri());
                }
            }
            igk_navto(igk_io_baseuri());
        }
        else{
            if(!empty($path) && strpos($path, "#") !== false){
                igk_navto("./#".igk_getv(explode("#", $path), 1));
            }
            else{
                igk_navto("./");
            }
        }
    }
    else{
        igk_navto(igk_html_uri($s));
    }
    igk_exit();
}
///<summary>navigate to basic request uri</summary>
/**
* navigate to basic request uri
*/
function igk_navtobaseuri(){
    $uri=igk_io_rootrequesturi();
    $uri=igk_getv(explode("?", $uri), 0);
    igk_navto($uri);
}
///<summary>navigate to current uri</summary>
/**
* navigate to current uri
*/
function igk_navtocurrent($uri=null){
    $u= "/".trim(igk_io_get_relative_currenturi(), "/").$uri;
    igk_navto($u);
}
///<summary>is network available</summary>
/**
* is network available
*/
function igk_network_available(){
    return 1;
}
///<summary> create and generate new id</summary>
/**
*  create and generate new id
*/
function igk_new_id(){
    return date('Hmi').md5(uniqid(rand()));
}
///<summary></summary>
/**
* 
*/
function igk_new_response(){
    return new IGKHtmlResponse();
}
///<summary>get node component uri</summary>
///<param name="$c" > node to get uri</param>
///<param name="u" > the local uri of the component</param>
/**
* get node component uri
* @param mixed $c  node to get uri
* @param mixed $u  the local uri of the component
*/
function igk_node_get_uri($c, $u){
    if(!$c)
        return null;
    return "?!/".$c->getParam("system://component/id")."/".$u;
}
///<summary>register node fonction to parameter list</summary>
/**
* register node fonction to parameter list
*/
function igk_node_reg_function($node, $name, $callback){
    $key=IGK_COMPONENT_REG_FUNC_KEY;
    $d=$node->getParam($key);
    if($d == null)
        $d=array();
    $d[$name]=$callback;
    $node->setParam($key, $d);
}
///<summary>get notification event</summary>
/**
* get notification event
*/
function igk_notification_event($name){
    $ctrl=igk_getctrl(IGK_NOTIFICATION_CTRL, false) ?? igk_die("no notification ctrl registrated");
    return $ctrl->getNotificationEvent($name);
}
///<summary> return a notification id for a controller</summary>
/**
*  return a notification id for a controller
*/
function igk_notification_id($ctrl, $n){
    return "sys://ctrl/".strtolower($ctrl->Name)."/{$n}";
}
///<summary>raise a notification event</summary>
/**
* raise a notification event
*/
function igk_notification_push_event($name, $o, $param=null){
    $args=array_slice(func_get_args(), 1);
    igk_hook($name, $args);
}
///<summary>registrate a notification event</summary>
/**
* registrate a notification event
*/
function igk_notification_reg_event($name, $callable){
    igk_reg_hook($name, $callable);
    return;
}
///<summary>free all callable from notification event</summary>
/**
* free all callable from notification event
*/
function igk_notification_reset($name){
    $ctrl=igk_getctrl(IGK_NOTIFICATION_CTRL, true);
    $ctrl->resetNotification($name);
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_notification_response($name){
    $v_notification=igk_notifyctrl()->getNotification($name, false);
    if($v_notification){
        $tb=array();
        $p=null;
        $s=igk_html_render_node($v_notification, $p, $tb);
        return $s;
    }
    return null;
}
///<summary>unregister notification event</summary>
/**
* unregister notification event
*/
function igk_notification_unreg_event($name, $callable){
    $name=$name ?? IGK_GLOBAL_EVENT;
    $ctrl=igk_getctrl(IGK_NOTIFICATION_CTRL, true);
    return $ctrl->unregisterNotification($name, $callable);
}
///<summary></summary>
///<param name="cond"></param>
///<param name="name" default="null"></param>
///<param name="goodmsg" default="null"></param>
///<param name="failemsg" default="null"></param>
/**
* 
* @param mixed $cond
* @param mixed $name the default value is null
* @param mixed $goodmsg the default value is null
* @param mixed $failemsg the default value is null
*/
function igk_notify_assert($cond, $name=null, $goodmsg=null, $failemsg=null){
    $c=igk_notifyctrl($name);
    if($cond){
        $c->addSuccess($goodmsg ?? "success");
    }
    else{
        $c->addError($failemsg ?? "failed");
    }
}
///<summary></summary>
///<param name="msg"></param>
///<param name="notifytag" default="null"></param>
/**
* 
* @param mixed $msg
* @param mixed $notifytag the default value is null
*/
function igk_notify_danger($msg, $notifytag=null){
    if(igk_is_ajx_demand()){
        igk_ajx_toast($msg, "igk-danger");
    }
    else{
        igk_notifyctrl($notifytag)->addError($msg);
    }
}
///<summary>shortcut to notification error</summary>
/**
* shortcut to notification error
*/
function igk_notify_error($msg, $target=null){
    if(igk_current_context() != IGKAppContext::running){
        return;}
    $ctrl=igk_notifyctrl($target);
    if($ctrl != null){
        $ctrl->addError($msg);
    }
    else{
        igk_wl("<div class=\"igk-notify-box igk-notify-box-error\" >".$msg."</div>");
    }
}
///<summary></summary>
///<param name="msg"></param>
///<param name="nofitytag" default="null"></param>
///<param name="type" default="gk-default"></param>
/**
* 
* @param mixed $msg
* @param mixed $nofitytag the default value is null
* @param mixed $type the default value is "gk-default"
*/
function igk_notify_post($msg, $notifytag=null, $type="igk-default"){
    if(igk_is_ajx_demand()){
        igk_ajx_toast($msg, $type);
    }
    else{
        igk_notifyctrl($notifytag)->TargetNode->addDiv()->setContent($msg)->setClass($type);
    }
}
///<summary> utility to notify reponse</summary>
/**
*  utility to notify reponse
*/
function igk_notify_reponse($msg, $type='default', $name=null){
    if(igk_is_ajx_demand()){
        igk_ajx_toast($msg, $type);
    }
    else{
        $name=$name ?? igk_getr("notifyhost");
        igk_notifyctrl($name)->add($msg, $type);
    }
}
///<summary>shortcut to set notify host</summary>
/**
* shortcut to set notify host
*/
function igk_notify_sethost($node, $notificationName="::global"){
    igk_notifyctrl()->setNotifyHost($node, $notificationName);
}
///<summary></summary>
///<param name="msg"></param>
///<param name="notifytag" default="null"></param>
/**
* 
* @param mixed $msg
* @param mixed $notifytag the default value is null
*/
function igk_notify_success($msg, $notifytag=null){
    igk_notify_post($msg, $notifytag, "igk-panel igk-success");
}
///<summary></summary>
/**
* 
*/
function igk_notifybox(){
    return igk_getctrl(IGK_SHARED_CONTENT_CTRL)->getEntity("notifybox");
}
///<summary>used to render directory an message for box notification </summary>
/**
* used to render directory an message for box notification
*/
function igk_notifybox_ajx($msg){
    igk_wln("<div class=\"igk-notify-box\" >".$msg."</div>");
}
///<summary>get notification controller</summary>
/**
* get notification controller
*/
function igk_notifyctrl($name=null){
    $ctrl=igk_getctrl(IGK_NOTIFICATION_CTRL, true);
    if($name == null){
        return $ctrl; 
    }
    $c = $ctrl->getNotification($name, true);
    return $c;
}
///<summary>clean ob</summary>
/**
* clean ob level
*/
function igk_ob_clean($level=0){
    while(ob_get_level() > $level){
        ob_end_clean();
    }
}
///<summary>get content</summary>
/**
* get content
*/
function igk_ob_get($d){
    IGKOb::Start();
    igk_wl($d);
    $o=IGKOb::Content();
    IGKOb::Clear();
    return $o;
}
///<summary>used to call a ajx function to render content offscreen</summary>
/**
* used to call a ajx function to render content offscreen
*/
function igk_ob_get_func($callback, $args=[]){
    if(!empty($args) && !is_array($args))
        $args=[$args];
    IGKOb::Start();
    call_user_func_array($callback, $args);
    $c=IGKOb::Content();
    IGKOb::Clear();
    return $c;
}
///<summary>append data to current object</summary>
/**
* append data to current object
*/
function igk_obj_append(& $obj, $data){
    foreach($data as $k=>$v){
        $obj->$k=$v;
    }
    return $obj;
}
///<summary>used to bind request data to object</summary>
/**
* used to bind request data to object
*/
function igk_obj_binddata($obj, $data){
    if(is_object($data)){
        foreach($obj as $k=>$v){
            $obj->$k=igk_getv($data, $k, $v);
        }
    }
    return $obj;
}
///<summary>invoke a function of a StdClass</summary>
/**
* invoke a function of a StdClass
*/
function igk_obj_call($obj, $callable, $params=null){
    $g=isset($obj->$callable) ? $obj->$callable: null;
    if(igk_is_callable($g)){
        if($params)
            return call_user_func_array($g, $params);
        return $g();
    }
    return null;
}
///<summary> shortcut to IGKOwnViewCtrl::Contains </summary>
/**
*  shortcut to IGKOwnViewCtrl::Contains
*/
function igk_own_view_ctrl($ctrl){
    return IGKOwnViewCtrl::Contains($ctrl);
}
///<summary> return an array of controller that possessed this rendering</summary>
/**
*  return an array of controller that possessed this rendering
*/
function igk_own_view_list(){
    return IGKOwnViewCtrl::GetList();
}
///<summary>transform page-method-view translations name</page>
/**
* transform page-method-view translations name
*/
function igk_page($n){
    static $page_list=null;
    if($page_list == null){
        $page_list=array("films"=>"movies");
    }
    if(!($c=igk_getv($page_list, $n, null))){
        $c=$n;
    }
    return $c;
}
///<summary></summary>
///<param name="num"></param>
/**
* 
* @param mixed $num
*/
function igk_parse_num($num){
    if(is_numeric($num)){
        if($num == 0)
            return "0";
        return trim($num).IGK_STR_EMPTY;
    }
    return "0";
}
///<summary></summary>
///<param name="bool"></param>
/**
* 
* @param mixed $bool
*/
function igk_parsebool($bool){
    if(is_bool($bool))
        return ($bool) ? "true": "false";
    return igk_parsebool(igk_getbool($bool));
}
///<summary> parse bool language expression</summary>
/**
*  parse bool language expression
*/
function igk_parsebools($b){
    return __("V.".igk_parsebool($b));
}
///<summary>used to parse string value to compatible xml value.</summary>
/**
* used to parse string value to compatible xml value.
*/
function igk_parsexmlvalue($value, $isvalue=false, $isandroidres=false){
    $value=preg_replace_callback("/(?<value>('|([&]((quot);)*)))/i", function($tmatch) use ($isvalue, $isandroidres){
        switch($tmatch["value"]){
            case "&":
            return "&amp;";
            case "&quot;":
            return "\"";
            case "'":
            if($isandroidres)
                return "\\'";
            break;
        }
        return $tmatch[0];
    }
    , $value);;
    return $value;
}
///<summary>retrieve matches</summary>
///<param name="pattern"></param>
///<param name="uri">uri to check</param>
///<param name="keys">keys to check</param>
/**
* retrieve matches
* @param mixed $pattern
* @param mixed $uri uri to check
* @param mixed $keys keys to check
*/
function igk_pattern_get_matches($pattern, $uri, $keys){
    $c=preg_match_all($pattern, $uri, $tab);
    $t=array();
    if(($c > 0) && ($keys)){
        foreach($keys as  $v){
            if($v == "query"){
                $t[$v]=$tab[$v][0];
                continue;
            }
            $s=$tab[$v][0];
            if(strstr($s, "/"))
                $s=explode("/", $s);
            if(!isset($t[$v]))
                $t[$v]=$s;
            else{
                if(is_array($t[$v]))
                    $t[$v][]=$s;
                else{
                    $t[$v]=array($t[$v], $s);
                }
            }
        }
    }
    return $t;
}
///<summary>get pattern match from uri key regex get from action in IGK_ACTION_CTRL</summary>
///<param name="KeyPattern">The pattern key </param>
///<param name="BaseUri">the base uri</param>
///<return>Return the pattern object</return>
/**
* get pattern match from uri key regex get from action in IGK_ACTION_CTRL
* @param mixed $keyPattern The pattern key
* @param mixed $baseUri the base uri
*/
function igk_pattern_get_uri_from_key($k, $buri=null){
    $buri=igk_str_rm_last($buri ? $buri: igk_io_baseuri(), '/');
    while(preg_match("/^\^/i", $k)){
        $k=substr($k, 1);
    }
    $e=IGK_REG_ACTION_METH;
    while(igk_str_endwith($k, $e)){
        $k=substr($k, 0, strlen($k) - strlen($e));
    }
    while(igk_str_endwith($k, "$")){
        $k=substr($k, 0, strlen($k)-1);
        break;
    }
    $k=preg_replace_callback("/\([^\)]+\)(\?)?/i", function($m){
        return "";
    }
    , $k);
    return $buri.$k;
}
///<summary></summary>
///<param name="s"></param>
/**
* 
* @param mixed $s
*/
function igk_pattern_matcher_get_pattern($s){

    $s=preg_replace_callback("#:(?P<name>([a-z0-9]+))\+?#i", "igk_pattern_matcher_matchcallback", $s);
    $s=preg_replace_callback("/\\$\$/i", function(){
        return "";
    }
    , $s);
    return "/".str_replace("/", "\/", $s)."$/i";
}
///<summary></summary>
///<param name="m"></param>
/**
* 
* @param mixed $m
*/
function igk_pattern_matcher_matchcallback($m){
    $n=$m["name"];
    switch(strtolower($n)){
        case "options":
        $tm="(?P<".$n.">([^;]+=[^;]+;?)+)";
        break;
        case "query":
        $tm="(?P<".$n.">([^;]+;?)+)";
        break;
        case "path":
        if(substr($m[0], -1) == "+"){
            $tm="(?P<".$n.">([^/;\?]+/?)+)";
        }
        else{
            $tm="(?P<".$n.">[^/;\?]+)";
        }
        break;
        case "function":
        if(substr($m[0], -1) == "+"){
            $tm="(?P<".$n.">([^/;]+/?)+)";
        }
        else{
            $tm="(?P<".$n.">[^/;]+)";
        }
        break;
        case "lang":
        $lg=igk_get_env("sys://availlang", function(){
            return R::GetSupportLangRegex();
        });
        if(substr($m[0], -1) == "+"){
            $tm="(?P<".$n.">(".$lg."/?))";
        }
        else{
            $tm="(?P<".$n.">".$lg.")";
        }
        break;default:
        if(substr($m[0], -1) == "+"){
            $tm="(?P<".$n.">([^/;]+/?)+)";
        }
        else{
            $tm="(?P<".$n.">[^/;]+)";
        }
        break;
    }
    return $tm;
}
///<summary>Extract view argument from pattern</summary>
///<param name="ctrl"></param>
///<param name="p"></param>
///<param name="globalregister"></param>
/**
* Extract view argument from pattern
* @param mixed $ctrl
* @param mixed $p
* @param mixed $globalregister the default value is 0
*/
function igk_pattern_view_extract($ctrl, $p, $globalregister=0){
     if(!$p){
        return array();
    }
    $c=igk_page(igk_getv($p, "function"));
    $param=igk_getv($p, "params");
 
    $query_options=igk_getv($p, "options");
    if(is_array($c)){
        igk_die(__("Function is array list. Not Allowed"));
    }


    $handle_file = 0;
    if($c && !method_exists($ctrl, $c)){
        $viewdir = $ctrl->getViewDir();
        $dir= $viewdir."/".$c;
        if(is_dir($dir)){
            if(is_string($param)){
                $param=!empty($param) ? array($param): array();
            }
            $ext_regex = "/\.".IGK_VIEW_FILE_EXT_REGEX."$/";
            $file = igk_io_dir($dir."/".implode("/", $param));


 

            //igk_wln("init is dir", $param, $file); 
            if (!file_exists($file)){
                //resolv util default found
                // $file = basename($file);
                $tf = $file;
                $cparam = [];
                $found = 0;
                $exts = explode("|", IGK_VIEW_FILE_EXT_REGEX);
                
                while (!$found && $param && count($param)>0){
                    if ( (preg_match($ext_regex, $tf) && file_exists($file = $tf)) 
                    
                    ){
                        $found = true; 
                        continue;
                    } 
                    foreach($exts as $ex){
                        if (file_exists($file = $tf.".".$ex)){
                            $found = true; 
                            if (!empty($cb = array_pop($param))){
                                //array_unshift($cparam, $cb);
                                $c.="/".$cb.".".$ex;
                            } 
                            break 2;
                        }
                    }                  
                    if (is_dir($tf) &&                                                     
                    (file_exists($file = $tf."/".IGK_DEFAULT_VIEW_FILE))
                    ){ 
                        $found = true; 
                        continue;
                    }
                    if (!empty($cb = array_pop($param))){
                        array_unshift($cparam, $cb);
                    }
                    $tf = $dir."/".implode("/", $param); 
                    
                }

                if ($found && $param){
                    $c .= "/".implode("/", $param);
                } 
                $param = $cparam;
                $handle_file = $found; 
                
            } else{
				if (is_dir($file)){
					$cfile = rtrim($file, "/")."/".IGK_DEFAULT_VIEW_FILE;
					if (file_exists($cfile)){
						$param = []; 
					}
				}
                if (preg_match($ext_regex, $file)){
                    $c = igk_html_uri(substr($file, strlen($viewdir)+1));
                }
                $handle_file = 1;
            
               
            } 
        }
    }
    if(is_string($query_options) && (strlen($query_options) > 0)){
        $query_options=igk_get_query_options($query_options);
    }
    $t=array(
            "c"=>$c,
            "param"=>$param,
            "query_options"=>$query_options,
            "handle_file"=>$handle_file
        );
    if($globalregister){
        igk_set_env("sys://io/query_args", $t);
    }
    return $t;
}
///<summary>peek the data on environement variable</summary>
/**
* peek the data on environement variable
*/
function igk_peek_env($n){
    $IGK_ENV=igk_environment();
    if($n == "sys://env/actions"){
        igk_die(__FUNCTION__);
    }
    $tab=igk_getv($IGK_ENV, $n);
    if(is_array($tab) && (($c=igk_count($tab)) > 0)){
        $r=$tab[$c-1];
        return $r;
    }
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_phar_available(){
    if(in_array('phar', stream_get_wrappers()) && class_exists('Phar', false)){
        return !empty(Phar::running());
    }
    return 0;
}
///<summary></summary>
/**
* 
*/
function igk_phar_running(){
    return igk_phar_available() && strstr(IGK_LIB_DIR, Phar::running());
}
///<summary></summary>
///<param name="file"></param>
///<param name="content"></param>
///<param name="error" ref="true"></param>
///<param name="code" ref="true"></param>
/**
* 
* @param mixed $file
* @param mixed $content
* @param mixed * $error
* @param mixed * $code
*/
function igk_php_check_and_savescript($file, $content, & $error, & $code){
    $f=$file;
    $v_c=$content;
    $v_old=null;
    if(file_exists($f)){
        $v_old=IGKIO::ReadAllText($f);
    }
    igk_io_save_file_as_utf8($f, $v_c, true);
    $code=10;
    $error=array();
    $uri=igk_html_resolv_img_uri(igk_io_dir(IGK_LIB_DIR."/igk_checkfile.php"));
    $r=igk_curl_post_uri($uri, array("file"=>$f));
    if($r != 'ok'){
        igk_wln($error);
        unlink($f);
        igk_io_save_file_as_utf8($f, $v_old, true);
        return false;
    }
    return true;
}
///<summary></summary>
///<param name="txt"></param>
///<param name="exit" default="1"></param>
/**
* 
* @param mixed $txt
* @param mixed $exit the default value is 1
*/
function igk_plain_text($txt, $exit=1){
    header("Content-Type:text/plain");
    echo $txt;
    if($exit)
        igk_exit();
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_pop_article_chain(){
    $g=igk_get_env($key= "sys://article_chain");
    array_pop($g);
    igk_set_env($key, $g);
}
///<summary>pop data on  environment variable. use to restore state</summary>
/**
* pop data on environment variable. use to restore state
*/
function igk_pop_env($n){
    $IGK_ENV=igk_environment();
    $tab=igk_getv($IGK_ENV, $n);
    if(is_array($tab)){
        $r=array_pop($tab);
        $IGK_ENV[$n]=$tab;
        return $r;
    }
    return null;
}
///<summary></summary>
///<param name="name"></param>
///<param name="tab" ref="true"></param>
/**
* 
* @param mixed $name
* @param mixed * $tab
*/
function igk_pop_tab($name, & $tab){
    $c=igk_pop_env("sys://pushtab/{$name}");
    $tab=$c;
    return $c;
}
///<summary>invoke call filter menu for pre filter menu</summary>
/**
* invoke call filter menu for pre filter menu
*/
function igk_post_filter_menu($tab, $source, $tag=null){
    $itab=igk_get_env("sys://men/postfilter");
    $ctab=array_merge($tab);
    if($itab){
        if(igk_get_env("sys://men/postfilter/sort", 1)){
            usort($itab, function($a, $b){
                $l1=igk_getv($a, "level", 10);
                $l2=igk_getv($b, "level", 10);
                $r=0;
                if($l1 != $l2){
                    if($l1 < $l1){
                        $r=-1;
                    }
                    $r=1;
                }
                return $r;
            });
            igk_set_env("sys://men/postfilter/sort", null);
        }
        $args=array_merge(array(& $ctab), array_slice(func_get_args(), 1));
        foreach($itab as  $v){
            $callback=igk_getv($v, "callback");
            if($callback){
                call_user_func_array($callback, $args);
            }
        }
        $tab=$ctab;
    }
    return $tab;
}
///<summary></summary>
///<param name="extraheader"></param>
/**
* 
* @param mixed $extraheader
*/
function igk_post_header($extraheader){
    igk_set_env("sys://igk_post_uri/header", $extraheader);
}
///<summary></summary>
///<param name="msg"></param>
///<param name="iMessageHandler"></param>
///<param name="args" default="null"></param>
/**
* 
* @param mixed $msg
* @param mixed $iMessageHandler
* @param mixed $args the default value is null
*/
function igk_post_message($msg, $iMessageHandler, $args=null){
    $iMessageHandler->handleCmd($msg, $args);
}
///<summary>post data in uri script a return data. in balafon system</summary>
/**
* post data in uri script a return data. in balafon system
*/
function igk_post_uri($uri, $args=null, $content=IGK_APP_FORM_CONTENT, $samesession=true){
    if(igk_server_is_local()){
        igk_ilog("/!\\ obsolete : file_get_content not working well. you better invoke directly with a controller : igk_curl_post_uri instead: ".$uri);
        igk_die("failed to pos uri . ".$uri);
    }
    return "";
	
}
///<summary> get environment last error for last call to igk_post_uri</summary>
/**
*  get environment last error for last call to igk_post_uri
*/
function igk_post_uri_last_error(){
    return igk_get_env("igk_post_uri:/Error");
}
///<summary></summary>
///<param name="pattern"></param>
///<param name="value"></param>
///<param name="key"></param>
///<param name="index"></param>
/**
* 
* @param mixed $pattern
* @param mixed $value
* @param mixed $key
* @param mixed $index the default value is 0
*/
function igk_preg_match($pattern, $value, $key, $index=0){
    $tab=array();
    $c=preg_match_all($pattern, $value, $tab);
    if($c > 0){
        return igk_getv($tab[$key], $index);
    }
    return null;
}
function igk_prepare_components_storage(){
    return (object)array(
        "objs"=>array(),
        "ids"=>array(),
        "uris"=>array(),
        "srcs"=>array()
    );
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_print($msg){
    igk_wl($msg);
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_print_ln($msg){
    igk_wl($msg. IGK_LF);
}
///<summary></summary>
/**
* 
*/
function igk_print_stack_depth(){
    $callers=debug_backtrace();
    for($i=0; $i < count($callers); $i++){
        $f=igk_getv($callers[$i], "function");
        $fl=igk_getv($callers[$i], "file");
        $c=igk_getv($callers[$i], "class");
        echo "<div>";
        echo "<span>".$i."</span>";
        echo "<span style='color:#fd3333; text-align:right; width: 90px; display:inline-block;'>".igk_getv($callers[$i], "line").":</span><span>";
        echo $f."</span><span>";
        echo $c."</span><span>";
        echo $fl."</span>";
        echo "</div>";
    }
}
///<summary>push article in chain data</summary>
/**
* push article in chain - inclusion
*/
function igk_push_article_chain($f, $context=null){ 
    $key = "sys://article_chain"; 
    $ctx = $context;
    $b = igk_get_env($key);
    if (!$b || (count($b) == 0)){
        if (is_array($ctx->raw)){
            if (array_key_exists("raw", $ctx->raw)){
                $r = $ctx->raw["raw"];
                unset($ctx->raw["raw"]);
                $ctx->raw = array_merge((array)$ctx->raw, ["raw"=>$r]);
            }
        }  
    }
    igk_set_env_array($key, ["n"=>$f, "data"=>$ctx]);
}
///<summary>get current article chain data</summary>
/**
 * push article chain data
 */
function igk_get_article_chain(){
    $g = igk_get_env("sys://article_chain");
    if ( ($c = count($g)) >0){
        return $g[$c-1]; 
    }
    return null;
}
///<summary>push data on  environment variable. use to save state</summary>
/**
* push data on environment variable. use to save state
*/
function igk_push_env($n, $v){
    $IGK_ENV=igk_environment();
    if($v == null){
        return;}
    $tab=igk_getv($IGK_ENV, $n, function(){
        return array();
    });
    if(!is_array($tab)){
        igk_die("failed tab is not an array:".$n, __FUNCTION__);
    }
    array_push($tab, $v);
    $IGK_ENV[$n]=$tab;
}
///<summary></summary>
///<param name="name"></param>
///<param name="tab" ref="true"></param>
/**
* 
* @param mixed $name
* @param mixed * $tab
*/
function igk_push_tab($name, & $tab){
    igk_push_env("sys://pushtab/{$name}", $tab);
}
///<summary></summary>
/**
* 
*/
function igk_qr_confirm(){
    return (igk_getr("confirm", 0) == 1);
}
///<summary>used to restore request</summary>
/**
* used to restore request
*/
function igk_qr_restore(){
    $v=igk_get_env("sys://store/request");
    if($v && (igk_count($v) > 0)){
        igk_wln($v);
        igk_wln("op");
        $_REQUEST=array_pop($v);
    }
    return $_REQUEST;
}
///<summary>used to save request</summary>
/**
* used to save request
*/
function igk_qr_save($tab){
    $v=igk_get_env("sys://store/request", array());
    array_push($v, $_REQUEST);
    igk_set_env("sys://store/request", $v);
    $_REQUEST=$tab;
    return $v;
}
///<summary>get registrated display key</summary>
/**
* get registrated display key
*/
function igk_r_getdisplay($key, $param=null){
    return __($key, $param)->getValue();
}
///<summary>raise environment event. </summary>
/**
* raise environment event.
*/
function igk_raise_event($evtn, $params=array()){
    $g=igk_get_env("sys://environment/events", array());
    $b=igk_getv($g, $evtn);
    if($b){
        if($b->sortrequire)
            sort($b->callbacks);
        foreach($b->callbacks as  $v){
            if(call_user_func_array($v, $params)){
                break;
            }
        }
    }
}
///<summary></summary>
///<param name="obj"></param>
///<param name="n"></param>
///<param name="args"></param>
/**
* 
* @param mixed $obj
* @param mixed $n
* @param mixed $args
*/
function igk_raise_globalcallback($obj, $n, $args){
    return $obj->onInvoke($n, igk_getv($args, 0), array_slice($args, 1));
}
///<summary></summary>
/**
* 
*/
function igk_raise_initenv_callback(){
    $c=igk_get_env("sys://init_env/callback");
    if($c){
        foreach($c as $k){
            $k();
        }
    }
    igk_set_env("sys://init_env/callback", null);
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_reflection_class_exists($name){
    if(!class_exists($name, false))
        igk_die("class [{$name}] doesn't exists");
    return $name;
}
function igk_relection_get_properties_keys($class, $filter=ReflectionProperty::IS_PUBLIC){
    $properties = [];
    array_map( function($i) use(& $properties){
        $properties[strtolower($i->getName())] = $i;
    }, (new ReflectionClass($class))->getProperties($filter));
    return $properties;
}
///<summary>get if object or classname is type of $name or extends it</summary>
/**
* get if object or classname is type of $name or extends it
*/
function igk_reflection_class_extends($objOrClassName, $name){
    igk_reflection_class_exists($name);
    if($objOrClassName){
        $n=$objOrClassName;
        if(is_object($objOrClassName)){
            $n=get_class($objOrClassName);
        }
        if((strtolower($n) == strtolower($name)) || is_subclass_of($n, $name))
            return true;
    }
    return false;
}
///<summary></summary>
///<param name="objOrClassName"></param>
///<param name="name"></param>
/**
* 
* @param mixed $objOrClassName
* @param mixed $name
*/
function igk_reflection_class_implement($objOrClassName, $name){
    igk_reflection_interface_exists($name);
    if($objOrClassName){
        $n=$objOrClassName;
        if(is_object($objOrClassName)){
            $n=get_class($objOrClassName);
        }
        if(!is_string($n) && !is_object($n)){
            igk_ilog($n, __FUNCTION__);
            igk_die(__FUNCTION__.", can't get reflection class implementation");
        }
        $tab=class_implements($n);
        if(isset($tab[$name]))
            return true;
    }
    return false;
}
///<summary>check if class name is an abstract class</summary>
/**
* check if class name is an abstract class
*/
function igk_reflection_class_isabstract($name){
    if(class_exists($name)){
        $v_rc=new ReflectionClass($name);
        return $v_rc->isAbstract();
    }
    return -1;
}
///<summary>get reflection function arguments</summary>
/**
* get reflection function arguments
*/
function igk_reflection_func_get_args($args){
    $callers=debug_backtrace();
    $f=igk_getv($callers[1], "function");
    $c=igk_getv($callers[1], "class");
    $tc=array();
    if($c){
        $m=new ReflectionMethod($c, $f);
        $i=0;
        foreach($m->getParameters() as $p){
            $tc[$p->name]=igk_getv($args, $i);
            $i++;
        }
    }
    return $tc;
}
///<summary></summary>
///<param name="cl"></param>
/**
* 
* @param mixed $cl
*/
function igk_reflection_get_constants($cl){
    $r=new ReflectionClass($cl);
    return $r->getConstants();
}
///<summary>get reflexion properties. ignore dynamic data value</summary>
/**
* get reflexion properties. ignore dynamic data value
*/
function igk_reflection_get_member($cl, $exclude_empty=1){
    $c=get_class($cl);
    $t=array();
    $pc=$c;
    $exclude_func=function($prop, $cl, & $value=null) use ($exclude_empty){
        if($exclude_empty){
            $prop->setAccessible(true);
            $obj=$prop->getValue($cl);
            $prop->setAccessible(false);
            if(($obj == null) || empty($obj) || (is_object($obj) && method_exists($obj, "IsEmpty") && $obj->IsEmpty())){
                return true;
            }
            $value=$obj;
        }
        return false;
    };
    while($pc){
        $r=new ReflectionClass($pc);
        $tab=$r->getProperties(ReflectionProperty::IS_PRIVATE);
        foreach($tab as $v){
            $value=null;
            $prop=new ReflectionProperty($pc, $v->name);
            if($prop->isStatic() || $exclude_func($prop, $cl, $value))
                continue;
            $t["\0".$v->class."\0".$v->name]=$v->name;
        }
        $tab=$r->getProperties(ReflectionProperty::IS_PUBLIC);
        foreach($tab as  $v){
            $value=null;
            $prop=new ReflectionProperty($pc, $v->name);
            if($prop->isStatic() || ($v->name[0] == "@") || $exclude_func($prop, $cl, $value))
                continue;
            $t[$v->name]=$v->name;
        }
        $r=$r->getParentClass();
        if($r)
            $pc=$r->getName();
        else
            $pc=null;
    }
    return $t;
}
///<summary></summary>
///<param name="obj"></param>
/**
* 
* @param mixed $obj
*/
function igk_reflection_getclass_var($obj){
    if(is_object($obj))
        return get_class_vars(get_class($obj));
    if(is_string($obj)){
        if(class_exists($obj)){
            return get_class_vars($obj);
        }
    }
    return null;
}
///<summary></summary>
///<param name="class"></param>
/**
* 
* @param mixed $class
*/
function igk_reflection_getdeclared_filename($class){
    $h=new ReflectionClass($class);
    return $h->getFileName();
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_reflection_interface_exists($name){
    if(!interface_exists($name))
        igk_die("class $name doesn't exists");
    return $name;
}
///<summary>register file that will be used as script</summary>
/**
* register file that will be used as script
*/
function igk_reg_action_script($name, $callback){
    igk_set_env("sys://actions/scripts/{$name}", $callback);
}
///<summary></summary>
///<param name="filename"></param>
///<param name="tab"></param>
/**
* 
* @param mixed $filename
* @param mixed $tab
*/
function igk_reg_class_file($filename, $tab){
    return igk_reg_file("sys://reflection/class", $filename, $tab);
}
///<summary></summary>
///<param name="classname"></param>
///<param name="v"></param>
/**
* 
* @param mixed $classname
* @param mixed $v
*/
function igk_reg_class_instance_key($classname, $v){
    if(class_exists($classname, false)){
        igk_set_env(strtolower("sys://instance/key/".$classname), $v);
    }
    else
        igk_die(__("Failed to register class instance key"));
}
///<summary>register command line</summary>
/**
* register command line
*/
function igk_reg_cmd_args($name, $desc, $callback){
    $t=igk_get_env("sys://cmd/args", array());
    $t[$name]=(object)["callback"=>$callback, "desc"=>$desc, "category"=>"system"];
    igk_set_env("sys://cmd/args", $t);
}
///<summary></summary>
///<param name="name"></param>
///<param name="args"></param>
/**
* 
* @param mixed $name
* @param mixed $args
*/
function igk_reg_cmd_command($name, $args){
    if(is_string($args)){
        if(function_exists($args) && is_callable($args)){
            igk_set_env_keys("sys://cmd/commands", $name, $args);
            return 1;
        }
        else if(class_exists($args, true)){
            igk_set_env_keys("sys://cmd/commands", $name, new $args());
            return 1;
        }
    }
    else if(is_callable($args)){
        igk_set_env_keys("sys://cmd/commands", $name, $args);
    }
    return 0;
}
///<summary>register component</summary>
///<param name="id">identifier of the component</param>
///<param name="s" type="object" >the component </param>
/**
* register component
* @param mixed $id identifier of the component
* @param mixed $objects the component
*/
function igk_reg_component($id, $s){
    $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL);
    $ctrl->setParam("sys://globalcomponent/{$id}", $s);
} 
 
function igk_reg_component_ajx($n, $attr, $callback){
    $n->setCallback($attr, $callback);
    $n["onclick"]="javascript:ns_igk.stop_event(event); ns_igk.ajx.post('".igk_get_component_uri($n, "$attr")."');  return false;";
    return $n;
}
///<summary>only to register a autodection package</summary>
/**
* only to register a autodection package
*/
function igk_reg_component_package($packagename=null, $callback=null){
    $key="sys://components/packages";
    $t=igk_get_env($key) ?? array();
    if(empty($packagename))
        return $t;
    $k=strtolower($packagename);
    if(isset($t[$k]))
        igk_die("[{$packagename}]"." component package already register.");
    $t[$k]=array("name"=>$packagename, "callback"=>$callback, "init"=>0);
    $m=& $t;
    igk_set_env($key, $m);
}
///<summary>shortcut to register global system controller</summary>
/**
* shortcut to register global system controller
*/
function igk_reg_ctrl($name, $ctrl){
    if(IGKApp::IsInit() && $name && $ctrl){
        igk_app()->getControllerManager()->register($name, $ctrl);
        return 1;
    }
    return 0;
}
///<summary></summary>
///<param name="n"></param>
///<param name="closure"></param>
/**
* 
* @param mixed $n
* @param mixed $closure
*/
function igk_reg_env_closure($n, $closure){
    if(!is_object($closure) || get_class($closure) != "Closure")
        return 0;
    $key=IGK_ENV_CALLBACK_KEYS;
    $tab=igk_get_env($key, array());
    $tab[$n]=$closure;
    igk_set_env($key, $tab);
    return 1;
}
///<summary>register environment event. will not be serialize because store on environment variable.</summary>
/**
* register environment event. will not be serialize because store on environment variable.
*/
function igk_reg_event($evtn, $callback){
    $key="sys://environment/events";
    $g=igk_get_env($key, array());
    $s=igk_getv($g, $evtn);
    if($s == null){
        $s=(object)array();
        $s->callbacks=array();
    }
    $s->sortrequire=1;
    array_push($s->callbacks, $callback);
    $g[$evtn]=$s;
    igk_set_env($key, $g);
}
///<summary></summary>
///<param name="key"></param>
///<param name="file"></param>
///<param name="tab"></param>
/**
* 
* @param mixed $key
* @param mixed $file
* @param mixed $tab
*/
function igk_reg_file($key, $file, $tab){
    $fkey="sys://files";
    $tkey="sys://functable";
    $g=igk_get_env($key, function(){
        return array("sys://files"=>null);
    });
    if(!isset($g[$fkey][$file])){
        $idx=igk_count($g[$fkey]);
        $g[$fkey][]=$file;
        $gb=igk_getv($g, $tkey);
        if(is_array($gb))
            $g[$tkey]=array_merge($gb, igk_array_createkeyarray($tab, $idx));
        else
            $g[$tkey]=igk_array_createkeyarray($tab, $idx);
        igk_set_env($key, $g);
        return $idx;
    }
    return -1;
}
///<summary></summary>
///<param name="name"></param>
///<param name="class"></param>
/**
* 
* @param mixed $name
* @param mixed $class
*/
function igk_reg_form_builder_engine($name, $class){
    $k="sys://form/builderengines";
    $tab=igk_get_env($k) ?? [];
    $tab[$name]=$class;
    igk_set_env($k, $tab);
    return $tab;
}
///Reflexion utility function to trace eval error callback.
/**
*/
function igk_reg_func_files($file, $tab){
    return igk_reg_file("sys://reflection/funcs", $file, $tab);
}
///<summary>register global balafon settings</summary>
/**
* register global balafon settings
*/
function igk_reg_global_setting($n, $d, $desc=null){
    $k=IGK_ENV_GLOBAL_SETTING;
    $tab=igk_get_env($k, array());
    if(isset($tab[$n]))
        return 0;
    $obj=igk_createobj();
    $obj->clName=$n;
    $obj->clData=$d;
    $obj->clDesc=$desc;
    $tab[$n]=$obj;
    igk_set_env($k, $tab);
    if(igk_current_context() != IGKAppContext::initializing){
        if(igk_app()->IsInit() && !isset(igk_app()->Configs->{$n})){
            igk_app()->Configs->{$n}=$d;
        }
    }
    return 1;
}
///<summary></summary>
///<param name="s"></param>
/**
* 
* @param mixed $s
*/
function igk_reg_handle_file_request($s){
    if(empty($s) || is_object($s))
        return;
    $t=igk_get_env("sys://handle/file_request") ?? array();
    $t[$s]=$s;
    igk_set_env("sys://handle/file_request", $t);
}
///<summary></summary>
///<param name="name"></param>
///<param name="callback"></param>
///<param name="priority" default="10"></param>
/**
* 
* @param mixed $name
* @param mixed $callback
* @param mixed $priority the default value is 10
*/
function igk_reg_hook($name, $callback, $priority=10){
    $hooks=igk_environment()->{"sys://hooks"};
    if(!$hooks){
        $hooks=array();
    }
    if(!isset($hooks[$name])){
        $hooks[$name]=(object)array("list"=>array(), "changed"=>1);
    }
    $hooks[$name]->list[]=(object)array("priority"=>$priority, "callback"=>$callback);
    igk_environment()->{"sys://hooks"}=$hooks;
}
///<summary> use to register html custom component</summary>
/**
*  use to register html custom component
*/
function igk_reg_html_component($name, $callback, $ns="igk"){
    $package=igk_reg_component_package();
    if(!isset($package[$ns]["components"])){
        $package[$ns]["components"]=[];
    }
    $name=strtolower(str_replace("-", "_", trim($name)));
    if($callback === null){
        unset($package[$ns]["components"][$name]);
    }
    else
        $package[$ns]["components"][$name]=$callback;
    igk_set_env("sys://components/packages", $package);
}
///<summary></summary>
///<param name="callback"></param>
/**
* 
* @param mixed $callback
*/
function igk_reg_initenv_callback($callback){
    $c=igk_get_env("sys://init_env/callback", array());
    $c[]=$callback;
    igk_set_env("sys://init_env/callback", $c);
}
///<summary></summary>
///<param name="n" default="null"></param>
///<param name="uri" default="null"></param>
///<return refout="true"></return>
/**
* 
* @param mixed $n the default value is null
* @param mixed $uri the default value is null
* @return *
*/
function & igk_reg_ns($n=null, $uri=null){
    static $nsmanager;
    if(!isset($nsmanager)){
        $nsmanager=new StdClass;
        $nsmanager->ns=array();
    }
    if($n != null)
        $nsmanager->ns[$n]=$uri;
    return $nsmanager;
}
///<summary>register package</summary>
/**
* register package
*/
function igk_reg_package($name, $callback){
    igk_die('not implemenent '.__FUNCTION__);
    $t=igk_get_env("sys://packages") ?? [];
    $t[$name]=$callback;
    igk_set_env("sys://packages", $t);
}
///<summary></summary>
///<param name="ext"></param>
///<param name="p"></param>
/**
* 
* @param mixed $ext
* @param mixed $p
*/
function igk_reg_path_exec($ext, $p){
    $t=igk_get_env("sys://env//path_exec");
    if($t == null)
        $t=array();
    $t[$ext]=$p;
    igk_set_env("sys://env//path_exec", $t);
}
///<summary>Register string pipe expression</summary>
/**
* Register string pipe expression
*/
function igk_reg_pipe($mixed, $callback=null){
    $k="sys://localizedpipe";
    $tab=igk_get_env($k, function(){
        return [
        "mailto"=>function($v){
            $s="mailto:".$v;
            return $s;
        },
		"capitalize"=>function($v){
                    return igk_str_capitalize($v);
                }
        , "dateformat"=>function($v, $format=null){
            $t = strtotime($v);
            $base_fmt = igk_app()->Configs->getConfig("dataformat", "d/m/Y");
            if ($format===null){
                $format = $base_fmt;
            } else {
                list($format) = [igk_getv($format,"fmt", $base_fmt)];
            } 
            return date($format, $t);
        },
 
        "trim"=>function($v){
                    return trim($v);
                }
        , "uppercase"=>function($v){
                    return strtoupper($v);
                }
        , "lowercase"=>function($v){
                    return strtolower($v);
                }
        , "utf8"=>function($v){
                    return utf8_decode($v);
                }
        , "lang"=>function($v){
                    return __($v);
                }
        , "json"=>function($v){
                    return json_encode($v);
                }
        , "date"=>function($v, $options=null){
                    $v=strtotime($v);
                    if($options){
                        $fmt=igk_getv($options, "fmt");
                        $v=date($fmt, $v);
                    }
                    return $v;
                }
        , "mysqldate"=>function($v){
                    $v=strtotime($v);
                    if($v){
                        return date(IGK_MYSQL_DATETIME_FORMAT, $v);
                    }
                    return "";
                }
        , "size"=>function($v){
                    if(is_numeric($v)){
                        $v=IGKIO::GetFileSize($v);
                    }
                    return $v;
                }
		, "currency"=>function($v, $options=null){ 
			return sprintf('%.2f', $v)." EUR";
		}
        ];
    });
    if($mixed){
        if(is_array($mixed))
            $tab=array_merge($tab, $mixed);
        else if(is_string($mixed) && func_num_args() > 1){
            $tab=array_merge($tab, [$mixed=>$callback]);
        }
        igk_set_env($k, $tab);
    }
    return $tab;
}
///<summary>register global tempary event. only one callback </summary>
/**
* register global tempary event. only one callback
*/
function igk_reg_session_event($name, $callback){
    igk_debug_wln(__FUNCTION__. " ".$name);
    $ctx=igk_current_context();
    $e=strpos("running|starting", $ctx) !== false;
    $key="sys://global_events";
    $primary=igk_get_env($key, array());
    $t=null;
    switch($ctx){
        case IGKAppContext::initializing:
        $primary[$name][]=$callback;
        igk_set_env($key, $primary);
        return 1;
    }
    if($e){
        $t=igk_app()->Session->Events ?? array();
    }
    else{
        igk_die("context not supported ".$ctx);
    }
    if(!isset($t[$name])){
        $t[$name]=array();
    }
    $t[$name][]=$callback;
    igk_app()->Session->Events=$t;
    return 3;
}
///<summary>shortcut to register subdomain</summary>
/**
* shortcut to register subdomain
*/
function igk_reg_subdomain($n, $ctrl, $row=null){
    return IGKSubDomainManager::getInstance()->reg_domain($n, $ctrl, $row);
}
///<summary>register template binding attributes</summary>
///<param name="$name">comma separated string of identifier for binding attribute</param>
///<param name="$callback">the callback</summary>
/**
* register template binding attributes
* @param $name mixed separated string of identifier for binding attribute
* @param $callback mixed callback
*/
function igk_reg_template_bindingattributes($name, $callback){


    $key="sys://template/bindingProperties";
    if(!($g=igk_get_env($key))){
        $g=array();
    }
    foreach(array_filter(explode(",", strtolower($name))) as $k){
        $g[trim($k)]=$callback;
    }
    igk_set_env($key, $g);
}
///<summary>register widget</summary>
/**
* register widget
*/
function igk_reg_widget($name, $callback=null, $priority=10){
    $g=igk_get_env(IGK_ENV_WIDGETS_KEY);
    if(!is_array($g)){
        $g=array();
    }
    $g[$name]=(object)array("name"=>strtolower($name), "callback"=>$callback);
    igk_set_env(IGK_ENV_WIDGETS_KEY, $g);
}
///<summary>register a widget zone</summary>
/**
* register a widget zone
*/
function igk_reg_widget_zone($name, $args){}
///<summary>get regex from pattern</summary>
/**
* get regex from pattern
*/
function igk_regex_get($pattern, $key, $value, $index=0){
    $t=array();
    $c=preg_match_all($pattern, $value, $t);
    if($c > 0){
        if($key == null){
            return $t;
        }
        if($c == 1){
            return $t[$key][0];
        }
        else{
            return $t[$index][$key];
        }
    }
    return null;
}




///<summary></summary>
///<param name="func"></param>
///<param name="priority" default="10"></param>
/**
* 
* @param callable $func
* @param mixed $priority the default value is 10
*/
function igk_register_autoload_class(callable $func= null, $priority=10){
 
    static $autoloading=null;
    static $sort=0;
    static $reg_func = 0;
    $k="sys://autoload/func";
    if (is_callable($func)){
        $c=igk_get_env($k);
        if(!$c){
            $c=array();
        }
        $c[]=array("c"=>$func, "p"=>$priority);
        igk_set_env($k, $c);
        $reg_func = 1;
    }
    if($autoloading === null){
        spl_autoload_register(function($n) use ($k, & $sort, & $reg_func){
            //igk_debug_wln("try oau load ".$n, $reg_func!=null);
            if ($reg_func){
                $b=igk_get_env($k);
                if ($b){
                    if($sort){
                        usort($b, function($a, $b){
                            return strnatcmp($a["p"], $b["p"]);
                        });
                    }
                    $args = func_get_args();
                    foreach($b as $c){
                        $fc=$c["c"];
                        if(call_user_func_array($fc, $args))
                            return 1;
                    }
                }
            }
            $f = igk_html_uri($n);
            if (strpos($f, "IGK/")===0){
                $f = substr($f, 4); 
            } 
            if(file_exists($f=igk_html_uri(igk_io_sys_classes_dir()."/".$f.".php"))){
                include_once($f);
                if(!class_exists($n, false) && !interface_exists($n, false)
                && !trait_exists($n, false)
                    ){
                    igk_die("file loaded but not content class {$n} definition", 1, 500);
                }
                return 1;
            }
            igk_debug_wln("file not exists ".$f);
            return 0;
        });
        //--------------------------------------------------------------------------------
        // + | auto load composer files if exists in packages directory
        //--------------------------------------------------------------------------------
        if (file_exists($file = igk_io_packagesdir()."/vendor/autoload.php")){
            require_once($file);
        }
        $autoloading=1;
    }
    $sort=1;
}
///<summary></summary>
///<param name="tablenameinterface"></param>
/**
* 
* @param mixed $tablenameinterface
*/
function igk_register_balafon_db_table($tablenameinterface){
    IGKBalafonDBManager::getInstance()->register_db_table($tablenameinterface);
}
///<summary>register or get class informations</summary>
/**
* register or get class informations
*/
function igk_register_class_info($classname=null, $infos=null){
    static $info=null;
    class_exists($classname, false) || die("failed to register class information");
    if($info == null){
        $info=array();
    }
    if($classname !== null){
        if(!isset($info[$classname])){
            $info[$classname]=(object)array();
        }
        $clkey="@_info_";
        if(is_object($infos)){
            $cl=get_class($infos);
            if("StdClass" != $cl){
                $ckey=$cl;
            }
        }
        $info[$classname]->{$clkey}=$infos;
    }
    return $info;
}
///<summary></summary>
///<param name="name"></param>
///<param name="class"></param>
/**
* 
* @param mixed $name
* @param mixed $class
*/
function igk_register_dataadapter($name, $class){
    igk_set_env_keys("sys://dataadapter", strtoupper($name), $class);
}
///register for global integration menu
///<summary>register for post filter menu </summary>
/**
* register for post filter menu
*/
function igk_register_post_filter_menu($callback){
    $tab=null;
    if(is_callable($callback)){
        $tab=["callback"=>$callback, "level"=>10];
    }
    else{
        $tab=$callback;
    }
    igk_push_env("sys://men/postfilter", $tab);
    igk_set_env("sys://men/postfilter/sort", 1);
}
///<summary></summary>
///<param name="name"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $name
* @param mixed $callback
*/
function igk_register_requirement($name, $callback){
    $t=igk_get_env(IGK_ENV_REQUIREMENT_KEY, array());
    $t[$name]=$callback;
    igk_set_env(IGK_ENV_REQUIREMENT_KEY, $t);
}
///<summary></summary>
///<param name="type"></param>
///<param name="name"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $type
* @param mixed $name
* @param mixed $callback
*/
function igk_register_service($type, $name, $callback){
    $k="sys://services/".strtolower($type);
    $tab=igk_get_env($k, function(){
        return array();
    });
    $tab[$name]=$callback;
    igk_set_env($k, $tab);
    return $tab;
}
///<summary>register routes tempory uri to class</summary>
/**
* register routes tempory urilt to class
*/
function igk_register_temp_uri($controllerClass){
    $routes = igk_app()->session->getRoutes();

    if(!isset($routes[$controllerClass])){
        $guid = igk_get_component_uri_key(igk_create_guid());
    
        $routes[$controllerClass]=$guid;
		//udpate routes
		igk_app()->settings->{IGK_SESS_ROUTES} = $routes;
        igk_app()->session->component($guid, array("type"=>"route", "class"=>$controllerClass));

        return $guid;
    }
    return $routes[$controllerClass];
}
///<summary>register library with namespace generation on eval</summary>
/**
* register library with namespace generation on eval
*/
function igk_registerlib($dir=null, $ext=".phlib", $callback=null, $ns=null){
    $dir=$dir ?? IGK_LIB_DIR;
    if(!is_dir($dir))
        return;
    $tab=array();
    array_push($tab, $dir);
    $src=igk_realpath($dir);
    $ln=strlen($src);
    ob_start();
    $s="";
    $functions=get_defined_functions()["user"];
    $classes=get_declared_classes();
    $source=igk_count($functions);
    $clcount=igk_count($classes);
    while($dir=array_pop($tab)){
        $hdir=opendir($dir) ?? igk_die("failed to open dir");
        while($s=readdir($hdir)){
            if(($s == ".") || ($s == ".."))
                continue;
            $f=igk_realpath($dir."/".$s);
            if(is_dir($f))
                array_push($tab, $f);
            else{
                if(preg_match("/".$ext."$/i", $s)){
                    if($ns){
                        $subdir=str_replace("/", "\\", substr(dirname($f), $ln + 1));
                        $script=igk_io_read_allfile($f);
                        $nspace=$ns.(!empty($subdir) ? "\\".$subdir: "");
                        $g='namespace '.$nspace.'; use '.$ns.' as __base_ns; $Gfile = \''.$f.'\'; ?>'.$script;
                        try {
                            igk_set_env(IGK_LAST_EVAL_KEY, "/!\\ eval file: ". $f);
                            eval($g);
                            igk_set_env(IGK_LAST_EVAL_KEY, null);
                        }
                        catch(Exception $e){
                            continue;
                        }
                        $functions2=get_defined_functions();
                        $classes2=get_declared_classes();
                        if(count($functions2["user"]) > $source){
                            $ktab=array_slice($functions2["user"], $source);
                            igk_reg_func_files($f, $ktab);
                            $source += igk_count($ktab);
                        }
                        if(count($classes2) > $clcount){
                            $ktab=array_slice($classes2, $clcount);
                            igk_reg_class_file($f, $ktab);
                            $clcount += igk_count($ktab);
                        }
                    }
                    else
                        include_once($f);
                    $h=ob_get_contents();
                    igk_assert_die(($ct=strlen($h)) > 0, "file : ".$f. " : content : ".$ct. " ".$h);
                    if($callback){
                        $callback($f, $src, $ns);
                    }
                }
            }
        }
        closedir($hdir);
    }
    ob_end_clean();
}
///<summary>used to registers files to library</summary>
/**
* used to registers files to library
*/
function igk_reglib($files){
    if(($files == null) || (igk_count($files) == 0))
        return;
    if(IGKSysCache::$LibFiles == null)
        IGKSysCache::$LibFiles=array();
    foreach($files as  $v){
        if(!isset(IGKSysCache::$LibFiles[$v]))
            IGKSysCache::$LibFiles[$v]=$v;
    }
}
///<summary>register lib file once</summary>
/**
* register lib file once
*/
function igk_reglib_once($file){
    $f=is_file($file) ? $file: igk_realpath($file);
    if(!empty($f) && file_exists($f)){
        require_once($f);
        igk_reglib(array(igk_html_uri($f)=>igk_html_uri($f)));
    }
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_regtowebpage($ctrl){
    $c=igk_get_defaultwebpagectrl();
    if($c)
        $c->regChildController($ctrl);
}
///<summary>shortcut to render global document</summary>
/**
* shortcut to render global document
*/
function igk_render_doc($doc=null, $refreshdefault=0, $ctrl=null){
    IGKApp::RenderDocument($doc, $refreshdefault, $ctrl);
}
///<summary>render dummy document</summary>
/**
* render dummy document
*/
function igk_render_dummy_doc($n, $title, $t){
    $d=igk_get_document($n);
    $d->Title=$title;
    $d->body->addBodyBox()->clearChilds()->add($t);
    $d->RenderAJX();
    $d->dispose();
}
///<summary>Bind node to document and render it utility function</summary>
/**
* Bind node to document and render it utility function
*/
function igk_render_node($node, $doc, $render=1){
    if($doc === null){
        igk_die("[".__FUNCTION__."] document can't be null");
    }
    $bbox=$doc->Body->addBodyBox();
    if(!igk_get_env("sys://doc/no_clear")){
        $bbox->ClearChilds();
    }
    $bbox->add($node);
    if($render)
        $doc->RenderAJX();
}
///<summary>render resources utility </summary>
///<param name="file">file to render</summary>
///<param name="cache" default="1" >allow caching</param>
///<param name="exit" default="1" >force script end</param>
/**
* render resources utility
* @param mixed $ile file to render
* @param mixed $cache allow caching
* @param mixed $exit force script end
*/
function igk_render_resource($file, $cache=1, $exit=1){
    if(preg_match("/\.(ph(p|tml))$/", $file)){
        include_once($file);
    }
    else{
        if($cache)
            igk_header_cache_output();
        igk_header_content_file($file);
        igk_zip_output(file_get_contents($file));
    }
    if($exit){
        igk_exit();
    }
}
///<summary>render trace </summary>
/**
* render trace
*/
function igk_render_trace(){
    igk_wln(igk_show_trace(1));
}
///<summary></summary>
///<param name="code"></param>
///<param name="message"></param>
///<param name="data" default="null"></param>
/**
* 
* @param mixed $code
* @param mixed $message
* @param mixed $data the default value is null
*/
function igk_render_xml_error($code, $message, $data=null){
    $rp=igk_createxmlnode("response");
    $rp->add("status")->Content=$code;
    $rp->add("message")->Content=$message;
    if($data)
        $rp->addObData($data);
    return $rp;
}
///<summary></summary>
///<param name="type"></param>
/**
* 
* @param mixed $type
*/
function igk_request_is($type){
    return igk_server()->REQUEST_METHOD == $type;
}
///<summary>represent require module</summary>
/**
* represent require module
*/
function igk_require_module($modulename, $loadall=1, $die=1){
    $v_k="sys://require_mods";
    $IGK_ENV=igk_environment();
    $g=igk_get_env($v_k, array());
    if(isset($g[$modulename])){
        return $g[$modulename];
    }
    $dir=igk_io_dir(igk_get_module_dir()."/{$modulename}");
 
    if(file_exists($dir)){
        igk_push_env("sys://module", $modulename);
        $f=0;
        $ext_regex="/(.)*\.php$/";
        $excluded_key="sys://lib/ignoredir";
        $excludedir=igk_default_ignore_lib($dir);
        $IGK_ENV[$excluded_key ]=$excludedir;
        $exclude_files = [igk_html_uri($dir."/index.php")];
        if($loadall){
            $f=igk_io_getfiles($dir, function($c, & $excludedir=null) use ($ext_regex, $exclude_files){
                if (in_array($c, $exclude_files))
                    return 0; 
                $hdir=dirname($c);
                $basename=basename($hdir);
                if($excludedir && (isset($excludedir[$basename]) || isset($excludedir[$hdir]))){
                    // if(igk_is_debug()){
                    //     igk_wln("remove form :::".$hdir);
                    // }
                    // igk_wln("exclude:::::".$c. " ? ".igk_is_debug());
                    return -1;
                }
                if(preg_match($ext_regex, $c)){
                    include_once($c); 
                    return 1;
                }
                return 0;
            }
            , true, $excludedir);
        }
        else{
            $f=igk_io_getfiles($dir, function($c, & $excludedir=null) use ($ext_regex, $dir){
                $fdir=dirname($c);
                if($dir != $dir){
                    if(file_exists($fdir.DIRECTORY_SEPARATOR."module.json") || ($excludedir && isset($excludedir[$dir]))){
                        return -1;
                    }
                }
                if(preg_match($ext_regex, $c)){
                    include_once($c);
                    return 1;
                }
                return 0;
            }
            , true, $excludedir);
        }
        igk_pop_env("sys://module");
        $mod=igk_init_module($modulename);
        if(igk_count($f) > 0){
            $g[$modulename]=$mod;
            $g["::files"][$modulename]=$f;
        }
        igk_set_env($v_k, $g);
        return $mod;
    }
    else if($die){
        igk_die(__FUNCTION__."::module <b>{$modulename}</b> missing", 1, 500);
    }
    return null;
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="resname"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $resname
*/
function igk_res_img($ctrl, $resname){
    if(file_exists($f=igk_html_uri($ctrl->getResourcesDir()."/Img/{$resname}"))){
        return $f;
    }
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_reset_db_dataadapter(){
    igk_set_env("sys://dataadapter", null);
    IGKDataAdapter::ResetDataAdapter();
}
///<summary>reset all session global variable</summary>
/**
* reset all session global variable
*/
function igk_reset_globalvars(){
    igk_app()->Session->setParam(IGKSession::GLOBALVARS, array());
}
///<summary></summary>
/**
* 
*/
function igk_reset_include(){
    igk_set_env("sys://include/init", null);
}
///<summary></summary>
/**
* 
*/
function igk_resetr(){
    $_REQUEST=array();
}
///<summary>shortcut to resource get __</summary>
/**
* shortcut to resource get __
*/
function igk_resources_gets($text, $default=null){
    return call_user_func_array(array(R::class, 'gets'), func_get_args());
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="name"></param>
///<param name="alllanguage" default="false"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $name
* @param mixed $alllanguage the default value is false
*/
function igk_rm_article($ctrl, $name, $alllanguage=false){
    if($alllanguage){
        $d=dirname($name);
        $exp="/(\\".igk_str_expr(igk_io_dir(basename($name))).")/i";
        if(!empty($d) && ($d != ".") && is_dir($d)){
            $f=igk_io_getfiles($d, $exp, false);
        }
        else{
            if(!file_exists($name)){
                $f=igk_io_getfiles($ctrl->getArticlesDir(), $exp, false);
            }
        }
        if($f){
            $i=0;
            foreach($f as $v){
                unlink($v);
                $i++;
            }
            return $i;
        }
    }
    else{
        $f=$name;
        //$n=null;
        $d=dirname($name);
        if(!empty($d) && ($d != ".") && is_dir($d)){
            $f=$ctrl->getArticleInDir(basename($name), $d);
        }
        else{
            if(!file_exists($name))
                $f=$ctrl->getArticle($name);
        }
        if(file_exists($f)){
            unlink($f);
            return 1;
        }
    }
    return false;
}
///<summary></summary>
///<param name="n"></param>
///<param name="doc"></param>
/**
* 
* @param mixed $n
* @param mixed $doc
*/
function igk_rm_balafonscriptfile_callback($n, $doc){
    $g=$doc->getParam("sys://igk/tempbalafonjs");
    unset($g[$n]);
    $doc->setParam("sys://igk/tempbalafonjs", $g);
}
///<summary>run script on background</summary>
/**
* run script on background
*/
function igk_run_bg_script($f){
    $v_rp=igk_get_run_script_path();
    if(file_exists($v_rp)){
        $offscreen="";
        if(igk_server_is_linux())
            $offscreen=" 2>/dev/null > /dev/null  & ";
        else{
            $offscreen=" >NUL 2>NUL";
            $v_rp="start /B /Min {$v_rp} ";
            $cmd=$v_rp." ".igk_io_dir(IGK_LIB_RUNFILE)." ".$f.$offscreen;
            pclose(popen($cmd, "r"));
            return 1;
        }
        $cmd=$v_rp." ".igk_io_dir(IGK_LIB_RUNFILE)." ".$f.$offscreen;
        return shell_exec($cmd);
    }
    return false;
}
///<summary> arguments or files lists</summary>
/**
*  arguments or files lists
*/
function igk_run_scripts($files){
    $files=is_array($files) ? implode(" ", $files): $files;
    $v_rp=igk_get_run_script_path();
    $cmd=$v_rp." ".igk_io_dir(IGK_LIB_RUNFILE)." ".$files;
    $out=[];
    exec($cmd, $out, $ret);
    if($ret == 0){}
    else{
        igk_ilog("failed to run > ".$cmd);
    }
    return implode(IGK_LF, $out);
}
function igk_src_code($src, $start, $end){
    return implode("\n",  array_filter(array_slice( explode("\n", $src), $start, $end)));
}
///<summary>shortcut to save config</summary>
/**
* shortcut to save config
*/
function igk_save_config($force=false){
    return IGKAppConfig::getInstance()->saveConfig($force);
}
///<summary></summary>
///<param name="path"></param>
/**
* 
* @param mixed $path
*/
function igk_save_module($path){
    $t=igk_get_modules();
    $tab=$t->modules;
    $d=igk_get_module_dir()."/.modules.json";
}
///<summary>get a secure uri. on ssl protocol</summary>
/**
* get a secure uri. on ssl protocol
*/
function igk_secure_uri($s, $secured=false, $ssl_protocol=true){
    if(($secured && !$ssl_protocol) || ($ssl_protocol && igk_sys_srv_is_secure())){
        $s=str_replace("http://", "https://", $s);
    }
    return $s;
}
///<summary></summary>
///<param name="uri"></param>
///<param name="method" default="POST"></param>
///<param name="args" default="null"></param>
///<param name="content" default="IGK_APP_FORM_CONTENT"></param>
///<param name="header" default="null"></param>
/**
* 
* @param mixed $uri
* @param mixed $method the default value is "POST"
* @param mixed $args the default value is null
* @param mixed $content the default value is IGK_APP_FORM_CONTENT
* @param mixed $header the default value is null
*/
function igk_send_request($uri, $method="POST", $args=null, $content=IGK_APP_FORM_CONTENT, $header=null){
    $postdata="";
    if($args != null)
        $postdata=http_build_query($args);
    if($header == null){
        $header="";
        $header='Content-type: '.$content.IGK_CLF."Content-Length: ".strlen($postdata).IGK_CLF;
    }
    $opts=array('http'=>array(
                'method'=>$method,
                'header'=>$header,
                'content'=>$postdata
            ));
    $context=stream_context_create($opts);
    $result=@file_get_contents($uri, false, $context);
    return $result;
}
///<summary></summary>
/**
* 
*/
function igk_server_is_linux(){
    return strtolower(PHP_OS) == "linux";
}
///<summary>shortcut to IGKServerInfo::IsLocal()</summary>
/**
* shortcut to IGKServerInfo::IsLocal()
*/
function igk_server_is_local(){
    return IGKServerInfo::IsLocal();
}
///<summary></summary>
/**
* 
*/
function igk_server_is_redirecting(){
    $f=igk_server()->SCRIPT_NAME;
    return (igk_server()->REDIRECT_URL != null) && (basename($f) == "igk_redirection.php");
}
///<summary></summary>
/**
* 
*/
function igk_server_is_refreshing(){
    return igk_getctrl("igkpagectrl", false)->isRefreshing;
}
///<summary></summary>
/**
* 
*/
function igk_server_is_window(){
    return preg_match("/(winnt)/i", strtolower(PHP_OS));
}
///<summary>grant access to any platform server</summary>
/**
* grant access to any platform server
*/
function igk_server_request_from_balafon(){
    return igk_getv(igk_get_allheaders(), "IGK_SERVER") == IGK_PLATEFORM_NAME;
}
///<summary>check if request in on local server</summary>
/**
* check if request in on local server
*/
function igk_server_request_onlocal_server(){
    return igk_server()->REMOTE_ADDR === igk_server()->SERVER_ADDR;
}
///<summary></summary>
/**
* 
*/
function igk_session_block_exit_callback(){
    $t=null;
    if(($c=igk_getctrl(IGK_SESSION_CTRL, false)) && isset($c->TargetNode) && ($t=$c->TargetNode))
        $t->onAppExit();
}
///<summary></summary>
/**
* check before destroying a session
*/
function igk_session_destroy(){
    if ($id=session_id()){
        @session_destroy();
    }
}
///<summary>check if session file exists</summary>
/**
* check if session file exists
*/
function igk_session_exists($id, & $filesize=null){
    $d=ini_get("session.save_path");
    $f=igk_io_dir($d."/".IGK_SESSION_FILE_PREFIX.$id);
    if(file_exists($f)){
        $filesize=filesize($f);
        return true;
    }
    return false;
}
///<summary>determine if session is active or not</summary>
/**
* determine if session is active or not
*/
function igk_session_is_active(){
    return session_status() === PHP_SESSION_ACTIVE;
}
///<summary>force session handle to default behaviour.</summary>
/**
* force session handle to default behaviour.
*/
function igk_session_reset_handler(){
    ini_set("session.save_handler", "files");
    register_shutdown_function('session_write_close');
    session_reset();
}
///<summary>session function to unlink session file if exists</summary>
/**
* session function to unlink session file if exists
*/
function igk_session_unlinkfile($id){
    $d=ini_get("session.save_path");
    $f=igk_io_dir($d."/".IGK_SESSION_FILE_PREFIX.$id);
    if(file_exists($f)){
        unlink($f);
        return true;
    }
    return false;
}
///<summary>call it at end to update the session</summary>
/**
* call it at end to update the session
*/
function igk_session_update($id, $callback, $close=1){
    if(!igk_session_exists($id))
        return;
    if(session_id() == $id){
        return;}
    igk_session_reset_handler();
    session_name('PHPSESSID');
    igk_bind_session_id($id);
    @session_start();
    $callback($id, igk_app());
    if($close)
        session_write_close();
}
///<summary></summary>
///<param name="n"></param>
///<param name="data"></param>
///<param name="duration" default="600"></param>
/**
* 
* @param mixed $n
* @param mixed $data
* @param mixed $duration the default value is 600
*/
function igk_set_cached($n, $data, $duration=600){
    $igk=igk_app();
    $c=$igk->Session->getParam("sys://cache");
    if($c == null){
        $c=array();
    }
    $c[$n]=(object)array(
            "data"=>$data,
            "date"=>igk_date_now(),
            "duration"=>$duration
        );
    $igk->Session->setParam("sys://cache", $c);
}
///<summary></summary>
///<param name="n"></param>
///<param name="v" default="null"></param>
///<param name="override" default="1"></param>
///<param name="tm" default="null"></param>
/**
* 
* @param mixed $n
* @param mixed $v the default value is null
* @param mixed $override the default value is 1
* @param mixed $tm the default value is null
*/
function igk_set_cookie($n, $v=null, $override=1, $tm=null){ 
    $n=igk_get_cookie_name(igk_sys_domain_name()."/".$n); 
    igk_set_global_cookie($n, $v, $override, $tm);
}
///<summary></summary>
///<param name="k"></param>
///<param name="v"></param>
/**
* 
* @param mixed $k
* @param mixed $v
*/
function igk_set_env($k, $v){  
    $IGK_ENV=igk_environment();
    if(isset($IGK_ENV[$k])){
        if($v === null){
            unset($IGK_ENV[$k]);
            return;
        }
    }
    else if($v === null){
        return;}
    $IGK_ENV[$k]=$v;
}
///<summary>store environment data as array</summary>
/**
* store environment data as array
*/
function igk_set_env_array($k, $v){
    $s=igk_get_env($k);
    if(!is_array($s)){
        $s=array();
    }
    $s[]=$v;
    igk_set_env($k, $s);
    return $s;
}
///<summary>set environment data value as assoc $key => $value</summary>
/**
* set environment data value as assoc $key => $value
*/
function igk_set_env_keys($n, $k, $v){
    $s=igk_get_env($n);
    if(!is_array($s)){
        $s=array();
    }
    $s[$k]=$v;
    igk_set_env($n, $s);
    return $s;
}
///<summary>set error</summary>
/**
* set error
*/
function igk_set_error($tag, $message, $info=null){
    igk_push_env("sys://".__FUNCTION__, array("tag"=>$tag, "message"=>$message, "info"=>$info));
}
///<summary>set error message</summary>
/**
* set error message
*/
function igk_set_error_msg($tab){
    $t=igk_get_env("sys://error_msgs");
    if(is_array($t)){
        $t=array_merge($t, $tab);
    }
    igk_set_env("sys://error_msgs", $t);
}
///<summary></summary>
///<param name="callback"></param>
/**
* 
* @param mixed $callback
*/
function igk_set_export_callback($callback){
    igk_set_env("sys://export_callback", $callback);
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_set_form_args($tab){
    igk_set_env("sys://form_args", $tab);
}
///<summary></summary>
///<param name="id"></param>
///<param name="value" default="null"></param>
/**
* 
* @param mixed $id
* @param mixed $value the default value is null
*/
function igk_set_form_value($id, $value=null){
    $tab=igk_get_env("sys://form_args");
    if(!$tab){
        $tab=array();
    }
    $tab[$id]=$value;
    igk_set_env("sys://form_args", $tab);
    return $tab;
}
///<summary></summary>
///<param name="n"></param>
///<param name="v" default="null"></param>
///<param name="override" default="1"></param>
///<param name="tm" default="null"></param>
///<param name="dom" default="null"></param>
/**
* 
* @param mixed $n
* @param mixed $v the default value is null
* @param mixed $override the default value is 1
* @param mixed $tm the default value is null
* @param mixed $dom the default value is null
*/
function igk_set_global_cookie($n, $v=null, $override=1, $tm=null, $dom=null, $secure=false, $options=null){
    $rs=igk_getv($_COOKIE, $n);
    if(!isset($_COOKIE[$n]) || $override){
        !$dom && $dom=igk_get_cookie_domain();
        $tdom = [
            "expires"=>$tm !== null ? 0: time() + (86400 * 7),
            "path"=>"",
            "domain"=>"",
            "secure"=> $secure,
            "httponly"=>false
        ];
        if (!empty($dom))
            $tdom["domain"] = $dom; 
        $toption =  array_merge($tdom, $options ? $options : []); 
        if (version_compare(PHP_VERSION,"7.3.0", ">=")){
            $tdom["samesite"]="Strict";
            setcookie($n, $v, $toption);
        } else{
            $toption = array_values($toption);
            setcookie($n, $v, ...$toption);
        }   
        // $tm !== null ? 0: time() + (86400 * 7), igk_get_cookie_path(), $dom,
        //     $secure, $toption 
        // );
        $_COOKIE[$n]=$v;
        return $v;
    }
    return $rs;
}
///<summary>used to set session global variable</summary>
/**
* used to set session global variable
*/
function igk_set_globalvars($n, $d){
    $s=igk_app()->Session->getParam(IGKSession::GLOBALVARS);
    if($s == null)
        $s=array();
    if($d == null){
        if(isset($s[$n]))
            unset($s[$n]);
    }
    else{
        $s[$n]=$d;
    }
    igk_app()->Session->setParam(IGKSession::GLOBALVARS, $s);
}
function igk_get_header_status($code){
    static $t = null;
    if ($t===null){
        $t=array( 
                400=>"HTTP/1.0 400 Bad request condition",
                401=>"HTTP/1.0 401 unauthorized",
                403=>"HTTP/1.0 403 forbidden",
                404=>"HTTP/1.0 404 not found",
                405=>"HTTP/1.0 405 method not allowed",
                406=>"HTTP/1.0 406 not acceptable",
                408=>"HTTP/1.0 408 request time out",
                500=>"HTTP/1.0 500 Internal server error",
                503=>"HTTP/1.0 503 Service not available",
                505=>"HTTP/1.0 505 Version not supported"
            );
    }
    return igk_getv($t, $code, "HTTP/1.0 200 Ok");

}
///<summary></summary>
///<param name="code"></param>
///<param name="message" default=""></param>
/**
* 
* @param mixed $code
* @param mixed $message the default value is ""
*/
function igk_set_header($code, $message="", $headers=[]){
  
    static $fcall = null;
    if ($fcall===null)
        $fcall = 0;
     
    $message = trim($message);
    if(!empty($message))
        $message=";".$message;
    $message=";".IGK_FRAMEWORK.": ".IGK_CODE_NAME." - ".IGK_VERSION;
    $h = igk_get_allheaders();
    $new = 1;
    if (( $o = igk_getv($h, "ORIGIN")) && ($ref = igk_getv($h, "REFERER")))
    {
        if ( rtrim($o,"/") == rtrim($ref, "/")){
            // igk_wln_e("reload detected");
            $new = 0;
        }
    }
    $msg = igk_get_header_status($code);
    $txt = "Status: {$code} $msg";   
    if (!$fcall){         
        if ($new){
            header($txt, 1, $code);
            header(IGK_FRAMEWORK.":".IGK_CODE_NAME."-".IGK_VERSION);
        }
    }
    else {        
        header($txt, 1, $code);
    }
    // header("Content-Security-Policy: connect-src 'self'");
    foreach($headers as $k){
        header($k); 
    }
    $fcall = 1;
}
///<summary> set rendering node</summary>
/**
*  set rendering node
*/
function igk_set_rendering_node($n){
    igk_set_env("sys://igk_html_rendered_node/node", $n);
}
///<summary></summary>
///<param name="engine"></param>
/**
* 
* @param mixed $engine
*/
function igk_set_selected_builder_engine($engine){
    igk_set_env("sys://form/selectedbuilderengine", $engine);
}
///<summary>shortcut to set session param value</summary>
/**
* shortcut to set session param value
*/
function igk_set_session($name, $v){
    igk_app()->Session->$name=$v;
}
///<summary>set session redirection page</summary>
/**
* set session redirection page
*/
function igk_set_session_redirection($uri=null, $reset=1){
    $h=igk_get_env("sys://func/".__FUNCTION__);
    if($reset){
        $h=0;
    }
    if($h)
        return;
    if($uri == null){
        $uri=igk_io_request_uri_path();
    }
    igk_set_session(IGKSession::IGK_REDIRECTION_SESS_PARAM, $uri);
    igk_set_env("sys://func/".__FUNCTION__, 1);
}
///<summary></summary>
///<param name="t"></param>
/**
* 
* @param mixed $t
*/
function igk_set_timeout($t){
    ini_set("max_execution_time", $t);
}
///set a request key=>$value
/**
*/
function igk_setr($key, $value){
    $_REQUEST[$key]=$value;
}
///<summary></summary>
///<param name="obj"></param>
///<param name="k"></param>
///<param name="v"></param>
/**
* 
* @param mixed $obj
* @param mixed $k
* @param mixed $v
*/
function igk_setv($obj, $k, $v){
    if(is_object($obj))
        $obj->$k=$v;
    else
        $obj[$k]=$v;
}
///<summary></summary>
///<param name="obj"></param>
/**
* 
* @param mixed $obj
*/
function igk_show_code($obj){
    igk_wl("<code>");
    igk_wl($obj);
    igk_wl("</code>");
}
function igk_ca_edit_article($file){
	$ctrl = igk_getctrl(IGK_CA_CTRL);
	$t = igk_createnode("a");
	$t->addDiv()->Content = igk_svg_use("edit");
	$t["href"] = "/".$ctrl->getUri("ca_edit_articlewtiny&q=".base64_encode(igk_io_basepath($file)));
	$t["title"] = __("Edit article");
	$t["igk-ajx-lnk"] =1;
	$t->renderAJx();
}
///<summary></summary>
///<param name="doc" default="null"></param>
///<param name="code" default="404"></param>
///<param name="redirect" default="null"></param>
///<param name="message" default="null"></param>
/**
* 
* @param mixed $doc the default value is null
* @param mixed $code the default value is 404
* @param mixed $redirect the default value is null
* @param mixed $message the default value is null
*/
function igk_show_error_doc($doc=null, $code=404, $redirect=null, $message=null){

    if($redirect == null)
        $redirect=igk_server()->REDIRECT_URL;
    $g=igk_sys_getconfig("error_ctrl");
    $error_ctrl=$g ? igk_getctrl($g, false): null;
    if($error_ctrl && method_exists(get_class($error_ctrl), "ViewError")){
        $error_ctrl->ViewError($code, $redirect);
        return;
    }
    $key=IGK_DOC_ERROR_ID;
    $doc=igk_createnode("div");
    $doc->setParam("id", $key);
    $doc->addDiv()->setClass("igk-danger")->addContainer()->addCol()->addSectionTitle()->setClass("alignl igk-font-title-1")->Content=__("/!\ ERROR");
    $container=$doc->addDiv()->addContainer();
    $t=$container->addRow()->addCol()->addDiv();
    $t["class"]="igk-notifybox igk-notifybox-danger";
    $b=$t->add("blockquote");
    $b["cite"]=igk_io_baseuri();
    $b->addDiv()->Content=__("msg.error.requestedpagenotfount_1", $code. " ----: ". $redirect. "");
    if(!empty($message)){
        $t=$container->addRow()->addCol()->addDiv();
        $t->Content="Message : ".$message;
    }
    $container->addRow()->addCol()->addDiv()->addA(igk_io_baseuri())->Content=__("Go home");
    $opt=igk_xml_create_render_option();
    $opt->Context="mail";
    $doc->RenderAJX($opt);
}
function igk_is_class_subclass_of($o, $cl){
    return (get_class($o)==$cl) || is_subclass_of($o, $cl);
}
///<summary>get the global application folder</summary>
/**
* get the global application folder
*/
function igk_show_exception($Ex, $file=null, $line=null, $title=null){
    if(!$Ex)
        return;
    $content="";
    $traces=$Ex->getTrace();
    if(igk_is_cmd()){
        $out="";
        $out .= "/!\\ IGK-ERROR\n".IGK_LF;
        if($title){
            $out .= $title.IGK_LF;
        }
        $out .= "Message: ".$Ex->getMessage().IGK_LF;
        $out .= "File: ".$Ex->getFile().IGK_LF;
        $out .= "Line: ".$Ex->getLine().IGK_LF;
        $out .= igk_get_exception_eval($Ex, $traces);
        igk_wl($out);
        return;
    }       
    if (igk_is_class_subclass_of($Ex, IGK\System\Http\RequestException::class)){
        $error = new IGK\System\Http\ErrorRequestResponse($Ex->getCode());
        $error->message = [
            "request_uri"=>igk_io_request_uri(),
            "display"=>$Ex->getMessage()
        ];
        echo $error->render(); 
        igk_exit();
    }
    
    $tab=array();
    $tab["fr"]["title.fatalError"]="Not found";
    $tab["fr"]["go.home"]="Home";
    $tab["en"]["title.fatalError"]="Not found";
    $tab["en"]["go.home"]="Home";
    $r=function($s) use ($tab){
        $lg = "en";
        if ($m = strtolower(R::GetCurrentLang())){
            if (isset($tab[$m]))
            $lg = $m;
        }
        return $tab[$lg][$s];
    };
    $trace_css="";
    $trace_css .= igk_io_read_allfile(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/exception.css");
    $trace_css .= igk_io_read_allfile(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/trace.css");
    $content = include(IGK_LIB_DIR."/Inc/exceptions/content.phtml"); 

    $balafon_js="";
    $balafon_src = "";
    $corejs = "";
    if (igk_environment()->is("production")){
        $balafon_js = igk_io_corejs_uri();
        $balafon_src = igk_get_balafonjs_src();
        $corejs = '<script language="javascript" type="text/javascript" id="balafon.js">'.$balafon_src.'</script>';
    } else {
        $balafon_js = IGKResourceUriResolver::getInstance()->resolve(IGK_BALAFON_JS_CORE_FILE);
        $corejs = '<script language="javascript" type="text/javascript" src="'.$balafon_js.'"></script>';
    }
    $style_link="";
    if(file_exists($d=igk_io_resourcesdir()."/Fonts/google/Roboto100,200,400,700,900.css")){
        $style_link .= "<link rel=\"stylesheet\" href='".igk_html_uri(igk_io_baseuri()."/".igk_io_baserelativepath($d))."'/>";
        $trace_css .= "body h1{ font-family: 'Roboto', arial, sans-serif; font-weight: 100; }";
    }
    $doc=0;
    
    $scripts=<<<EOF
{$corejs}
<!-- style link  -->
{$style_link}
<script language="javascript" type="text/javascript">
	(function(){
	window.igk_init=function(){
		var q = document.getElementById("tracelist");
		if (!q)return;
		if (!window.igk){
			q.className = q.className+" igk-active";
			return;
		}
		var h = \$igk(q).select('#hd').getItemAt(0).o;
		h.onclick = function(){
			if (!/igk-active/.test(q.className)){
				\$igk(q).addClass("igk-active");
			}
			else{
				//remove
				\$igk(q).rmClass("igk-active");
			}
		};
	};

	//+ igk-tracelist
	(function(){
		igk.ready(function(){
			\$igk(".igk-tracelist").each_all(function(){
				this.o.scrollTop = 0;
			});

	});
	})();

})();
</script>
EOF;
    if(igk_is_ajx_demand()){
        $doc=<<<EOF
{$scripts}
<style type="text/css">
{$trace_css}
</style>
<div class='error_view' style="padding-bottom:164px;" >
{$content}
</div>
<script language="javascript" type="text/javascript">window.igk_init(); </script>
EOF;
    }
    else{
 
        $doc=<<<EOF
<!DOCTYPE html >
<html>
	<head>
	<title>{$r('title.fatalError')}</title>
    {$scripts}
    <link href="https://fonts.googleapis.com/css?family=Roboto+Condensed&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto+Slab&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Material+Icons&display=swap" rel="stylesheet" />
<style>
{$trace_css}
</style>
</head>
<body class="google-Roboto exception igk-show-exception" onload="javascript:window.igk_init(); return false;">
{$content}
</body>
</html>
EOF;
    }
    if((get_class($Ex) == IGKException::class ) || is_subclass_of($Ex, IGKException::class)){
        if(!($s=$Ex->getCode())){
            $s=500;
        }
        igk_set_header($s);
    }
    if (ob_get_level()>0)
        ob_end_clean();
    header("Content-Type: text/html");
    header("Cache-Control: no-cache");
    igk_wl($doc);
    igk_exit();
}
function igk_get_balafonjs_src(){
    if ($doc = igk_app()->Doc){
    $o = igk_sys_balafon_js($doc);
    return $o;
    }
    return null;
}
///<summary></summary>
///<param name="array"></param>
/**
* 
* @param mixed $array
*/
function igk_show_keytype($array){
    $out="<pre>";
    if(is_array($array)){
        foreach($array as $k=>$v){
            $out .= $k. " =&gt; ".$v.IGK_LF;
        }
    }
    $out .= "</pre>";
    igk_wl($out);
}
///<summary></summary>
///<param name="obj"></param>
/**
* 
* @param mixed $obj
*/
function igk_show_prev($obj){
    igk_wl("<pre class=\"igk-prev igk-prev-sys\">");
    print_r($obj);
    igk_wl("</pre>");
}
///<summary></summary>
///<param name="target"></param>
///<param name="obj"></param>
/**
* 
* @param mixed $target
* @param mixed $obj
*/
function igk_show_prevto($target, $obj){
    $s=IGK_STR_EMPTY;
    ob_start();
    igk_show_prev($obj);
    $s=ob_get_contents();
    ob_end_clean();
    $target->addDiv()->Content=$s;
}
///<summary></summary>
///<param name="render" default="1"></param>
/**
* 
* @param mixed $render the default value is 1
*/
function igk_show_serverinfo($render=1){
    $t="";
    $t .= "<div><h1>Server Info</h1></div><table class='igk-tab-serve-info'>";
    foreach($_SERVER as $k=>$v){
        $t .= "<tr>";
        $t .= "<td>".$k."</td>";
        $t .= "<td>".$v."</td>";
        $t .= "</tr>";
    }
    $t .= "</table>";
    if($render){
        igk_wl($t);
    }
    return $t;
}
///<summary></summary>
///<param name="obj"></param>
/**
* 
* @param mixed $obj
*/
function igk_show_textarea($obj){
    igk_wl("<textarea>");
    igk_wl($obj);
    igk_wl("</textarea>");
}
function igk_show_exception_trace($callers, $depth=0){
    $o = "";
    for($i=$depth; $i < count($callers); $i++){
        //+ show file before line to cmd+click to be handle
        $f=igk_getv($callers[$i], "function");
        $c=igk_getv($callers[$i], "class", "__global");
        $o.= igk_getv($callers[$i], "file").":".igk_getv($callers[$i], "line") . PHP_EOL;
    } 
    echo $o;
}
///<summary>return the tracing information info</summary>
/**
* return the tracing information info
*/
function igk_show_trace($depth=1){
    if(!defined("IGK_APP_DIR")){
        define('IGK_APP_DIR', IGK_LIB_DIR."/temp");
    }
    if(igk_get_env("sys://TRACING")){
        return ".tracing.....";
    }
    $def=defined("IGK_TRACE_CLEAN");
    if($def){
        ob_clean();
    }
    $callers=debug_backtrace();
    igk_set_env("sys://TRACING", 1);
    $title="Trace Info";
    $t_class="Class";
    $t_line="Line";
    $t_func="Function";
    $t_from=" FROM ";
    if(IGKApp::IsInit()){
        $title=__($title);
        $t_class=__($t_class);
        $t_func=__($t_func);
        $t_line=__($t_line);
    }
    $o="";
    if(igk_is_cmd()){
        $tc = 0;
        for($i=$depth; $i < count($callers); $i++, $tc++){
            //+ show file before line to cmd+click to be handle
            $f=igk_getv($callers[$i], "function");
            $c=igk_getv($callers[$i], "class", "__global");
            $o.= igk_getv($callers[$i], "file").":".igk_getv($callers[$i], "line") . PHP_EOL;
        } 
        echo $o;
    }
    else{
        $o="<div class=\"traceinfo\">";
        $o .= "<div class=\"igk-title-4\">${title}</div>";
        $o .= "<div>";
        $o .= "<span>".igk_io_request_uri()."</span> <span>".$t_from."</span>";
        $o .= "<ul>";
        foreach($callers[0] as $k=>$v){
            $o .= "<li><span>".$k.":</span>";
            if(!is_array($v))
                $o .= "<span>".$v."</span>";
        }
        $o .= "</ul>";
        $o .= "</div>";
        $o .= "<div>";
        $o .= "<table>";
        for($i=$depth; $i < count($callers); $i++){
            $f=igk_getv($callers[$i], "function");
            $c=igk_getv($callers[$i], "class", "__global");
            $o .= "<tr>";
            $o .= "<td>".igk_getv($callers[$i], "line")."</td>";
            $o .= "<td>".igk_getv($callers[$i], "file")."</td>";
            $o .= "<td>".$f."</td>";
            $o .= "<td>".$c."</td>";
            $o .= "</tr>";
        }
        $o .= "</table>";
        $o .= "</div>";
        $o .= "</div>";
    }
    return $o;
    // $tb=$d->addDiv();
    // $tb->add('span')->Content=igk_io_request_uri();
    // $tb->add('span')->Content=" FROM ";
    // $tb->addObData($callers[0]);
    // $t=$d->addDiv();
    // $t["style"]="max-height: 320px; overflow:auto";
    // if(igk_is_cmd()){
    //     $o="";
    //     for($i=$depth; $i < count($callers); $i++){
    //         $o .= igk_getv($callers[$i], "line")."\t";
    //         $o .= igk_getv($callers[$i], "file")."\t";
    //         $o .= IGK_LF;
    //     }
    //     $t->addText(IGK_LF.$o);
    // }
    // else{
    //     $dv=$t->addTable();
    //     $rd=$dv->addTr()->setStyle("color:#aeaeae");
    //     $rd->addTh()->addspan()->Content=$t_line;
    //     $rd->addTh()->addLabel()->Content=$t_file;
    //     $rd->addTh()->addLabel()->Content=$t_func;
    //     $rd->addTh()->addspan()->Content=$t_class;
    //     for($i=$depth; $i < count($callers); $i++){
    //         $f=igk_getv($callers[$i], "function");
    //         $c=igk_getv($callers[$i], "class", "__global");
    //         $rd=$dv->addTr();
    //         $rd->addTd()->addspan()->Content=igk_getv($callers[$i], "line");
    //         $rd->addTd()->addLabel()->Content=igk_getv($callers[$i], "file");
    //         $rd->addTd()->addLabel()->setStyle("color:blue;")->Content=$f;
    //         $rd->addTd()->addspan()->setStyle("color:green;")->Content=$c;
    //     }
    // }
    // $p=$d->Render();
    // igk_set_env("sys://TRACING", null);
    // return $p;
}
///<summary></summary>
///<param name="a"></param>
///<param name="b"></param>
/**
* 
* @param mixed $a
* @param mixed $b
*/
function igk_sort_bynodeindex($a, $b){
    if($a->TargetNode && $b->TargetNode){
        $i=$a->TargetNode->Index;
        $j=$b->TargetNode->Index;
        return ($i == $j) ? 0: (($i < $j) ? -1: 1);
    }
    return strcmp($a->Name, $b->Name);
}
///<summary>retrieve sql data from from balafon engine type</summary>
///<param name="type">system Query type</param>
/**
* retrieve sql data from from balafon engine type
* @param mixed $type system Query type
*/
function igk_sql_data_type($t){
    switch(strtolower($t)){
        case "int":
        case "integer":
        return "Int";
        case "varchar":
        return "VARCHAR";
        case "text":
        case "string":
        return "TEXT";
    }
    return strtoupper($t);
}
///<summary>start app session</summary>
/**
* start app session
*/
function igk_start_session($reset=0){
    $ie_diagnonstic=igk_server()->HTTP_REFERER == "diagnostics://5/";
    $idstorage = $cookieName = null;
    if($ie_diagnonstic){
        igk_exit();
    }
    $handle_func=igk_get_env("sys://handle/file_request");
    if($handle_func){
        foreach($handle_func as $v){
            if($v()){
                return;
            }
        }
    }
    if(defined("IGK_NO_SESSION"))
        return;
    if($reset){
        igk_env_count_reset(__FUNCTION__);
    }
    $f=igk_env_count(__FUNCTION__);
    $is_no_start=empty(session_id());
    if(($f > 1) || (!$is_no_start)){
        return;
	}
    $cookieName=session_name();
    if(defined('IGK_SESS_DIR') && IGKIO::CreateDir(IGK_SESS_DIR)){
        ini_set("session.save_path", IGK_SESS_DIR);
		IGKSessionFileSaveHandler::Init();
    }
    ini_set("session.cookie_same","Strict");
    //+ | security fix 
    ini_set("session.cookie_secure", igk_sys_srv_is_secure());
    ini_set("session.cookie_httponly", 1);
    ini_set("session.cookie_samesite", "strict");

    //+ $idstorage= trim(isset($_COOKIE) && isset($_COOKIE[$cookieName]) ? $_COOKIE[$cookieName]: trim(igk_getr($cookieName)));
    //+ check if the session is passed prio to cookie value. 
    //+ 2020 Edge and chrome on Mac no need for session_id https://www.php.net/manual/en/function.session-id.php
    $idstorage= trim(isset($_COOKIE) && isset($_COOKIE[$cookieName]) ? false : trim(igk_getr($cookieName)));
    if($idstorage){  
        igk_bind_session_id($idstorage);
    }
    $dom = igk_get_cookie_domain();
    $opts = [];

    if (!empty($dom))
        $opts["domain"] = $dom; 
    if (count($opts)>0){
        
        if (version_compare(PHP_VERSION,"7.3.0", ">="))
        {
            if (!session_set_cookie_params($opts)){ 
               igk_ilog("set cookie options failed");
               igk_ilog($opts); 
            } 
        }
        else {
            session_set_cookie_params(
                10,
                "/",
                $opts["domain"],
                igk_sys_srv_is_secure(),
                true
            );  
        } 
    } 
    $b = session_start();       
    return $b;
}
///<summary>store start time</summary>
/**
* store start time
*/
function igk_start_time($name=null){
    $t=microtime(true);
    igk_set_env("sys://env/starttime".($name ? "/{$name}": ""), $t);
    return $t;
}
///end package manager
/**
*/
function igk_stop_timeout(){
    igk_set_timeout(0);
}
///<summary>used to add data to value</summary>
/**
* used to add data to value
*/
function igk_str_append_to(& $s, $v, $sep=','){
    if(empty($v)){
        return;}
    if(empty($s))
        $s .= $v;
    else
        $s=$sep.$v;
}
///<summary>convert string to php namespace name</summary>
function igk_str_ns($n){
    return implode("", 
      array_map("ucfirst",  array_filter(explode("_", str_replace(" ", "_", str_replace("/", "\\", $n)))))
    );
}
/**
 * return string namespace presentation
 */
function igk_ns_name($ns){
    return str_replace("/", "\\", $ns);
}
///<summary></summary>
///<param name="tab"></param>
/**
* 
* @param mixed $tab
*/
function igk_str_array_rm_empty($tab){
    $o=array();
    foreach($tab as $k){
        if(empty($k))
            continue;
        $o[]=$k;
    }
    return $o;
}
///<summary>used to capitalize string</summary>
/**
* used to capitalize string
*/
function igk_str_capitalize($s){
    if(strlen($s) > 1)
        return strtoupper($s[0]).strtolower(substr($s, 1));
    return strtoupper($s);
}
///<summary>check if the length of string is equal to 0</summary>
/**
* check if the length of string is equal to 0
*/
function igk_str_empty($t){
    return strlen($t) === 0;
}
///<summary></summary>
///<param name="chaine"></param>
///<param name="pattern"></param>
/**
* 
* @param mixed $chaine
* @param mixed $pattern
*/
function igk_str_endwith($chaine, $pattern){
    $chaine=trim($chaine);
    $c=strlen($chaine);
    $p=strlen($pattern);
    $i=strripos($chaine, $pattern);
    if($i === false){
        return false;
    }
    if(($i != -1) && (($i + $p) === $c))
        return true;
    return false;
}
function igk_str_startwith($str, $pattern){
    return IGKString::StartWith($str, $pattern);
}
///<summary></summary>
///<param name="array"></param>
///<param name="str"></param>
/**
* 
* @param mixed $array
* @param mixed $str
*/
function igk_str_explode($array, $str){
    $t=array();
    if(count($array) > 0){
        $k=explode($array[0], $str);
        $array=array_slice($array, 1);
        foreach($k as $kt){
            $t=array_merge($t, igk_str_explode($array, $kt));
        }
    }
    else{
        $t[]=$str;
    }
    return $t;
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_str_explode_uppercase($v){
    $o=array();
    $v=preg_replace_callback("/([a-z0-9]*)([A-Z])/", function($m) use (& $o){
        $c=count($o);
        if($c == 0){
            $o[]=substr($m[0], 0, -1);
            $o[]=$m[2];
        }
        else{
            $o[$c-1] .= substr($m[0], 0, -1);
            $o[]=$m[2];
        }
        return "";
    }
    , $v);
    if(!empty($v)){
        $o[count($o)-1] .= $v;
    }
    return $o;
}
///<summary></summary>
///<param name="str"></param>
/**
* 
* @param mixed $str
*/
function igk_str_expr($str){
    $str=str_replace(".", "\.", $str);
    return $str;
}
///<summary>format string.</summary>
///<note> a formatted string is a string with piped attached chain list</note>
///<param name="str">string to format</param>
///<param name="__extra"> extra argument to pass</param>
/**
* format string.
* @param mixed $str string to format
* @param mixed $__extra  extra argument to pass
*/
function igk_str_format($str){
    $args=array_slice(func_get_args(), 1);
    $m="";
    if(igk_count($args) > 0){
        $c=preg_match_all(IGK_FORMAT_STR_REGEX, $str, $match);
        for($i=0; $i < $c; $i++){
            $trimExpression=trim($match["value"][$i]);
            $data=explode('|', $trimExpression);
            $piped=null;
            $index=trim($data[0]);
            $piped=null;
            if(preg_match(IGK_PIPED_EXPRESSION_REGEX, $trimExpression, $tab)){
                $piped=igk_getv($tab, "pipe");
                $trimExpression=trim(str_replace($tab[0], "", $trimExpression));
            }
            if(is_numeric($index)){
                if(isset($args[$index])){
                    $m=$args[$index];
                }
            }
            else{
                $m=igk_conf_get($args[0], $index);
            }
            if($piped){
                $m=igk_html_php_evallocalized_expression($trimExpression, ["v"=>$m, "pipe"=>$piped, "a"=>1]);
            }
            $str=str_replace($match[0][$i], $m, $str);
        }
    }
    return $str;
}
///<summary>bind data using format</summary>
///<param name="data">mixed. array of data or string</param>
/**
* bind data using format
* @param mixed $data mixed. array of data or string
*/
function igk_str_format_bind($format, $data){
    $o="";
    if(is_array($data)){
        foreach($data as $k){
            $o .= igk_str_format($format, $k);
        }
    }
    else{
        $o=igk_str_format($format, $data);
    }
    return $o;
}
///<summary>used to retrieve pattern keys from path pattern expression</summary>
///<code>used in IGKUri</code>
/**
* used to retrieve pattern keys from path pattern expression
*/
function igk_str_get_pattern_keys($s){
    $tab=array();
    $t=array();
    $s=preg_match_all("#:(?P<name>([a-z0-9]+))\+?#i", $s, $t);
    for($i=0; $i < $s; $i++){
        $tab[]=$t["name"][$i];
    }
    return $tab;
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_str_get_version($v){
    $tb=explode(".", $v);
    if(igk_count($tb) < 4){
        $c=igk_count($tb)-4;
        while($c > 0){
            $tb[]=0;
            $c--;
        }
    }
    else{
        $tb=array_shift($tb, 4);
    }
    return igk_str_join_tab($tb, '.', false);
}
///<summary>glue data.</summary>
/**
* glue data.
*/
function igk_str_glue($mix=","){
    $tab=array_slice(func_get_args(), 1);
    if(igk_count($tab)<=0)
        return null;
    $s="";
    $fc=0;
    if(is_string($mix))
        $fc=function($v, & $s=null){
        return $v;
    };
    else if(is_callable($mix)){
        $fc=$mix;
        $mix="";
    }
    else
        return null;
    foreach($tab as $v){
        if(empty($v))
            continue;
        $h=$fc($v, $s);
        if(empty($s)){
            $s=$h;
        }
        else
            $s .= $mix.$h;
    }
    return $s;
}
///<summary>shortcut to IGKString::IndexOf</summary>
/**
* shortcut to IGKString::IndexOf
*/
function igk_str_index_of($str, $pattern, $offset=0){
    return IGKString::IndexOf($str, $pattern, $offset);
}
///<summary></summary>
///<param name="glue"></param>
///<param name="text"></param>
///<param name="start"></param>
///<param name="offset" default="null"></param>
/**
* 
* @param mixed $glue
* @param mixed $text
* @param mixed $start
* @param mixed $offset the default value is null
*/
function igk_str_insert($glue, $text, $start, $offset=null){
    $offset=$offset === null ? $start: $offset;
    return substr($text, 0, $start).$glue.substr($text, $offset);
}
///<summary></summary>
///<param name="str1"></param>
///<param name="str2"></param>
///<param name="pattern"></param>
/**
* 
* @param mixed $str1
* @param mixed $str2
* @param mixed $pattern
*/
function igk_str_join($str1, $str2, $pattern){
    return $str1.$pattern.$str2;
}
///<summary></summary>
///<param name="tab"></param>
///<param name="separator" default="','"></param>
///<param name="key" default="true"></param>
/**
* 
* @param mixed $tab
* @param mixed $separator the default value is ','
* @param mixed $key the default value is true
*/
function igk_str_join_tab($tab, $separator=',', $key=true){
    return IGKString::Join($tab, $separator, $key);
}
function igk_str_pipe_args($src, & $c, $removequote= 0){
	$c = 0;
	$v = "";
	$ln = strlen($src);
	$end = false;
	// read til pipe found outside quote
	while(!$end && ($c<$ln)){
		$ch = $src[$c];
		switch($ch){
			case '|':
				$end = true;
			break;
			case "'":
				$v.= igk_str_read_brank($src, $c, $ch,$ch);

				break;
			default:
				$v.= $ch;
				break;
		}
		$c++;
	}
	$v = trim($v);
	if (($removequote) && (strlen($v = trim($v)) >0) && ($v[0]=="'")){
		$v = substr($v, 1, -1);
	}
	$pipe = substr($src, $c);
    return [$v, $pipe];
}
function igk_str_remove_quote($v){
	if ((strlen($v = trim($v)) >0) && ($v[0]=="'")){
		$v = substr($v, 1, -1);
	}
	return $v;
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_str_pipe_data($src, $removequote=0){
    // $tdata=explode("|", $v);
	list($v, $pipe) = igk_str_pipe_args($src, $c, $removequote); 
    return igk_str_pipe_value($v, $pipe); // substr($src, $c)); // implode("|", array_slice($tdata, 1)));
}
///<summary></summary>
///<param name="v"></param>
///<param name="pipe"></param>
/**
* 
* @param mixed $v
* @param mixed $pipe
*/
function igk_str_pipe_value($v, $pipe){
 
    $tpipe=explode('|', $pipe);
    $loc_t=igk_reg_pipe(null);
    foreach($tpipe as $s){
        $s=trim($s);
        if(  empty($s)){ 
            continue;
        }
        $args=[$v];
        if(($pos=strpos($s, ";")) !== false){
            $exp=substr($s, $pos + 1);
            $s=substr($s, 0, $pos);
            $tab=igk_get_query_options($exp);
            if($tab)
                $args[]=$tab;
        }
        $fc=igk_getv($loc_t, $s);
        if($fc && igk_is_callable($fc)){
            $v=igk_invoke_callback_obj(null, $fc, $args);
        }
    }
    return $v;
}
///<summary>remove magic cote from message</summary>
/**
* remove magic cote from message
*/
function igk_str_quotes($content){
    if(ini_get("magic_quotes_gpc") && is_string($content)){
        $content=stripcslashes($content);
    }
    return $content;
}
///<summary></summary>
///<param name="s"></param>
/**
* 
* @param mixed $s
*/
function igk_str_read_args($s){
    $count=strlen($s);
    $i=0;
    $tab=array();
    $v="";
    while($i < $count){
        $ch=$s[$i];
        $i++;
        switch($ch){
            case " ":
            if(!empty($v)){
                $tab[]=$v;
                $v=null;
            }
            break;
            case '"':
            if(empty($v)){
                $i--;
                $rgx=igk_str_read_brank($s, $i, $ch, $ch, null, 1);
                $v .= $rgx;
                $m=4;
                $i++;
                $tab[]=$v;
                $v=null;
            }
            else{
                $v .= $ch;
            }
            break;default: $v .= $ch;
            break;
        }
    }
    if(!empty($v)){
        $tab[]=$v;
    }
    return $tab;
}
///<summary></summary>
///<param name="treat"></param>
///<param name="goptions" default="null" ref="true"></param>
/**
* 
* @param mixed $treat
* @param mixed * $goptions the default value is null
*/
function igk_str_read_bracket_source_code($treat, & $goptions=null){
    $goptions=$goptions ?? (function(){
        $s=igk_str_read_createoptions();
        $s->ignoreEmptyLine=0;
        $s->removeComment=0;
        $s->endOffset=0;
        return $s;
    })();
    $m=igk_str_read_source_code_bracket(is_array($treat) ? $treat: [$treat], $goptions);
    return $m;
}
///<summary>used to read in brank</summary>
///<param name="exp">expression</param>
///<param name="$c">position offset </param>
///<param name="end">char end</param>
///<param name="start">char start </param>
///<param name="ln">ln: size to read</param>
///<param name="escaped">if end char must consider escape</param>
/**
* used to read in brank
* @param mixed $exp expression
* @param mixed $c position offset
* @param mixed $end char end
* @param mixed $start char start
* @param mixed $ln ln: size to read
* @param mixed $escaped if end char must consider escape
*/
function igk_str_read_brank($exp, & $c, $end="]", $start="[", $ln=null, $escaped=0, $autoclose=1){
    $iv="";
    $ln=$ln ?? strlen($exp);
    $deep=-1;
    $litteral=$end == $start;
    if($litteral){
        if($exp[$c] == $start){
            $c++;
            $iv=$start;
        }
    }
    else{
        $escaped=0;
    }
    $g=0;
    $eh=0;
    while($ln > $c){
        $ch=$exp[$c];
        if(!$eh && !(($ch != $end) || ($deep > 0) || ($g=$eh))){
            break;
        }
        if($eh){
            $eh=0;
        }
        else
            $eh=($escaped) && $ch == "\\";
        $iv .= $ch;
        $c++;
        if(!$litteral && !$g){
            if($ch == $start){
                $deep++;
            }
            else if($ch == $end)
                $deep--;
        }
        $g=0;
    }
    if((!empty($iv) && ($ch == $end)) || $autoclose)
        $iv .= $end;
    return $iv;
}



///<summary>detect all loadable tab in the string and replace with htmlentities</summary>
function igk_str_escape_tag($s){
	if (empty($s))
		return $s;
	$offset=0;
	$c = 0;
	while(preg_match("/<(\/)?(?P<tag>(script|img|object|iframe|style|link))(\s+(\/?>)?|>)/i", $s, $tab, PREG_OFFSET_CAPTURE, $offset)){
		// igk_wln($offset, $tab);
		$_close_f = $tab[0][0][strlen($tab[0][0]) -1]== ">";
		$m = str_replace("<", "&lt;", $tab[0][0]);
		$m = str_replace(">", "&gt;", $m);
		$s_ln =  strlen($tab[0][0]);
		if (!$_close_f){
			$pos = $offset + $s_ln;
			$ln = strlen($s);
			while($pos<$ln){
				$ch = $s[$pos];
				$s_ln++;
				// igk_wln("pos: ".$ch);
				if ($ch==">"){
					$m.="&gt;";
					break;
				}
				switch($ch){
					case '"':
					case "'": //script script
						$m.= htmlentities(igk_str_read_brank($s, $pos, $ch, $ch),
							ENT_NOQUOTES, "UTF-8");
						$s_ln = $pos+1;
						break;
					default:
						$m.= $ch;
					break;
				}
				$pos++;
			}
		}
		$s = substr($s, 0, $tab[0][1]).$m.substr($s, $tab[0][1]+$s_ln );
		$offset = $tab[0][1]+strlen($m);
		$c++;
	}
	return $s;
}

function igk_str_escape_tag_replace(& $s, & $offset, $tab, $entityflag=ENT_NOQUOTES, $encoding="UTF-8"){
	$_close_f = $tab[0][0][strlen($tab[0][0]) -1]== ">";
	$m = str_replace("<", "&lt;", $tab[0][0]);
	$m = str_replace(">", "&gt;", $m);
	$s_ln =  $tab[0][1]+strlen($tab[0][0]); //after offset


	if (!$_close_f){
		$pos = $s_ln;
		$ln = strlen($s);
		while($pos<$ln){
			$ch = $s[$pos];
			$s_ln++;
			// igk_wln("pos: ".$ch);
			if ($ch==">"){
				$m.="&gt;";
				break;
			}
			switch($ch){
				case '"':
				case "'": //script script
					$m.= htmlentities(igk_str_read_brank($s, $pos, $ch, $ch), $entityflag, $encoding);
					$s_ln = $pos+1;
					break;
				default:
					$m.= $ch;
				break;
			}
			$pos++;
		}
	} 
	//igk_text($s);
	$b = substr($s, 0, $tab[0][1]).$m;
	$s = $b.substr($s, $s_ln);//tab[0][1] +strlen($tab[0] $s_ln);
	$offset = strlen($b);
}
function igk_html_escape_tag($s, $offset=0, $strict=1, $entityflag=ENT_NOQUOTES, $encoding="UTF-8"){
	$ln = strlen($s);
	$pos = $offset;
	$out_tag = 0;
	$o = "";
	$rgxs = "";
	// igk_text("length : ".$ln."\n");

	if ($strict)
		$rgxs = "/<(\/)?(?P<tag>(script|img|object|iframe|style|link|video|audio|embed))(\s+(\/?>)?|>)/i";
	else {
		$rgxs = "/<(\/)?(?P<tag>([a-z_]([a-z0-9_]+)?(:[[a-z_]([a-z0-9_]+)?])?))(\s+(\/?>)?|>)/i";
		//igk_wln("out ".htmlentities($rgxs));
	}
	while($pos < $ln){
		$ch = $s[$pos];
		// igk_text("ch: ".$ch."\n");
		switch($ch){
			case "<":
				if (preg_match($rgxs, $s, $tab, PREG_OFFSET_CAPTURE, $pos) && ($tab[0][1]== $pos)){
					//escape the tag
					igk_str_escape_tag_replace($s, $pos, $tab, $entityflag, $encoding);
					$o.= substr($s, $tab[0][1], $pos -  $tab[0][1] );
					$ln = strlen($s);
					$pos--;
				}else {
					//read till > found
					$o.= $ch;
				}
				break;
			// case "'":
			// case "\"":
				// $f = igk_str_read_brank($s, $pos, $ch, $ch);
				// $f = htmlentities($f, $entityflag, $encoding);
				// $o.= $f;
				// break;
			default:
					$o.=$ch;
				break;
		}
		$pos++;
	}
	return $o;
}



///<summary></summary>
/**
* 
*/
function igk_str_read_callback_list(){
    static $callbacklist;
    if($callbacklist == null)
        $callbacklist=["endmultilinestring"=>function($t, $start, & $offset, & $mode, $options, $match){
                if($match["name"][0] == $options->matchName){
                    $mode=$options->{'@multlinestringmode'};
                    $options->datalf=$options->{'@datalf'};
            $options->offsetBracket=$options->{'@offsetBracket'};
            $options->ignoreEmptyLine=$options->{'@multistringEmptyLine'}
             ?? 1;
            $t=$options->data.IGK_LF. $match[0][0];
            $offset=strlen($t);
            unset($options->data);
            unset($options->{'@multlinestringmode'});
            unset($options->{'@multistringEmptyLine'});
            unset($options->matchName);
            $t .= IGK_LF;
            $offset++;
            if($options->treatClassStatement){
                        if($mode == 0){
                            if(strpos($match[0][0], ';', -1) !== false){
                                $offset--;
                            }
                }
            }
        }
        else
            $offset=strlen($t);
        return $t;
    }
    , "startmultilinestring"=>function($t, $start, & $offset, & $mode, $options, $match){
                if($mode == 3){
                    $offset=$start + strlen($match[0][0]);
                    return $t;
                }
        $options->matchName=$match['name'][0];
        $ld="";
        if($options->FormatText){
                    $ld=igk_str_read_get_intent($options);
                    $options->data .= $ld.trim($t);
                    $t=$options->data;
                    $options->data="";
                }
        $offset=strlen($t);
        $options->{'@multistringEmptyLine'}=$options->ignoreEmptyLine;
        $options->{'@multlinestringmode'}=$mode;
        $options->{'@datalf'}=igk_getv($options, 'datalf');
        $options->{'@offsetBracket'}=igk_getv($options, 'offsetBracket');
        unset($options->datalf);
        $options->offsetBracket=0;
        $options->ignoreEmptyLine=0;
        $mode=3;
        return $t;
    }
    , "uncollapsestringBracket"=>function($t, $start, & $offset, & $mode, $options){
                $lis=$start;
                $s=igk_str_read_brank($t, $lis, $t[$start], $t[$start], null, 1);
                if(($mode == 10) && ($k=igk_getv($options, "saveString"))){
                    if(!empty($d=trim($options->data)))
                        $options->outString[$k][]=$d;
                    $options->outString[$k][]=trim(substr($t, $offset, $start - $offset)).trim($s);
                    $options->data="";
                    $t=substr($t, $lis + 1);
                    $offset=0;
                }
        else{
                    $offset=$lis + 1;
                }
        return $t;
    }
    , "ignoreComment"=>function($t, $start, & $offset, & $mode, $options){
                $t=substr($t, 0, $start);
                $offset=strlen($t) + 1;
                return $t;
            }
    ];
    return $callbacklist;
}
function igk_str_uncollapseString($v){
    if (is_string($v)){
        if (preg_match("/^(\"|')/", $v)){ 
            $p = 1;
            $v = substr(igk_str_read_brank($v, $p, $v[0], $v[0], null, 1, 0),0, -1); 
        }
    }
    return $v;
}
///<summary>call this for cleaning code source</summary>
///<param name="lines">mixed. array of string </param>
///<param name="options"> options object with clean source parameter </param>
/**
* call this for cleaning code source
* @param mixed $lines mixed. array of string
* @param mixed $options  options object with clean source parameter
*/
function igk_str_read_clean_source_code($lines, & $options=null){
    $tab=igk_str_read_create_cleanup_source();
    if($options == null){
        $options=igk_str_read_createoptions();
        $options->endLine=count($lines);
    }
    else{
        if(!isset($options->endLine) || ($options->endLine == -1))
            $options->endLine=count($lines);
    }
    $options->bracketDepth=-1;
    $options->stop=0;
    if(!isset($options->endLine) || ($options->endLine == -1))
        $options->endLine=count($lines);
    $callbacklist=igk_str_read_callback_list();
    array_unshift($tab, (object)array(
            "name"=>"uncollapsestring",
            "mode"=>[0, 8, 9, 10],
            "pattern"=>"/(\"|')/",
            "callback"=>$callbacklist["uncollapsestringBracket"]
        ));
    array_unshift($tab, (object)array(
            "name"=>"bracketIgnoreCollapseStart",
            "mode"=>8,
            "pattern"=>"/\{/i",
            "callback"=>function($t, $start, & $offset, & $mode, $options, $data=null){
                if(!isset($options->bracketDepth) || $options->bracketDepth == -1){
                    $options->bracketDepth=0;
                }
                else{
                    $options->bracketDepth++;
                    $t=substr($t, $start + 1);
                    $offset=0;
                    return $t;
                }
                $t=substr($t, 0, $start);
                $offset=strlen($t) + 1;
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"bracketIgnoreComment",
            "mode"=>8,
            "pattern"=>"#//(.)+$#i",
            "callback"=>$callbacklist["ignoreComment"]
        ));
    array_unshift($tab, (object)array(
            "name"=>"defineConstant",
            "mode"=>0,
            "pattern"=>"#\s*define\s*($|([\(])\s*)#",
            "callback"=>function($t, $start, & $offset, & $mode, $options, $data=null){
                if(!isset($options->bracketDepth)){
                    igk_wln(igk_show_trace());
                    igk_wln_e("backetNot define");
                }
                if($options->bracketDepth > -1){
                    $offset=$start + strlen($data[0][0]);
                    return $t;
                }
                if(igk_getv($options, "noHandleDefinitions")){
                    $offset=$start + strlen($data[0][0]);
                    return $t;
                }
                $mode=10;
                $offset=$start + strlen($data[0][0]);
                $options->saveString="name";
                $options->outString=array("name"=>array(), "value"=>array());
                $t=substr($t, $offset);
                $offset=0;
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"endReadDefineConstant",
            "mode"=>10,
            "pattern"=>"#(\)|\)\s*)?;#i",
            "callback"=>function($t, $start, & $offset, & $mode, $options, $data=null){
                $txt=trim($data[0][0]);
                if($emode=igk_getv($options, 'endMode')){
                    if(!preg_match("/;$/", $txt)){
                        igk_wln_e("content not end with ';': ".$mode. ": ".$options->lineNumber."--- : ---".$txt);
                    }
                    $t=substr($t, $start + strlen($txt) + 1);
                    $offset=0;
                    $mode=0;
                    unset($options->endMode);
                }
                else{
                    $rm="";
                    if(!empty($v_c=trim($options->data))){
                        if($txt == ";"){
                            if($v_c[strlen($v_c)-1] == ")"){
                                $v_c=substr($v_c, 0, -1);
                            }
                        }
                        $rm .= $v_c;
                    }
                    $options->data="";
                    $rm .= trim(substr($t, $offset, $start - $offset));
                    $v=$options->outString["value"];
                    if(!empty($v_c=trim($rm)))
                        $v[]=$v_c;
                    $name=implode("", $options->outString["name"]);
                    $value=implode("", $v);
                    if(!isset($options->definitions)){
                        $options->definitions=array();
                    }
                    $options->definitions["constants"][]=[$name, $value];
                    $t=substr($t, $start + strlen($data[0][0]));
                    $offset=0;
                    unset($options->saveString);
                    unset($options->outString);
                    if(preg_match("/;$/", $data[0][0])){
                        $mode=0;
                    }
                    else{
                        $options->endMode=10;
                    }
                }
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"endReadDefineConstantName",
            "mode"=>10,
            "pattern"=>"#s*,\s*#i",
            "callback"=>function($t, $start, & $offset, & $mode, $options, $data=null){
                if($options->saveString == 'value'){
                    $offset=$start + strlen($data[0][0]);
                    $options->outString["value"][]=$data[0][0];
                    return $t;
                }
                $options->saveString='value';
                $offset=0;
                $t=substr($t, $start + 1);
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"bracketCollapseIngoreEnd",
            "mode"=>8,
            "pattern"=>"/\}/i",
            "callback"=>function($t, $start, & $offset, & $mode, $options, $data=null){
                $t=substr($t, $start + 1);
                $offset=0;
                $options->bracketDepth--;
                if(empty(trim($t))){
                    $offset=strlen($t) + 1;
                }
                if($options->bracketDepth < 0){
                    $options->stop=0;
                    $mode=0;
                    $options->bracketDepth=-1;
                    $options->data="";
                    $offset=0;
                }
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"startBracket",
            "mode"=>0,
            "pattern"=>"/\{/i",
            "callback"=>function($t, $start, & $offset, & $mode, $options){
                $offset=$start + 1;
                if(!isset($options->bracketDepth) || ($options->bracketDepth == -1)){
                    $options->bracketDepth=0;
                    $goptions=(object)array(
                    "removeComment"=>$options->removeComment,
                    "ignoreEmptyLine"=>$options->ignoreEmptyLine,
                    "startLine"=>0,
                    "endLine"=>1,
                    "bracketDepth"=>$options->bracketDepth,
                    "offset"=>0,
                    "outOffset"=>0
                );
                    $m=igk_str_read_bracket_source_code(substr($t, $start), $goptions);
                    if($goptions->stop){
                        $lnend=substr($t, $start + $goptions->outOffset);
                        $t=substr($t, 0, $start).$m;
                        $offset=strlen($t);
                        $t .= $lnend;
                        $options->bracketDepth=-1;
                    }
                    else{
                        $options->bracketDepth=$goptions->bracketDepth;
                        $offset=strlen($t) + 1;
                    }
                }
                else{
                    $options->bracketDepth++;
                    $mode=0;
                }
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"endNormalBracket",
            "mode"=>0,
            "pattern"=>"/\}/i",
            "callback"=>function($t, $start, & $offset, & $mode, $options){
                $offset=$start + 1;
                $options->bracketDepth--;
                if($options->bracketDepth < -1){
                    igk_wln_e(__LINE__.": failed for normal bracket end: ".$options->bracketDepth. " = ".$options->lineNumber);
                }
                if($options->bracketDepth == 0){
                    $options->bracketDepth=-1;
                }
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"markGroup",
            "mode"=>0,
            "pattern"=>"/(?P<type>(trait|function|((abstract|final) \\s*)?class|interface)) \s*([^\(])?/m",
            "callback"=>function($t, $start, & $offset, & $mode, $options, $data=null){
                if($options->bracketDepth > -1){
                    $offset=$start + strlen($data[0][0]);
                    return $t;
                }
                $lis=$start;
                $type=preg_match("/(function|class|trait|interface)/", $data["type"][0], $tab) ? $tab[0]: 0;
                if(!empty($options->data)){
                    $sdata=$options->data;
                    $ln=strlen($sdata);
                    $t=$t.$sdata;
                    unset($sdata);
                }
                $options->data="";
                $options->outOffset=$start;
                switch($type){
                    case "class":
                    case "function":
                    case "interface":
                    $n=strpos($t, "{", $start + 1);
                    if($n !== false){
                        $treat=substr($t, $start);
                        $t=substr($t, 0, $start);
                        $goptions=(object)array(
                        "stop"=>0,
                        "ignoreEmptyLine"=>0,
                        "removeComment"=>0,
                        "offset"=>$n - $start,
                        "startLine"=>0,
                        "endLine"=>1,
                        "bracketDepth"=>-1,
                        "id"=>"readMarkGroupSourceCodeBracket"
                    );
                        $m=igk_str_read_source_code_bracket([$treat], $goptions);
                        if(!$goptions->stop || !preg_match("/\}$/i", trim($m))){
                            $options->bracketDepth=$goptions->bracketDepth;
                            $mode=8;
                            $offset=strlen($t) + 1;
                        }
                        else{
                            $mode=0;
                            $options->outOffset += strlen($m);
                            $ss=substr($treat, 0, $start).substr($treat, $n + strlen($m));
                            $t=$ss;
                            $offset=strlen($t);
                        }
                    }
                    else{
                        $mode=8;
                        $t=substr($t, 0, $start);
                        $offset=strlen($t) + 1;
                    }
                    break;
                }
                return $t;
            }
        ));
    return igk_str_read_source_code($lines, function($text) use ($options){
        $s="";
        return $text;
    }
    , $options, $tab);
}
///<summary></summary>
/**
* 
*/
function igk_str_read_create_cleanup_source(){
    $c=igk_str_read_callback_list();
    return array(
            (object)array(
                "name"=>"endmultilinestring",
                "pattern"=>"/^(?P<name>[a-z]+)($|;)?/i",
                "mode"=>3,
                "callback"=>$c["endmultilinestring"]
            ),
            (object)array(
                "name"=>"startmultilinestring",
                "pattern"=>"#\<\<\<(')?(?P<name>[a-z]+)(\\1)?\s*$#i",
                "mode"=>0,
                "callback"=>$c["startmultilinestring"]
            ),
            (object)array(
                "name"=>"endcomment",
                "pattern"=>"#\*\/#i",
                "mode"=>1,
                "callback"=>function($t, $start, & $offset, & $mode, $options){
                    $offset=$start + 2;
                    $mode=0;
                    $s="";
                    if(!$options->removeComment){
                        $s=$options->data. IGK_LF.substr($t, 0, $start + 2);                        
                        igk_wln_e("End comment ".$offset, $options);
                    }
                    unset($options->data);
                    $t=$s.substr($t, $offset);
                    return $t;
                }
            ),
            (object)array(
                "name"=>"startcomment",
                "pattern"=>"#/\*#i",
                "mode"=>0,
                "callback"=>function($t, $start, & $offset, & $mode, $options){
                    if(($j=strpos($t, "*/", $start)) !== false){
                        $offset=$j + 2;
                        if($options->removeComment){
                            $t=substr($t, 0, $start).substr($t, $offset);
                        }
                    }
                    else{
                        $mode=1;
                        $offset=strlen($t);
                    }
                    return $t;
                }
            ),
            (object)array(
                "pattern"=>"#(\"|')#i",
                "mode"=>0,
                "name"=>"stringReading",
                "callback"=>function($t, $start, & $offset, & $mode, $options){
                    if($mode != 0){
                        $offset=$start + 1;
                        return $t;
                    }
                    $ch=$t[$start];
                    $value=igk_str_read_brank($t, $start, $ch, $ch, null, 1);
                    $offset=$start + 1;
                    return $t;
                }
            ),
            (object)array(
                "pattern"=>"#//(.)*$#",
                "name"=>"singleLineComment",
                "mode"=>0,
                "callback"=>function($t, $start, & $offset, & $mode, $options){
                    if($options->removeComment){
                        $s=trim(substr($t, 0, $start));
                        $a="";
                        if(!empty($s)){
                            if(preg_match("/\s$/", $t, $c) && ($c[0] == "\r")){
                                $a="\r";
                            }
                            $t=$s.$a;
                        }
                        else
                            $t="";
                    }
                    $offset=strlen($t) + 1;
                    return $t;
                }
            )
        );
}
///<summary>represent basic options for reading source code </summary>
/**
* represent basic options for reading source code
*/
function igk_str_read_createoptions(){
    return (object)array(
            "Depth"=>0,
            "startLine"=>0,
            "endLine"=>-1,
            "removeComment"=>1,
            "ignoreEmptyLine"=>1,
            "FormatText"=>1,
            "@context"=>"",
            "ignoreProcessor"=>1,
            "noHandleDefinitions"=>0,
            "noAutoParameter"=>0,
            "indentChar"=>"\t",
            "endOffset"=>0,
            "stop"=>0,
            "data"=>"",
            "isDebug"=>0,
            "mode"=>0,
            "treatClassStatement"=>0,
            "offsetBracket"=>0,
            "noPhpPreprocessor"=>0,
            "definitions"=>null,
            "documentation"=>null,
            "parameters"=>null,
            "toread"=>0,
            "callback"=>array()
        );
}
///<summary></summary>
///<param name="options"></param>
///<param name="mode"></param>
/**
* 
* @param mixed $options
* @param mixed $mode the default value is 0
*/
function igk_str_read_get_intent($options, $mode=0){
    if($mode == 3)
        return "";
    return str_repeat($options->indentChar, igk_getv($options, 'offsetBracket', 0));
}
///<summary>read value in branket</summary>
///<param name="s">search string</param>
///<param name="start">start branket in expression</param>
///<param name="end">end branket in expression</param>
/**
* read value in branket
* @param mixed $s search string
* @param mixed $start start branket in expression
* @param mixed $end end branket in expression
*/
function igk_str_read_in_brancket($s, $start, $end, & $tc_c=null){
    if(empty($s))
        return null;
    $g=array();
    $xs=0;
    $expr=array($s);
    while(count($expr) > 0){
        $q=array_shift($expr);
        $i=strpos($q, $start);
        if(($i !== false) && ($i != -1)){
            $r=IGKString::IndexOf($q, $start, $i + 1);
            $rg=IGKString::IndexOf($q, $end, $i + 1);
            if($r == -1){
                $ln=$rg - $i - 1;
                if($ln > 0)
                    $g[]=substr($q, $i + 1, $ln);
            }
            else{
                $depth=1;
                $kindex=$r;
                $mark=false;
                $offsets=array();
                $bsegment=0;
                for($xs=$i + 1; $xs < strlen($s); $xs++){
                    if($q[$xs] == $start){
                        $depth++;
                        $offsets[]=(object)array("X"=>$xs, "Y"=>0);
                        $bsegment=count($offsets);
                        continue;
                    }
                    if($s[$xs] == $end){
                        $depth--;
                        if($depth == 0){
                            $kindex=$xs;
                            $mark=true;
                            break;
                        }
                        $bsegment--;
                        $tg=$offsets[$bsegment];
                        $tg->Y=$xs;
                        $offsets[$bsegment]=$tg;
                    }
                }
                if($mark){
                    $g[]=substr($s, $i + 1, $kindex - $i - 1);
                    foreach($offsets as $item){
                        $expr[]=substr($s, $item->X, $item->Y - $item->X + 1);
                    }
                }
            }
        }
    }
    if($tc_c !== null)
        $tc_c += $xs;
    return $g;
}
///<summary>read source code algorithm . entry</summary>
///<param name="lines" >array of string line entries</param>
///<param name="callback" >callback to call at end</param>
///<param name="options" >option paramater to pass</param>
///<param name="toclean" >clean up object</param>
/**
* read source code algorithm . entry
* @param mixed $lines array of string line entries
* @param mixed $closure callback callback to call at end
* @param mixed $options option paramater to pass
* @param mixed $toclean clean up object
*/
function igk_str_read_source_code($lines, $callback, & $options, $toclean=null){
    $desc="";
    $m="";
    $options=$options ?? igk_str_read_createoptions();
    $count=igk_count($lines);
    if($options->endLine == -1){
        $options->endLine=$count-1;
    }
    $mode=0;
    $toclean=$toclean ?? igk_str_read_create_cleanup_source();
    $eline=$options->endLine;
    $sline=$options->startLine;
    foreach(["stop"=>0, "offset"=>0, "isDebug"=>0] as $k=>$v){
        if(!isset($options->$k))
            $options->$k=$v;
    }
    $hw=0;
    $tq=array();
    $options->output=& $desc;
    $allMode='*';
    $fc_treatLine=igk_getv($options->callback, "treatLine") ?? function($t){
        return $t;
    };
    $fc_inmode=function($options, $mode){
        return ($mode == 3) || (igk_getv($options, '@context') == 'html');
    };
    while(!$options->stop && ($sline<=$eline) && ($sline < $count)){
        if($hw){
            $uself=!igk_getv($options, 'datalf');
            if($uself)
                $desc .= IGK_LF;
            $hw=0;
        }
        $t=rtrim($lines[$sline]);
        if($mode != 3){
            $t=ltrim($t);
        }
        $sline++;
        if($options->ignoreEmptyLine && empty($t)){
            continue;
        }
        $options->lineNumber=$sline-1;
        $options->lineText=$t;
        $def=0;
        $tq[]=$t;
        $nextoffset=null;
        $baseq="";
        $baseoffset=0;
        while(($q=array_pop($tq)) && !empty(trim($q))){
            $lpos=null;
            if($baseq == $q){
                if($options->offset == $baseoffset){
                    igk_wln_e("[blf] -  offset failed: ".$sline. ":".$q);
                }
            }
            $baseq=$q;
            $baseoffset=$options->offset;
            $nextoffset=$options->offset;
            foreach($toclean as $mk){
                $fcmode=$mk->mode;
                $modecond=(is_string($fcmode) && ($fcmode === $allMode)) || (is_callable($fcmode) && $fcmode($mode, $options)) || (is_array($fcmode) && in_array($mode, $fcmode)) || ($fcmode == $mode);
                if($modecond && preg_match($mk->pattern, $t, $tab, PREG_OFFSET_CAPTURE, $options->offset)){
                    if(!$lpos){
                        $lpos=array($mk, $tab[0][1], $tab, $mk->pattern);
                        continue;
                    }
                    if($tab[0][1] < $lpos[1]){
                        $lpos[0]=$mk;
                        $lpos[1]=$tab[0][1];
                        $lpos[2]=$tab;
                    }
                }
            }
            if($lpos){
                $fc="callback";
                $g=$lpos[0]->$fc;
                $t=$g($t, $lpos[1], $options->offset, $mode, $options, $lpos[2], $lpos[0]);
                if($options->offset < strlen($t))
                    array_push($tq, $t);
            }
        }
        $options->offset=0;
        $treat_i=($mode != 0) || ($options->offsetBracket > 0);
        if($treat_i || ($options->ignoreEmptyLine && empty(trim($t)))){
            if($treat_i && ((!$options->ignoreEmptyLine) || (($options->ignoreEmptyLine) && !empty($t)))){
                $uself=!igk_getv($options, 'datalf');
                $lf="";
                if($uself){
                    $lf=IGK_LF;
                    if(!$fc_inmode($options, $mode)){
                        $lf .= igk_str_read_get_intent($options, $mode);
                        $t=ltrim($t);
                    }
                }
                if(!isset($options->data) || empty($options->data)){
                    $options->data=$t;
                }
                else{
                    $options->data=rtrim($options->data).$lf.$t;
                }
            }
            continue;
        }
        $desc .= $fc_treatLine($t);
        if(empty($t))
            $hw=0;
        else
            $hw=1;
    }
    return $callback($desc);
}
///<summary>read source code in bracket</summary>
/**
* read source code in bracket
*/
function igk_str_read_source_code_bracket($lines, & $options=null){
    $tab=igk_str_read_create_cleanup_source();
    $options=$options ?? igk_str_read_createoptions();
    if(!isset($options->bracketDepth)){
        $options->bracketDepth=-1;
        igk_wln(igk_show_trace());
        igk_wln_e(__LINE__.":not bracketDepth define");
    }
    $options->stop=0;
    if(!isset($options->endLine) || ($options->endLine == -1))
        $options->endLine=count($lines);
    if(!isset($options->outOffset)){
        $options->outOffset=0;
    }
    array_unshift($tab, (object)array(
            "name"=>"uncollapsestring",
            "mode"=>0,
            "pattern"=>"/(\"|')/",
            "callback"=>function($t, $start, & $offset, & $mode, $options){
                $lis=$start;
                $s=igk_str_read_brank($t, $lis, $t[$start], $t[$start], null, 1);
                $offset=$lis + 1;
                $options->outOffset += ($lis - $start);
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"endbracket",
            "mode"=>0,
            "pattern"=>"/\}/i",
            "callback"=>function($t, $start, & $offset, & $mode, $options){
                if($options->bracketDepth<=0){
                    $t=substr($t, 0, $start + 1);
                    $offset=$start + strlen($t);
                    $options->outOffset += ($offset - $start);
                    $options->stop=1;
                    return $t;
                }
                $options->bracketDepth--;
                $offset=$start + 1;
                return $t;
            }
        ));
    array_unshift($tab, (object)array(
            "name"=>"startBracket",
            "mode"=>0,
            "pattern"=>"/\{/i",
            "callback"=>function($t, $start, & $offset, & $mode, $options){
                $offset=$start + 1;
                $options->outOffset += 1;
                if(!isset($options->bracketDepth) || ($options->bracketDepth == -1)){
                    $options->bracketDepth=0;
                    $t=substr($t, $start);
                    $offset=$offset - $start;
                }
                else
                    $options->bracketDepth++;
                return $t;
            }
        ));
    return igk_str_read_source_code($lines, function($text) use ($options){
        return $text;
    }
    , $options, $tab);
}
///<summary>remove all line empty line</summary>
/**
* remove all line empty line
*/
function igk_str_remove_empty_line($str){
    $t=preg_split("/(\r\n)|(\n)/i", $str);
    $o=IGK_STR_EMPTY;
    $i=0;
    foreach($t as  $v){
        if(($v == null) || empty($v) || (strlen(trim($v)) == 0))
            continue;
        if($i == 1)
            $o .= IGK_CLF;
        $o .= $v;
        $i=1;
    }
    return $o;
}
///<summary>remove line</summary>
/**
* remove line
*/
function igk_str_remove_lines($str){
    $t=preg_split("/(\r\n)|(\n)|(\t)/i", $str);
    $o=IGK_STR_EMPTY;

    foreach($t as $v){
        if(($v == null) || empty($v) || (strlen(trim($v)) == 0))
            continue;
        $o .= $v;
    }
    return trim($o);
}
///<summary></summary>
///<param name="p"></param>
///<param name="$c"></param>
/**
* 
* @param mixed $p
* @param mixed $c
*/
function igk_str_repeat($p, $c){
    $o="";
    while($c > 0){
        $o .= $p;
        $c--;
    }
    return $o;
}
///<summary>remove all parttern</summary>
/**
* remove all parttern
*/
function igk_str_rm_last($str, $pattern){
    $c=strlen($pattern);
    while(IGKString::EndWith($str, $pattern)){
        $str=substr($str, 0, strlen($str) - $c);
    }
    return $str;
}
///<summary></summary>
///<param name="str"></param>
///<param name="pattern"></param>
/**
* 
* @param mixed $str
* @param mixed $pattern
*/
function igk_str_rm_start($str, $pattern){
    if($pattern != null){
        $c=strlen($pattern);
        while(($c > 0) && IGKString::StartWith($str, $pattern)){
            $str=substr($str, $c);
        }
    }
    return $str;
}
///<summary></summary>
///<param name="str"></param>
/**
* 
* @param mixed $str
*/
function igk_str_split_lines($str){
    return preg_split("/(\r\n)|(\n)/i", $str);
}
///<summary>convert to snake version</summary>
/**
 * convert to snake version
 */
function igk_str_snake($str){
    $out = $str;
    if (count($g = preg_split("/[A-Z]/", $str, -1, PREG_SPLIT_NO_EMPTY|PREG_SPLIT_OFFSET_CAPTURE))>1){
        $out ="";
        $offset = 0;  
        for($i=0; $i < count($g); $i++){
            $out .= substr($str, $offset, 1).$g[$i][0];
            $offset = $g[$i][1] + strlen($g[$i][0]); 
        }
    }
    return $out;
}
///<summary>split string data </summary>
/**
* split string data
*/
function igk_str_split_string($splitchr, $str){
    $ln=strlen($str);
    $pos=0;
    $tab=array();
    $v="";
    $treat=function($v){
        $cv=trim($v);
        if(!empty($cv) && (($ln=strlen($cv)) > 1) && ($cv[0] == $cv[$ln-1]) && (strpos('"\'', $cv[0]) !== false)){
            return substr($cv, 1, $ln-2);
        }
        return $cv;
    };
    while($pos < $ln){
        $ch=$str[$pos];
        switch($ch){
            case "\"":
            case "'":
            $v .= igk_str_read_brank($str, $pos, $ch, $ch);
            $pos++;
            break;
            case $splitchr:
            $tab[]=$treat($v);
            $v="";
            break;default: $v .= $ch;
            break;
        }
        $pos++;
    }
    if(!empty($v)){
        $tab[]=$treat($v);
    }
    return $tab;
}
///<summary></summary>
///<param name="content"></param>
///<param name="length" default="150"></param>
/**
* 
* @param mixed $content
* @param mixed $length the default value is 150
*/
function igk_str_summary($content, $length=150){
    if(strlen($content) > $length){
        $content=substr($content, 0, $length)."...";
    }
    return $content;
}
///<summary></summary>
///<param name="v"></param>
/**
* 
* @param mixed $v
*/
function igk_str_toupperentities($v){
    return preg_replace_callback("/&([a-z]+);/i", function($m){
        $g=substr($m[0], 1, -1);
        switch($g){
            case "OELIG":
            return "OE";default:
            return $g[0];
        }
    }
    , strtoupper(htmlentities($v, 0, 'UTF-8')));
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_str_toupperinvariant($n, $map=null){
	$interval = function($min, $max, & $map, $callback){
		for($i= $min; $i<=$max; $i++){
			$callback($i, $map);
		}
	};

	if ($map==null){
		$map = [];
		$interval(128, 131, $map, function($x, & $map){$map[$x]="A"; });
		$interval(135, 136, $map, function($x, & $map){$map[$x]="C"; });
		$interval(137, 140, $map, function($x, & $map){$map[$x]="E"; });
		$interval(146, 150, $map, function($x, & $map){$map[$x]="O"; });
		$interval(172, 175, $map, function($x, & $map){$map[$x]="I"; });
		$interval(182, 185, $map, function($x, & $map){$map[$x]="U"; });
		$map[160] = "A";
		$map[180] = "O";
	}
	$n = strtoupper($n);
	$ln = strlen($n);
	$hs = "";
	for($i=0; $i< $ln;$i++){
		if (ord($n[$i]) == 195){
			$i++;
			if (isset($map[ $j = ord($n[$i])])){
				$hs .= $map[$j];
			}else{
				$hs.="<$j>";
			}

		}else{
			$hs .= $n[$i];
		}
	}
	return $hs;
    // $n=preg_replace("/(\Ã©|\Ã¨|Ãª|Ã«|â¬)/i", "E", $n);
    // $n=preg_replace("/(\Ã¡|Ã |Ã¤|Ã¢)/i", "A", $n);
    // $n=preg_replace("/(\Ã§)/i", "C", $n);
    // $n=preg_replace("/(\Å)/i", "OE", $n);
    // $n=strtoupper($n);
    // return $n;
}
///<summary>transform [n] to conform balafon uri specification </summary>
/**
* transform [n] to conform balafon uri specification
*/
function igk_str_view_uri($n){
    return str_replace("_", "/", $n);
}
///<summary></summary>
/**
* 
*/
function igk_support_noextension_script(){
    $o=<<<EOF
AddHandler server-parsed .php
SetHandler Application/x-httpd-php
AddHandler Application/x-httpd-php .php
EOF;
    $o .= <<<EOF
<FilesMatch "[^\.]+|(\.ph(p3?|tml)$)">
	SetHandler Application/x-httpd-php
</FilesMatch>
EOF;
    return $o;
}
///<summary></summary>
///<param name="n"></param>
///<param name="m"></param>
/**
* 
* @param mixed $n
* @param mixed $m
*/
function igk_svg_bind_callable_list($n, $m){
    $list=$m->getTempFlag("svg-list");
    if($list){
        $o='<div class="igk-svg-lst" style="display:none">';
        foreach($list as $k=>$v){
            if(!file_exists($v))
                continue;
            $o .= "<".$k.">";
            $o .= igk_svg_content(igk_io_read_allfile($v));
            $o .= "</".$k.">";
        }
        $o .= "</div>";
        $n->Content=$o;
    }
    return 1;
}
///<summary>bind all svg document from the folder. All of them will be send to client. use igk_svg_register_icons if only send required is mandatory.</summary>
/**
* bind all svg document from the folder. All of them will be send to client. use igk_svg_register_icons if only send required is mandatory.
*/
function igk_svg_bind_svgs($doc, $dir=IGK_LIB_DIR."/Data/R/svg/icons"){
    $files=$doc->getTempFlag(__FUNCTION__, array());
    $g=$doc->body->addNodeCallback("svg-bind-all", function($t){
        $n=$t->addSingleNodeViewer(IGK_HTML_NOTAG_ELEMENT);
        return $n;
    });
    if(!$g->targetNode){
        $g->targetNode=igk_html_node_notagnode();
    }
    $t=$g->targetNode->clearChilds();
    $t->addOnRenderCallback(igk_create_node_callback('igk_svg_bind_callable_list', array("n"=>$doc)));
    if (!($list=$doc->getTempFlag("svg-list")))
        $list = array();
    foreach(IGKIO::GetFiles($dir, "/\.svg$/i") as $v){
        $list[strtolower(igk_io_basenamewithoutext($v))] = $v;
    }
    $doc->setTempFlag("svg-list", $list);
}
///<summary></summary>
///<param name="name"></param>
///<param name="file"></param>
/**
* 
* @param mixed $name
* @param mixed $file
*/
function igk_svg_bindfile($name, $file){
    $source=igk_environment()->{IGK_SVG_REGNODE_KEY};
    if($source){
        $f=$source->getParam("file", function(){
            return array();
        });
        $c=igk_io_basepath($file);
        if(!igk_sys_env_production()){
            if(!file_exists($tf = igk_io_basedir()."/".$c)){                
                throw new Exception("something bad happend. svg file to bind not resolved ".$tf);
            }
        } 
        $f[$name] =  $c;
        $source->setParam("file", $f);
    }
}
///<summary>render svg list</summary>
///<param name="n">cibling node</param>
///<param name="mn">host cibling - generally is document</param>
/**
* render svg list
* @param mixed $n cibling node
* @param mixed $mn host cibling - generally is document
*/
function igk_svg_callable_list($n, $m){ 
    $c= $m->getParam("sys://svg/lists");
    $g= $m->getParam("file");
    if(!$c || igk_count($c) == 0)
    return 0;
    $is_ajx=igk_is_ajx_demand();
    $o="";
    if($g){
		// igk_wln(__FILE__.":".__LINE__,  $g);
        foreach($c as $k=>$gg){
            $v=igk_getv($g, $k);
            if(($v === null) || empty($v)){
                continue;
            }
            $f=igk_io_expand_path($v); 
            if(!file_exists($f)){
                $f=igk_realpath(igk_io_basedir()."/{$v}");
            } 
            if(empty($f)){
                if(!igk_sys_env_production()){
                    igk_wln_e("svg : {$k} not found, from {$f} in {$v}");
                }
                continue;
            }
            $o .= "<".$k.">";
            $o .= igk_svg_content(igk_io_read_allfile($f));
            $o .= "</".$k.">";
        }
        $n->addSingleNodeViewer(IGK_HTML_NOTAG_ELEMENT)->targetNode->Content=$o; 
    }
    $m->setParam("sys://svg/lists", null);
    return 1;
}
///<summary></summary>
///<param name="s"></param>
/**
* 
* @param mixed $s
*/
function igk_svg_content($s){
    $s=preg_replace("#\<\?(.)+\?\>\s*#i", "", $s);
    $s=preg_replace("#\<!--(.)+-->#i", "", $s);
    $s=preg_replace("#\<!DOCTYPE([^\>]+)\>\s*#i", "", $s);
    $s=preg_replace_callback("#\<(?P<name>".IGK_XML_IDENTIFIER_RX.") (?P<attrib>([a-z0-9_\-\.\,\=\"\' :]*))/>#i", function($t){
        return "<".$t["name"]. " ".$t["attrib"]."></".$t["name"].">";
    }
    , $s);
    return $s;
}
///<summary></summary>
/**
* 
*/
function igk_svg_get_regicons(){
    $source=igk_environment()->{IGK_SVG_REGNODE_KEY};
    if($source)
        return $source->getParam("file");
    return null;
}
///<summary>register svg item</summary>
/**
* register svg item
*/
function igk_svg_register($doc, $name, $file){
    $b=$doc ? $doc->body: null;
    $_newfc=function(){
        $n=igk_createnode("div")->setClass("igk-svg-lst")->setStyle("display:none;");
        $n->addOnRenderCallback(igk_create_node_callback('igk_svg_callable_list', array($n)));
        return $n;
    };
    if(!$b){
        if(igk_is_atomic()){
            $b=igk_get_env("sys://node/svg_regnode");
            if($b == null){
                $b=$_newfc();
                igk_set_env("sys://node/svg_regnode", $b);
            }
            igk_environment()->{IGK_SVG_REGNODE_KEY} = $b;
            igk_svg_bindfile($name, $file);
            return $b;
        }
        return null;
    }
    $n=$doc->body->addNodeCallback("svgregister", function() use ($_newfc){

        $n = igk_environment()->{IGK_SVG_REGNODE_KEY} ?? $_newfc() ?? igk_die("svg node not created");
        igk_environment()->{IGK_SVG_REGNODE_KEY} = $n;
        return igk_html_node_clonenode($n);
    });
    igk_svg_bindfile($name, $file);
    return $n;
}
///<summary>register svg list document in directory. only required svg from the folder will be send to client</summary>
/**
* register svg list document in directory. only required svg from the folder will be send to client
*/
function igk_svg_register_icons($doc, $dir=IGK_LIB_DIR."/Data/R/svg/icons"){
    foreach(IGKIO::GetFiles($dir, "/\.svg$/i") as  $v){
         
        igk_svg_register($doc, igk_io_basenamewithoutext($v), $v);
    }
}
///<summary>render loaded svg file async </summary>
///<param name="o" default="null"></param>
/**
* render loaded svg file async
* @param mixed $o the default value is null
*/
function igk_svg_render_ajx($o=null){
   
    $c=igk_environment()->{IGK_SVG_REGNODE_KEY};
    if(!$c){ 
        return; 
    } 
	$key = "sys://svg/lists";
    $obj=$c->getParam($key);
    $tab=(array)$obj;
    if(igk_count($tab) > 0){
		$t = igk_createNode("div")->setClass("igk-svg-lst ajx")->setStyle("display:none;");
        igk_svg_callable_list($t, $c);
        if(igk_is_ajx_demand() || ($o == null)){
            $t->RenderAJX();
        }
        else{
            if($o->Document){
                $o->Document->body->getAppendContent()->addSingleNodeViewer('NoTagNode')->targetNode->add($t);
            }
            else
                $t->RenderAJX();
        }
        
        $c->getParam($key, null);
        igk_environment()->{IGK_SVG_REGNODE_KEY} = null;
    }
}
///<summary>use svg image</summary>
/**
* use svg image
*/
function igk_svg_use($name, $context=null){ 
    $c=igk_environment()->{IGK_SVG_REGNODE_KEY};
    if($c == null){
        igk_svg_register_icons(igk_app()->Doc);
        $c=igk_environment()->{IGK_SVG_REGNODE_KEY} ?? igk_die("failed to used svg registrating node");
        (function(){
            $n=igk_createnode("div");
            igk_set_env("sys://node/svg_regnode", $n);
            return $n;
        })();
    }
    $n=igk_createnode("div");
    $n["class"]="igk-svg-lst-i";
    $n["igk:svg-name"]=$name;
    $obj=$c->getParam("sys://svg/lists", function(){
        return array();
    });
    $obj[$name]=$context;
    $c->setParam("sys://svg/lists", $obj);
    $fc="igk_svg_use_callback";
    if(!igk_get_env(__FUNCTION__)){
        $n->setCallback("AcceptRender", $fc);
        igk_set_env(__FUNCTION__, 1);
    }
    igk_set_env($fc, null);
    return $n;
}
///<summary>use svg callback rendering</summary>
///<param name="o"></param>
///<param name="options" default="null"></param>
/**
* use svg callback rendering
* @param mixed $o
* @param mixed $options the default value is null
*/
function igk_svg_use_callback($o, $options=null){
 
    if( (igk_is_ajx_demand() &&  !igk_get_env(__FUNCTION__)) || ($options && $options->Document) ){
        igk_svg_render_ajx($options);
        igk_set_env(__FUNCTION__, 1);
    } 
    return 1;
}

///<summary>get the current user id</summary>
function igk_sys_current_user_id(){
	$uid = ($u = igk_app()->session->User) || ($u = igk_get_system_user()) ? $u->clId : null;
	return $uid;
}
///<summary>create uri system pattern info</summary>
/**
* create uri system pattern info
*/
function igk_sys_ac_create_pattern($ctrl, $uri, $methodpattern=IGK_REG_ACTION_METH){
    $k=$methodpattern;
    $pattern=igk_sys_ac_getpattern($k);
    $keys=igk_str_get_pattern_keys($k);
    $page=$uri;
    $e=new IGKSystemUriActionPatternInfo(array(
            "action"=>$k,
            "value"=>$uri,
            "pattern"=>$pattern,
            "uri"=>$page,
            "keys"=>$keys,
            "ctrl"=>$ctrl,
            "requestparams"=>null
        ));
    return $e;
}
///<summary></summary>
///<param name="basePatternUri"></param>
/**
* 
* @param mixed $basePatternUri
*/
function igk_sys_ac_getpattern($basePatternUri){
    return igk_pattern_matcher_get_pattern($basePatternUri);
}
///<summary>get uri action pattern info</summary>
/**
* get uri action pattern info
*/
function igk_sys_ac_getpatterninfo(){
    return igk_getctrl(IGK_SYSACTION_CTRL)->getPatternInfo();
}
///<summary>use to register action</summary>
/**
* use to register action
*/
function igk_sys_ac_register($uriPattern, $uri){
    igk_getctrl(IGK_SYSACTION_CTRL)->sys_ac_register($uriPattern, $uri);
}
///<summary>use to unregister uri action</summary>
/**
* use to unregister uri action
*/
function igk_sys_ac_unregister($uriPattern){
    igk_getctrl(IGK_SYSACTION_CTRL)->sys_ac_unregister($uriPattern);
}
///<summary>if muri is array ignore file</summary>
///<param name="muri">uri location</param>
///<param name="file" default="null">physical file path</param>
/**
* if muri is array ignore file
* @param mixed $muriuri location
* @param mixed $ile physical file path
*/
function igk_sys_add_cache_uri($muri, $file=null){
    $f=IGK_APP_DIR."/Caches/uri.cache";
    $t=array();
    if(file_exists($f)){
        include($f);
    }
    $d=igk_date_now();
    if(is_array($muri)){
        foreach($muri as $k=>$v){
            $t[$k]=$v."|".$d;
        }
    }
    else{
        $t[$muri]=$file."|".$d;
    }
    igk_sys_store_uri_cache($t);
}
///<summary>get the system author. alias function of constant IGK_AUTHOR</summary>
/**
* get the system author. alias function of constant IGK_AUTHOR
*/
function igk_sys_author(){
    return IGK_AUTHOR;
}
///<summary>system shortcut to current user authorisation</summary>
/**
* system shortcut to current user authorisation
*/
function igk_sys_authorize($authname, $authCtrl=null){
    if(igk_is_conf_connected())
        return true;
    $u=igk_app()->Session->User;
    if($u){
        if ($authCtrl){
            $authname = $authCtrl::name($authname);
        }
        return $u->auth($authname);
    }
    return false;
}
///<summary>build distribution </summary>
/**
* build distribution
*/
function igk_sys_build_dist($ctrl){
    $dir=$ctrl->getDeclaredDir();
    $distfolder=$dir."/".IGK_DIST_FOLDER;
    if(is_dir($distfolder)){
        IGKIO::RmDir($distfolder, true);
    }
    IGKIO::CreateDir($distfolder);
    IGKIO::CreateDir($distfolder."/js");
    IGKIO::CreateDir($distfolder."/css");
    IGKIO::CreateDir($distfolder."/img");
    IGKIO::CreateDir($distfolder."/data");
	//$pd=igk_io_getfiles($ctrl->getStylesDir(), "/\.css$/");
	//if($pd){
	//    $out="";
	//    foreach($pd as $k){}
	//}
	//$pd=igk_io_getfiles($ctrl->getScriptDir(), "/\.js$/");
	//if($pd){
	//    $out="";
	//    foreach($pd as $k){}
	//}
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="id"></param>
///<param name="uri"></param>
///<param name="callback"></param>
///<param name="message"></param>
///<param name="hiddenEntries" default="null"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $id
* @param mixed $uri
* @param mixed $callback
* @param mixed $message
* @param mixed $hiddenEntries the default value is null
*/
function igk_sys_buildconfirm_ajx($ctrl, $id, $uri, $callback, $message, $hiddenEntries=null){
    if(igk_qr_confirm()){
        $ctrl->call($callback);
    }
    else{
        $frame=igk_frame_add_confirm($ctrl, $id, $uri);
        $frame->Form->Div->Content=$message;
        if($hiddenEntries){
            foreach($hiddenEntries as $k=>$v){
                $frame->Form->addInput($k, "hidden", $v);
            }
        }
        igk_wl($frame->Render());
    }
}
///<summary>cache library file</summary>
/**
* cache library file
*/
function igk_sys_cache_lib_files(){
    igk_clear_cache();
    IGKSysCache::$LibFiles=array();
    $dirname=dirname(igk_io_projectdir());
    igk_io_basedir();
    $t_files=igk_load_env_files($dirname);
    igk_reglib($t_files);
    IGKSysCache::CacheLibFiles(true);
}
///<summary>get the cache request file</summary>
/**
* get the cache request file
*/
function igk_sys_cache_request(){
    $g="";
    $f=IGK_APP_DIR."/Caches/uri.cache";
    $dom=igk_getv($_SERVER, 'HTTP_HOST');
    if(!IGKValidator::IsIPAddress($dom) && preg_match('/^(([^\.])+\.)+(([^\.])+\.)([^\.]+)$/i', $dom)){
        return null;
    }
    else{
        $g=igk_io_current_request_uri();
    }
    if($g == "/")
        return $g."index.php";
    if(strstr($g, "/?")){
        $g="/index.php".substr($g, 1);
    }
    $g=igk_str_rm_last($g, "/");
    if(file_exists($f)){
        $t=array();
        include($f);
        if(isset($t[$g])){
            list($uri, $time)
            =explode("|", $t[$g]);
            return $uri;
        }
    }
    return $g;
}
///<summary>get if request require cache</summary>
/**
* get if request require cache
*/
function igk_sys_cache_require(){
    return defined("IGK_CACHE_REQUIRE") || igk_getv(igk_get_allheaders(), "IGK_CACHE_REQUIRE", 0);
}
///<summary></summary>
/**
* 
*/
function igk_sys_cache_uri(){
    return igk_getv(igk_get_allheaders(), "IGK_CACHE_URI");
}
///return system cgi folder
/**
*/
function igk_sys_cgi_folder(){
    return IGK_LIB_CGI_BIN_DIR;
}
///<summary>shortcut to check if a class is a component</summary>
/**
* shortcut to check if a class is a component
*/
function igk_sys_class_is_component($classname){
    return IGKHtmlItemBase::IsComponent($classname);
}
///------------------------------------------------------------
///sys function
///<summary>shortcut to check if a class is a html element</summary>
/**
* shortcut to check if a class is a html element
*/
function igk_sys_class_is_html_element($classname){
    return IGKHtmlItemBase::IsElement($classname);
}
///<summary>invoke configuration page settings</summary>
/**
* invoke configuration page settings
*/
function igk_sys_config_view($file){
    if(defined("IGK_PHAR_CONTEXT")){
        if(!igk_sys_env_production()){
            igk_wln("appdir: ".igk_const('IGK_APP_DIR'));
            igk_wln((new IGKHtmlRelativeUriValueAttribute(IGK_BALAFON_JS_CORE_FILE))->getValue());
        }
        igk_exit();
    }
    if(!igk_get_env("sys://data/configsettings") && file_exists($f=igk_io_basedatadir("/configure"))){
        $g=igk_json_parse(igk_io_read_allfile($f));
        igk_set_env("sys://data/configsettings", $g);
        if($g && igk_getv($g, "noConfig")){
            igk_navto(igk_io_baseuri());
        }
    }
    $igk=igk_app();
    if(!igk_environment()->IsWebApp() && ($p=igk_sys_getconfig("configuration_port")) && ($p != $_SERVER["SERVER_PORT"])){
        if($p == 443){
            $s=igk_secure_uri(igk_io_baseDomainUri(), true, false)."/Configs";
        }
        else
            $s=igk_io_baseDomainUri();
        igk_navto($s);
        igk_exit();
    }
    if(!$igk){
        igk_log_write_i("CONFIG", "No Instante found for configuration page");
        igk_exit();
    }
    
    try {
        if(igk_is_thumbnail_request()){
            $d=igk_createnode("thumbNailDocument", null, array($file));
            if($wb=igk_sys_getconfig("website_title")){
                $wb="- [ {$wb} ] ";
            }
            $d->Title=__("Configuration Page").$wb;
            $d->RenderAJX();
            igk_exit();
        }
        if($igk->Session->getParam("igk_wizeinstall") || (igk_server_is_local() && igk_getr("wizeinstall") == 1)){
            igk_header_no_cache();
            $c=igk_getctrl(IGK_CONF_CTRL);
            $t=array();
            if(isset($_POST["install"])){
                $t[]="install";
            }
            igk_ctrl_render_doc($c, "wizeinstall", $t);
            igk_exit();
        }

        $doc=$igk->Doc;
        $cnf=igk_getconfigwebpagectrl();
        if($cnf){
           $cnf->View();
        }
        
        if($doc){
            $doc->Title=__("title.igkwebconfig_1", igk_sys_domain_name());
            $doc->setBaseUri(igk_io_baseuri()."/Configs/");            
            $doc->Favicon= new IGKHtmlRelativeUriValueAttribute(IGK_LIB_DIR."/Default/R/Img/cfavicon.ico");
            igk_set_session_redirection(null);            
            igk_header_no_cache(); 
            $src = $doc->Render(); 
            igk_wl($src);
            $doc->setBaseUri(null);
        }
        else{
			igk_set_header(500, "Configs Misconfiguration.");
            igk_error_page404("Configs Misconfiguration.");
        }
                

        igk_exit();
    }
    catch(Exception $Ex){
        igk_show_exception($Ex);
        igk_exit();
    }
}
///<summary></summary>
/**
* 
*/
function igk_sys_create_app_setting(){
    $d=igk_createobj();
    $d->domainfileNotMaintain=0;
    return $d;
}
///<summary>create session start info</summary>
/**
* create session start info
*/
function igk_sys_create_session_start_info(){
    igk_ilog("create start session info");
    $t=igk_date_now();
    return array(
            "server"=>$_SERVER,
            "start-time"=>$t,
            "user-addr"=>igk_getv($_SERVER,
            "REMOTE_ADDR"),
            "user-agent"=>igk_getv($_SERVER,
            "HTTP_USER_AGENT"),

        );
}
///<summary>create a new system user</summary>
/**
* create a new system user
*/
function igk_sys_create_user($userdata, $usertable=IGK_TB_USERS, $authtable=IGK_TB_AUTHORISATIONS, $grouptable=IGK_TB_GROUPS, $groupauth=IGK_TB_GROUPAUTHS, $usergrouptable=IGK_TB_USERGROUPS){
    $b=new IGKUserInfo();
    $bkey = IGKUserInfo::DB_INFO_KEY;
    $b->loadData($userdata);
    $b->$bkey=(object)array();
    $b->$bkey->authtable= igk_db_get_table_name($authtable);
    $b->$bkey->grouptable=igk_db_get_table_name($grouptable);
    $b->$bkey->groupauthtable=igk_db_get_table_name($groupauth);
    $b->$bkey->usertable=igk_db_get_table_name($usertable);
    $b->$bkey->usergrouptable=igk_db_get_table_name($usergrouptable);
    return $b;
}
///<summary></summary>
/**
* 
*/
function igk_sys_ctrl(){
    return igk_getctrl(IGK_SYS_CTRL,false);
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_sys_ctrl_type($ctrl){
    $s=get_class($ctrl);
    if(igk_reflection_class_extends($s, "IGKCtrlTypeBase")){
        $t=class_parents($s);
        $ht=IGKCtrlTypeManager::GetControllerTypes();
        $ht=igk_array_key_value_toggle($ht);
        foreach($t as  $v){
            if(isset($ht[$v]))
                return $ht[$v];
        }
    }
    return "unknow";
}
///<summary>get current domain name according to configuration</summary>
/**
* get current domain name according to configuration
*/
function igk_sys_current_domain_name(){
    if(igk_sys_is_subdomain()){
        return igk_sys_subdomain_name().".".igk_sys_domain_name();
    }
    else{
        return igk_sys_domain_name();
    }
}
///<summary></summary>
/**
* 
*/
function igk_sys_db_constant_cache(){
    return igk_io_dir(igk_io_cachedir()."/db/.db.constants.cache");
}
///<summary></summary>
/**
* 
*/
function igk_sys_debug_components(){
    return igk_get_env("sys://debug/components");
}
///<summary>get system debug zone controller</summary>
///<remark>only one at time</remark>
/**
* get system debug zone controller
*/
function igk_sys_debugzone_ctrl(){
    return igk_getctrl(igk_getv(igk_app()->getConfigs(), "debugHostCtrl", null), false);
}
///<summary></summary>
/**
* 
*/
function igk_sys_disable_html_caching(){
    @unlink(igk_io_dir(igk_io_applicationdir()."/Caches/".IGK_CACHE_HTML));
}
///<summary>check if a controller is a domain controller and return the controller or false</summary>
/**
* check if a controller is a domain controller and return the controller or false
*/
function igk_sys_domain_control($ctrl){
    $h=IGKSubDomainManager::GetSubDomainName();
    if(!empty($h)){
        return IGKSubDomainManager::IsControl($h, $ctrl);
    }
    return false;
}
///<summary>get configured base domain</summary>
/**
* get configured base domain
*/
function igk_sys_domain_name(){
    return IGKSubDomainManager::GetBaseDomain();
}
///<summary></summary>
/**
* 
*/
function igk_sys_enable_html_caching(){
    $dir=igk_io_cachedir();
    $d=igk_date_now();
    igk_io_save_file_as_utf8_wbom($dir."/".IGK_CACHE_HTML, <<<EOF
#active the html caching "{$d}
#delete me to deactivate the html cache
EOF
    , true);
}
///<summary>return the current environment</summary>
/**
* return the current environment
*/
function igk_sys_env(){
    return igk_server()->ENVIRONMENT;
}
///<summary>force production mode</summary>
/**
* force production mode
*/
function igk_sys_env_enable_production_mode(){
    igk_server()->ENVIRONMENT="production";
    igk_app()->Session->setParam("sys://env/production", 1);
}
///<summary>get if the system is on production mode</summary>
/**
* get if the system is on production mode
*/
function igk_sys_env_production(){
    return igk_server()->ENVIRONMENT == "production";
}
///<summary></summary>
///<param name="error"></param>
/**
* 
* @param mixed $error
*/
function igk_sys_error($error){
    igk_html_output(404);
    header("HTTP/1.0 404 Not Found");
    $r=new IGKXmlNode("result");
    $r->add("error")->Content=$error;
    $r->add("msg")->Content=__(igk_get_error_key($error));
    $r->RenderXML();
}
///<summary></summary>
/**
* 
*/
function igk_sys_errorzone_ctrl(){
    return igk_getctrl(igk_getv(igk_app()->getConfigs(), "errorHostCtrl", null), false);
}
///<summary></summary>
/**
* 
*/
function igk_sys_force_view(){
    igk_getctrl(IGK_SESSION_CTRL)->forceview();
}
///<summary>handle global error</summary>
/**
* handle global error
*/
function igk_sys_g_handle_error($severity, $message, $filename, $lineno){
    $__handle_severity=function($severity, $message, $filename, $lineno){
        $fcs=igk_get_env("sys://severity_handle");
        if($fcs){
            foreach($fcs as $v){
                $o=call_user_func_array($v->fc, func_get_args());
                if($o)
                    return 1;
            }
        }
        return false;
    };
    if($__handle_severity($severity, $message, $filename, $lineno)){
        return;
    }
    if(igk_sys_env_production()){
        $logmsg="severity: ".$severity. " ".$message. " ".$filename.":".$lineno;
        igk_ilog(igk_io_request_uri().":\n". $logmsg, __FUNCTION__);
        return;
    }
    $s = "";
    $s .= igk_server()->REQUEST_URI.IGK_LF;
    $s .= ("severity :{$severity}").IGK_LF;
    $s .= ("message :{$message}").IGK_LF;
    $s .= ("filename :{$filename}").IGK_LF;
    $s .= ("line :{$lineno}").IGK_LF;
    $s .= ("query_string :".igk_server()->QUERY_STRING."").IGK_LF;
    if($severity != 2){
        switch($severity){
            case 8:
            if(igk_server()->REQUEST_URI == "/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/balafon.css.php")
                return;
            if(strstr($message, "tempnam()"))
                return;
            break;
            case 8192: // obslete function zip - code
                return;
        }
        if(strstr($filename, "eval()'d")){
            $s .= "EvaluatedCode::[{$lineno}]:". igk_get_env(IGK_LAST_EVAL_KEY). "";
            igk_get_env(IGK_LAST_EVAL_KEY);
        }
        if($severity == 4096)
            $s .= ("EvalScript :".igk_get_env("sys://eval/lastscript")).IGK_LF;
        if(!igk_sys_env_production()){
            igk_ilog($s, __FUNCTION__);
        }
    }
}
// function igk_io_sys_datadir
///<summary></summary>
///<param name="ctrl"></param>
///<param name="domain" default=""></param>
///<param name="render" default="1"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $domain the default value is ""
* @param mixed $render the default value is 1
*/
function igk_sys_gen_sitemap($ctrl, $domain="", $render=1){
    if(method_exists($ctrl, IGK_SITEMAP_FUNC)){
        $g=IGK_SITEMAP_FUNC;
        return $ctrl->$g($domain, $render);
    }
    $n=igk_html_node_igksitemap();
    $base=IGKValidator::IsUri($domain) ? $domain."/": igk_sys_srv_uri_scheme()."://".$domain."/";
    $dir=$ctrl->getViewDir();
    $ln=strlen($dir);
    foreach(igk_io_getfiles($dir, "/\.phtml$/i") as  $v){
        $nn=igk_io_basenamewithoutext(basename($v));
        if(preg_match("/^([a-z0-9]+)$/i", $nn)){
            $h=substr(dirname($v), $ln + 1);
            if($nn == IGK_DEFAULT_VIEW){
                $nn="";
            }
            else{
                if(!empty($h))
                    $h .= "/";
            }
            $n->lUri(igk_html_uri($base.$h.$nn));
        }
    }
    if ($source= igk_app()->Configs->getConfig("sitemap_xsl")){
        $source = igk_io_applicationdatadir()."/".$source;
    }else {
        $source = igk_io_sys_datadir()."/xml-sitemap.xsl";
    } 
    $core_style = igk_io_corestyle_uri();
    $f=igk_realpath($source);
    $u="";
    $n["title"]=$ctrl->AppTitle;
    $n["script"]= IGKResourceUriResolver::getInstance()->resolve(IGK_BALAFON_JS_CORE_FILE);
    $n["styleref"]= $core_style;

    $link=igk_createnode("link");
    $link["type"]="text/css";
    $link["rel"]="stylesheet";
    $link["href"]= $core_style;
    $n->add($link);
    if(file_exists($f)){
        $u= IGKResourceUriResolver::getInstance()->resolve($f); //igk_io_baseuri($f);
        igk_wl("<?xml-stylesheet type='text/xsl' href='{$u}' ?>");
    } 
    $n->RenderXML();
}
function igk_sys_zip_project($controller, $path, $author=IGK_AUTHOR){
    if (!class_exists(ZipArchive::class)){
        return false;
    }
    $zip = new ZipArchive();
    if ($zip->open($path, ZIPARCHIVE::CREATE))
    { 
        $g= $controller->getDeclaredDir();
        $prjname = igk_str_snake(basename(igk_io_dir(get_class($controller))));
        igk_zip_dir($g, $zip,  $prjname, "/(\/temp)|\.(vscode|git(ignore)?|gkds|DS_Store)$/");
        $manifest = igk_createxmlnode("manifest");
        $manifest["xmlns"] = "https://schema.igkdev.com/project";
        $manifest["appName"] = IGK_PLATEFORM_NAME."/".$prjname;
        $manifest->add("version")->Content = $controller->Configs->get("version", "1.0");// IGK_VERSION;
        $manifest->add("author")->Content = $author;
        $manifest->add("date")->Content = date("Ymd His"); 

        $zip->addFromString("manifest.xml", $manifest->render());
        $zip->addFromString("__project.def", "");
        $zip->close(); 
        return true;
    }
    return false;
}
function igk_sys_zip_core($tfile){
    if (!class_exists(ZipArchive::class, false))
        return false;

	$zip = new ZipArchive();
	if ($zip->open($tfile, ZIPARCHIVE::CREATE))
	{ 
		igk_zip_dir(IGK_LIB_DIR, $zip,  "Lib/igk", "/(Lib\/igk\/temp)|\.(vscode|git(ignore)?|gkds|DS_Store)$/");
		$manifest = igk_createxmlnode("manifest");
		$manifest["xmlns"] = "https://www.igkdev.com/balafon/schemas/manifest";
		$manifest["appName"] = IGK_PLATEFORM_NAME;
		$manifest->add("version")->Content = IGK_VERSION;
		$manifest->add("author")->Content = IGK_AUTHOR;
        $manifest->add("date")->Content = date("Ymd His"); 

		$zip->addFromString("manifest.xml", $manifest->render());
		$zip->addFromString("__lib.def", "");
		$zip->close();
		return true;
	}
	return false;
}
///<summary>return an array of server session id</summary>
/**
* return an array of server session id
*/
function igk_sys_get_all_openedsessionid(){
    $tab=array();
    $d=ini_get("session.save_path");
    if(is_dir($d)){
        $f=IGKIO::GetFiles($d, "/^(.)+$/i", false);
        if($f){
            foreach($f as  $v){
                if(filesize($v) == "0")
                    continue;
                $n=igk_str_rm_start(basename($v), IGK_SESSION_FILE_PREFIX);
                $tab[$n]=["id"=>$n, "file"=>$v];
            }
        }
    }
    return $tab;
}
///<summary>return the controller registrated class</summary>
/**
* return the controller registrated class
*/
function igk_sys_get_controller($n){
    $b=igk_get_env("sys://app/controllers");
    if($b && $n){
        if ($g = igk_getv($b, $n))
            return $g;

    }
    
    return null;
}
///<summary> get prefix</summary>
/**
*  get prefix
*/
function igk_sys_get_html_ns_prefix($ns){
    $nk=IGK_ENV_HTML_NS_PREFIX;
    $cp=igk_get_env($nk);
    if(!$cp){
        return null;
    }
    return igk_getv($cp->ns, $ns);
}
///<summary></summary>
/**
* 
*/
function igk_sys_get_mtime_uid(){
    $m=microtime();
    $l=igk_getv(explode(' ', $m), 1);
    return IGKNumber::ToBase((int)($l), 36);
}
///<summary></summary>
///<param name="file"></param>
/**
* 
* @param mixed $file
*/
function igk_sys_get_referencedir($file){
    return igk_getv(igk_get_env(IGK_ENV_COMPONENT_REFDIRS_KEY), igk_realpath($file));
}
///<summary>shortcut to get subdomain ctrl</summary>
/**
* shortcut to get subdomain ctrl
*/
function igk_sys_get_subdomain_ctrl($uri){
    return IGKSubDomainManager::getInstance()->checkDomain($uri);
}
///<summary>shortcut to get user ctrl</summary>
/**
* shortcut to get user ctrl
*/
function igk_sys_get_user_ctrl(){
    return igk_getctrl(IGK_USER_CTRL);
}
///<summary>get all controllers shortcut</summary>
/**
* get all controllers shortcut
*/
function igk_sys_getall_ctrl(){
    return igk_app()->getControllerManager()->getControllers();
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_sys_getall_funclist($ctrl){
    $funcs=array();
    if(!igk_is_conf_connected())
        return $funcs;
    $f=$ctrl->getDataDir()."/.funclist.xml";
    $cl=get_class($ctrl);

    if(file_exists($f) && ($s=IGKHtmlReader::LoadFile($f))){
        $r=igk_getv($s->getElementsByTagName("func-list"), 0);
        if($r){
            foreach($r->Childs as  $v){
                $n=$v["name"];
                if(empty($n) || !method_exists($cl, $n))
                    continue;
                $o=array(IGK_FD_NAME=>$n, "clAvailable"=>0);
                if($v["available"]){
                    $o["clAvailable"]=1;
                }
                $funcs[$n]=(object)$o;
            }
        }
    }
    return $funcs;
}
///<summary>get system configuration value</summary>
/**
* get system configuration value
*/
function igk_sys_getconfig($name, $defaultvalue=null){
    return igk_getv(igk_app()->getConfigs(), $name, $defaultvalue);
}
///<summary></summary>
/**
* 
*/
function igk_sys_getdefaultctrlconf(){
    return array(
            "clDataAdapterName"=>IGK_CSV_DATAADAPTER,
            "clDataSchema"=>false,
            "clDisplayName"=>null,
            "clRegisterName"=>null,
            "clParentCtrl"=>null,
            "clTargetNodeIndex"=>0,
            "clVisiblePages"=>"*",
            "clDescription"=>null
        );
}
///<summary>used to get only available functions list</summary>
/**
* used to get only available functions list
*/
function igk_sys_getfunclist($ctrl, $news=false, $funcrequest=null){
    if($ctrl == null || !igk_reflection_class_extends($ctrl, IGK_CTRL_BASE))
        return null;
    $func=array();
    $f=$ctrl->getDataDir()."/.funclist.xml";
    $cl=get_class($ctrl);
    $rlist=array();
    if(file_exists($f) && ($s=IGKHtmlReader::LoadFile($f))){
        $r=igk_getv($s->getElementsByTagName("func-list"), 0);
        if($r){
            foreach($r->getChilds() as $v){
                $n=$v["name"];
                if(empty($n) || !method_exists($cl, $n))
                    continue;
                $rlist[$n]=$v;
                if($v["available"]){
                    $func[]=$n;
                }
            }
        }
        if((($funcrequest != null) && !isset($rlist[$funcrequest])) || $news && igk_is_conf_connected()){
            igk_sys_load_class_method($cl, $func, $r, $rlist, 1);
            igk_io_save_file_as_utf8($f, $s->Render());
        }
    }
    else{
        $d=new IGKXmlNode("func-list");
        igk_sys_load_class_method($cl, $func, $d, $rlist, 1);
        igk_io_save_file_as_utf8($f, $d->Render());
    }
    return $func;
}
///<summary></summary>
/**
* 
*/
function igk_sys_getuserctrls(){
    return igk_app()->getControllerManager()->getUserControllers();
}
///<summary>handle global system single action</summary>
/**
* handle global system single action
*/
function igk_sys_handle_action($name, $args){
    $b=igk_get_env("sys://env/actions");
    if(!$b)
        return false;
    $t=igk_getv($b, $name);
    if($t){
        call_user_func_array($t, array_slice(func_get_args(), 1));
        return 1;
    }
    return false;
}
///<summary></summary>
/**
* 
*/
function igk_sys_handle_cache(){
    if(defined("IGK_NO_WEB") || igk_sys_cache_require())
        return;
    $dir=igk_io_cachedir();
    if(!file_exists($dir."/".IGK_CACHE_HTML))
        return;
    $rq=igk_sys_cache_request();
    if(empty($rq))
        return;
    $f=igk_io_dir($dir."/html".$rq);
    if(file_exists($f) && is_file($f)){
        igk_set_header('200', "Content-Type: text/html; charset=utf-8");
        igk_wl(igk_io_read_allfile($f));
        igk_exit();
    }
}
///<summary>handle base controller request uri</summary>
/**
* handle base controller request uri
*/
function igk_sys_handle_ctrl_request_uri($u=null, $defaultBehaviour=1){
    if(igk_get_env("sys://notsystemurihandle"))
        return;
    $c=igk_getr("c");
    $f=igk_getr("f");
    $app=igk_app();
    if($c && $f){
        $f=str_replace("-", "_", $f);
        $arg=array();
        $args=igk_getquery_args($u);
        $arg=igk_io_arg_from($f);
        $ctrl=igk_getctrl($c, false) ?? igk_template_create_ctrl($c);
        if(!$ctrl){
            return null;
        }
        if(!method_exists(get_class($ctrl), $f)){
            igk_html_output(404);
            igk_show_error_doc(null, 4046, null, "method not exists [".get_class($ctrl)."::".$f."]");
            igk_exit();
            return false;
        }
        if($f == IGK_EVALUATE_URI_FUNC){
            $app->setBaseCurrentCtrl($ctrl);
        }
        if(($f == IGK_EVALUATE_URI_FUNC) || $ctrl->IsFunctionExposed($f)){
            $v_isajx=igk_is_ajx_demand() || IGKString::EndWith($f, IGK_AJX_METHOD_SUFFIX) || (igk_getr("ajx") == 1);
            $app->Session->URI_AJX_CONTEXT=$v_isajx;
            $fd=null;
            if(($fd=$ctrl->getConstantFile()) && file_exists($fd))
                include_once($fd);
            if(($fd=$ctrl->getDbConstantFile()) && file_exists($fd))
                include_once($fd);
            unset($fd);
            igk_set_env(IGK_ENV_REQUEST_METHOD, strtolower(get_class($ctrl)."::".$f));
            igk_set_env(IGK_ENV_INVOKE_ARGS, $args);
            if(is_array($arg))
                call_user_func_array(array($ctrl, $f), $arg);
            else{
                if($arg)
                    $ctrl->$f($arg);
                else{
                    $ctrl->$f();
                }
            }
            igk_set_env(IGK_ENV_INVOKE_ARGS, null);
            igk_set_env(IGK_ENV_REQUEST_METHOD, null);
            if($defaultBehaviour && $v_isajx){
                igk_exit();
            }
            $app->Session->URI_AJX_CONTEXT=0;
            unset($_REQUEST["c"]);
            unset($_REQUEST["f"]);
        }
        else{
            $msg=__("No method access: {0}", "[".$c."::".$f."]");
            if(!igk_sys_env_production()){
                igk_notifyctrl()->addWarning($msg); 
            }
            igk_ilog($msg);
        }
    }
}
///<summary>handle entry files</summary>
/**
* handle entry files
*/
function igk_sys_handle_entry_file($dir){
    $tab=explode(",", IGK_ENTRY_FILES);
    $e=0;
    $ext='';
    $e=0;
    foreach($tab as $k){
        if(file_exists($ext=$dir."/".trim($k))){
            $e=1;
            break;
        }
    }
    if($e){
        return $ext;
    }
    return null;
}
///<summary></summary>
///<param name="msg" default="null"></param>
///<param name="content" default="null"></param>
/**
* 
* @param mixed $msg the default value is null
* @param mixed $content the default value is null
*/
function igk_sys_handle_error($msg=null, $content=null){
    $c=error_get_last();
    if(igk_count($c) == 0){
        return;}
    switch(igk_getv($c, 'type')){
        case E_PARSE:
        igk_wln("<div class=\"igk-error\" style=\"".igk_css_get_style(".igk-error")."\">Parse Error </div>");
        igk_wl("<code>".$msg."</code>");
        igk_exit();
        case E_NOTICE:
        igk_wl("<div class=\"igk-notice\" style=\"".igk_css_get_style(".igk-notice")."\">Notice </div>\n");
        igk_wl("<code>".$msg."</code>");
        igk_wln($c);
        break;default:
        break;
    }
}
///<summary>use in phar  context to handle a request</summary>
/**
* use in phar context to handle a request
*/
function igk_sys_handle_request($uri){
    if(empty($uri))
        return;
    $g=array('index.php', 'index.phtml', 'index.html', 'main.php');
    $f="";
    $args=explode('?', $uri);
    $furi=$args[0];
    $query=igk_getv($args, 1);
    if(file_exists($f=IGK_APP_DIR. $furi) || (igk_phar_running() && file_exists($f=Phar::running(). $furi))){
        if(is_dir($f)){
            if($uri[strlen($furi)-1] != '/'){
                igk_navto($furi."/".(empty($query) ? '': '?'.$query));
            }
            $ext='';
            $e=0;
            foreach($g as $k){
                if(file_exists($ext=$f."/".$k)){
                    $e=1;
                    break;
                }
            }
            if($e){
                $f=$ext;
            }
        }
        if(is_file($f)){
            if(preg_match("/\.(ph(p|tml))$/", $f)){
                include_once($f);
            }
            else{
                igk_header_cache_output();
                igk_header_content_file($f);
                igk_zip_output(file_get_contents($f));
            }
            igk_exit();
        }
    }
    else{
        $bc=$_SERVER;
        $_SERVER['REQUEST_URI']=$uri;
        $_SERVER['REDIRECT_URL']=$uri;
        $_SERVER['REDIRECT_STATUS']=200;
        $_SERVER['REDIRECT_REQUEST_METHOD']=igk_getv($_SERVER, 'REQUEST_METHOD', 'GET');
        $_SERVER['REDIRECT_QUERY_STRING']=igk_getv($_SERVER, 'QUERY_STRING', 'GET');
        include(IGK_LIB_DIR.'/igk_redirection.php');
    }
    igk_set_header(404);
    igk_wln('Bad request : '.$uri);
    igk_wln_e('File not found: '.$f, __FILE__.":".__FILE__);
}
///<summary></summary>
/**
* 
*/
function igk_sys_handle_request_method(){
    if(defined("IGK_NO_REST_ACTION"))
        return;
    $m=igk_server()->REQUEST_METHOD;
    if(!preg_match("/(DELETE|PUT|STORE|SAVE)/i", $m))
        return;
    $upd=igk_json_parse(igk_io_get_uploaded_data());
    switch($m){
        case "DELETE":
        if(igk_getv($upd, "destroysession") == 1){
            @session_start();
            $id=session_id();
            igk_session_destroy();
            igk_json(igk_json_encode(["sessiondestroy"=>1, 'sessid'=>$id]));
        }
        igk_exit();
        break;
    }
}
///<summary></summary>
///<param name="query"></param>
/**
* 
* @param mixed $query
*/
function igk_sys_handle_res($query){
    if(preg_match("/^res\.(?P<lang>[^\.]+)\.(?P<ext>(e?js(on)?|txt|xml|bin|dat))$/i", basename($query), $tab)){
        $t=substr($tab["lang"], 0, 2);
        $ext=strtolower($tab["ext"]);
        $ext=igk_getv(["ejson"=>"json"], $ext, $ext);
        $rwf=igk_getr("rwf");
        $c1=dirname($rwf)."/res.".$t.".".$ext;
        if(!file_exists($c1)){
            $c1=igk_io_basedir().dirname($query)."/res.".$t.".".$ext;
        }
        if(file_exists($c1)){
            igk_clear_header_list();
            igk_header_set_contenttype($ext);
            igk_zip_output(igk_io_read_allfile($c1));
            igk_exit();
        }
        igk_set_header(404, __("Resource not found"));
        igk_exit();
    };
}
///<summary>handle uri callback</summary>
/**
* handle uri callback
*/
function igk_sys_handle_uri($u=null){
    if(igk_get_env("sys://notsystemurihandle")){
        return;
	}
    $u= urldecode($u ?? igk_io_base_request_uri());
    if(is_object($u)){
        if(!igk_sys_env_production())
            igk_die("u is object ");
        return;
    }
    $uri_key="sys://reg/systemuri";
    $b=igk_get_env($uri_key);
    if($b && $u && isset($b[$u])){
        if (is_callable($fc=$b[$u])){
            ob_clean();
            $fc();
        }
    }
    else{
        foreach($b as $k=>$v){
            $p=null;
            if(preg_match("/\[%q%]/i", $k)){
                $sk=str_replace("[%q%]", "(\?(:query))?", $k);
            }
            else
                $sk=$k;
            $p=igk_sys_ac_create_pattern(null, null, $sk);
            if($p->matche($u)){
                $request=explode("?", $u)[0];
                if(!isset($b[$request])){
                    $b[$request]=$v;
                    igk_set_env($uri_key, $b);
                }
                igk_ob_clean();
                
                if (PHP_VERSION > "8.0.0"){
                    call_user_func_array($v, array_values($p->getQueryParams()));
                }else 
                    call_user_func_array($v, $p->getQueryParams());
                break;
            }
        }
    }
    igk_sys_handle_ctrl_request_uri($u);
}
///<summary></summary>
/**
* 
*/
function igk_sys_html_cache_dir(){
    return igk_io_dir(igk_io_cachedir()."/html");
}
///<summary>for init document</summary>
/**
* for init document
*/
function igk_sys_html_initdoc($doc){

    $t=igk_css_add_doc_style($doc);
    igk_js_init_doc($doc);
    $t=igk_get_env(IGK_ENV_GLOBAL_SCRIPT_KEY);
    if($t){
        foreach(array_keys($t) as $k){ 
            $doc->addScript(igk_realpath($k), 'glo');
        }
    }
}
///<summary>include file in system configuration</summary>
/**
* include file in system configuration
*/
function igk_sys_include($name){
    return include(igk_io_currentrelativepath($name));
}
///<summary>used to include a file base on the current file directory</summary>
/**
* used to include a file base on the current file directory
*/
function igk_sys_include_once($f){
    $d=igk_trace_function(2);
    $f=dirname($d->file)."/".basename($f);
    if(file_exists($f))
        include_once($f);
}
///<summary></summary>
///<param name="uri"></param>
///<param name="u"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $uri
* @param mixed $u
* @param mixed $callback
*/
function igk_sys_invoke_reg_uri($uri, $u, $callback){
    $uri_key="sys://reg/systemuri";
    if($uri === $u){
        $callback();
    }
    else{
        $sk=$u;
        if(preg_match("/\[%q%]/i", $u)){
            $sk=str_replace("[%q%]", "(\?(:query))?", $u);
        }
        $p=igk_sys_ac_create_pattern(null, null, $sk);
        if($p->matche($uri)){
            $request=explode("?", $u)[0];
            if(!isset($b[$request])){
                $b[$request]=$u;
                igk_set_env($uri_key, $b);
            }
            call_user_func_array($callback, [$p->getQueryParams()]);
        }
    }
}
///<summary>shortcut to invoke uri</summary>
/**
* shortcut to invoke uri
*/
function igk_sys_invoke_uri($uri=null){
    igk_app()->getControllerManager()->InvokeUri($uri);
}
///<summary>get if action registrated</summary>
/**
* get if action registrated
*/
function igk_sys_is_action($name){
    $key="sys://env/actions";
    return ($t=igk_get_env($key)) && igk_getv($t, $name) != null;
}
///<summary></summary>
/**
* 
*/
function igk_sys_is_htmlcaching(){
    return file_exists(igk_io_cachedir()."/".IGK_CACHE_HTML);
}
///<summary></summary>
///<param name="page"></param>
/**
* 
* @param mixed $page
*/
function igk_sys_is_page($page){
    $tb=igk_sys_pagelist();
    $p=strtolower($page);
    foreach($tb as $k){
        if($k == $p)
            return true;
    }
    return false;
}
///<summary></summary>
///<param name="document"></param>
/**
* 
* @param mixed $document
*/
function igk_sys_is_rootdocument($document){
    return $document && (igk_app()->Doc === $document);
}
///<summary> get if the current rendering system is on subdomain context.</summary>
/**
*  get if the current rendering system is on subdomain context.
*/
function igk_sys_is_subdomain(){
     return IGKSubDomainManager::IsSubDomain();
}
///<summary></summary>
///<param name="key"></param>
///<param name="state" ref="true"></param>
/**
* 
* @param mixed $key
* @param mixed * $state
*/
function igk_sys_ischanged($key, & $state){
    $c=igk_getctrl(IGK_CHANGE_MAN_CTRL, false);
    if($c)
        return $c->isChanged($key, $state);
    return false;
}
///<summary></summary>
///<param name="key"></param>
/**
* 
* @param mixed $key
*/
function igk_sys_islanguagesupported($key){
    $tab=igk_getctrl(IGK_CSVLANGUAGE_CTRL)->Languages;
    $tab=igk_array_tokeys($tab);
    return isset($tab[$key]);
}
///<summary></summary>
///<param name="key"></param>
/**
* 
* @param mixed $key
*/
function igk_sys_ispagesupported($key){
    $m=igk_getctrl(IGK_MENU_CTRL);
    if($m){
        $tab=$m->getPageList();
        $tab=igk_array_tokeys($tab);
        return isset($tab[$key]);
    }
    return false;
}
///<summary>get that the current request is redirecting</summary>
/**
* get that the current request is redirecting
*/
function igk_sys_isredirecting(){
    return ((basename(igk_server()->SCRIPT_NAME) == "igk_redirection.php") && (igk_server()->REDIRECT_STATUS == 200));
}
///<summary>get if present user have the right to do an "authname" </summary>
/**
* get if present user have the right to do an "authname"
* @param $u = the users
* @deprecated please use Users::auth extension method
*/
function igk_sys_isuser_authorize($u, $authname, $strict=false, $authCtrl=null, $adapter=IGK_MYSQL_DATAADAPTER){
    if (!$u){
        return false;
    }
    if(is_object($u) && method_exists($u, "IsAuthorize")){
        return $u->IsAuthorize($authname, $strict, $authCtrl, $adapter);
    }
    $v_uinfo = igk_sys_create_user($u); 
    return IGKUserInfo::GetIsAuthorize($v_uinfo, $authname, $strict, $authCtrl, $adapter);
}
function igk_sys_is_auth($authname, $user=null){
	if ($user===null){
		$user = igk_sys_current_user();
	}
	return $user->auth($authname);
}
function igk_sys_current_user(){
	($u = igk_app()->session->User) || ($u = igk_get_system_user()) || igk_die("failed to get a current user");
	return $u;

}
///<summary>call it to ignore a specific directory on javascript loading process</summary>
///<param name="dir">if dir is null or not an existing directory, return the current directory list</param>
/**
* call it to ignore a specific directory on javascript loading process
* @param mixed $dir if dir is null or not an existing directory, return the current directory list
* @return Array of ignored environment directory
*/
function igk_sys_js_ignore($dir=null){
    $v_key="sys://lib/ignorejsdir";
    $d=igk_get_env($v_key);
    if(($dir === null) || !is_dir($dir))
        return $d;
    if(!$d){
        $d=array();
    }
    $d[igk_html_uri($dir)]=1;
    igk_set_env($v_key, $d);
    return $d;
}
///<summary>ignore lib folder</summary>
/**
* ignore lib folder
*/
function igk_sys_lib_ignore($dir){
    $key="sys://lib/ignoredir";
    $d=igk_get_env($key);
    if(!$d){
        $d=array();
    }
    $d[igk_html_uri($dir)]=1;
    igk_set_env($key, $d);
}
///<summary>get class method that will be exposed</summary>
/**
* get class method that will be exposed
*/
function igk_sys_load_class_method($classname, & $func, $listnode, $rlist, $publicOnly=0){
    static $exposable=null;
    if($exposable){
        $explosableDisabled=["login"];
    }
    $iexposable=array();
    if(method_exists($classname, "GetExposableUriMethod")){
        $iexposable=$classname::GetExposableUriMethod();
    }
    $h=new ReflectionClass($classname);
    $sf=$h->getFileName();
    $meth=array();
    $base=$h->getParentClass();
    foreach(get_class_methods($classname) as  $v){
        $refmethod=new ReflectionMethod($classname, $v);
        $n=$refmethod->getName();
        if(preg_match("/^__/", $n) || ($publicOnly && !$refmethod->isPublic()) || $refmethod->isStatic() || (($p_cl=$base) && method_exists($p_cl->getName(), $v) && !in_array($v, $iexposable))){
            continue;
        }
        $meth[]=$v;
        switch($n){default:
            $fname=$refmethod->getFileName();
            if(isset($rlist[$n]))
                break;
            if($refmethod->isPublic() && !$refmethod->isStatic() && (($fname == $sf) || IGKString::EndWith($refmethod->getName(), "_contract"))){
                $func[]=$refmethod->getName();
                $listnode->add("function")->setAttribute("name", $refmethod->getName())->setAttribute("available", 1);
            }
            break;
        }
    }
}
///<summary></summary>
///<param name="func"></param>
/**
* 
* @param mixed $func
*/
function igk_sys_meth_info($func){
    $v=array();
    $tab=explode("/", $func);
    $v["Name"]=$tab[0];
    $v["Args"]=array_slice($tab, 1);
    return (object)$v;
}
///<summary></summary>
/**
* 
*/
function igk_sys_mod_rewrite_available(){
    $r=igk_apache_module("mod_rewrite") || isset($_SERVER["IGK_REWRITE_MOD"]);
    if($r)
        return true;
    $f=igk_io_currentbasedomainuri()."/sys_api/check_mod_rewrite";
    @session_write_close();
    $b=igk_curl_post_uri($f);
    if($b){
        return 1;
    }
    return 0;
}
///<summary></summary>
/**
* 
*/
function igk_sys_pagelist(){
    return igk_getctrl(IGK_MENU_CTRL)->getPageList();
}
///<summary> get a new powerd node block to add to body</summary>
/**
*  get a new powerd node block to add to body
*/
function igk_sys_powered_node(){
    $d=igk_createnode("div");
    $d["class"]="igk-powered no-selection no-contextmenu google-Roboto";
    $d["igk-no-contextmenu"]="1";
    $s=igk_app()->Configs->powered_message;
    $d->Content=!empty($s) ? $s: __("Powered by")." <a href=\"".IGK_WEB_SITE."\" >IGKDEV</a> ";
    $d->setCallback("getIsVisible", "igk_sys_powered_view_callback");
    return $d;
}
///<summary></summary>
/**
* 
*/
function igk_sys_powered_view_callback(){
    $i=igk_get_env("sys://nopowered");
    return $i ? false: true;
}
///<summary>register global system action</summary>
/**
* register global system action
*/
function igk_sys_reg_action($name, $callback){
    if(empty($name) || !is_callable($callback))
        return 0;
    $key="sys://env/actions";
    $d=igk_get_env($key, array());
    $d[$name]=$callback;
    igk_set_env($key, $d);
    return 1;
}
///<summary> register autolibrary directory</summary>
///<param dir="lib"> directory where library is installed</summary>
/**
*  register autolibrary directory
* @param mixed directory where library is installed 
*/
function igk_sys_reg_autoloadlib($dir, $ns){
    if(!$dir || !is_dir($dir))
        return false;
    $k=igk_get_env("sys://autoloading/libs", array());
    if(isset($k[$dir]))
        return false;
    $k[$dir]=1;
    igk_set_env("sys://autoloading/libs", $k);
    $reg=function($n) use ($dir, $ns){
        $n = trim($n);
        $entryNS=trim($ns);
        if(empty($entryNS) || (strpos($n, $entryNS) === 0)){
            if(!empty($entryNS)){
                $n=substr($n, strlen($entryNS));
                $n=igk_str_rm_start($n, "\\");
            }
            if(!empty($n) && file_exists($file=igk_io_combine($dir, $n.".php"))){
                include_once($file);
                return 1;
            }
        }        
        return false;
    };
    igk_register_autoload_class($reg);
    true;
}
///<summary>register component display name</summary>
/**
* register component display name
*/
function igk_sys_reg_componentname($tab){
    $ttab=igk_get_env(IGK_ENV_COMPONENT_DISPLAY_NAMES_KEY, function(){
        return array();
    });
    if(igk_count($ttab) == 0){
        if(file_exists(IGK_COMPONENT_NAMESFILE)){
            $f=function(& $htab){
                include(IGK_COMPONENT_NAMESFILE);
            };
            $f($ttab);
        }
    }
    foreach($tab as $k=>$v){
        $ttab[strtolower($k)
        ]=$v;
    }
    igk_set_env(IGK_ENV_COMPONENT_DISPLAY_NAMES_KEY, $ttab);
}
///<summary>registrer controller</summary>
/**
* registrer controller
*/
function igk_sys_reg_controller($n, $classname){
    igk_set_env_keys("sys://app/controllers", $n, $classname);
}
///<summary></summary>
///<param name="n"></param>
///<param name="callable"></param>
/**
* 
* @param mixed $n
* @param mixed $callable
*/
function igk_sys_reg_debugcomponents($n, $callable){
    $g=igk_get_env("sys://debug/components");
    if($g == null)
        $g=array();
    $g[$n]=$callable;
    igk_get_env("sys://debug/components", $g);
}
///<summary>register a display setting</summary>
///<param name="expression">callback expression</param>
/**
* register a display setting
* @param mixed $expression callback expression
*/
function igk_sys_reg_display($keyTab, $expression){
    igk_set_env("sys://tabdisplay/".$keyTab, $expression);
}
///<summary> register a html component</summary>
///<param name="ns">namespace for element to register</param>
///<param name="name">the component's name</param>
///<param name="callback">callable to create the component</param>
/**
*  register a html component
* @param mixed $ns namespace for element to register
* @param mixed name the component's name
* @param mixed $closure callback callable to create the component
*/
function igk_sys_reg_html_component($ns, $name, $callback){
    $nk=IGK_ENV_HTML_COMPONENTS;
    $cp=igk_get_env($nk);
    if($cp == null){
        $cp=array();
    }
    $h=igk_getv($cp, $ns, array());
    $file="";
    $h[strtolower($name)
    ]=array("key"=>$name, "callback"=>$callback, "from"=>$file);
    $cp[$ns]=$h;
    igk_set_env($nk, $cp);
}
///<summary>register namespace prefix</summary>
/**
* register namespace prefix
*/
// function igk_sys_reg_html_ns_prefix($ns, $name){
//     $nk=IGK_ENV_HTML_NS_PREFIX;
//     $cp=igk_get_env($nk);
//     if($cp == null){
//         $cp=(object)array("prefix"=>array(), "ns"=>array());
//     }
//     $key=strtolower($name);
//     if(isset($h->prefix[$key])){
//         $h->prefix[$key]=$ns;
//         $h->ns[$ns]=$key;
//     }
//     igk_set_env($nk, $cp);
// }
///<summary></summary>
///<param name="src"></param>
///<param name="dir"></param>
/**
* 
* @param mixed $src
* @param mixed $dir
*/
function igk_sys_reg_referencedir($src, $dir){
    $ttab=igk_get_env(IGK_ENV_COMPONENT_REFDIRS_KEY, function(){
        return array();
    });
    if(file_exists($src))
        $ttab[igk_realpath($src)
    ]=$dir;
    igk_set_env(IGK_ENV_COMPONENT_REFDIRS_KEY, $ttab);
}
///<summary></summary>
///<param name="callback"></param>
///<param name="priority" default="10"></param>
/**
* 
* @param mixed $callback
* @param mixed $priority the default value is 10
*/
function igk_sys_reg_severity($callback, $priority=10){
    $fcs=igk_get_env("sys://severity_handle", array());
    $fcs[]=(object)array("fc"=>$callback, "priority"=>$priority);
    usort($fcs, function($i, $s){
        if($i->priority < $s->priority)
            return 1;
        else if($i->priority > $s->priority)
            return -1;
        return 0;
    });
    igk_set_env("sys://severity_handle", $fcs);
}
///<summary>register uri callback</summary>
/**
* register uri callback
*/
function igk_sys_reg_uri($u, $callback, $prehandle=0){
    static $uri=null;
    igk_set_env_keys("sys://reg/systemuri", $u, $callback);
    if($prehandle){
        if($uri === null)
            $uri=urldecode(igk_io_request_entry());
        igk_sys_invoke_reg_uri($uri, $u, $callback);
    }

   
}
///<summary></summary>
///<param name="key"></param>
///<param name="state" ref="true"></param>
/**
* 
* @param mixed $key
* @param mixed * $state
*/
function igk_sys_regchange($key, & $state){
    $c=igk_getctrl(IGK_CHANGE_MAN_CTRL, false);
    if($c)
        return $c->registerChange($key, $state);
    return null;
}
///<summary></summary>
///<param name="u"></param>
///<param name="gooduri" default="null"></param>
///<param name="baduri" default="null"></param>
///<param name="listener" default="null"></param>
/**
* 
* @param mixed $u
* @param mixed $gooduri the default value is null
* @param mixed $baduri the default value is null
* @param mixed $listener the default value is null
*/
function igk_sys_register_user($u, $gooduri=null, $baduri=null, $listener=null){
    $uc=igk_getctrl(IGK_USER_CTRL);
    $tb= IGK\Models\Users::table();
    $r=igk_db_create_row($tb, $u);
    if(empty($r->clLogin)){
        igk_set_error(__FUNCTION__, "login is empty");
        return 0;
    }
    if(!igk_user_pwd_required($u->clPwd, $u->clRePwd)){
        igk_set_error(__FUNCTION__, "passwd not match balafon requirement");
        return 0;
    }
    $uc->clLogin=strtolower($r->clLogin);
    $i=igk_db_insert_if_not_exists($uc, $tb, $r);
    if($i){
        $usr=igk_get_user_bylogin($r->clLogin);
        $info="u=".$usr->clLogin."&d=".date("y-m-d")."$gooduri=".$gooduri;
        $info .= "&redirect=".$gooduri."&baduri=".$baduri;
        if($listener){
            $listener($usr, igk_io_baseuri()."/".$uc->getUri("us_activate&q=".base64_encode($info)));
            return 1;
        }
    }
    igk_ilog("failed to register");
    igk_set_error(__FUNCTION__, "failed to register user to database");
    igk_notifyctrl()->addErrorr("e.registrationnotpossible");
    return $i;
}
///<summary></summary>
///<param name="name"></param>
///<param name="ctrl"></param>
///<param name="method"></param>
/**
* 
* @param mixed $name
* @param mixed $ctrl
* @param mixed $method
*/
function igk_sys_regpagefolderchanged($name, $ctrl, $method){
    igk_app()->registerPageFolderChangedMethod($name, array($ctrl, $method));
}
///<summary>mark a controller as a system controller</summary>
/**
* mark a controller as a system controller
*/
function igk_sys_regsyscontroller($className){
    if(class_exists($className)){
        BaseController::RegSysController($className);
    }
}
///register a method for view call back
/**
*/
function igk_sys_regview($ctrlname, $ctrl, $callback){
    $c=igk_getctrl($ctrlname, false);
    if(($c == null) || ($ctrl == null) && ($c !== $ctrl))
        return;
    $c->regView($ctrl, $callback);
}
///<summary>handle or renderging by default</summary>
/**
* handle or renderging by default
*/
function igk_sys_render_default_uri($uri=null, $ctrl=null, $ownctrl=1){
    $uri=$uri ?? igk_io_base_request_uri();
    $defctrl=$ctrl ?? igk_get_defaultwebpagectrl();
    if($defctrl && ($ownctrl || igk_own_view_ctrl($defctrl)) && method_exists($defctrl, "is_handle_uri") && $defctrl->is_handle_uri($uri)){
        $defctrl->handle_redirection_uri($uri);
        if(igk_server_is_local()){
            igk_wln($defctrl. " failed to handle uri [{$uri}] .!. correctly in ".IGK_PLATEFORM_NAME." process uri flow");
        }
        else
            igk_ilog("/!\\ bad - not handling {$uri} correctly :". $defctrl);
        igk_exit();
    }
}
///<summary></summary>
///<param name="file"></param>
///<param name="render" default="1"></param>
/**
* 
* @param mixed $file
* @param mixed $render the default value is 1
*/
function igk_sys_render_index($file, $render=1){
    if(!file_exists($file)){
        throw new Exception("Operation Not Valid");
    }
    $bdir=dirname($file);
    $srv=igk_server();
    if(!defined('IGK_APP_DIR')){
        $dir=!empty($dir=$srv->IGK_APP_DIR) && is_dir($dir) ? $dir: $bdir; 
        define("IGK_APP_DIR", $dir);
    } 
    if(!defined('IGK_BASE_DIR')){
        define("IGK_BASE_DIR", $bdir);
    }
    if(!defined("IGK_PROJECT_DIR")){
        $dir=!empty($dir=$srv->IGK_PROJECT_DIR) && is_dir($dir) ? $dir: igk_io_dir(IGK_APP_DIR."/".IGK_PROJECTS_FOLDER);
        define("IGK_PROJECT_DIR", $dir);
    }
    if(!defined("IGK_MODULE_DIR")){
        if(!empty($dir=$srv->IGK_MODULE_DIR) && is_dir($dir))
            define("IGK_MODULE_DIR", $dir);
    }
    $igk_index_file=$file;
    $srv=igk_server();
    $v_path=0;
    $redirect=0;
	$access_file = ["/Lib/igk/igk_init.php"];

    // igk_wln(__FILE__.":".__LINE__. "<pre>". igk_ob_get($_SERVER)."</pre>");

    if(!defined("IGK_REDIRECTION") && (($v_path=isset($_SERVER["PATH_INFO"])) || !empty($redirect=urldecode($srv->REDIRECT_URL)))){
        // igk_sys_handle_uri();
        // 
		if ($srv->REDIRECT_STATUS !='200'){
			// on igkdev.com redirect Error document handling

			if ($redirect == "/Lib/igk/igk_redirection.php"){
 
                 $q=$srv->SCRIPT_URL;
				 $_SERVER["REDIRECT_URL"]=$q;
				 $_SERVER["REDIRECT_REQUEST_METHOD"]=$_SERVER["REQUEST_METHOD"];
				 $_SERVER["REDIRECT_QUERY_STRING"]=$_SERVER["QUERY_STRING"];
                 $_SERVER["REDIRECT_STATUS"] = $srv->REDIRECT_STATUS;
                 if (!empty($q)){
                        if(!empty($_SERVER["QUERY_STRING"]))
                        $q .= "?".$_SERVER["QUERY_STRING"];
                        $_SERVER["REDIRECT_URL"] = $q;
                        $_SERVER["REQUEST_URI"]= $q;
                 }
				igk_server()->prepareServerInfo();
				include_once(igk_realpath(IGK_LIB_DIR."/igk_redirection.php"));
			}
			else {
				igk_set_header($srv->REDIRECT_STATUS);
			}
			igk_exit();
		}


        if($redirect){
            $path_info=$redirect;
        }
        else{
            $path_info=$_SERVER["PATH_INFO"];
        }


        $g=array_slice(explode("/", ($path_info)), 1);
        if(strtolower($g[0]) == strtolower(IGK_CONFIG_PAGEFOLDER)){
            define('IGK_REDIRECTION', 0);
            if(!defined("IGK_CONFIG_PAGE"))
                define("IGK_CONFIG_PAGE", 1);
            define("IGK_CURRENT_PAGEFOLDER", IGK_CONFIG_PAGEFOLDER);
            $script=$_SERVER["SCRIPT_NAME"];
            $dir=igk_str_rm_last(igk_html_uri(dirname($script)), '/');
            if(empty($dir) && $v_path){
                $dir .= $script;
            }
            $level=count($g) - 1;
            igk_io_set_dir_level($level);
            if(!empty($query=igk_server()->QUERY_STRING)){
                $query="?".$query;
            }
            $rq_path=implode("/", array_slice($g, 1));
            if(!empty($rq_path)){
                $rq_path="/".$rq_path.$query;
            }
            $_SERVER["REQUEST_URI"]=$dir."/".IGK_CONFIG_PAGEFOLDER."{$rq_path}";
            $_SERVER["PHP_SELF"]=$dir."/".IGK_CONFIG_PAGEFOLDER."/DTA";
            igk_server()->prepareServerInfo();
            igk_sys_start_engine($file, 0);
            if(file_exists(IGK_APP_DIR."/Data/no_config")){
                igk_set_header("403");
                igk_navto(igk_io_baseuri());
            }
            igk_sys_config_view($file);
            igk_exit();
        }


		if (!defined("IGK_REDIRECT_ACCCESS") && in_array($path_info, $access_file)){
			if (file_exists($cfile = igk_html_uri(dirname(dirname(IGK_LIB_DIR)).$path_info))){
				define("IGK_REDIRECT_ACCCESS", 1);
				$_SERVER["SCRIPT_FILENAME"] = igk_str_rm_last(igk_server()->DOCUMENT_ROOT, "/").dirname(igk_server()->SCRIPT_NAME).$path_info;
				igk_server()->prepareServerInfo();
				include_once($cfile);
				igk_exit();
			}

		}

        $_SERVER["REDIRECT_STATUS"]='200';
        $_SERVER["REDIRECT_URL"]=$path_info;
        $_SERVER["REDIRECT_REQUEST_METHOD"]=$_SERVER["REQUEST_METHOD"];
        $_SERVER["REDIRECT_QUERY_STRING"]=$_SERVER["QUERY_STRING"];
        $dir=igk_str_rm_last(igk_html_uri(dirname($_SERVER["SCRIPT_NAME"])), '/');
        $q=$path_info;
        if(!empty($_SERVER["QUERY_STRING"]))
            $q .= "?".$_SERVER["QUERY_STRING"];
        $_SERVER["REQUEST_URI"]=$q;
        igk_server()->prepareServerInfo();


        include_once(igk_realpath(IGK_LIB_DIR."/igk_redirection.php"));
        igk_exit();
    }
    
    igk_sys_start_engine($file, $render);
}
///<summary>require file in syst1m configuration</summary>
/**
* require file in syst1m configuration
*/
function igk_sys_require($name){
    require(igk_io_currentrelativepath($name));
}
///<summary></summary>
///<param name="u"></param>
/**
* 
* @param mixed $u
*/
function igk_sys_root_user($u){
    return igk_sys_get_user_ctrl()->getRootUser($u);
}
///<summary></summary>
///<param name="code"></param>
///<param name="defctrl" default="null"></param>
///<param name="callback" default="null"></param>
/**
* 
* @param mixed $code
* @param mixed $defctrl the default value is null
* @param mixed $callback the default value is null
*/
function igk_sys_show_error_doc($code, $defctrl=null, $callback=null){
    $defctrl=$defctrl ? $defctrl: igk_get_defaultwebpagectrl();
    if($defctrl){
        if(file_exists($f=BaseController::GetErrorView($defctrl, $code))){
            igk_wln_e("handle 404 : ".$f);
            $defctrl->setCurrentView($f, true, null, array("error"=>$code, "uri"=>igk_io_request_uri()));
            igk_render_doc();
            $defctrl->setCurrentView(null, false);
            return;
        }
    }
    $doc=igk_get_document("error_".$code, true);
    $doc->body["class"]="igk-error-body";
    $codefile=$defctrl->getViewDir()."/error/{$code}.phtml";
    $doc->Title = __("Error 404");
    $t = $doc->body->addBodyBox()->add("div");
    $fname = "Error";    
    if(file_exists($codefile)){
        include($codefile);
    }
    else switch($code){
        case 403:
        case 503:
        igk_set_header(403);
        $doc->Title="Forbiden - ".igk_getv($_SERVER, "REDIRECT_STATUS", igk_getr("code"))." ";
        $bbox=$doc->body->addBodyBox()->ClearChilds();
        $bbox->setClass("err-".$code);
        get_class($bbox->addHeaderBar("Forbiden"));
        $bbox->addDiv()->addSectionTitle()->setClass("igk-danger")->Content="/!\\ Forbiden";
        $bbox->addDiv()->addNode("i")->Content=__("Access denied:")." ".igk_io_fullpath2fulluri(igk_io_rootdir().igk_io_request_uri());
        break;
        case 404:
            $doc->Title = __("Error 404");
        break;
        case 5404:
        igk_set_env("sys://error", $code);
        $doc->Title="/!\\ Domain error - 5404 ";
        $bbox=$doc->body->addBodyBox();
        $bbox->setClass("err-".$code);
        $bbox->addHeaderBar("SubDomainError", igk_io_currentbasedomainuri());
        $bbox->addDiv()->addDiv()->setStyle("clear:both");
        $bbox->addDiv()->addSectionTitle()->setClass("igk-danger")->Content=__("err.page.{$code}");
        $options[5404]=igk_io_subdomain_uri_name();
        $bbox->addDiv()->addNode("i")->Content=__("msg.page.{$code}_1", $options[$code]);
        if(!igk_sys_env_production()){
            $bbox->addDiv()->addObData(function(){
                $srv="<div style='font-size:1.6em; padding:10px; background-color:#fefefe; border:1px solid :#ddd; color:#444;' >Server Info</div>";
                $srv .= "<table>";
                foreach($_SERVER as $k=>$v){
                    $srv .= "<tr>";
                    $srv .= "<td>".$k;
                    $srv .= "</td>";
                    $srv .= "<td>".$v;
                    $srv .= "</td>";
                    $srv .= "</tr>";
                }
                $srv .= "</table>";
                igk_wl($srv);
            });
        }
        $bbox->addDiv()->addA("//".igk_sys_domain_name())->Content=__("Go home");
        break;
        case 504:
        break;
        case 901:
        igk_set_header(403);
        $uri=$_SERVER["REQUEST_URI"];
        igk_elog("Failed to access a resources : {$uri}");
        if(igk_sys_env_production()){
            igk_navto_home(null);
        }
        igk_exit();
        break;
    }
    if(is_callable($callback))
        $callback($doc);
    $opt=igk_xml_create_render_option();
    $opt->Context="html";
    $doc->RenderAJX($opt);
}
///<summary>system is showdown</summary>
/**
* system is showdown
*/
function igk_sys_shutdown_function($evt=null){ 

    if(!defined("IGK_APP_DIR")){
        define("IGK_APP_DIR", dirname(__FILE__)."/temp");
    }

    $s = "";
    $last=error_get_last();
    $ob_level=ob_get_level();
    if($ob_level > 0){
        $s=ob_get_contents();
        ob_end_flush();
    }
    if($last){
        igk_ilog($last, __FUNCTION__); 
    }
    if(igk_get_env("sys://noshowlast_error") || !$last){
        return;
    }
    
    if(ob_get_length() > 0)
        @ob_clean();

    // igk_wln_e("base", $last);
    $split_message=function($a) use ($last){
        $t=explode(IGK_LF, $a);
        $i=0;
        $n="<div>";
        foreach($t as $r){
            $n .= "<div>". $r."</div>";
        }
        $n .= "</div>";
        return $n;
    };
    $const="constant";
    switch(igk_getv($last, 'type')){
        case E_PARSE:
        if(igk_is_cmd()){
            igk_wln("PARSE_ERROR-{$const('IGK_PLATEFORM_NAME')}");
            igk_wln("command line args");
            $f=igk_get_env("igk_include_script");
            if($f){
                igk_wln($f.":".igk_getv($last, "line"));
            }
            return;
        }
        header("Content-Type:text/html");
        igk_header_no_cache();
        igk_html_output(404, 'error on page');
        $lastexp=igk_get_env(IGK_LAST_EVAL_KEY);
        if($lastexp && igk_server_is_local()){
            $lastexp="eval function failed to evaluate : <div><code>".htmlentities($lastexp)."</code></div>";
        }
        $title=__("Parse Error EVAL");
        $lc=igk_get_env("sys://eval/lastscript");
        $min_css=igk_io_read_allfile(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/min.error.css");
        $ast=igk_ob_get($last);
        $s=<<<EOF
<html>
	<head>
		<title>{$title} - {$const('IGK_PLATEFORM_NAME')}</title>
		<style type="text/css">{$min_css}</style>
	</head>
	<body>
		<div style="color: #eee; background-color:#C8503B; padding:25px 8px;">[{$const('IGK_PLATEFORM_NAME')}] : PARSE ERROR</div>
		<div >script try to evaluate an expression that is not recognized</div>
		<div ><quote>{$lastexp}</quote></div>
		<div>
		{$ast}
		</div>
		<div>Script : </div>
		<code>
		{$lc}
		<code>
	</body>
</html>
EOF;
        echo $s;
        break;
        case E_ERROR:
        igk_set_env("sys://error/repport", 1);
        if(igk_is_cmd()){
            igk_wln("[".__FUNCTION__."] -- ERROR : ".igk_io_request_uri());
            igk_session_destroy();
            igk_wln($last);
        }
        else if (!ini_get("display_errors")){ 
            
            header("Content-Type: text/html");
            $v_file=IGK_LIB_DIR."/Views/error/exceptions.phtml";
            if(file_exists($v_file)){
                $fname=basename($v_file);
                $source=__FUNCTION__;
                $error_style=igk_io_baseuri()."/Lib/igk/".IGK_STYLE_FOLDER."/errors.css";
                $trace=igk_ob_get_func("igk_trace");
				igk_set_header(500);
                include($v_file);
                return;
            }
            else{
                $trace=igk_ob_get_func("igk_trace");
                $dv="<!DocType html ><html><body style='margin:0px;'><div>";
                $dv .= "<div style='font-size:2.1em; color:#fe8e5e; background-color:#C8503B; padding:10px 5px;' >/!\\ Error /!\\</div>";
                $dv .= "</div>";
                $dv .= "<div>";
                $dv .= $trace;
                $dv .= "</div>";
                $dv .= "<div>";
                $cls=array("#ea9", "adf");
                $cli=0;
                $cl="";
                foreach($last as $k=>$v){
                    if($cli == 0){
                        $cli=1;
                    }
                    else
                        $cli=0;
                    $cl=$cls[$cli];
                    $dv .= "<div style='font-size:0.8em'>";
                    $dv .= "<div style='display:inline-block; color: #445884; float:left; width:20%;'>{$k}</div>";
                    $dv .= "<div style='display:inline-block; float:left; width:70%; background-color:{$cl};' >";
                    $dv .= ($k == "message" ? $split_message($v): $v);
                    $dv .= "</div>";
                    $dv .= "<div style='clear:both;' ></div>";
                    $dv .= "</div>";
                }
                $dv .= "</div>";
                $dv .= "</body></html>";
                if(igk_sys_env_production()){
                    igk_mail_admin_send($dv);
                }
                else
                    echo $dv;
            }
        } else {
            if (igk_environment()->is("DEV")){
                $dv  = "<!DOCTUYPE html>";
                $dv .= "<html><head></head><body><div>";
                $dv .= "ERROR : ".$last["type"];
                $dv .= "<ul>";
                $dv .= "<li><label>Message: </label>".implode("<br />", explode("\n", $last["message"]))."</li>";
                $dv .= "</ul>";
                $dv .= "</div></body></html>";
                igk_wln($dv); // last);
            } 
        } 
        break;  
    } 
    if(!defined("IGK_NODESTROY_ON_FATAL")){
        igk_session_destroy();
    }
}
///<summary></summary>
/**
* 
*/
function igk_sys_srv_domain_name(){
    $psrv=igk_io_server_name();
    $tab=null;
    if(preg_match_all("/(www\.)?(?<domain>(.)+)$/i", $psrv, $tab))
        return $tab["domain"][0];
    return null;
}
///<summary></summary>
/**
* 
*/
function igk_sys_srv_is_ip(){
    $host=igk_server()->HTTP_HOST;
    if(IGKValidator::IsIpAddress($host))
        return 1;
    return 0;
}
///<summary></summary>
/**
* 
*/
function igk_sys_srv_is_secure(){
    $srv=igk_server();
    return $srv->HTTPS || $srv->SSL_PROTOCOL;
}
///<summary>check for no cache request</summary>
/**
* check for no cache request
*/
function igk_sys_srv_nocache_request(){
    ///TODO: CHECK FOR NO CACHE REQUEST - firefox favicon view

    return 0;
}
///<summary>shortcut to referer</summary>
/**
* shortcut to referer
*/
function igk_sys_srv_referer(){
    return igk_server()->HTTP_REFERER;
}
///<summary></summary>
///<param name="scheme" default="'http'"></param>
/**
* 
* @param mixed $scheme the default value is 'http'
*/
function igk_sys_srv_uri_scheme($scheme='http'){
    $r=igk_server()->REQUEST_SCHEME;
    if($r)
        return $r;
    if(preg_match_all("/^(?<scheme>(.)+):\/\//i", igk_server()->SCRIPT_URI, $tab))
        return $tab["scheme"][0];
    return $scheme;
}
///<summary></summary>
///<param name="file"></param>
///<param name="render"></param>
/**
* 
* @param mixed $file
* @param mixed $render
*/
function igk_sys_start_engine($file, $render){
    try {
        
        igk_sys_handle_cache();
        igk_initenv(igk_io_applicationdir());
        
        igk_start_session(); 
        //+ hide info
        if (!igk_environment()->is("DEV")) {
            header_remove("X-Powered-By");
            header_remove("Server");
        }
        igk_set_header('200', "Content-Type: text/html; charset=utf-8");
        igk_set_session_redirection(null, 1); 
        IGKApp::Init($file, $render);
    }
    catch(\Exception $ex){
       
        // igk_ilog("Exception: ".implode("\n", [
        //     __FILE__.":".__LINE__,        
        //     $ex->getMessage()
        //     ])); 
        igk_show_exception($ex);
    }
}
///<summary>store document as cache</summary>
///<return>the document rendering output</return>
/**
* store document as cache
*/
function igk_sys_store_doc_cache($doc, $file, $uri=null){
    $f=igk_io_dir(IGK_APP_DIR."/Caches/html".$file);
    $opt=igk_xml_create_render_option();
    $opt->Cache=1;
    $o=$doc->Render($opt);
    igk_io_save_file_as_utf8_wbom($f, $o, true);
    if($uri){
        igk_sys_add_cache_uri($uri);
    }
    return $o;
}
///<summary></summary>
///<param name="src"></param>
///<param name="name"></param>
///<param name="uri" default="null"></param>
/**
* 
* @param mixed $src
* @param mixed $name
* @param mixed $uri the default value is null
*/
function igk_sys_store_str_cache($src, $name, $uri=null){
    $fn=preg_replace("/(\+|=|\?)/i", "_", $name);
    $cdir=igk_sys_html_cache_dir();
    $f=igk_io_dir($cdir.$fn);
    $dir=dirname($f);
    $sub=strlen($cdir);
    if(IGKIO::CreateDir($dir)){
        if(igk_io_save_file_as_utf8_wbom($f, $src, true)){
            if($uri){
                igk_sys_add_cache_uri($name, substr($f, $sub));
            }
            return $f;
        }
    }
    return null;
}
///<summary></summary>
///<param name="t"></param>
/**
* 
* @param mixed $t
*/
function igk_sys_store_uri_cache($t){
    $f=IGK_APP_DIR."/Caches/uri.cache";
    $s="<?php".IGK_LF;
    foreach($t as $k=>$v){
        $s .= "\$t[\"{$k}\"]=\"{$v}\";".IGK_LF;
    }
    $s .= "?>";
    igk_io_save_file_as_utf8_wbom($f, $s, true);
}
///<summary> get the subdomain name</summary>
/**
*  get the subdomain name
*/
function igk_sys_subdomain_name(){
    return IGKSubDomainManager::GetSubDomainName();
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_sys_unregpagefolderchanged($name){
    igk_app()->unregisterPageFolderChangedMethod($name);
}
///<summary></summary>
///<param name="ctrlname"></param>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrlname
* @param mixed $ctrl
*/
function igk_sys_unregview($ctrlname, $ctrl){
    $ctrl=igk_getctrl($ctrlname, false);
    if(($ctrl == null) || ($ctrl == null))
        return;
    $ctrl->unregView($ctrl);
}
///<summary>get the system version. alias function of constant IGK_VERSION</summary>
/**
* get the system version. alias function of constant IGK_VERSION
*/
function igk_sys_version(){
    return IGK_VERSION;
}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_sys_viewctrl($name){
    $ctrl=igk_getctrl($name);
    if($ctrl != null){
        $ctrl->View();
    }
}
function igk_assoc_keys($n){
    return json_encode(array_keys((array)$n));
}
///<summary>bind attributes</summary>
///<param name="reader"></param>
///<param name="attr"></param>
///<param name="value"></param>
///<param name="context" default="null"></param>
///<param name="storecallback" default="null"></param>
/**
* bind attributes
* @param mixed $reader
* @param mixed $attr
* @param mixed $value
* @param mixed $context the default value is null
* @param mixed $storecallback the default value is null
*/
function igk_temp_bind_attribute($reader, $attr, $value, $context=null, $storecallback=null){
   
    if($context == null){
        $context=$reader->context; 
    } 
    //+ bind root context

    $context = igk_get_attrib_raw_context($context);

    $g=igk_get_template_bindingattributes();
    if(isset($g[$attr])){
        $inf=$g[$attr];
        list($k, $v) = $inf($reader, $attr, $value, $context, $storecallback);
        if($k && $v && $storecallback){
            $storecallback($k, $v);
        }
        return true;
    }
    return false;
}
///<summary>activate the current template</summary>
/**
* activate the current template
*/
function igk_template_activate($name){}
///<summary>get the current active template</summary>
/**
* get the current active template
*/
function igk_template_active(){}
///<summary></summary>
/**
* 
*/
function igk_template_footer(){
    $c=igk_get_env(IGKEnvKeys::CURRENT_CTRL);
    $t=$t ?? $c->TargetNode;
}
///<summary></summary>
///<param name="t" default="null"></param>
/**
* 
* @param mixed $t the default value is null
*/
function igk_template_header($t=null){
    $c=igk_get_env(IGKEnvKeys::CURRENT_CTRL);
    $t=$t ?? $c->TargetNode;
}
///<summary>get list of templates</summary>
/**
* get list of templates
*/
function igk_template_list(){}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_template_register($name){}
///<summary></summary>
///<param name="name"></param>
/**
* 
* @param mixed $name
*/
function igk_template_unregister($name){}
///<summary></summary>
///<param name="condition"></param>
///<param name="target"></param>
///<param name="message"></param>
/**
* 
* @param mixed $condition
* @param mixed $target
* @param mixed $message
*/
function igk_test_assert($condition, $target, $message){
    if($condition)
        $target->add("message")->Content=$message;
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_text($msg){
    igk_header_set_contenttype("txt");
    echo $msg;
}
///<summary></summary>
///<param name="file"></param>
///<param name="line"></param>
/**
* 
* @param mixed $file
* @param mixed $line
*/
function igk_throw_exception($file, $line){
    try {
        igk_die("custom_exception", $file, $line);
    }
    catch(Exception $Ex){
        igk_show_exception($Ex);
        igk_exit();
    }
}
///<summary></summary>
///<param name="d"></param>
///<param name="from" default="null"></param>
/**
* 
* @param mixed $d
* @param mixed $from the default value is null
*/
function igk_time_max_info($d, $from=null){
    $c=$from ?? time();
    $d=$d - $c;
    if($d<=0)
        return array($d, 'n');
    if($d < 60){
        return array($d, 's');
    }
    $d=round($d/60);
    if($d < 60)
        return array($d, 'm');
    $d=round($d/60);
    if($d<=24)
        return array($d, 'h');
    $d=round($d/24);
    if($d < 365)
        return array($d, 'd');
    $d=round($d / 365);
    return array($d, "y");
}
///<summary> get the time span</summary>
///<usage> igk_time_span('Ymd', '20150518')</usage>
/**
*  get the time span
*/
function igk_time_span($format, $value){
    $b=date_parse_from_format($format, $value);
    $s=mktime($b["hour"], $b["minute"], $b["second"], $b["month"], $b["day"], $b["year"]);
    return $s;
}
///<summary></summary>
///<param name="obj"></param>
///<param name="emptyarray" default="1"></param>
/**
* 
* @param mixed $obj
* @param mixed $emptyarray the default value is 1
*/
function igk_to_array($obj, $emptyarray=1){
    if(is_array($obj))
        return $obj;
    if(is_object($obj)){
        if(method_exists($obj, "toArray"))
            return $obj->toArray();
    }
    return $obj == null ? (($emptyarray) ? array(): null): array($obj);
}
///<summary>call a tool action</summary>
/**
* call a tool action
*/
function igk_tool_call($name, $args=null){
    if(empty($name))
        return false;
    $r=igk_get_env(IGK_KEY_TOOLS);
    if($r == null){
        igk_notifyctrl()->addWarningr("msg.noactionregister_1", $name);
        return false;
    }
    $p=(object)igk_getv($r, $name);
    if($p && is_callable($p->Action)){
        $f=$p->Action;
        if($args == null)
            return $f();
        else
            return call_user_func_array($f, is_array($args) ? $args: array($args));
    }
    return false;
}
///<summary>register a tool to a system engine</summary>
/**
* register a tool to a system engine
*/
function igk_tool_reg($name, $prop){
    $r=igk_get_env(IGK_KEY_TOOLS);
    if($r == null)
        $r=array();
    if(isset($r[$name])){}
    $r[$name]=$prop;
    igk_set_env(IGK_KEY_TOOLS, $r);
}
///<summary></summary>
///<param name="level" default="1"></param>
/**
* 
* @param mixed $level the default value is 1
*/
function igk_trace_function($level=1){
    $c=IGKException::GetCallingFunction($level);
    return $c;
}
///<summary></summary>
/**
* 
*/
function igk_tracing(){
    $f=igk_io_basedir()."/Data/.trace";
    if(file_exists($f))
        return true;
    return false;
}
///<summary></summary>
///<param name="b"></param>
/**
* 
* @param mixed $b
*/
function igk_typeof($b){
    if($b === null)
        return "null";
    if(is_string($b))
        return "string";
    if(is_object($b)){
        return get_class($b);
    }
    if(is_array($b))
        return "array";
    return "unknow";
}
///<summary></summary>
///<param name="path"></param>
/**
* 
* @param mixed $path
*/
function igk_uninstall_module($path){
    throw new IGKNotImplementException(__FUNCTION__);
}
///<summary></summary>
///<param name="name"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $name
* @param mixed $callback
*/
function igk_unreg_hook($name, $callback){
    $hooks=igk_environment()->{"sys://hooks"};
    if(!$hooks){
        return 0;
    }
    $tb=& $hooks[$name]->list;
    foreach($tb as $k=>$v){
        if($v->callback === $callback){
            unset($tb[$k]);
            return 1;
        }
    }
    return 0;
}
///<summary>unregister html component </summary>
/**
* unregister html component
*/
function igk_unreg_html_component($name, $ns="igk"){
    igk_reg_html_component($name, null, $ns);
}
///<summary>unreg session event by name</summary>
///<param name="name">the key of the name session event</param>
///<param name="callback">callback to register</param>
/**
* unreg session event by name
* @param mixed name the key of the name session event
* @param mixed $closure callback callback to register
*/
function igk_unreg_session_event($name, $callback){
    $e=igk_get_session_event($name);
    $ctx=igk_current_context();
    $key="sys://global_events";
    $rne=strpos("running|starting", $ctx) !== false;
    switch($ctx){
        case IGKAppContext::initializing:
        $e=igk_getv(igk_get_env($key, array()), $name);
        break;default:
        $e=igk_getv(igk_app()->Session->Events, $name);
        break;
    }
    if($e){
        $t=array();
        $found=0;
        foreach($e as  $v){
            if(($v === $callback) || igk_cmp_array_value($v, $callback)){
                $found=1;
                continue;
            }
            $t[]=$v;
        }
        if($found){
            switch($ctx){
                case IGKAppContext::initializing:
                $h=igk_get_env($key);
                $h[$name]=$t;
                igk_set_env($key, $h);
                break;default:
                $h=igk_app()->Session->Events;
                $h[$name]=$t;
                igk_app()->Session->Events=$h;
                break;
            }
            return 1;
        }
    }
    if(!igk_sys_env_production())
        igk_die("unreg session event failed ".$name);
    return 0;
}
///<summary>unserialize internal data</summary>
/**
* unserialize internal data
*/
function igk_unseri_data($data){
    $nobj=(object)array();
    $ln=strlen($data);
    $lnf=IGK_LF;
    $pos=0;
    while($pos < $ln){
        $g=strpos($data, ':', $pos);
        if($g === false)
            break;
        $v="";
        $n=trim(substr($data, $pos, $g - $pos));
        $pos=$g + 1;
        while(($pos < $ln-1) && ($data[$pos] == ' '))
            $pos++;
        if($data[$pos] == '"'){
            $v=igk_str_read_brank($data, $pos, '"', '"');
        }
        else{
            $g=strpos($data, ';', $pos);
            if($g === false){
                $v=trim(substr($data, $pos));
            }
            else
                $v=trim(substr($data, $pos, $g - $pos));
        }
        $g=$pos + strlen($v);
        $nobj->$n=$v;
        $pos=$g + 1;
    }
    return $nobj;
}
///<summary>unset document</summary>
/**
* unset document
*/
function igk_unset_document($doc){
    $tab=igk_app()->Session->getParam(IGK_KEY_DOCUMENTS);
    $key=$doc->getParam(IGK_DOC_ID_PARAM);
    if(isset($tab[$key])){
        unset($tab[$key]);
        igk_app()->Session->setParam(IGK_KEY_DOCUMENTS, $tab);
    }
    $doc->Dispose();
}
///<summary></summary>
///<param name="f"></param>
/**
* 
* @param mixed $f
*/
function igk_update_include($f){
    $f=igk_io_dir($f);
    $t=igk_get_env("sys://include/init");
    $source=$t["funcs"];
    $clcount=$t["classes"];
    $functions2=get_defined_functions();
    $classes2=get_declared_classes();
    if(count($functions2["user"]) > $source){
        $ktab=array_slice($functions2["user"], $source);
        igk_reg_func_files($f, $ktab);
        $source += igk_count($ktab);
    }
    if(count($classes2) > $clcount){
        $ktab=array_slice($classes2, $clcount);
        igk_reg_class_file($f, $ktab);
        $clcount += igk_count($ktab);
    }
}
///<summary></summary>
///<param name="u"></param>
///<param name="args" default="null"></param>
/**
* 
* @param mixed $u
* @param mixed $args the default value is null
*/
function igk_uri_add_args($u, $args=null){
    $u=parse_url($u);
    $q=$args ? http_build_query($args): null;
    $o=$u["path"];
    if(isset($u["query"]))
        $o .= "?".$u["query"].($q ? "&".$q: null);
    else if(!empty($q)){
        $o .= "?".$q;
    }
    return $o;
}
///<summary></summary>
///<param name="qparam" default="null"></param>
/**
* 
* @param mixed $qparam the default value is null
*/
function igk_uri_invokecurrent($qparam=null){
    $curi=igk_io_baseuri(igk_io_get_relative_currenturi()).$qparam;
    $f=igk_curl_post_uri($curi, null);
    return $f;
}
///<summary>check is uri match by ignoring the case</summary>
/**
* check is uri match by ignoring the case
*/
function igk_uri_is_match($u1, $u2){
    return strtolower($u1) == strtolower($u2);
}
///<summary>get the current uri </summary>
/**
* get the current uri
*/
function igk_uri_rquery(){
    return igk_getv($_SERVER, 'REQUEST_QUERY');
}
///<summary></summary>
///<param name="packagename"></param>
/**
* 
* @param mixed $packagename
*/
function igk_use_component_package($packagename){
    $key="sys://components/packages";
    $tab=igk_get_env($key);
    $n=strtolower($packagename);
    if(!$tab || !($t=igk_getv($tab, $n)))
        return false;
    igk_set_env("sys://components/currentpackage", $n);
    return 1;
}
///<summary> define usage of required package list</summary>
///<param name="packaglist"> mixed : semi colon separated list of string of array or string </param>
/**
*  define usage of required package list
* @param mixed $packaglist  mixed : semi colon separated list of string of array or string
*/
function igk_use_web_package($packageList){
    $tab=$packageList;
    if(is_string($tab))
        $tab=explode(";", $tab);
    igk_set_env("sys://web/package", $tab);
}
///<summary>shortcut to get system user</summary>
/**
* shortcut to get system user
*/
function igk_user(){
    return igk_app()->Session->User;
}
///<summary></summary>
///<param name="name"></param>
///<param name="datatype"></param>
///<param name="cardinality"></param>
///<param name="type"></param>
/**
* 
* @param mixed $name
* @param mixed $datatype
* @param mixed $cardinality
* @param mixed $type
*/
function igk_user_add_info_type($name, $datatype, $cardinality, $type){
    $ctrl=igk_getctrl(IGK_SYSDB_CTRL);
    $v_ktt=array(
            IGK_FD_NAME=>$name,
            "clDataType"=>$datatype,
            "clCardinality"=>$cardinality,
            "clType"=>$type
        );
    return igk_db_insert_if_not_exists($ctrl, igk_db_get_table_name(IGK_TB_USER_INFO_TYPES), $v_ktt);
}
///<summary></summary>
///<param name="r"></param>
///<param name="inf"></param>
///<param name="v"></param>
///<param name="ctrl"></param>
/**
* 
* @param mixed $r
* @param mixed $inf
* @param mixed $v
* @param mixed $ctrl
*/
function igk_user_build_info($r, $inf, $v, $ctrl){
    return (object)array(
            IGK_FD_NAME=>$inf,
            "clDescription"=>$v->clDescription,
            "clValue"=>($r->clType == 0) ? igk_db_table_select_where($r->clDataType,
            array(IGK_FD_ID=>$v->clValue),
            $ctrl)->getRowAtIndex(0): $v->clValue
        );
}
///<summary></summary>
///<param name="login"></param>
/**
* 
* @param mixed $login
*/
function igk_user_connectas($login){
    $u=igk_get_user_bylogin($login);
    if($u){
        igk_getctrl(IGK_USER_CTRL)->setGlobalUser($u);
        return 1;
    }
    return 0;
}
///<summary>user fonctions . get fullname </summary>
/**
* user fonctions . get fullname
*/
function igk_user_fullname($u){
	if ($t = igk_getv($u, "clDisplay")){
		return $t;
	}
    return igk_getv($u, "clFirstName")." ".igk_getv($u, "clLastName");
}
///<summary>generate password</summary>
/**
* generate password
*/
function igk_user_genpwd($length=8){
    static $chars=null;
    if(!$chars)
        $chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#!()_";
    $r="";
    $count=strlen($chars);
    for($i=0; $i < $length; $i++){
        $idx=rand(0, $count - 1);
        $r .= substr($chars, $idx, 1);
    }
    return $r;
}
///<summary></summary>
///<param name="u"></param>
/**
* 
* @param mixed $u
*/
function igk_user_get_env_param($u){
    $k=IGK_ENV_PARAM_KEY;
    return igk_getv($u, $k);
}
///<summary></summary>
///<param name="inf"></param>
///<param name="uid" default="null"></param>
/**
* 
* @param mixed $inf
* @param mixed $uid the default value is null
*/
function igk_user_info($inf, $uid=null){
    $u=$uid == null ? igk_app()->Session->User: igk_get_user($uid);
    if($u == null)
        return null;
    $ctrl=igk_getctrl(IGK_SYSDB_CTRL);
    $v=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USER_INFO_TYPES), array(IGK_FD_NAME=>$inf), $ctrl);
    $r=null;
    if($v != null){
        $r=$v->getRowAtIndex(0);
        if($r == null)
            return null;
        $v_n=$r->clCardinality;
        $v_q=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USER_INFOS), array("clUserInfoType_Id"=>$r->clId, "clUser_Id"=>$u->clId), $ctrl);
        switch($v_n){
            case 0:
            $tab=array();
            foreach($v_q->Rows as $v){
                $tab[]=igk_user_build_info($r, $inf, $v, $ctrl);
            }
            return $tab;
            case 1:
            if($v_q->RowCount > 0){
                $v=$v_q->getRowAtIndex(0);
                return igk_user_build_info($r, $inf, $v, $ctrl);
            }
            return null;
            default:
            if($v_n < 0){
                igk_die("error on data cardinality ");
            }
            $v_tk=min($v_n, $v_q->RowCount);
            $tab=array();
            foreach($v_q->Rows as  $v){
                $tab[]=igk_user_build_info($r, $inf, $v, $ctrl);
                $v_tk--;
                if($v_tk<=0)
                    break;
            }
            return $tab;
        }
    }
    return "no";
}
///<summary>check if password require ok</summary>
/**
* check if password require ok
*/
function igk_user_pwd_required($pwd, $repwd){
    if(!$pwd || !$repwd || ($pwd != $repwd)){
        return false;
    }
    return IGKValidator::IsValidPwd($pwd);
}
///<summary>set environment param to users</summary>
/**
* set environment param to users
*/
function igk_user_set_env_param($u, $pn, $obj){
    if($u === null)
        return 0;
    $k=IGK_ENV_PARAM_KEY;
    $tab=igk_getv($u, $k);
    if($tab == null)
        $tab=array();
    $tab[$pn]=$obj;
    $u->$k=$tab;
    return 1;
}
///<summary> get user information</summary>
///<param name="cardinality"> 0 for infinite value, or more than 0</param>
///<param name="type"> 1 for regex, 2 for data type</param>
///<param name="expression"> regex or data type</param>
///<return> single value or array of values if found</return>
///<remark> in case of new data to insert cardinality type and expression must be setup . system must init user setting info to register data</remark>
/**
*  get user information
* @param mixed $cardinality  0 for infinite value, or more than 0
* @param mixed $type  1 for regex, 2 for data type
* @param mixed $expression  regex or data type
*/
function igk_user_set_info($inf, $data, $uid=null, $cardinality=0, $type=1, $expression="(.)+"){
    $u=$uid == null ? igk_app()->Session->User: igk_get_user($uid);
    $ei=igk_get_env("sys://db_init");
    if(!$ei && ($u == null)){
        return null;
    }
    $ctrl=igk_getctrl(IGK_SYSDB_CTRL);
    $v=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USER_INFO_TYPES), array(IGK_FD_NAME=>$inf), $ctrl);
    $r=null;
    if(($v == null) || ($v->RowCount == 0)){
        if($ei == 1){
            $tab=$ctrl->getInfoDataEntry($inf, $cardinality, $type, $expression);
            $table = igk_db_get_table_name(IGK_TB_USER_INFO_TYPES);
            if(igk_db_insert($ctrl, $table, $tab)){
                $v=igk_db_table_select_where($table, array(IGK_FD_NAME=>$inf), $ctrl);
                $r=$v->getRowAtIndex(0);
            }
        }
    }
    else{
        $r=$v->getRowAtIndex(0);
    }
    if($u == null)
        return null;
    $insert=true;
    if($r == null)
        return null;
    $v_n=$r->clCardinality;
    $v_kkt=array("clUserInfoType_Id"=>$r->clId, "clUser_Id"=>$u->clId);
    $v_q=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USER_INFOS), $v_kkt);
    $v_kkt["clValue"]=$data;
    switch($r->clType){
        case 1:
        if(!empty($r->clDataType)){
            if(!preg_match("/".$r->clDataType."/i", $data)){
                igk_log_write_i(__FUNCTION__, "Data not match ".$data);
                return false;
            }
        }
        break;
        case 0:
        if(!is_numeric($data) || empty($r->clDataType) || (igk_db_table_select_where($r->clDataType, array(IGK_FD_ID=>$data), $ctrl)->RowCount == 0)){
            igk_wln(__FUNCTION__.": Not valid data [{$r->clDataType}] : $data");
            igk_wln($r);
            return false;
        }
        else{
            igk_debug_wln("valid data");
        }
        break;
    }
    switch($v_n){
        case 0:
        break;
        case 1:
            if($v_q->RowCount > 0){
                if($v_q->RowCount == 1){
                    $r=$v_q->getRowAtIndex(0);
                    $r->clValue=$data;
                    igk_db_update($ctrl, igk_db_get_table_name(IGK_TB_USER_INFOS), $r);
                    return true;
                }
                else
                    igk_log_write_i(__FUNCTION__, "DataBaseStructure Error : data will not be inserted");
                return false;
            }
        break;
        default:
            if($v_n < 0){
                igk_die("error on data cardinality ".$v_n);
            }
            if(!($v_n < $v_q->RowCount)){
                return false;
            }
        break;
    }
    if($insert){
        return igk_db_insert_if_not_exists($ctrl, igk_db_get_table_name(IGK_TB_USER_INFOS), $v_kkt, $v_kkt);
    }
    return false;
}
///<summary></summary>
///<param name="u"></param>
/**
* 
* @param mixed $u
*/
function igk_user_store_tokenid($u){
    $id=igk_create_cref();
    setcookie(igk_get_cookie_name(igk_sys_domain_name()."/uid"), $u->clId.":".$id, time() + (86400 * 7), igk_get_cookie_path());
    igk_user_set_info("TOKENID", $id, 1, 1);
    $u->clTokenStored=1;
}
///<summary></summary>
///<param name="item" ref="true"></param>
///<param name="params"></param>
/**
* 
* @param mixed * $item
* @param mixed $params
*/
function igk_usort(& $item, $params){
    if($item === null){
        igk_trace();
        igk_die(__FUNCTION__." : item is null");
        return;
    }
    if(is_array($item))
        usort($item, $params);
    else{
        $item->Sort($params);
    }
}
//------------------------------------------------------------------
//+ | validation utility function
//------------------------------------------------------------------
///<summary></summary>
///<param name="msg"></param>
///<param name="cibling" default="null"></param>
/**
* 
* @param mixed $msg
* @param mixed $cibling the default value is null
*/
function igk_val_add_error($msg, $cibling=null){
    $li=igk_val_node()->addLi();
    $li->Content=$msg;
    IGKValidator::AddCibling($cibling);
    $li->cibling=$cibling;
    return $li;
}
///<summary></summary>
///<param name="e"></param>
///<param name="name"></param>
/**
* 
* @param mixed $e
* @param mixed $name
*/
function igk_val_cbcss($e, $name){
    if($e && isset($e[$name]))
        return "err_c";
}
///<summary></summary>
///<param name="callback"></param>
///<param name="object"></param>
///<param name="name"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $callback
* @param mixed $object
* @param mixed $name
* @param mixed $msg
*/
function igk_val_check($callback, $object, $name, $msg){
    if(is_bool($callback)){
        if($callback){
            igk_val_add_error($msg, $name);
        }
        return;
    }
    $v=call_user_func_array(array("IGKValidator", $callback), array($object->$name));
    if($v){
        igk_val_add_error($msg, $name);
    }
}
///<summary></summary>
/**
* 
*/
function igk_val_cibling(){
    return IGKValidator::Cibling();
}
///<summary></summary>
/**
* 
*/
function igk_val_haserror(){
    return IGKValidator::Error()->HasChilds;
}
///<summary></summary>
/**
* 
*/
function igk_val_init(){
    IGKValidator::Init();
}
///<summary></summary>
///<param name="type"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $type
* @param mixed $msg
*/
function igk_val_ispic($type, $msg){
    if(!igk_io_fileispicture($type)){
        IGKValidator::Error()->addLi()->Content=$msg;
    }
}
///<summary></summary>
///<param name="tname"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $tname
* @param mixed $msg
*/
function igk_val_isstrnullorempty($tname, $msg){
    if(IGKValidator::IsStringNullOrEmpty($tname)){
        IGKValidator::Error()->addLi()->Content=$msg;
    }
}
///<summary></summary>
/**
* 
*/
function igk_val_node(){
    return IGKValidator::Error();
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="name"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $name
*/
function igk_val_regparam($ctrl, $name){
    $ctrl->setParam($name.":error", igk_val_node());
    $ctrl->setParam($name.":errorcibling", igk_val_cibling());
}
///<summary></summary>
///<param name="ctrl"></param>
///<param name="name"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $name
*/
function igk_val_unregparam($ctrl, $name){
    $ctrl->setParam($name.":error", null);
    $ctrl->setParam($name.":errorcibling", null);
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_verbose_wln($msg){
    if(defined("IGK_VERBOSE")){
        igk_wln($msg);
        igk_flush_data();
    }
}
///<summary>shortcut to retrieve view argument</summary>
/**
* shortcut to retrieve view argument
*/
function igk_view_args($n=null){
    $s=igk_get_env("sys://io/query_args");
    if($n == null)
        return $s;
    return igk_getv($s, $n);
}
///<summary> shortcut : view controller's article content</summary>
/**
*  shortcut : view controller's article content
*/
function igk_view_article($ctrl, $name){
    $f=$name;
    if(!file_exists($f))
        $f=$ctrl->getArticle($f);
    $n=igk_html_node_notagnode();
    igk_html_article($ctrl, $f, $n);
    return $n->Render();
}
///<summary></summary>
///<param name="f"></param>
///<param name="bindinginfo"></param>
///<param name="target"></param>
///<param name="exit" default="1"></param>
/**
* 
* @param mixed $f
* @param mixed $bindinginfo
* @param mixed $target
* @param mixed $exit the default value is 1
*/
function igk_view_bindfile($f, $bindinginfo, $target, $exit=1){
    if(file_exists($f)){
        igk_include($f, $bindinginfo, $target);
        if($exit){
            $target->RenderAJX();
            igk_exit();
        }
        return 1;
    }
    else{
        if($exit){
            if(is_callable($g=igk_getv($bindinginfo, "requestFailedCallback"))){
                $g($f, $bindinginfo, 404);
            }
            else{
                $ac=igk_getv($bindinginfo, "action");
                igk_set_header(404);
                igk_wl("Oups!!!!! - Requested uri not found - ".$ac);
            }
            igk_exit();
        }
    }
    return 0;
}
///<summary>trait parameter</summary>
///<param name="ctrl"></param>
///<param name="$c"></param>
///<param name="f"></param>
///<param name="p" ref="true"></param>
/**
* 
* @param mixed $ctrl
* @param mixed $c
* @param mixed $f
* @param mixed * $p
*/
function igk_view_dispatch_args($ctrl, $c, $f, & $p){
    $g=substr($f, strlen($ctrl->getViewDir()) + 1); 
    if( is_array($p) && !preg_match("#^". $c."#", $g) || ((($ext=igk_io_path_ext($c)) != $c) && !preg_match("/phtml$/", $ext))){
        array_unshift($p, $c);
        return 1;
    }
    return false;
}
///<summary></summary>
/**
* 
*/
function igk_view_env_actions(){
    return igk_get_env(IGKEnvKeys::VIEW_HANDLE_ACTIONS);
}
///<summary></summary>
/**
* 
*/
function igk_view_get_action_params(){
    return ($r=igk_view_env_actions()) ? igk_getv($r, "args"): null;
}
///<summary></summary>
///<param name="action"></param>
/**
* 
* @param mixed $action
*/
function igk_view_handle($action){
    $fname=igk_get_env(IGKEnvKeys::VIEW_HANDLE_ACTIONS);
    if(!$fname)
        return;
    $fs="sys://view/actions/".$fname["v"];
    $params=func_num_args() > 1 ? array_slice(func_get_args(), 1): $fname["args"];
    $fc=igk_get_env($fs."/".$action);
    $fc_result=null;
    if($fc){
        $ht=array_slice($params, 1);
        igk_set_env(IGKEnvKeys::VIEW_CURRENT_ACTION, $action);
        if(igk_count($ht) > 0){
            $fc_result=call_user_func_array($fc, $ht);
        }
        else
            $fc_result=$fc();
        unset($ht);
    }
    return $fc_result;
}
///<summary>handle view command action</summary>
/**
* handle view command action
*/
function igk_view_handle_action($fname, $params, $redirectfailed=1){
    $action=igk_getv($params, 0);
    $fs="sys://view/actions/".$fname;
    $fc_result=null;
    $fc=null;
    $v_errkey = IGKViewActionsContants::HANDLE_ERROR;
    if($action){
        if($action != $v_errkey) {
            $fc=igk_get_env($fs."/".$action);
        }
        if(!$fc){
            if(is_array($v_tab=igk_get_env($fs."/{$v_errkey}"))){
                $fc=igk_getv($v_tab, 404);
                $params=array(implode("/", $params));
                array_unshift($params, null);
            }
        }
    }
    else{
        $redirect=igk_server()->REDIRECT_STATUS;
        if(isset($redirect)){
            if(is_array($v_tab=igk_get_env($fs."/{$v_errkey}"))){
                $fc=igk_getv($v_tab, $redirect);
            }
        }
    }
    if($fc){
        igk_set_env(IGKEnvKeys::VIEW_CURRENT_ACTION, $action);
        $ht=array_slice($params, 1);
        $fc_result = Dispatcher::Dispatch($fc, ...$ht); 
    }
    return $fc_result;
}
///<summary>handle view command actions. </summary>
///<param name="viewName">command view name</param>
///<param name="arrayList">mixed. string(classname)|assoc array of callback|. </param>
///<param name="params">paramflag to enable handle specification</param>
///<param name="exit">exit after execution</param>
///<param name="flag">extra flag</param>
/**
* handle view command actions.
* @param mixed $viewName command view name
* @param mixed $arrayList mixed. string(classname)|assoc array of callback|.
* @param mixed $params paramflag to enable handle specification
* @param mixed $exit exit after execution
* @param mixed $lag extra flag
*/
function igk_view_handle_actions($viewname, $arrayList, $params, $exit=1, $flag=0){
    igk_set_env(IGKEnvKeys::VIEW_HANDLE_ACTIONS, array("v"=>$viewname, "list"=>$arrayList, "args"=>$params));
    $b=0;
    if(is_string($arrayList)){
        if(class_exists($arrayList)){
            $arrayList=new $arrayList();
        }
        else{
            igk_die("not allowed view action handler");
        }
    }
    if(is_array($arrayList)){
        foreach($arrayList as $k=>$v){
            igk_view_reg_action($viewname, $k, $v);
        }
        igk_do_response($b=igk_view_handle_action($viewname, $params)); 
    }
    else if(is_object($arrayList)){
        $b=igk_view_handle_obj_action($viewname, $arrayList, $params, $exit, $flag);
    }
    igk_set_env(IGKEnvKeys::VIEW_HANDLE_ACTIONS, null);
    if($b && $exit){
        $c=igk_get_current_base_ctrl();
        if($c)
            $c->regSystemVars(null);
        igk_exit();
    }
    return $b;
}
///<summary>get view handle last action name</summary>
/**
* get view handle last action name
*/
function igk_view_handle_name(){
    return igk_get_env(IGKEnvKeys::VIEW_CURRENT_ACTION);
}
function igk_view_action_path(){
    if ($t = igk_view_env_actions()){
        return implode("/", [$t["v"], igk_view_handle_name()]);
    }
    return null;
}
function igk_do_response($r){
    $e = 0;
    // igk_wln_e("instance ". ($r instanceof IGK\IResponse));
    if (is_object($r) &&  (($r instanceof IGK\IResponse) || ($r instanceof IGK\System\Http\RequestResponse))){
        $r->output();
        $e = 1;
    }elseif  ($r instanceof IGKHtmlItemBase){
        $b = new IGK\System\Http\WebResponse($r);
        $b->output();
        $e = 1; 
    }
    elseif (is_array($r)){
        igk_json(json_encode($r));
        $e = 1;
    }
    if ($e) 
        igk_exit();
    return $r;
}
///<summary>handle object action.</summary>
///<param name="fname">action identifier.</param>
///<param name="object">object that will be used to handle actions.</param>
///<param name="params">parameters.</param>
///<param name="flags">extra flag.</param>
/**
* handle object action.
* @param mixed $name action identifier.
* @param mixed $objectobject that will be used to handle actions.
* @param mixed $params parameters.
* @param mixed $lags extra flag.
*/
function igk_view_handle_obj_action($fname, $object, array $params= [], $exit = 1, $flag=0){
    $action=igk_getv($params, 0);
    $r=0; 
    if (!empty($action)){
        igk_set_env(IGKEnvKeys::VIEW_CURRENT_ACTION, $action); 
        igk_environment()->set(IGKEnvKeys::VIEW_CURRENT_VIEW_NAME, $fname);
        $args = array_slice($params, 1);
        try{  
            $c = $object->$action(...$args);
            if ($exit){
                return igk_do_response($c); 
            }
        } catch(Throwable $ex){            
            throw new IGKException($ex->getMessage(), $ex->getCode(), $ex);
        }
        return $c;
    }
    
    //--------------------------------------------
    // old handling action 
    if(!empty($action) && (((($flag & 1) == 1) || method_exists($object, $action)) || igk_getv($object, "handleAllAction"))){
        igk_set_env(IGKEnvKeys::VIEW_CURRENT_ACTION, $action); 
     

        $g = new ReflectionMethod($object, $action);
        $params = array_slice($params, 1);
        if (($g->getNumberOfRequiredParameters() == 1) && 
            ($cl = $g->getParameters()[0]->getType()) && 
            ($cl->getName() === IGK\System\Http\Request::class)){
                $req = IGK\System\Http\Request::getInstance();
                $req->setParam($params);
            $params = [$req];
        }
        $r=call_user_func_array(array($object, $action), $params); 
        igk_do_response($r);
    }
    return $r;
}
///<summary></summary>
///<param name="ctrl"></param>
/**
* 
* @param mixed $ctrl
*/
function igk_view_handle_uri($ctrl){
    if($s=igk_view_handle_name())
        $s="/".$s;
    return $ctrl->getAppUri($ctrl->getCurrentView().$s);
}
///<summary>get initialize view binding array info</summary>
/**
* get initialize view binding array info
*/
function igk_view_init_bindinginfo(){
    $t=array(
            "bindto"=>null,
            "ctrl"=>null,
            "doc"=>null,
            "t"=>null,
            "fname"=>null,
            "params"=>null,
            "requestFailedCallback"=>null
        );
    return $t;
}
///<summary>register view action</summary>
/**
* register view action
*/
function igk_view_reg_action($fname, $action, $callback){
    igk_set_env("sys://view/actions/".$fname."/".$action, $callback);
}
///<summary></summary>
///<param name="tab"></param>
///<param name="tag" default="li"></param>
/**
* 
* @param mixed $tab
* @param mixed $tag the default value is "li"
*/
function igk_warray($tab, $tag="li"){
    $n=igk_html_node_notagnode();
    if(is_array($tab))
        $n->addArrayList($tag, $tab);
    else
        $n->addDiv()->Content=$tab;
    $n->RenderAJX();
}
///<summary></summary>
///<param name="m"></param>
/**
* 
* @param mixed $m
*/
function igk_wcode($m){
    igk_wl("<code>");
    igk_wl($m);
    igk_wl("</code>");
}
///<summary></summary>
/**
* 
*/
function igk_web_defaultpage(){
    return igk_getv(igk_app()->Configs, "menu_defaultPage", "default");
}
///<summary>shortcut to platform config</summary>
/**
* shortcut to platform config
*/
function igk_web_get_config($name, $default=null){
    return igk_getv(igk_app()->Configs, $name, $default);
}
///<summary></summary>
/**
* 
*/
function igk_web_prefix(){
    return igk_app()->Configs->website_prefix;
}
///<summary>write to buffer and exit</summary>
/**
* write to buffer and exit
*/
function igk_wl_e($msg){
    call_user_func_array("igk_wl", func_get_args());
    igk_exit();
}
///<summary>utility: write a message in a textarea</summary>
/**
* utility: write a message in a textarea
*/
function igk_wln_area($msg){
    $t=igk_createnode("textarea");
    $t->Content=$msg;
    $t->RenderAJX();
}
///<summary></summary>
///<param name="cond"></param>
///<param name="msg"></param>
/**
* 
* @param mixed $cond
* @param mixed $msg
*/
function igk_wln_assert($cond, $msg){
    if($cond){
        igk_wln($msg);
    }
}
///<summary>write with html</summary>
/**
* write with html
*/
function igk_wln_html($msg){
    header("Content-Type:text/html");
    igk_wln($msg);
}
///<summary></summary>
///<param name="cond"></param>
/**
* 
* @param mixed $cond
*/
function igk_wln_if($cond){
    if((!$cond) || (count($args=array_slice(func_get_args(), 1)) == 0))
        return;
    call_user_func_array("igk_wln", $args);
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_wln_ob_flushdata($msg){
    igk_wln($msg);
    igk_flush_data();
}
///<summary></summary>
/**
*
*/
function igk_wln_ob_get($obj){
    IGKOb::Start();
    igk_wl($obj);
    $c=IGKOb::Content();
    IGKOb::Clear();
    return $c;
}
///<summary>write in buffer output with html secification tag</summary>
/**
* write in buffer output with html secification tag
*/
function igk_wnode($msg, $tag='div'){
    $n=igk_createnode($tag);
    $n->addObData(function() use ($msg){igk_wln($msg);
    });
    $n->RenderAJX();
}
///<summary></summary>
///<param name="msg"></param>
/**
* 
* @param mixed $msg
*/
function igk_xml($msg){
    igk_header_set_contenttype("xml");
    echo $msg;
}
///<summary>file reading object</summary>
/**
* file reading object
*/
function igk_xml_create_readinfo(& $inf){
    return igk_create_filterobject($inf, ["min"=>0, "max"=>10, "offset"=>0, "path"=>"root", "pathinfo"=>[], "current"=>null, "start"=>0, "count"=>0, "objects"=>[], "item"=>0, "bufferSize"=>4096]);
}
///<summary></summary>
/**
* 
*/
function igk_xml_create_render_option(){
    $o=igk_createobj(array(
            "Indent"=>0,
            "Document"=>null,
            "Context"=>IGK_WEB_CONTEXT,
            "BodyOnly"=>0,
            "Attachement"=>0,
            "StandAlone"=>0,
            "Cache"=>igk_sys_cache_require(),
            "CacheUri"=>0,
            "CacheUriLevel"=>0,
            "Depth"=>0,
            "Stop"=>0
        ));
    if($o->Cache){
        $o->CacheUri=base64_decode(igk_sys_cache_uri());
        $o->CacheUriLevel=explode("/", $o->CacheUri);
    }
    return $o;
}
///<summary></summary>
/**
* 
*/
function igk_xml_create_to_node_settings(){
    return (object)array(
            "storeAttribAsNode"=>0,
            "handleArray"=>function($k, $v, $n, $setting=null){
                foreach($v as $sk=>$v){
                    $nv=$n->addXmlNode($k);
                    igk_xml_to_node($v, $nv, $setting);
                }
                return 1;
            }
        );
}
///<summary></summary>
///<param name="v" default="1.0"></param>
///<param name="e" default="utf-8"></param>
/**
* 
* @param mixed $v the default value is "1.0"
* @param mixed $e the default value is "utf-8"
*/
function igk_xml_header($v="1.0", $e="utf-8"){
    return "<?xml version=\"$v\" encoding=\"$e\" ?>";
}
///<summary></summary>
///<param name="option"></param>
///<param name="tab"></param>
/**
* 
* @param mixed $option
* @param mixed $tab
*/
function igk_xml_initialize($option, $tab){
    foreach($tab as $k=>$v){
        if(!isset($option->$k)){
            $option->$k=$v;
        }
    }
}
///<summary>determining if xml options is caching require</summary>
/**
* determining if xml options is caching require
*/
function igk_xml_is_cachingrequired($options=null){
    return $options && ($options->Context == IGK_WEB_CONTEXT) && $options->Cache;
}
///<summary>is mail option</summary>
///<param name="options"></param>
/**
* 
* @param mixed $options
*/
function igk_xml_is_mailoptions($options){
    if($options && !isset($options->Context)){
        igk_die("Try to send XML options without <b>Context</b> property");
    }
    return $options && ($options->Context == "mail");
}
///<summary></summary>
///<param name="n"></param>
/**
* 
* @param mixed $n
*/
function igk_xml_is_validname($n){
    return preg_match("/^[a-z_][a-z_0-9\-]*(:[a-z]+){0,1}$/i", $n);
}
///<summary>xml reader info</summary>
/**
* xml reader info
*/
function igk_xml_read($xreader){
    $eof=0;
    $v_c=0;
    $v_enter=0;
    $q=$xreader;
    $v="";
    $canread=null;
    $init="::init";
    $xreader->attribs=null;
    if(!isset($xreader->$init)){
        if($xreader->context == "stream"){
            fseek($xreader->text, $xreader->offset);
            $hfile=$xreader->text;
            $xreader->offset=0;
            $canread=function() use (& $xreader, & $hfile, & $eof){
                if($eof)
                    return 0;
                $buffsize=$xreader->inf->bufferSize;
                if($xreader->length == -1){
                    $b=@fread($hfile, $buffsize);
                    if($b){
                        $xreader->length=strlen($b);
                        $xreader->text=$b;
                        return 1;
                    }
                    return 0;
                }
                else{
                    if($xreader->offset < $xreader->length)
                        return 1;
                    $b=fread($hfile, $buffsize);
                    $xreader->length += strlen($b);
                    $xreader->text .= $b;
                    return ($xreader->offset < $xreader->length);
                }
            };
        }
        else{
            if($xreader->offset>=$xreader->length)
                return 0;
            $canread=function() use (& $xreader, & $eof){
                return !$eof && ($xreader->offset < $xreader->length);
            };
        }
        $readnext=function($count) use ($q, & $canread){
            $readsub="";
            $ics=$q->offset;
            $q->offset++;
            $icx=$q->offset;
            $icc=$count;
            $ico=$icc;
            while($canread() && ($icc > 0) && ($m=$q->text[$icx])){
                $icc--;
                $readsub .= $m;
                $icx++;
                $q->offset++;
            }
            $q->offset=$ics;
            return $readsub;
        };
        $readname=function() use (& $xreader, $canread){
            $v=IGK_STR_EMPTY;
            $s="/".IGK_TAGNAME_CHAR_REGEX."/i";
            while($canread() && preg_match($s, $k=$xreader->text[$xreader->offset])){
                $v .= $k;
                $xreader->offset++;
            }
            return $v;
        };
        $__readTextValue=function() use (& $xreader, $canread){
            $q=$xreader;
            $v=IGK_STR_EMPTY;
            $p=$q->offset;
            while($canread()){
                $v .= $q->text[$q->offset];
                $q->offset++;
                if(substr($v, -1, 1) == "<"){
                    $v=substr($v, 0, strlen($v)-1);
                    if(empty(trim($v))){
                        $q->offset -= 2;
                        $q->name=null;
                        $q->value=null;
                        return false;
                    }
                    $q->offset--;
                    $q->name=null;
                    $q->value=$v;
                    $q->nodetype=IGKXMLNodeType::TEXT;
                    return true;
                }
            }
            $q->offset=$p;
            return false;
        };
        $xreader->{"can:read"}=$canread;
        $xreader->{"can:readt"}=$__readTextValue;
        $xreader->{"can:readn"}=$readname;
        $xreader->{"can:readnx"}=$readnext;
        $xreader->$init=1;
    }
    else{
        $canread=$xreader->{"can:read"};
        $__readTextValue=$xreader->{"can:readt"};
        $readname=$xreader->{"can:readn"};
        $readnext=$xreader->{"can:readnx"};
    }
    $i=$xreader->offset;
    $xreader->context="xml";
    $r=0;
    while($r=$canread()){
        $c=$q->text[$q->offset];
        switch($c){
            case "<":
            $v_enter=true;
            break;
            case "?":
            if($v_enter){
                $q->offset++;
                $v=IGK_STR_EMPTY;
                while($canread()){
                    $v .= $q->text[$q->offset];
                    $q->offset++;
                    if(substr($v, -2, 2) == "?>"){
                        $v=substr($v, 0, strlen($v)-3);
                        $q->name=null;
                        $q->value=$v;
                        $q->nodetype=\IGKXMLNodeType::PROCESSOR;
                        return true;
                    }
                }
            }
            else{
                return $__readTextValue();
            }
            return false;
            case "!":
            if($v_enter){
                $lf=substr($q->text, $q->offset + 1, 2);
                $readsub=$readnext(2);
                if($readsub == "--"){
                    $q->offset += 3;
                    $v=IGK_STR_EMPTY;
                    while($canread()){
                        $v .= $q->text[$q->offset];
                        $q->offset++;
                        if(substr($v, -3, 3) == "-->"){
                            $v=substr($v, 0, strlen($v)-3);
                            $q->name=null;
                            $q->value=$v;
                            $q->nodetype=\IGKXMLNodeType::COMMENT;
                            return true;
                        }
                    }
                }
                else{
                    $readsub=$readnext(7);
                    if(strlen($readsub) == 7){
                        $readsub=strtoupper($readsub);
                        switch($readsub){
                            case "[CDATA[":
                            $q->offset += 8;
                            $v=IGK_STR_EMPTY;
                            while($canread()){
                                $v .= $q->text[$q->offset];
                                $q->offset++;
                                if(substr($v, -3, 3) == "]]>"){
                                    $v=substr($v, 0, strlen($v)-3);
                                    $q->name=null;
                                    $q->value=$v;
                                    $q->nodetype=\IGKXMLNodeType::CDATA;
                                    return true;
                                }
                            }
                            break;
                            case "DOCTYPE":
                            $q->offset += 8;
                            $v=IGK_STR_EMPTY;
                            while($canread()){
                                $v .= $q->text[$q->offset];
                                $q->offset++;
                                if(substr($v, -1, 1) == ">"){
                                    $v=substr($v, 0, strlen($v)-1);
                                    $q->name=null;
                                    $q->value=$v;
                                    $q->nodetype=\IGKXMLNodeType::DOCTYPE;
                                    return true;
                                }
                            }
                            break;
                        }
                    }
                    return false;
                }
                return false;
            }
            break;
            case "/":
            if($v_enter){
                $q->offset += 1;
                $q->nodetype=IGKXMLNodeType::ENDELEMENT;
                $q->name=$readname($q);
                $q->value=null;
                $v_enter=false;
                while(($v_c > $q->offset) && ($q->text[$q->offset] !== '>')){
                    $q->offset++;
                }
                return true;
            }
            $v .= $c;
            break;default:
            if(!$v_enter){
                if($q->nodetype == \IGKXMLNodeType::ELEMENT){
                    $match=array();
                    switch(strtolower($q->name)){
                        case "script":
                        case "code":
                            $tag=strtolower($q->name);
                            while($canread()){
                                $v .= $q->text[$q->offset];
                                $q->offset++;
                                if(preg_match("/\<\/([\s]*)".$tag."([\s]*)\>$/i", $v, $match)){
                                    $q->offset -= strlen($match[0]);
                                    $v=substr($v, 0, strlen($v) - strlen($match[0]));
                                    break;
                                }
                            }
                            $q->name=null;
                            $q->value=$v;
                            $q->nodetype=\IGKXMLNodeType::TEXT;
                            return true;

                        case "style":
                            while($canread()){
                                $v .= $q->text[$q->offset];
                                $q->offset++;
                                if(preg_match("/(\<\/([\s]*)style([\s]*)>)$/i", $v, $match)){
                                    $q->offset -= strlen($match[0]);
                                    $v=substr($v, 0, strlen($v) - strlen($match[0]));
                                    break;
                                }
                            }
                            $q->name=null;
                            $q->value=$v;
                            $q->nodetype=\IGKXMLNodeType::TEXT;
                            return true;

                         default: {
                            if($__readTextValue()){
                                return true;
                            }
                        }
                        break;
                    }
                }
                else{
                    $v=IGK_STR_EMPTY;
                    if($q->nodetype == IGKXMLNodeType::ENDELEMENT)
                        $q->offset++;
                    while($canread()){
                        $v .= $q->text[$q->offset];
                        $q->offset++;
                        if(substr($v, -1, 1) == "<"){
                            $v=substr($v, 0, strlen($v)-1);
                            if(empty(trim($v))){
                                $q->offset -= 2;
                                break;
                            }
                            $q->offset--;
                            $q->name=null;
                            $q->value=$v;
                            $q->nodetype=\IGKXMLNodeType::TEXT;
                            return true;
                        }
                    }
                }
            }
            else{
                $q->name=$readname();
                $q->value=null;
                $q->nodetype=\IGKXMLNodeType::ELEMENT;
                $q->isEmpty=false;
                $q->hasAttrib=false;
                $v_end=false;
                $v=IGK_STR_EMPTY;
                $v_readname=false;
                $v_readvalue=false;
                $v_attribname=null;
                $v_ch=null;
                $v_startattribvalue=false;
                $v_attribmatch=IGK_STR_EMPTY;
                $v_bracketstart=false;
                $v_bracketch="";
                $v_expressions=array();
                while($canread()){
                    $v_ch=$q->text[$q->offset];
                    $q->offset++;
                    if(preg_match("/(\[)/", $v_ch)){
                        if(!$v_startattribvalue){
                            $exp=$v_ch. igk_str_read_brank($q->text, $q->offset, ']', '[');
                            $cout=igk_count($v_expressions);
                            $v_expressions[]=$exp;
                            $v .= "@igk:expression{$cout}=\"{$cout}\"";
                            continue;
                        }
                    }
                    $v .= $v_ch;
                    if(preg_match("('|\")", $v_ch)){
                        if($v_startattribvalue){
                            if($v_attribmatch == $v_ch)
                                $v_startattribvalue=false;
                        }
                        else{
                            $v_startattribvalue=true;
                            $v_attribmatch=$v_ch;
                        }
                    }
                    if($v_startattribvalue)
                        continue;
                    if(substr($v, -2, 2) == "/>"){
                        $v=trim(substr($v, 0, strlen($v)-2));
                        $q->isEmpty=true;
                        break;
                    }
                    else if(substr($v, -1, 1) == ">"){
                        $v=substr($v, 0, strlen($v)-1);
                        $q->isEmpty=false;
                        break;
                    }
                    if($v_readname == false){
                        if(preg_match("/([\s])/", $v_ch)){
                            $v_attribname=$v_ch;
                            $v_readname=true;
                            $v_readvalue=false;
                        }
                    }
                    else{
                        if(preg_match("/[\s]/", $v_ch))
                            $v_attribname .= $v_ch;
                        else{
                            $v_readname=false;
                        }
                    }
                }
                if(!empty($v)){
                    $q->hasAttrib=true;
                    $m=null;
                    $machv="(?P<value>";
                    $machv .= "([\"](([^\"]*(')?(\"\")?)+)[\"])";
                    $machv .= "|([\'](([^']*(\")?('')?)+)[\'])";
                    $machv .= "|(([^\s]*)+)";
                    $machv .= ")";
                    $acount=preg_match_all("/(?P<name>(@?".IGK_TAGNAME_CHAR_REGEX."+))[\s]*=[\s]*(".$machv.")/i", $v, $m);
                    $q->attribs=array();
                    for($cc=0; $cc < $acount; $cc++){
                        $k=$m["name"][$cc];
                        if(preg_match("/^@igk:expression/", $k)){
                            $q->attribs[$k]=$v_expressions[IGKHtmlUtils::GetAttributeValue($m["value"][$cc], $q->context)];
                        }
                        else
                            $q->attribs[$k]=IGKHtmlUtils::GetAttributeValue($m["value"][$cc], $q->context);
                    }
                }
                return true;
            }
            break;
        }
        ++$q->offset;
    }
    return $r;
}
///<summary></summary>
///<param name="s"></param>
///<param name="pos" ref="true"></param>
///<param name="outstring" default="null" ref="true"></param>
///<param name="securename" default="1"></param>
/**
* 
* @param mixed $s
* @param mixed * $pos the default value is 0
* @param mixed * $outstring the default value is null
* @param mixed $securename the default value is 1
*/
function igk_xml_read_attribute($s, & $pos=0, & $outstring=null, $securename=1){
    $ln=strlen($s);
    $m=0;
    $n="";
    $v="";
    $tab=array();
    while($pos < $ln){
        $ch=$s[$pos];
        switch($ch){
            case "=":
            if($m == 0){
                if(empty($n=trim($n))){
                    throw new IGKInvalidXmlReadException('Not a valid attribute', $pos);
                }
                $m=1;
                $v=$n;
                $n="";
                $outstring .= " ".$v."=";
                if($securename && !igk_xml_is_validname($v)){
                    throw new IGKInvalidXmlReadException("[".$v.'] is not a valid xml\'s attribute name', $pos);
                }
            }
            break;
            case "'":
            case "\"":
            if($m != 1 || !empty($n))
                throw new IGKInvalidXmlReadException('Not a valid attribute value', $pos);
            $n=igk_str_read_brank($s, $pos, $ch, $ch);
            $outstring .= $n;
            $n=substr($n, 1, strlen($n)-2);
            $tab[$v]=$n;
            $v=
            $n="";
            $m=0;
            break;
            case " ":
            if($m == 1){
                if(!empty($n=trim($n))){
                    $tab[$v]=$n;
                    $outstring .= $n;
                    $v=
                    $n="";
                    $m=0;
                    continue 2;
                }
            }
            $n .= $ch;
            break;
            case '>':
            if($m == 0)
                break 2;
            break;default: $n .= $ch;
            break;
        }
        $pos++;
    }
    if($m == 1){
        $tab[$v]=$n;
        $outstring .= $n;
    }
    return $tab;
}
///<summary>function to read xml content</summary>
///<param name='content'>xml string value</param>
///<param name='callback'>callback that will be call when read data</param>
///<param name='callback'>information used</param>
///<code type="php">
///$inf->path = path to rootnode
///$inf->objects list of all object on that root node populate
///</code>
/**
* function to read xml content
* @param mixed $string content xml string value
* @param mixed $closure callback callback that will be call when read data
* @param mixed inf information used
*/
function igk_xml_read_content($content, $callback, & $inf=null){
    $inf=igk_xml_create_readinfo($inf);
    $xreader=(object)[];
    $xreader->offset=$inf->offset;
    $xreader->text=$content;
    $xreader->length=strlen($content);
    $xreader->name="";
    $xreader->value="";
    $xreader->type="";
    $xreader->parent=null;
    $xreader->context="xml";
    $xreader->inf=$inf;
    $xreader->attribs=null;
    $xreader->nodetype=0;
    while(igk_xml_read($xreader)){
        if(!$callback($xreader, $inf)){
            igk_wln("bread for what");
            break;
        }
    }
    $inf->offset=$xreader->offset;
    igk_xml_unset_read_info($inf);
}
///<summary></summary>
///<param name="s"></param>
///<param name="pos" ref="true"></param>
/**
* 
* @param mixed $s
* @param mixed * $pos
*/
function igk_xml_read_doctype($s, & $pos){
    $out="";
    $brank=array();
    $depth=0;
    $ln=strlen($s);
    while($pos < $ln){
        $ch=$s[$pos];
        switch($ch){
            case "[":
            case "(":
            $depth++;
            break;
            case "]":
            case ")":
            $depth--;
            break;
            case ">":
            if($depth<=0)
                break 2;
            break;
        }
        $out .= $ch;
        $pos++;
    }
    return $out;
}
///<summary></summary>
///<param name="xreader"></param>
/**
* 
* @param mixed $xreader
*/
function igk_xml_read_node($xreader){
    $n=$xreader->name;
    $n=igk_createxmlnode($n);
    $n->setAttributes($xreader->attribs);
    $g=$xreader->offset;
    igk_xml_read_skip($xreader);
    $d=$xreader->offset;
    $txt=substr($xreader->text, $g, $d - $g + 1);
    $n->load($txt);
    return $n;
}
///<summary>skiping reader</summary>
/**
* skiping reader
*/
function igk_xml_read_skip($xreader){
    $q=$xreader;
    if($q->nodetype == IGKXMLNodeType::ELEMENT){
        if(!$q->isEmpty){
            $n=strtolower($q->name);
            $depth=0;
            $end=false;
            while(!$end && igk_xml_read($q)){
                switch($q->nodetype){
                    case IGKXMLNodeType::ELEMENT:
                    if(!$q->isEmpty){
                        $depth++;
                    }
                    break;
                    case IGKXMLNodeType::ENDELEMENT:
                    if(($depth == 0) && (strtolower($q->name) == $n)){
                        $end=true;
                    }
                    else if($depth > 0)
                        $depth--;
                    break;
                }
            }
            return $end;
        }
    }
    return false;
}
///<summary>read xml object from file memory stream</summary>
/**
* read xml object from file memory stream
*/
function igk_xml_read_stream($f, $callback, $inf){
    if(!file_exists($f))
        return;
    if($hf=fopen($f, "r")){
        $inf=igk_xml_create_readinfo($inf);
        $xreader=(object)[];
        $xreader->offset=$inf->offset;
        $xreader->text=$hf;
        $xreader->length=-1;
        $xreader->name="";
        $xreader->value="";
        $xreader->type="";
        $xreader->parent=null;
        $xreader->context="stream";
        $xreader->nodetype=0;
        $xreader->inf=$inf;
        $xreader->attribs=null;
        while(igk_xml_read($xreader)){
            if(!$callback($xreader, $inf)){
                break;
            }
        }
        $inf->offset=$xreader->offset;
        if($inf->count === null){
            $inf->count=igk_count($inf->objects);
        }
        fclose($hf);
        igk_xml_unset_read_info($inf);
    }
}
///<summary>used to read tagname</summary>
/**
* used to read tagname
*/
function igk_xml_read_tagname($content, & $pos){
    $n="";
    $ln=strlen($content);
    while(($pos < $ln) && ($ch=$content[$pos]) && ($ch != ">") && ($ch != " ")){
        $n .= $ch;
        $pos++;
    }
    return $n;
}
///<summary>used to read xml</summary>
///<param name="path">xpath object</param>
///<param name="callback">the callback(index) used to read valid data at index</param>
/**
* used to read xml
* @param mixed $string path xpath object
* @param mixed $closure callback the callback(index) used to read valid data at index
*/
function igk_xml_read_xml($c, $path=null, & $inf=null, $callback=null){
    $inf=new StdClass();
    $inf->ln=strlen($c);
    $inf->content=$c;
    $inf->offset=0;
    $inf->out="";
    $path=igk_str_rm_start($path, "/");
    $inf->path=$path;
    $g=$path != null ? explode("/", $path): null;
    $o="";
    $t="0";
    $m=0;
    $depth=0;
    $skip_depth=0;
    $item=0;
    $start=0;
    $pathlevel=count($g);
    while($inf->offset < $inf->ln){
        $ch=$inf->content[$inf->offset];
        switch($ch){
            case "<":
            $m=1;
            break;
            case "?":
            if($m == 1){
                $gp=strpos($inf->content, "?>", $inf->offset + 1);
                if($gp == false){
                    throw new IGKInvalidXmlReadException("?&gt; close not found");
                }
                $s=substr($inf->content, $inf->offset + 1, $gp - $inf->offset-1);
                if($skip_depth == 0)
                    $o .= "<?".$s."?>";
                $inf->offset += ($gp);
                $m=0;
            }
            break;
            case "/":
            if($m == 1){
                if($depth == 0){
                    throw new IGKInvalidXmlReadException("Invalid XmlReadException - No root found");
                }
                $inf->offset++;
                $n=igk_xml_read_tagname($inf->content, $inf->offset);
                if($skip_depth > 0){
                    $skip_depth--;
                }
                else{
                    $o .= "</".$n.">";
                }
                $depth--;
                $m=0;
            }
            break;
            case "!":
            if($m == 1){
                if(substr($inf->content, $inf->offset + 1, 2) == "--"){
                    $inf->offset += 3;
                    $gp=strpos($inf->content, "-->", $inf->offset);
                    if($gp == false){
                        $s=substr($inf->content, $inf->offset + 1);
                        $inf->offset=$inf->ln;
                    }
                    else{
                        $s=substr($inf->content, $inf->offset, $gp - $inf->offset);
                        $inf->offset=$gp + 2;
                    }
                    if($skip_depth == 0)
                        $o .= "<!--".$s."-->";
                    $m=0;
                }
                else if(substr($inf->content, $inf->offset + 1, 7) == "[CDATA["){
                    $inf->offset += 8;
                    $gp=strpos($inf->content, "]]>", $inf->offset);
                    if($gp == false){
                        $s=substr($inf->content, $inf->offset);
                        $inf->offset=$inf->ln;
                    }
                    else{
                        $s=substr($inf->content, $inf->offset, $gp - $inf->offset);
                        $inf->offset=$gp + 2;
                    }
                    if($skip_depth == 0)
                        $o .= "<![CDATA[".$s."]]>";
                    $m=0;
                }
                else if(substr($inf->content, $inf->offset + 1, 8) == "DOCTYPE "){
                    $inf->offset += 8;
                    igk_xml_read_doctype($inf->content, $inf->offset, null);
                }
                else{
                    throw new IGKInvalidXmlReadException("&lt;! not a valid specification");
                }
            }
            break;default:
            if($m == 1){
                $n=igk_xml_read_tagname($inf->content, $inf->offset);
                igk_assert_die($n === null, "tagname is null");
                if(($skip_depth > 0) || ($pathlevel > $depth) && ($g && ($g[$depth] != $n))){
                    $skip_depth++;
                }
                if(($skip_depth == 0) && (($pathlevel - 1) == ($depth))){
                    if($callback){
                        if(!$start){
                            if($callback($item)){
                                $start=1;
                            }
                            else
                                $skip_depth=1;
                        }
                        else{
                            if(!$callback($item)){
                                for($i=$depth-1; $i>=0; $i--){
                                    $o .= "</".$g[$i].">";
                                }
                                break 2;
                            }
                        }
                    }
                    $item++;
                }
                $empty=0;
                $attr="";
                igk_xml_read_attribute($inf->content, $inf->offset, $attr);
                $empty=($inf->content[$inf->offset-1] == "/");
                $gap=0;
                if($skip_depth > 0){
                    if($empty){
                        $skip_depth--;
                    }
                    else{
                        $depth++;
                        $gap=0;
                    }
                }
                else{
                    $o .= "<".$n;
                    $o .= $attr;
                    if($empty){
                        $o .= "/>";
                    }
                    else{
                        $o .= ">";
                        $depth++;
                        $gap=0;
                    }
                }
                $m=0;
            }
            else{
                $ggg=strpos($inf->content, "<", $inf->offset);
                if($ggg !== false){
                    $s=trim(substr($inf->content, $inf->offset, $ggg - $inf->offset));
                    if($skip_depth == 0){
                        $o .= $s;
                    }
                    $inf->offset=$ggg-1;
                }
            }
            break;
        }
        $inf->offset++;
    }
    $inf->out=$o;
    return $inf->out;
}
///<summary>return a xml representation of the object</summary>
/**
* return a xml representation of the object
*/
function igk_xml_render($name, $object, $setting=null){
    $tq=array((object)array("n"=>$name, "t"=>$object));
    $out="";
    if(!$setting){
        $setting=(object)["LF"=>IGK_LF, "IndentChar"=>"\t", "FormatText"=>0, "Depth"=>0, "xmlns"=>null, "defaultKeyItem"=>"item_", "contentText"=>"Content"];
    }
    $tq[0]->indent=$setting->FormatText ? str_repeat($setting->IndentChar, $setting->Depth): "";
    while($q=array_pop($tq)){
        $out .= $q->indent."<".$q->n;
        $child=0;
        $tab=array();
        foreach($q->t as $k=>$v){
            if($k === $setting->contentText)
                continue;
            if(is_numeric($k)){
                $k=$setting->defaultKeyItem.$k;
            }
            if(is_array($v) || is_object($v)){
                $child=1;
                $c=(object)array(
                        "n"=>$k,
                        "t"=>$v,
                        "p"=>$q,
                        "indent"=>$setting->FormatText ? $q->indent.$setting->IndentChar: ""
                    );
                $q->last=$c;
                array_push($tab, $c);
            }
            else
                $out .= " ".$k."=\"".IGKHtmlUtils::GetAttributeValue($v)."\"";
        }
        $lf=$setting->FormatText ? $setting->LF: "";
        $c=!empty($setting->contentText) ? igk_getv($q->t, $setting->contentText): "";
        if(!empty($c)){
            $child=1;
            $c=IGKHtmlUtils::GetValue($c);
        }
        if(!$child)
            $out .= "/>".$lf;
        else{
            if(count($tab) > 0)
                $tq=array_merge($tq, array_reverse($tab));
            $out .= ">".$c.$lf;
            continue;
        }
        while($q && isset($q->p)){
            $l=igk_getv($q->p, "last");
            if($l && ($l === $q)){
                $out .= $q->p->indent."</".$q->p->n.">".$lf;
                $q=$q->p;
            }
            else
                break;
        }
    }
    return $out;
}
///<summary>convert a object stdClass object to core xml node object</summary>
/**
* convert a object stdClass object to core xml node object
*/
function igk_xml_to_node($obj, $name='objResult', $setting=null){
    $dobj=function(){
        return (object)array("obj"=>null, "node"=>null);
    };
    $tn=igk_is_xmlnode($name) ? $name: igk_createxmlnode($name);
    $cobj=$dobj();
    $cobj->node=$tn;
    $cobj->obj=$obj;
    $tab=array($cobj);
    $setting=$setting ?? igk_xml_create_to_node_settings();
    $handleArray=$setting->handleArray;
    while(igk_count($tab) > 0){
        $tobj=array_shift($tab);
        $obj=$tobj->obj;
        $n=$tobj->node;
        foreach($obj as $k=>$v){
            $a=is_array($v);
            if($a || is_object($v)){
                if($a && $handleArray($k, $v, $n, $setting))
                    continue;
                $cobj=$dobj();
                $cobj->node=$n->addXmlNode($k);
                $cobj->obj=$v;
                array_push($tab, $cobj);
            }
            else{
                if($setting->storeAttribAsNode)
                    $n->addNode($k)->Content=$v;
                else
                    $n[$k]=$v;
            }
        }
    }
    return $tn;
}
///<summary>convert an igk balafon xml node presentation to stdClass object</summary>
/**
* convert an igk balafon xml node presentation to stdClass object
*/
function igk_xml_to_obj($n, $arraycallback=null){
    $obj=igk_createobj();
    $nobj=function(){
        return (object)array("c"=>null, 'obj'=>null);
    };
    if($n && igk_reflection_class_extends($n, IGK_HTML_ITEMBASE_CLASS)){
        $h=$nobj();
        $h->c=$n;
        $h->obj=$obj;
        $_vlist=array($h);
        $_clist=array();
        while(igk_count($_vlist) > 0){
            $h=array_shift($_vlist);
            $n=$h->c;
            $cobj=$h->obj;
            foreach($n->Attributes as $k=>$v){
                $cobj->$k=$v;
            }
            if($n->HasChilds){
                $_clist=array();
                foreach($n->Childs as $k){
                    $v_n=$k->TagName;
                    if(empty($v_n))
                        continue;
                    $j=igk_createobj();
                    if($k->HasChilds){
                        if(isset($cobj->$v_n)){
                            $r=$cobj->$v_n;
                            if(!is_array($r))
                                $r=array($r);
                            $cobj->$v_n=$r;
                        }
                        else
                            $cobj->$v_n=$j;
                        $g=$nobj();
                        $g->c=$k;
                        $g->obj=$j;
                        array_push($_vlist, $g);
                    }
                    else{
                        $g=$nobj();
                        $g->c=$k;
                        $g->obj=$j;
                        array_push($_vlist, $g);
                        if(!isset($cobj->$v_n)){
                            $cobj->$v_n=$j;
                        }
                        else{
                            $vh=$cobj->$v_n;
                            if($arraycallback){
                                $vh=$arraycallback($v_n, $vh, $k->Content);
                            }
                            else{
                                if(!is_array($vh)){
                                    $vh=array($vh);
                                }
                                $vh[]=$j;
                            }
                            $cobj->$v_n=$vh;
                        }
                    }
                }
            }
            else{}
        }
    }
    return $obj;
}
/**
 * bind data to xml node properties
 */
function igk_xml_obj_2_xml($node, $data){
    $tbuild =[["t"=>$node, "d"=>$data]];
    while($q = array_shift($tbuild)){
        foreach($q["d"] as $k=>$v){
            $n = $q["t"]->add($k);
            if (is_string($v)){
                $n->Content = $v;
            } elseif (is_array($v)){
                array_unshift($tbuild, ["t"=>$n, "d"=>$v]);
            }
        }        
    }       
}
///<summary></summary>
///<param name="t"></param>
/**
* 
* @param mixed $t
*/
function igk_xml_type2str($t){
    $tab=array(
            IGKXMLNodeType::NONE=>"NONE",
            IGKXMLNodeType::ELEMENT=>"Element",
            IGKXMLNodeType::PROCESSOR=>"PROCESSOR",
            IGKXMLNodeType::COMMENT=>"COMMENT",
            IGKXMLNodeType::ENDELEMENT=>"ENDELEMENT",
            IGKXMLNodeType::CDATA=>"CDATA",
            IGKXMLNodeType::TEXT=>"TEXT",
            IGKXMLNodeType::DOCTYPE=>"DOCTYPE"
        );
    if(isset($tab[$t]))
        return $tab[$t];
    return "UNKNOW";
}
///<summary></summary>
///<param name="inf" ref="true"></param>
/**
* 
* @param mixed * $inf
*/
function igk_xml_unset_read_info(& $inf){
    if($inf->count === null){
        $inf->count=igk_count($inf->objects);
    }
    unset($inf->pathinfo);
    unset($inf->current);
}
///<summary></summary>
///<param name="xreader"></param>
///<param name="inf" ref="true"></param>
/**
* 
* @param mixed $xreader
* @param mixed * $inf
*/
function igk_xml_xpath_objectcallback($xreader, & $inf){
    if(!isset($inf->cmode)){
        $inf->cmode=0;
    }
    $n=$xreader->name;
    switch($xreader->nodetype){
        case IGKXMLNodeType::ENDELEMENT:
        $t=array_shift($inf->pathinfo);
        if($inf->start && ($inf->path == $t)){
            $inf->start=0;
            $inf->max--;
            $inf->current=null;
            if($inf->max < 0){
                return 0;
            }
        }
        else{
            if($inf->current){
                $inf->current=igk_getv($inf->current, 'parent');
            }
        }
        break;
        case IGKXMLNodeType::ELEMENT:
        array_unshift($inf->pathinfo, count($inf->pathinfo) == 0 ? $n: $inf->pathinfo[0]."/{$n}");
        if($inf->start == 0){
            if($inf->pathinfo[0] == $inf->path){
                if($inf->min > $inf->item){
                    igk_xml_read_skip($xreader);
                    $inf->item++;
                    array_shift($inf->pathinfo);
                    return 1;
                }
                $inf->start=1;
                $o=igk_createobj($xreader->attribs);
                $inf->current=array(
                        "o"=>$o,
                        "parent"=>null,
                        "path"=>$inf->pathinfo[0],
                        "name"=>$n
                    );
                $inf->objects[]=$o;
            }
        }
        else{
            $o=null;
            if(igk_count($xreader->attribs) > 0){
                $o=igk_createobj($xreader->attribs);
            }
            if($inf->current['o'] === null){
                $for=$inf->current['name'];
                $co=igk_createobj();
                $co->content=$inf->current["parent"]['o']->$for;
                $inf->current["parent"]['o']->$for=$co;
                $inf->current=array(
                        "o"=>$co,
                        "parent"=>$inf->current["parent"],
                        "name"=>$for
                    );
            }
            $inf->current["o"]->$n=$o;
            $inf->current=array("o"=>$o, "parent"=>$inf->current);
            if($xreader->isEmpty){
                array_shift($inf->pathinfo);
                $inf->current=$inf->current["parent"];
            }
            else{
                $inf->current["name"]=$n;
            }
        }
        break;
        case IGKXMLNodeType::TEXT:
        case IGKXMLNodeType::CDATA:
        if($inf->start && $xreader->value && $inf->current){
            $c=$inf->current["name"];
            if(!empty($c)){
                $s=$xreader->value;
                $ii=igk_getv($inf->current['parent']['o'], $c);
                if(!isset($ii)){
                    $inf->current['parent']['o']->$c=$s;
                }
                else{
                    if(is_object($ii)){
                        $ii->content=$s;
                        $inf->current['parent']['o']->$c->content=$s;
                    }
                    else{
                        if(is_string($ii)){
                            $inf->cmode=4;
                            $inf->current['parent']['o']->$c .= $s;
                        }
                        else{
                            $inf->current['parent']['o']->$c->content=$s;
                        }
                    }
                }
            }
        }
        break;
    }
    return 1;
}
///<summary>create xslt transform object</summary>
/**
* create xslt transform object
*/
function igk_xml_xsl_transform($xml, $xslt, & $error=0){
    if($error !== 0){
        libxml_use_internal_errors(true);
    }
    $dom=new DOMDocument();
    $dom->loadXML($xml);
    $xsl=new DOMDocument();
    $xsl->loadXML($xslt);
    $proc=new XSLTProcessor();
    $proc->importStyleSheet($xsl);
    $out=$proc->transformToXML($dom);
    $error=libxml_get_errors();
    return $out;
}
///<summary> create xsl transform node </summary>
/**
*  create xsl transform node
*/
function igk_xml_xsl_transformnode($root, $uri=null){
    $p=igk_createpreprocessor("xml-stylesheet");
    $xml=igk_createpreprocessor("xml");
    $xml["version"]="1.0";
    $xml["encoding"]="utf8";
    $h=igk_createxmlnode($root);
    $b=igk_createnotagnode();
    $b->add($p);
    $b->add($h);
    $p["href"]=$uri;
    $p["type"]="text/xsl";
    $b->root=$h;
    return $b;
}
///<summary></summary>
///<param name="file"></param>
///<param name="name"></param>
///<param name="content"></param>
///<param name="closearchive" default="1"></param>
/**
* 
* @param mixed $file
* @param mixed $name
* @param mixed $content
* @param mixed $closearchive the default value is 1
*/
function igk_zip_content($file, $name, $content, $closearchive=1){
    $zip=new ZipArchive();
    if(!$zip->open($file, ZIPARCHIVE::CREATE)){
        $zip->close();
        return 0;
    }
    $zip->addFromString($name, $content);
    if($closearchive){
        $zip->close();
        return null;
    }
    return $zip;
}
///<summary></summary>
///<param name="outdir"></param>
///<param name="name"></param>
/**
* 
* @param mixed $outdir
* @param mixed $name
*/
function igk_zip_create_dir($outdir, $name){
    $t=explode('/', $name);
    if(is_dir($outdir)){
        $d=$outdir;
        foreach($t as $k){
            if(empty($k))
                continue;
            $d=$d.DIRECTORY_SEPARATOR.$k;
            if(!is_dir($d))
                @mkdir($d);
        }
    }
}
///<summary></summary>
///<param name="file"></param>
///<param name="dir"></param>
///<param name="folder" default="null"></param>
///<param name="regex" default="null"></param>
/**
* 
* @param mixed $file
* @param mixed $dir
* @param mixed $folder the default value is null
* @param mixed $regex the default value is null
*/
function igk_zip_create_file($file, $dir, $folder=null, $regex=null){
    if(!is_dir($dir))
        return false;
    $zip=new ZipArchive();
    $zip->open($file, ZIPARCHIVE::CREATE);
    if($zip){
        igk_zip_dir($dir, $zip, $folder, $regex);
        $zip->close();
    }
    return true;
}
///<summary></summary>
///<param name="file"></param>
///<param name="entry"></param>
///<param name="close" default="1"></param>
/**
* 
* @param mixed $file
* @param mixed $entry
* @param mixed $close the default value is 1
*/
function igk_zip_delete($file, $entry, $close=1){
    if(!file_exists($file))
        return 0;
    $zip=new ZipArchive();
    if(!$zip->open($file, ZIPARCHIVE::CREATE)){
        $zip->close();
        return 0;
    }
    $r=$zip->deleteName($entry);
    if($close)
        $zip->close();
    return $r;
}
///<summary>use to zip a directory </summary>
/**
* use to zip a directory
*/
function igk_zip_dir($dir, $zip, $folder=null, $regex=null){
    if(!$zip)
        return;
    $q=0;
    $tab=is_array($dir) ? $dir: array($dir);
    while($q=array_pop($tab)){
        $hdir=opendir($q);
        if(is_resource($hdir)){
            while($d=readdir($hdir)){
             
                if(($d == ".") || ($d == "..")){ 
                    continue;
                }
                $f=$q."/".$d;
                if(($regex !== null) && preg_match($regex, $f)){ 
                    continue;
                }
                $hd=substr($f, strlen($dir) + 1);
                $hd=(!empty($folder) ? $folder."/": null).$hd;
                if(is_dir($f)){
                    $zip->addEmptyDir($hd);
                    array_push($tab, $f);
                }
                else if(is_file($f)){
                    $zip->addFile($f, $hd);
                }
            }
            closedir($hdir);
        }
    }
}
///<summary></summary>
///<param name="dir"></param>
///<param name="outf"></param>
///<param name="exclude_pattern"></param>
/**
* 
* @param mixed $dir
* @param mixed $outf
* @param mixed $exclude_pattern
*/
function igk_zip_excludedir($dir, $outf, $exclude_pattern){
    $files=igk_io_getfiles($dir);
    $zip=new ZipArchive();
    if(file_exists($outf))
        unlink($outf);
    $count=0;
    if( $zip->open($outf, ZIPARCHIVE::CREATE) === true){
        $ln=strlen($dir) + 1;
        $tdir=array();
        foreach($files as  $v){
            if(!file_exists($v) || preg_match($exclude_pattern, $v)){
                continue;
            }
            $count++;
            $bf=substr($v, $ln);
            $ddir=dirname($bf);
            if(!isset($tdir[$ddir])){
                $zip->addEmptyDir($ddir);
                $tdir[$ddir]=1;
            }
            if(!is_dir($v))
                $zip->addFile($v, $bf);
        }
        $zip->close();
    }
    return array("count"=>$count, "files"=>$files);
}
///zip extract outdir
/**
*/
function igk_zip_extract($outdir, $hzip, $e){
    if(!is_dir($outdir))
        return;
    $d=igk_io_dir($outdir.DIRECTORY_SEPARATOR.zip_entry_name($e));
    if(IGKIO::CreateDir(dirname($d))){
        $content=zip_entry_read($e, zip_entry_filesize($e));
        igk_io_save_file_as_utf8_wbom($d, $content, true);
    }
}
///<summary>zip folder :  </summary>
///<param name="dir">mixed : string|array of folder do compress </param>
/**
* zip folder :
* @param mixed $dir mixed : string|array of folder do compress
*/
function igk_zip_folder($outfile, $dir, $folder=null, $regex=null){
    if(is_String($dir) && (is_dir($dir) == false))
        return false;
    $ar=0;
    if(is_array($dir)){
        $ar=1;
    }
    $zip=new ZipArchive();
    if($zip->open($outfile, ZIPARCHIVE::CREATE)){
        if($ar){
            foreach($dir as $m){
                $kname = basename($m);
                if ($folder && ($b = strstr($m, $folder))){
                    $kname = substr(igk_html_uri(substr($m, strlen($folder))), 1);
                }
                igk_zip_dir($m, $zip, $kname);
            }
        }
        else{
            igk_zip_dir($dir, $zip, $folder, $regex);
        }
        $zip->close();
        return true;
    }
    return false;
}
///<summary></summary>
///<param name="e"></param>
/**
* 
* @param mixed $e
*/
function igk_zip_isdirentry($e){
    return ((zip_entry_filesize($e) == 0) && ((zip_entry_compressionmethod($e) == "stored") && igk_str_endwith(zip_entry_name($e), "/")));
}
///<summary></summary>
///<param name="outf"></param>
/**
* 
* @param mixed $outf
*/
function igk_zip_module($outf){
    $dir=igk_io_basedir()."/Mods";
    return igk_zip_excludedir(igk_io_basedir()."/Mods", $outf, "/\.(avi|(mp|(3|4))|gkds|zip|rar)/i");
}
///<summary>zip outpu content</summary>
/**
* zip outpu content
*/
function igk_zip_output($c, $forcegzip=0, $header=1, & $type=null){
    $accept=igk_getv($_SERVER, 'HTTP_ACCEPT_ENCODING', 0);
    if(!$forcegzip && strstr($accept, "deflate") && function_exists("gzdeflate")){
        if($header){
            header('Content-Encoding: deflate');
        }
        igk_wl(gzdeflate($c, 3));
        $type="deflate";
    }
    else if(($forcegzip || strstr($accept, "gzip")) && function_exists("gzencode")){
        if($header)
            header('Content-Encoding: gzip');
        igk_wl(gzencode($c, 3));
        $type="gzip";
    }
    else{
        $type = 'no-compression';
        igk_wl($c);
    }
}
///<summary></summary>
///<param name="file"></param>
///<param name="outdir"></param>
///<param name="entry" default="null">filter regex|callback</param>
/**
* 
* @param mixed $file
* @param mixed $outdir
* @param mixed $entry the default value is null
*/
function igk_zip_unzip($file, $outdir, $entry=null){
    if(!is_dir($outdir))
        return 0;
    $hzip=zip_open($file);
    if(!$hzip || !is_resource($hzip))
        return 0;

    while(($e=zip_read($hzip))){
        $n=zip_entry_name($e);
        if($entry && (is_callable($entry) && !$entry($n)) && !preg_match($entry, $n)){
            continue;
        }
        if(igk_zip_isdirentry($e)){
            igk_zip_create_dir($outdir, $n);
        }
        else{
            if(!(strpos($n, "/") === FALSE))
                igk_zip_extract($outdir, $hzip, $e);
        }
    }
    zip_close($hzip);
    return 1;
}
///<summary></summary>
///<param name="zipfile"></param>
///<param name="callback"></param>
/**
* 
* @param mixed $zipfile
* @param mixed $callback
*/
function igk_zip_unzip_callback($zipfile, $callback){
    $hzip=zip_open($zipfile);
    if(!$hzip || !is_resource($hzip))
        return;
    while(($e=zip_read($hzip))){
        $n=zip_entry_name($e);
        if(!igk_zip_isdirentry($e)){
            $callback($hzip, $n, $e);
        }
    }
    zip_close($hzip);
}
///<summary></summary>
///<param name="f"></param>
///<param name="entry"></param>
/**
* 
* @param mixed $f
* @param mixed $entry
*/
function igk_zip_unzip_entry($f, $entry){
    $c="zip://".igk_html_uri($f)."#".$entry;
    $h=fopen($c, 'r');
    if(!$h){
        return null;
    }
    $c="";
    while(!feof($h)){
        $c .= fread($h, 4096);
    }
    fclose($h);
    return $c;
}
///<summary>read zip content</summary>
/**
* read zip content
* @return mixed
*/
function igk_zip_unzip_filecontent($zipfile, $name){
    $hzip= @zip_open($zipfile);
    if(!$hzip || !is_resource($hzip))
        return false;
    $name=strtolower($name);
    $c="";
    while(($e=@zip_read($hzip))){
        $n= @zip_entry_name($e);
        if(strtolower($n) == $name){
            if(!igk_zip_isdirentry($e)){
                $c=@zip_entry_read($e, zip_entry_filesize($e));
            }
            break;
        }
    }
    @zip_close($hzip);
    return $c;
}
///<summary></summary>
///<param name="file"></param>
///<param name="outdir"></param>
///<param name="zipentry" default="null"></param>
/**
* 
* @param mixed $file
* @param mixed $outdir
* @param mixed $zipentry the default value is null
*/
function igk_zip_unzip_to($file, $outdir, $zipentry=null){
    if($zipentry == null){
        igk_zip_unzip($file, $outdir);
    }
    if(!is_dir($outdir))
        return 0;
    $hzip=zip_open($file);
    if(!$hzip || !is_resource($hzip))
        return 0;
    while(($e=zip_read($hzip))){
        $n=zip_entry_name($e);
        if($n == $zipentry) if(igk_zip_isdirentry($e))
            continue;
        else{
            $content=zip_entry_read($e, zip_entry_filesize($e));
            igk_io_save_file_as_utf8_wbom($outdir."/".basename($n), $content, true);
            break;
        }
        if(preg_match("#^".$zipentry."#i", $n)){
            $d=igk_io_dir($outdir.DIRECTORY_SEPARATOR. substr(zip_entry_name($e), strlen($zipentry)));
            if(IGKIO::CreateDir(dirname($d))){
                $content=zip_entry_read($e, zip_entry_filesize($e));
                igk_io_save_file_as_utf8_wbom($d, $content, true);
            }
        }
    }
    zip_close($hzip);
}

//+ | ----------------------------------------------------------------------------------------------
//+ | mandatory file
//+ | ----------------------------------------------------------------------------------------------
require_once(dirname(__FILE__)."/Lib/Classes/interfaces.php");
require_once(dirname(__FILE__)."/Lib/Classes/IGKObject.php");
require_once(dirname(__FILE__)."/Lib/Classes/System/Configuration/ControllerConfigurationData.php");
require_once(dirname(__FILE__)."/Lib/Classes/Controllers/RootControllerBase.php");
require_once(dirname(__FILE__)."/Lib/Classes/Controllers/BaseController.php");
require_once(dirname(__FILE__)."/Lib/Classes/IGKConfigCtrlBase.php");
require_once(dirname(__FILE__)."/Lib/Classes/IGKUsersController.php");



///<summary>represent application context
/**
* represent application context
*/
abstract class IGKAppContext{
    const initializing="initializing";
    const running="running";
    const starting="starting";
}
///<summary>Represent a APP METHOD. Used in event invocation</summary>
/**
* Represent a APP METHOD. Used in event invocation
*/
final class IGKAppMethod {
    const CALLABLE_FUNC=8;
    const CALLABLE_USER_FUNC=16;
    const CLASS_METHOD=2;
    const C_CALLABLEN=37;
    const C_CLASS=33;
    const C_IDN=38;
    const C_METHODN=34;
    const C_OBJN=35;
    const C_PEVN=36;
    const FUNCTION_METHOD=3;
    const METHNAME=32;
    const OBJECT_METHOD=1;
    const OBJECT_METHOD_CLOSURE=4;
    private $m_;
    ///<summary></summary>
    ///<param name="d"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $d
    * @param mixed $v
    */
    public function __call($d, $v){
        igk_die("call ".$d);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->m_=new IGKAppMethodFlag();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){
        igk_die("setting ".$n);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        $t=igk_reflection_get_member($this);
        if($this->m_ && $this->m_->isEmpty()){
            unset($t["\0".__CLASS__."\0m_"]);
        }
        return array_keys($t);
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        $v_pattern=IGK_STR_EMPTY;
        $m = $this->m_;
        switch($this->getType()){
            case self::OBJECT_METHOD:
            return "IGKAppMethod[FOR OBJECT METHOD]";
            case self::CLASS_METHOD:
            return "IGKAppMethod[".$this->getType()."::".$this->_class."::".$m."]";
            case self::FUNCTION_METHOD:
            return "IGKAppMethod[".$this->getType()."::".$m."]";
            case self::OBJECT_METHOD_CLOSURE:
            $v_pattern="CLOSURE =&gt; ".$this->getType();
            break;
            case self::CALLABLE_FUNC:
            $v_pattern=$m;
            break;
            case self::CALLABLE_USER_FUNC:
            $v_pattern="CALLABLE USER FUNC";
            break;
        }
        return "IGKAppMethod[".$v_pattern. "]";
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _typeToString(){
        switch($this->getType()){
            case self::OBJECT_METHOD:
            return "OBJECT_METHOD";
            case self::CLASS_METHOD:
            return "CLASS_METHOD";
            case self::FUNCTION_METHOD:
            return "FUNCTION_METHOD";
            case self::OBJECT_METHOD_CLOSURE:
            return "CLOSURE_METHOD";
            case self::CALLABLE_FUNC:
            return "CALLABLE";
            case self::CALLABLE_USER_FUNC:
            return "CALLABLE_USER_FUNC";
        }
        return "TYPEUNKNOW";
    }
    ///<summary>create a IGKAppMethodInfo</summary>
    /**
    * create a IGKAppMethodInfo
    */
    public static function Create($class_or_object, & $method, $event){
        $c=$class_or_object;
        $out=null;
        if(($method === null) && igk_is_callable($c)){
            $out=new IGKAppMethod();
            $out->setType(self::CALLABLE_USER_FUNC);
            $out->setCallable($c);
            $out->setClass($c);
            $out->setId(igk_callable_id($c));
        }
        else{
            if(is_object($c)){
                if(is_string($method)){
                    if(method_exists($c, $method)){
                        $out=new IGKAppMethod();
                        $out->setType(self::OBJECT_METHOD);
                        $out->setMethodName($method);
                        $out->setClass(get_class($c));
                        $out->setObject($c);
                    }
                    else if(is_callable($method)){
                        $out=new IGKAppMethod();
                        $out->setType(self::CALLABLE_FUNC);
                        $out->setMethodName($method);
                        $out->setClass(IGK_STR_EMPTY);
                        $out->setObject($c);
                    }
                }
            }
            else{
                if(class_exists($c)){
                    if(method_exists($c, $method)){
                        $out=new IGKAppMethod();
                        $out->setType(self::CLASS_METHOD);
                        $out->setMethodName($method);
                        $out->setClass($c);
                    }
                }
                else if(function_exists($c)){
                    $out=new IGKAppMethod();
                    $out->setType(self::FUNCTION_METHOD);
                    $out->setMethodName($method);
                }
            }
        }
        return $out;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCallable(){
        return $this->m_->getFlag(self::C_CALLABLEN);
    }
    ///<summary></summary>
    /**
    * @return mixed
    */
    public function getClass(){
        return $this->m_->getFlag(self::C_CLASS);
    }
    ///<summary></summary>
   /**
    * @return mixed
    */
    public function getId(){
        return $this->m_->getFlag(self::C_IDN);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIdKey(){
        $m=$this->getMethodName();
        switch($this->getType()){
            case self::OBJECT_METHOD:
            $o=$this->getObject();
            return get_class($o)."::!>".$m."@".spl_object_hash($o);
            case self::CLASS_METHOD:
            return $this->getClass()."::>".$m;
            case self::FUNCTION_METHOD:
            return $m;
            case self::CALLABLE_USER_FUNC:
            return $this->getId();
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    * @return string
    */
    public function getMethodName() : string{
        return $this->m_->getFlag(self::C_METHODN);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getObject(){
        return $this->m_->getFlag(self::C_OBJN);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getParentEvent(){
        return $this->m_->getFlag(self::C_PEVN);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getType(){
        return $this->m_->getFlag(-1);
    }
    ///<summary></summary>
    ///<param name="sender"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $sender
    * @param mixed $args
    */
    public function Invoke($sender, $args){
        try {
            $extra=array($sender, $args);
            $m=$this->getMethodName();
            $o=$this->getObject();
            switch($this->getType()){
                case self::CALLABLE_USER_FUNC:
                $c=$this->getCallable();
                if(igk_is_callback_obj($c)){
                    return igk_invoke_callback_obj(null, $c, $extra);
                }
                return call_user_func_array($c, $extra);
                case self::OBJECT_METHOD:
                if(method_exists(get_class($o), IGK_FUNC_CALL_IN_CONTEXT)){
                    return $o->call_incontext($m, $extra);
                }
                else
                    return call_user_func_array(array($o, $m), $extra);
                case self::CLASS_METHOD:
                $c=$this->getClass();
                return call_user_func_array(array($c, $m), $extra);
                case self::FUNCTION_METHOD:
                return call_user_func($m, $sender, $args);
                case self::CALLABLE_FUNC:
                if(function_exists($m)){
                    return $m($sender, $args);
                }
                else{
                    if($o && method_exists($this->_object, 'invokeInContext')){
                        return $o->invokeInContext($m, array($sender, $args));
                    }
                }
                break;
            }
        }
        catch(Exception $ex){
            igk_show_exception($ex);
            igk_wln("IGKAppMethod::Invoke exception raised Method:[".$this->_typeToString()." ; ".$m."]". $this->__toString());
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="tab"></param>
    ///<param name="event"></param>
    /**
    * 
    * @param mixed $tab
    * @param mixed $event
    */
    public function IsRegistered($tab, $event){
        if($tab == null)
            return false;
        $m=$this->getMethodName();
        if($this->getType() == self::CALLABLE_FUNC){
            foreach($tab as  $v){
                if($v->getMethodName() == $m){
                    return true;
                }
            }
            return false;
        }
        $idkey=$this->getIdKey();
        foreach($tab as  $v){
            if($v->getIdKey() === $idkey){
                igk_ilog_assert(!igk_sys_env_production(), "failed to register {$idkey} - key already in collection. ".$idkey);
                return true;
            }
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="class_or_object"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $class_or_object
    * @param mixed $method
    */
    public function match($class_or_object, $method){
        $_cl=$this->getClass();
        $m=$this->getMethodName();
        $_obj=$this->getObject();
        switch($this->getType()){
            case self::OBJECT_METHOD:
            return (($class_or_object === $_obj) && ($m == $method));
            case self::CLASS_METHOD:
            break;
            case self::FUNCTION_METHOD:
            return ($m == $method);
            case self::CALLABLE_FUNC:
                // $sender = $_obj;
                // $args = $_obj;
                igk_die("match function :: ");
            return false; // $m($sender, $args);
            case self::CALLABLE_USER_FUNC:
            break;
        }
        return (($class_or_object === $_cl) && ($m == $method));
    }
    ///<summary>check if this match the target param</summary>
    /**
    * check if this match the target param
    */
    public function matchParam($paramname, $obj){
        return igk_getv($this->getClass()->clParam, $paramname) === $obj;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function setCallable($n){
        $this->m_->setFlag(self::C_CALLABLEN, $n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function setClass($n){
        $this->m_->setFlag(self::C_CLASS, $n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function setId($n){
        $this->m_->setFlag(self::C_IDN, $n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function setMethodName($n){
        $this->m_->setFlag(self::C_METHODN, $n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function setObject($n){
        $this->m_->setFlag(self::C_OBJN, $n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function setParentEvent($n){
        $this->m_->setFlag(self::C_PEVN, $n);
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    public function setType($t){
        $this->m_->setFlag(-1, $t);
    }
}
///<summary>Represente class: IGKAppMethodFlag</summary>
/**
* Represente IGKAppMethodFlag class
*/
final class IGKAppMethodFlag{
    ///<summary></summary>
    /**
    * 
    */
    public function getFlag(){}
    ///<summary></summary>
    /**
    * 
    */
    public function isEmpty(){
        return 1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function setFlag(){}
}
///<summary>represent an igk object data array</summary>
///<exemple>use to pass array parameter to a callback expression</exemple>
/**
* represent an igk object data array
*/
class IGKArray implements ArrayAccess{
    var $m_items;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_items=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCount(){
        return igk_count($this->m_items);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetExists($key){
        return isset($this->m_items[$key]);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        return $this->m_items[$key];
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function offsetSet($key, $value){
        $this->m_items[$key]=$value;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetUnset($key){
        unset($this->m_items[$key]);
    }
}
///<summary>Represente class: IGKArrayAccess</summary>
/**
* Represente IGKArrayAccess class
*/
final class IGKArrayAccess implements ArrayAccess{
    private $_host;
    var $offsetExistsListener;
    var $offsetGetListener;
    var $offsetSetListener;
    var $offsetUnsetListener;
    ///<summary></summary>
    ///<param name="v"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $v
    * @param mixed $args
    */
    public function __call($v, $args){
        $c=$this->$v;
        if($c){
            return call_user_func_array($c, $args);
        }
        igk_die($v." not implement");
        return null;
    }
    ///<summary></summary>
    ///<param name="o"></param>
    /**
    * 
    * @param mixed $o
    */
    public function __construct($o){
        $this->_host=$o;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetExists($i){
        $o=false;
        $this->offsetExistsListener && ($o=$this->offsetExistsListener($this->_host, $i));
        return $o;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetGet($i){
        $fc=$this->offsetGetListener;
        $o=null;
        $fc && ($o=$fc($this->_host, $i));
        return $o;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $i
    * @param mixed $v
    */
    public function offsetSet($i, $v){
        $this->offsetSetListener && $this->offsetSetListener($this->_host, $i, $v);
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetUnset($i){
        $this->offsetUnsetListener && $this->offsetUnsetListener($this->_host, $i);
    }
}
///<summary>store the session authorization</summary>
/**
* store the session authorization
*/
final class IGKAuthorization{
    private $m_auth;
    ///<summary></summary>
    ///<param name="igk"></param>
    /**
    * 
    * @param mixed $igk
    */
    public function __construct($igk){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function __get($key){
        if(igk_app()->User){
            if(isset($this->m_auth[$key])){
                return $this->m_auth[$key];
            }
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function __set($key, $value){
        igk_die("variable : [". $key. "] Not allowed");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        if(empty($this->m_auth)){
            return array();
        }
        return array("\0".__CLASS__."\0m_auth");
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKAuthorization";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function IsEmpty(){
        return igk_count($this->m_auth) == 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function loadAutorisation(){
        $this->m_auth=array();
    }
}
///<summary>reprensent a html document default style.</summary>
/**
* reprensent a html document default style.
*/
final class IGKCssDefaultStyle implements ArrayAccess, Serializable {
    const COLORS_RULE=5;
    const DECLARED_RULE=1;
    const FILES_BIND_TEMP_RULE=9;
    const FILES_RULE=4;
    const FLAG_RULE=2;
    const FONT_RULE=7;
    const PARAMS_RULE=6;
    const PROPERTIES=0;
    const SYMBOLS_RULE=3;
    const TEMP_FILES_RULE=8;
    private $_;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(& $setting){
        $this->_= & $setting;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        igk_die(__METHOD__." not allowed [{$n}] : ");
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){
        igk_die(__METHOD__." not allowed [{$n}]");
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return get_class($this)."#items[count(".count($this->_).")]";
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="expression"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $expression
    */
    public function addRule($name, $expression){
        $rule=& $this->_[self::DECLARED_RULE];
        $rule[$name]=$expression;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
		if ($this->_)
        while(count($this->_)>0)
            array_pop($this->_); // =array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function clearFiles(){
        unset($this->_[self::FILES_RULE]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAttributes(){
        return igk_getv($this->_, self::PROPERTIES);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getBindTempFiles($clear=0){
        $r = igk_getv($this->_, self::FILES_BIND_TEMP_RULE);
        if ($r && $clear){
            $this->_[self::FILES_BIND_TEMP_RULE]=null; 
        }
        return $r;
    }
    ///<summary>get reference to getCl</summary>
    /**
    * get reference to getCl
    */
    public function & getCl(){
        $g=& $this->prepareStorage(self::COLORS_RULE);
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFiles(){
        return igk_getv($this->_, self::FILES_RULE);
    }
    ///<summary>return registrated font</summary>
    ///<return refout="true"></return>
    /**
    * return registrated font
    * @return return registrated font
    */
    public function & getFont(){
        $g=& $this->prepareStorage(self::FONT_RULE);
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasRules(){
        $tab=igk_getv($this->_, self::DECLARED_RULE);
        return $tab && (igk_count($tab) > 0);
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getParams(){
		$g=& $this->prepareStorage(self::PARAMS_RULE);
        return $g;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getRules(){
        $g=null;
        if(isset($this->_[self::FLAG_RULE])){
            $g=& $this->_[self::FLAG_RULE];
        }
        else{
            $g=array();
            $this->_[self::FLAG_RULE]=& $g;
        }
        return $g;
    }
    ///<summary></summary>
    ///<param name="lineseparator" default="null"></param>
    ///<param name="doc" default="null"></param>
    /**
    * 
    * @param mixed $lineseparator the default value is null
    * @param mixed $doc the default value is null
    */
    public function getRulesString($lineseparator=null, $themeexport=false, $systheme=null){
        $o="";
        $tab=igk_getv($this->_, self::DECLARED_RULE);
        foreach($tab as $k=>$v){
            $v=igk_css_treat($this, $v, $systheme);
            if($v){
                $o .= $k."{".$v."}".$lineseparator;
            }
        }
        return $o;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSymbols(){
        return igk_getv($this->_, self::SYMBOLS_RULE);
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getTempFiles(){
        $g=& $this->prepareStorage(self::TEMP_FILES_RULE);
        return $g;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetExists($i){
        if(!isset($this->_[self::PROPERTIES])){
            return false;
        }
        return isset($this->_[self::PROPERTIES][$i]);
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetGet($i){
        if(!isset($this->_[self::PROPERTIES])){
            return null;
        }
        return igk_getv($this->_[self::PROPERTIES], $i);
    }
    ///<summary></summary>
    ///<param name="i"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $i
    * @param mixed $v
    */
    public function offsetSet($i, $v){
        $g=null;
        if(!isset($this->_[self::PROPERTIES]) || !is_array($this->_[self::PROPERTIES])){
            $g = [];
            $this->_[self::PROPERTIES] =  & $g;
        }
        $g= & $this->_[self::PROPERTIES];
        $g[$i]=$v;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetUnset($i){
        if(!isset($this->_[self::PROPERTIES])){
            return false;
        }
        unset($this->_[self::PROPERTIES][$i]);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $id
    * @return *
    */
    private function & prepareStorage($id){
        $g=null;
        if(isset($this->_[$id]))
            $g=& $this->_[$id];
        else{
            $g=array();
            $this->_[$id]=& $g;
        }
        return $g;
    }
    ///<summary>register symbols package</summary>
    /**
    * register symbols package
    */
    public function regSymbol($file){
        $tab=igk_getv($this->_, self::SYMBOLS_RULE) ?? array();
        $tab[$file]=$file;
        $this->_[self::SYMBOLS_RULE]=$tab;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function resetParams(){
        unset($this->_[self::PARAMS_RULE]);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function rmRule($name){
        $rule=& $this->_[self::DECLARED_RULE];
        unset($rule[$name]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){

        // if(defined("IGK_FORCSS") && (igk_get_env("sys://css/cleartemp") || (session_status() == PHP_SESSION_ACTIVE))){
            // $bckf=igk_getv($this->_, self::FILES_RULE);
            // $hbckf=igk_getv($this->_, self::FILES_BIND_TEMP_RULE);
            // if($hbckf){
                // unset($this->_[self::FILES_BIND_TEMP_RULE]);
            // }
            // $s=serialize($this->_);
            // if($bckf){
                // $this->_[self::FILES_RULE]=$bckf;
            // }
            // if($hbckf){
                // $this->_[self::FILES_BIND_TEMP_RULE]=$hbckf;
            // }
            // return $s;
        // }
        return serialize($this->_);
    }
    ///<summary></summary>
    ///<param name="files"></param>
    /**
    * 
    * @param mixed $files
    */
    public function setBindTempFiles($files){ 
        if(($files == null) || !is_string($files)){
            unset($this->_[self::FILES_BIND_TEMP_RULE]);
        }
        else{
            $this->_[self::FILES_BIND_TEMP_RULE]=igk_io_collapse_path($files);
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function setCl($n, $v){
        $g=& $this->prepareStorage(self::COLORS_RULE);
        $g[$n]=$v;
    }
    ///<summary></summary>
    ///<param name="files"></param>
    /**
    * 
    * @param mixed $files
    */
    public function setFiles($files){

        if(($files == null) || !is_string($files)){
            unset($this->_[self::FILES_RULE]);
        }
        else{
            $this->_[self::FILES_RULE]=igk_io_collapse_path($files);
        }
    }
    ///<summary></summary>
    ///<param name="seri"></param>
    /**
    * 
    * @param mixed $seri
    */
    public function unserialize($seri){
        $this->_=unserialize($seri) ?? [];
    }
}
///<summary>Represente class: IGKCssParserException</summary>
/**
* Represente IGKCssParserException class
*/
final class IGKCssParserException extends Exception{
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function __construct($msg){
        parent::__construct($msg);
    }
}
///<summary> use to initialize a controller environment</summary>
/**
*  use to initialize a controller environment
*/
final class IGKCtrlInitListener implements IIGKControllerInitListener{
    private $m_folder;
    private $m_type;
    ///<summary></summary>
    ///<param name="folder"></param>
    ///<param name="type" default="null"></param>
    /**
    * 
    * @param mixed $folder
    * @param mixed $type the default value is null
    */
    public function __construct($folder, $type=null){
        $this->m_folder=$folder;
        $this->m_type=$type;
        if(!IGKIO::CreateDir($folder)){
            igk_die("can't created dir : ".$folder);
        }
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    /**
    * 
    * @param mixed $dir
    */
    public function addDir($dir){
        IGKIO::CreateDir($this->m_folder."/{$dir}");
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="content"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $content
    */
    public function addSource($name, $content){
        igk_io_save_file_as_utf8($this->m_folder."/".$name, $content);
    }
}
///<summary>Represente class: IGKCtrlTypeManager</summary>
/**
* Represente IGKCtrlTypeManager class
*/
final class IGKCtrlTypeManager {
    static $tabManager;
    ///<summary></summary>
    /**
    * 
    */
    public static function GetControllerTypes(){
        if(self::$tabManager == null){
            $tab=array();
            $exp="/^(IGK){0,1}(?P<name>[\w_-]+)(Ctrl|Controller)$/i";
            foreach(get_declared_classes() as $v){
                if(igk_reflection_class_extends($v, "IGKCtrlTypeBase") && igk_reflection_class_isabstract($v) && preg_match($exp, $v)){
                    preg_match_all($exp, $v, $t);
                    $tab[$t["name"][0]]=$v;
                }
            }
            self::$tabManager=$tab;
            return $tab;
        }
        return self::$tabManager;
    }
    public static function GetCustomConfigInfo(BaseController $controller){
        if(method_exists($controller, __FUNCTION__))
            return $controller->GetCustomConfigInfo();
    }
}
///<summary>Represente class: IGKErrors</summary>
/**
* Represente IGKErrors class
*/
abstract class IGKErrors{
    const ConfigMisConfiguration=0x102;
    const NoAPPDIRDEFINED=0x101;
}

///<summary>Represente class: IGKFormBuilderEngine</summary>
/**
* Represente IGKFormBuilderEngine class
*/
class IGKFormBuilderEngine implements IIGKFormBuilderEngine{
    protected $frm;
    var $group;
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="arguments"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $arguments
    */
    public function __call($n, $arguments){
        if((strlen($n) > 3) && (substr($n, 0, 3) == "add")){
            $view=$this->getView();
            call_user_func_array(array($view, $n), $arguments);
        }
        if(strtolower($n) == "setfrm"){}
        return $this;
    }
    ///<summary></summary>
    ///<param name="frm"></param>
    /**
    * 
    * @param mixed $frm
    */
    public function __construct($frm){
        $this->setView($frm);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        if(strtolower($n) == "frm"){
            return $this->frm;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){
        if((strtolower($n) == "frm") && ($v != null)){
            $this->frm=$v;
        }
    }
    ///<summary></summary>
    ///<param name="$c"></param>
    ///<param name="entries"></param>
    ///<param name="filter" default="null"></param>
    ///<param name="id" default="null"></param>
    /**
    * 
    * @param mixed $c
    * @param mixed $entries
    * @param mixed $filter the default value is null
    * @param mixed $id the default value is null
    */
    protected function _initEntries($c, $entries, $filter=null, $id=null){
        $fobj=["selected"=>0, "value"=>IGK_FD_ID, "key"=>"clName"];
        $callback=null;
        $useempty=0;
        if($filter){
            $fobj["value"]=igk_getv($filter, "value", $fobj["value"]);
            $fobj["key"]=igk_getv($filter, "key", $fobj["key"]);
            $fobj["selected"]=igk_getv($filter, "selected") ?? igk_get_form_args($id) ?? igk_getr($id);
            if(is_callable($fobj["key"])){
                $callback=$fobj["key"];
            }
            if(array_key_exists("emptyvalue", $filter)){
                $useempty=1;
            }
        }
        $rows=$entries;
        if(is_object($entries) && ($rc=igk_getv($rows, "Rows"))){
            $rows=$rc;
        }
        if($useempty){
            $op=$c->add('option');
            $op["value"]=igk_getv($filter, "emptyvalue");
        }
        foreach($rows as $k=>$v){
            $op=$c->add("option");
            $tv=0;
            if($filter){
                $tv=igk_getv($v, $fobj["value"]);
                $op["value"]=$tv;
                if($callback)
                    $op->Content=$callback($v);
                else
                    $op->Content=igk_getv($v, $fobj["key"]);
            }
            else{
                $tv=$k;
                $op["value"]=$k;
                $op->Content=igk_getv($v, $fobj["key"]);
            }
            if($tv == $fobj["selected"]){
                $op["selected"]=1;
            }
        }
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="type" default="'submit'"></param>
    ///<param name="text" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $type the default value is 'submit'
    * @param mixed $text the default value is null
    */
    public function addButton($id, $type='submit', $text=null){
        $this->getView()->addButton($id, $type)->Content=$text ?? __('btn.'.$id);
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="value" default="null"></param>
    ///<param name="attribs" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $value the default value is null
    * @param mixed $attribs the default value is null
    */
    public function addCheckbox($id, $value=null, $attribs=null){
        extract(igk_html_extract_id($id));
        $i=$this->addControl($id, "checkbox", null, array("value"=>$value));
        if($attribs && isset($attribs["text"])){
            $span=$this->getView()->add("span");
            $span->Content=$attribs["text"];
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="type" default="'text'"></param>
    ///<param name="style" default="null"></param>
    ///<param name="attribs" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $type the default value is 'text'
    * @param mixed $style the default value is null
    * @param mixed $attribs the default value is null
    */
    public function addControl($id, $type='text', $style=null, $attribs=null){
        extract(igk_html_extract_id($id));
        $view=$this->getView();
        switch($type){default:
            $i=$view->addInput($id, $type);
            if(isset($tip)){
                $i["placeholder"]=$tip;
            }
            $i->setAttributes($attribs);
            break;
        }
        return $this;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function addGroup(){
        $g=$this->frm->addDiv();
        $g["class"]="igk-form-group";
        $this->group=$g;
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="class" default="null"></param>
    ///<param name="text" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $class the default value is null
    * @param mixed $text the default value is null
    */
    public function addLabel($id, $class=null, $text=null){
        extract(igk_html_extract_id($id));
        $view=$this->getView();
        $lb=$view->add("label");
        $lb["for"]=$id;
        $lb->Content=isset($text) ? $text: (isset($label) ? $label: __("lb.".$id));
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="value" default="null"></param>
    ///<param name="type" default="'text'"></param>
    ///<param name="style" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $value the default value is null
    * @param mixed $type the default value is 'text'
    * @param mixed $style the default value is null
    */
    public function addLabelControl($id, $value=null, $type='text', $style=null){
        extract(igk_html_extract_id($id));
        $__rv=get_defined_vars();
        $this->addLabel($__rv);
        $this->addControl($__rv, $type, $value, $style);
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="entries"></param>
    ///<param name="filter" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $entries
    * @param mixed $filter the default value is null
    */
    public function addLabelSelect($id, $entries, $filter=null){
        extract(igk_html_extract_id($id));
        $this->addLabel(get_defined_vars());
        $this->addSelect($id, $entries, $filter);
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="value" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $value the default value is null
    */
    public function addLabelTextarea($id, $value=null){
        extract(igk_html_extract_id($id));
        $this->addLabel(get_defined_vars());
        $this->addTextarea($id, $value);
        return $this;
    }
    ///<summary></summary>
    ///<param name="callback"></param>
    ///<param name="tag" default="'div'"></param>
    /**
    * 
    * @param mixed $callback
    * @param mixed $tag the default value is 'div'
    */
    public function addObData($callback, $tag='div'){
        $this->getView()->addObData($callback, $tag);
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="value" default="null"></param>
    ///<param name="attribs" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $value the default value is null
    * @param mixed $attribs the default value is null
    */
    public function addRadioButton($id, $value=null, $attribs=null){
        extract(igk_html_extract_id($id));
        $this->addControl($id, "checkbox", null, array("value"=>$value));
        if($attribs && isset($attribs["text"])){
            $span=$this->getView()->add("span");
            $span->Content=$attribs["text"];
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="entries"></param>
    ///<param name="filter" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $entries
    * @param mixed $filter the default value is null
    */
    public function addSelect($id, $entries, $filter=null){
        extract(igk_html_extract_id($id));
        $c=$this->getView()->addSelect($id);
        $c["class"]="igk-form-control -clselect";
        if($entries){
            $this->_initEntries($c, $entries, $filter);
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="value" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $value the default value is null
    */
    public function addTextarea($id, $value=null){
        extract(igk_html_extract_id($id));
        $a=$this->getView()->addTextarea($id);
        $a->setClass("igk-form-control textarea")->Content=$value == null ? igk_getr($id, $value): $value;
        return $this;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="value" default="null"></param>
    ///<param name="attribs" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $value the default value is null
    * @param mixed $attribs the default value is null
    */
    public function addTextfield($id, $value=null, $attribs=null){
        $this->addLabelControl($id);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLastChild(){
        $view=$this->getView();
        if($view && $view->ChildCount > 0){
            return $view->Childs[$view->ChildCount-1];
        }
        igk_die("failed");
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getView(){
        $c=null;
        if($this->group){
            $c=$this->group;
        }
        else
            $c=$this->frm;
        return $c;
    }
    ///<summary></summary>
    ///<param name="frm"></param>
    /**
    * 
    * @param mixed $frm
    */
    public function setView($frm){
        if(!is_object($frm))
            igk_die("engine host required");
        $this->frm=$frm;
    }
}
///<summary>Represente class: IGKFormatString</summary>
/**
* Represente IGKFormatString class
*/
final class IGKFormatString implements IIGKHtmlGetValue {
    private $m_args;
    private $m_v;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return $this->getValue();
    }
    ///<summary></summary>
    ///<param name="string"></param>
    /**
    * 
    * @param mixed $string
    */
    public static function Create($string){
        $args=array();
        if(func_num_args() > 1){
            $t=func_get_args();
            for($i=1; $i < count($t); $i++){
                $args[]=$t[$i];
            }
        }
        $cfrm=new IGKFormatString();
        $cfrm->m_args=$args;
        $cfrm->m_v=$string;
        return $cfrm;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $s=$this->m_v;
        if($this->m_args != null){
            $macth=array();
            $c=preg_match_all("/\{(?P<value>[0-9]+)\}/i", $s, $match);
            for($i=0; $i < $c; $i++){
                $index=$match["value"][$i];
                if(is_numeric($index)){
                    if(isset($this->m_args[$index])){
                        $m=$this->m_args[$index];
                        if(is_string($m)){
                            $s=str_replace($match[0][$i], $m, $s);
                        }
                        else if(is_object($m) && method_exists(get_class($m), IGK_FC_GETVALUE)){
                            $s=str_replace($match[0][$i], $m->getValue(), $s);
                        }
                        else{
                            $s=str_replace($match[0][$i], '', $s);
                        }
                    }
                    else{
                        $s=str_replace($match[0][$i], '', $s);
                    }
                }
            }
        }
        return $s;
    }
}
///<summary>frame class script</summary>
/**
* frame class script
*/
final class IGKFrameScript implements IIGKHtmlGetValue{
    private $m_type;
    var $owner;
    ///<summary></summary>
    ///<param name="owner"></param>
    ///<param name="type" default="f"></param>
    /**
    * 
    * @param mixed $owner
    * @param mixed $type the default value is "f"
    */
    public function __construct($owner, $type="f"){
        $this->owner=$owner;
        $this->m_type=$type;
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function getValue($option=null){
        $n=IGK_STR_EMPTY;
        switch($n){
            case "c":
            $n="initconfirm";
            break;
            case "f":default:
            $n="init";
            break;
        }
        return igk_get_string_format("IGK.winui.frameBox.{$n}({0}],{1});", igk_getsv($this->owner->Width ? '"'.$this->owner->Width.'"': null, 'null'), igk_getsv($this->owner->Height ? '"'.$this->owner->Height.'"': null, 'null'));
    }
}
///<summary>represent Internal session flag data</summary>
/**
* represent Internal session flag data
*/
class IGKFv {
    private $_;
	private $_id;
	private $_listener;
    static $sm_def;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->_=array();
		$this->_listener = null;
		$this->_id = null;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        return $this->getFlag($n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){
        $this->setFlag($n, $v);
        return $this;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        if(count($this->_) == 0){
            return array();
        }
        else{
            return array('_');
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __wakeup(){
        if($this->_ == null)
            $this->_=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->_=array();
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    ///<param name="tab" ref="true"></param>
    /**
    * 
    * @param mixed $classname
    * @param mixed * $tab
	* @param mixed * $listener update listener
    */
    public static function Create($classname, & $tab, $listener = null){
        if(isset(self::$sm_def[$classname])){
            igk_die("- already created for {$classname} -");
        }
        $o=new IGKFv();
        $o->_=& $tab;
		$o->_id = $classname;
		$o->_listener = $listener;
        self::$sm_def[$classname]=$o;
        return $o;
    }
    ///<summary>free the flag if test ok</summary>
    /**
    * free the flag if test ok
    */
    public function freeFlag($code, $force=0){
        $g=$this->getFlag($code);
        if($force || ($g == null) || ((is_array($g) && (count($g) == 0)))){
            $this->unsetFlag($code);

			$this->_updateBinding();
        }
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    /**
    * 
    * @param mixed $classname
    */
    public static function Get($classname){
        if(isset(self::$sm_def[$classname])){
            return self::$sm_def[$classname];
        }
        return null;
    }
    ///<summary>get the flag.use explicitly setFlag to store reference data</summary>
    /**
    * get the flag.use explicitly setFlag to store reference data
    */
    public function & getFlag($code, & $default=null, $register=0){

        $g=null;
        if(isset($this->_[$code]))
            $g=& $this->_[$code];
        else{
            if($register && ($default !== null)){
                $g=& $default;
                $this->_[$code]=& $g;
            }
            else{
                return $default;
            }
        }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function IsEmpty(){
        return count($this->_) == 0;
    }
    ///<summary></summary>
    ///<param name="code"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $code
    * @param mixed $v
    */
    public function setFlag($code, $v){
        if(func_num_args() < 2){
            igk_die("Argument count");
        }
        if($v === null)
            $this->unsetFlag($code);
        else{
            if(is_array($v))
                $this->_[$code]=& $v;
            else
                $this->_[$code]=$v;
        }
		$this->_updateBinding();

    }
	private function _updateBinding(){
		if ($this->_listener){
			$c = [];
			$c[] = & $this->_;
			call_user_func_array($this->_listener, $c);
		}else {
		if ($classname = $this->_id){
			if (!empty($this->_)){
				igk_app()->session->registerControllerParams($classname, $this->_);
			}else {
				igk_app()->session->unregisterControllerParams($classname, $this->_);
			}
		}
		}
	}
    ///<summary></summary>
    ///<param name="code"></param>
    /**
    * 
    * @param mixed $code
    */
    public function unsetFlag($code){
        unset($this->_[$code]);
    }
    ///<summary></summary>
    ///<param name="code"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $code
    * @param mixed $v
    */
    public function updateFlag($code, $v){
        $this->setFlag($code, $v);
        $this->freeFlag($code);
    }
}
///<summary>represent system global theme color</summary>
/**
* represent system global theme color
*/
final class IGKGlobalColor{
    private $COLORS;
    private static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->COLORS=array();
    }
    ///<summary></summary>
    ///<param name="clname"></param>
    /**
    * 
    * @param mixed $clname
    */
    public function Get($clname){
        return igk_getv($this->COLORS, $clname);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance === null){
            self::$sm_instance=new IGKGlobalColor();
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    ///<param name="clname"></param>
    /**
    * 
    * @param mixed $clname
    */
    public static function IsGlobalColor($clname){
        $i=self::getInstance();
        return isset($i->COLORS[$clname]);
    }
    ///<summary></summary>
    ///<param name="clname"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $clname
    * @param mixed $value
    */
    public static function SetGlobalColor($clname, $value){
        $i=self::getInstance();
        $i->COLORS[$clname]=$value;
    }
}
///<summary>Represente class: IGKHtmlBodyMainScript</summary>
/**
* Represente IGKHtmlBodyMainScript class
*/
final class IGKHtmlBodyMainScript implements IIGKHtmlGetValue {
    private $m_base;
    private $m_scripts;
    private $m_v;
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function __construct($value){
        $this->m_base=$value;
        $this->m_v=$value;
        $this->m_scripts=array();
    }
    public function clearChilds(){
        $this->m_base = $this->m_v = "";
        $this->m_scripts = array();
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__.":#".$this->getValue();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initValue(){
        $this->m_v=$this->m_base." ".implode('', $this->m_scripts);
    }
    ///<summary>add inline script to bodymain  script</summary>
    ///<return>index of this script</return>
    /**
    * add inline script to bodymain script
    */
    public function addScript($key, $script){
        if(!isset($this->m_scripts[$key])){
            if(is_string($script))
                $this->m_v .= $script;
            else{
                $this->m_v .= IGKHtmlUtils::GetValue($script);
            }
            $this->m_scripts[$key]=$script;
        }
        else{
            $this->m_scripts[$key]=$script;
            $this->_initValue();
        }
        return  igk_count($this->m_scripts);
    }
    ///<summary></summary>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $index
    */
    public function getScriptAt($index){
        return igk_getv($this->m_scripts, $index, null);
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function getValue($option=null){
        return $this->m_v;
    }
    ///<summary></summary>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $index
    */
    public function removeScript($index){
        $str=igk_getv($this->m_script, $index);
        if($str){
            unset($this->m_script[$index]);
            $this->_initValue();
        }
    }
}
///<summary>only to pass callable on rendering context</summary>
/**
* only to pass callable on rendering context
*/
final class IGKHtmlCallableNode implements Serializable{
    private $callback;
    ///<summary></summary>
    ///<param name="callback"></param>
    /**
    * 
    * @param mixed $callback
    */
    private function __construct($callback){
        $this->callback=$callback;
    }
    ///<summary></summary>
    ///<param name="callback"></param>
    /**
    * 
    * @param mixed $callback
    */
    public static function Create($callback){
        if(!is_callable($callback)){
            return null;
        }
        $v=new IGKHtmlCallableNode($callback);
        return $v;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $c=igk_ob_get_func($this->callback);
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        return null;
    }
    ///<summary></summary>
    ///<param name="d"></param>
    /**
    * 
    * @param mixed $d
    */
    public function unserialize($d){}
}
///<summary>Represente class: IGKHtmlComponentIdValue</summary>
/**
* Represente IGKHtmlComponentIdValue class
*/
final class IGKHtmlComponentIdValue implements IIGKHtmlGetValue {
    private $m_host;
    ///<summary></summary>
    ///<param name="host"></param>
    /**
    * 
    * @param mixed $host
    */
    public function __construct($host){
        $this->m_host=$host;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return $this->getValue();
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        if(method_exists($this->m_host, "getComponentId"))
            return $this->m_host->getComponentId();
        $ctrl=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
        return $ctrl->getComponentId($this->m_host);
    }
}
///<summary>rendering context enumaration</summary>
/**
* rendering context enumaration
*/
final class IGKHtmlContext{
    const Html="Html";
    const XML="XML";
}
///<summary>represent event properties</summary>
/**
* represent event properties
*/
class IGKHtmlEventProperty implements IIGKHtmlGetValue , ArrayAccess {
    private $_n;
    protected $_p;
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    protected function __construct($name){
        $this->_n=$name;
        $this->_p=[];
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        return igk_getv($this->_p, $n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    * @return void
    */
    public function __set($n, $v){
        switch(strtolower($n)){
            case '@__callback':
            $this->$n=$v;
            return;
            case 'content':
            $this->_p=$v;
            return;
        }
        if($v == null){
            unset($this->_p[$n]);
        }
        $this->_p[$n]=$v;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return get_class($this). " : ".$this->_n;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public static function CreateEventProperty($name){
        return new IGKHtmlEventProperty($name);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getid(){
        return $this->_n;
    }
    ///<summary>override this to get vavlue</summary>
    /**
    * override this to get vavlue
    */
    public function getValue($options=null){
        $s="";
        if(is_string($this->_p)){
            $s=$this->_p;
        }
        else{
            foreach($this->_p as $k=>$v){
                $s .= $k."=".$v.";";
            }
        }
        if(empty($s))
            return "";
        return "[".$this->_n. "]=\"".IGKHtmlUtils::GetAttributeValue($s)."\"";
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetExists($i){
        return false;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetGet($i){
        $n='@__callback';
        if(isset($this->$n)){
            $fc=$this->$n;
            unset($this->$n);
            return $fc($this, $i);
        }
        return $this->_p;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $i
    * @param mixed $v
    */
    public function offsetSet($i, $v){
        $this->_n=$i;
        $this->_p=$v;
        $n='@__callback';
        if(isset($this->$n)){
            $fc=$this->$n;
            unset($this->$n);
            $fc($this);
        }
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetUnset($i){
        $this->_p=[];
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function setid($id){
        $this->_n=$id;
    }
}
///<summary>Represente class: IGKHtmlExpressionAttribute</summary>
/**
* Represente IGKHtmlExpressionAttribute class
*/
class IGKHtmlExpressionAttribute implements IIGKHtmlGetValue {
    private $m_v;
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function __construct($v){
        $this->m_v=$v;
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function getValue($o=null){
        return $this->m_v;
    }
}
///<summary>Represente class: IGKHtmlHeaderLinkHost</summary>
/**
* Represente IGKHtmlHeaderLinkHost class
*/
final class IGKHtmlHeaderLinkHost{
    private $m_list;
    var $privateLink;
    var $sharedLink;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_list=array();
        $this->privateLink=array();
        $this->sharedLink=array();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="node"></param>
    ///<param name="temp"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $node
    * @param mixed $temp
    */
    public function add($name, $node, $temp){
        if(isset($this->m_list[$name]))
            igk_die("link already referenced");
        $this->m_list[$name]=$node;
        if($temp){
            $this->m_privateLink[$name]=$node;
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function clearChilds(){
        foreach($this->m_list as  $v){
            igk_html_rm($v);
        }
        $this->m_list=array();
        $this->privateLink=array();
        $this->sharedLink=array();
    }
    ///<summary></summary>
    ///<param name="o"></param>
    /**
    * 
    * @param mixed $o
    */
    public function getLink($o){
        return igk_getv($this->m_list, $o);
    }
}
///<summary> used to access media list. and serialize as string</summary>
/**
*  used to access media list. and serialize as string
*/
final class IGKHtmlMediaList implements ArrayAccess, Iterator , Serializable {
    private $_medias;
    static $sm_iterators;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->_medias=array();
    }
    ///<summary></summary>
    ///<param name="ky"></param>
    /**
    * 
    * @param mixed $ky
    */
    public function __isset($ky){
        return isset($this->_medias[$ky]);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __iterateInfo(){
        $it=null;
        if($it == null){
            $tab=$this->_medias;
            $it=(object)array(
                "index"=>0,
                "current"=>null,
                "tab"=>$tab,
                "keys"=>$tab ? array_keys($tab): null,
                "count"=>$this->getCount()
            );
        }
        return $it;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initiliaze(){}
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->_medias=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function current(){
        $g=self::$sm_iterators[0];
        return $g->tab[$g->keys[$g->index]];
    }
    ///<summary>get list of medias </summary>
    /**
    * get list of medias
    */
    public function getCount(){
        return $this->_medias ? count($this->_medias): 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function key(){
        return self::$sm_iterators[0]->keys[self::$sm_iterators[0]->index];
    }
    ///<summary></summary>
    /**
    * 
    */
    public function next(){
        self::$sm_iterators[0]->index++;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetExists($i){
        return isset($this->_medias[$i]);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        return isset($this->_medias[$key]) ? $this->_medias[$key]: null;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function offsetSet($key, $value){
        if($key === null)
            igk_die("key not valid");
        if((get_class($value) == IGKMedia::class) || is_subclass_of($value, IGKMedia::class)){
            $this->_medias[$key]=$value;
        }
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetUnset($i){
        unset($this->_medias[$i]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function rewind(){
        $it=$this->__iterateInfo();
        if(self::$sm_iterators == null)
            self::$sm_iterators=array();
        array_unshift(self::$sm_iterators, $it);
        return $it;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        if($this->_medias){
            foreach($this->_medias as $m){
                if($m->isEmpty()){
                    continue;
                }
                igk_ilog("dump::".igk_ob_get_func(function() use ($m){
                    var_dump($m);
                }));
                igk_wln_e("before .....", $m);
            }
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function unserialize($v){}
    ///<summary></summary>
    /**
    * 
    */
    public function valid(){
        if(self::$sm_iterators[0]->index < self::$sm_iterators[0]->count){
            return true;
        }
        self::$sm_iterators=array_slice(self::$sm_iterators, 1);
        return false;
    }
}
///<summary>Represente class: IGKHtmlOptions</summary>
/**
* Represente IGKHtmlOptions class
*/
class IGKHtmlOptions {
    static $CloseWithCloseTags=array(
            "style"=>"style",
            "label"=>"label",
            "i"=>"i",
            "b"=>"b",
            "canvas"=>"canvas",
            "div"=>"div",
            "iframe"=>"iframe",
            "select"=>"select",
            "abbr",
            "button"=>"button",
            "tr"=>"tr",
            "td"=>"td",
            "a"=>"a",
            "ul"=>"ul",
            "li"=>"li",
            "ol"=>"ol",
            "form"=>"form",
            "script"=>"script",
            "code"=>"code",
            "noscript"=>"noscript",
            "html"=>"html",
            "body"=>"body",
            "head"=>"head",
            "video"=>"video",
            "option"=>"option",
            "object"=>"object",
            "textarea"=>"textarea",
            "quote"=>"quote",
            "p"=>"p",
            "span"=>"span",
            "igk-img"=>"igk-img",
            "igk-anim-img"=>"igk-img",
            "table"=>"table"
        );
    static $EmptyTag=array(
            "br"=>"br",
            "base"=>"base",
            "link"=>"link",
            "input"=>"input",
            "meta"=>"meta",
            "img"=>"img",
            "source"=>"source",
            "embed"=>"embed"
        );
}
///<summary>Represente class: IGKHtmlScriptAssocInfo</summary>
/**
* Represente IGKHtmlScriptAssocInfo class
*/
final class IGKHtmlScriptAssocInfo implements Serializable, ArrayAccess{
    private $data;
    static $sm_initCache;
    static $sm_store;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->data=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetCacheFile(){
        return igk_io_dir(igk_io_cachedir()."/.core.scripts.cache");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function initialize(){
        $cache=self::GetCacheFile();
        if(file_exists($cache)){
            $data=& $this->data;
            include($cache);
            self::$sm_initCache=1;
            $c=igk_count($data);
            foreach($data as $k=>$v){
                if(!file_exists($k)){
                    unset($data[$k]);
                    self::$sm_store=1;
                }
            }
        }
        else{
            if(igk_current_context() == "running"){
                self::$sm_initCache=1;
                igk_js_init_doc(igk_app()->Doc);
                igk_hook(IGKEvents::HOOK_SCRIPTS, [$this]);
            }
        }
    }
    ///<summary></summary>
    ///<param name="k"></param>
    /**
    * 
    * @param mixed $k
    */
    function offsetExists($k){
        return isset($this->data[$k]);
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    function offsetGet($i){
        return igk_getv($this->data, $i);
    }
    ///<summary></summary>
    ///<param name="k"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $k
    * @param mixed $v
    */
    function offsetSet($k, $v){
        $this->data[$k]=$v;
        self::$sm_store=1;
    }
    ///<summary></summary>
    ///<param name="k"></param>
    /**
    * 
    * @param mixed $k
    */
    function offsetUnset($k){
        unset($this->data[$k]);
        self::$sm_store=1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        if(self::$sm_store){
            if(!file_exists($cache=self::GetCacheFile())){
                if(!($cdata=igk_get_env("sys://res_files"))){
                    $cdata=$this->data;
                }
                $o="<?php\n";
                $o .= IGK_PROTECT_ACCESS;
                foreach($cdata as $k=>$v){
                    $o .= '$data["'.$k.'"]='.$v.';'."\n";
                }
                igk_io_w2file($cache, $o);
            }
            self::$sm_store=0;
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function toArray(){
        return $this->data;
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public function unserialize($s){
        igk_die("unserialize ..... not allowed");
    }
}
///<summary>represent IO management class utility</summary>
/**
* represent IO management class utility
*/
final class IGKIO{
    ///<summary></summary>
    ///<param name="path"></param>
    ///<param name="separator" default="DIRECTORY_SEPARATOR"></param>
    /**
    * 
    * @param mixed $path
    * @param mixed $separator the default value is DIRECTORY_SEPARATOR
    */
    private static function __fixPath($path, $separator=DIRECTORY_SEPARATOR){
        if($separator == "/"){
            return preg_replace('/([\/]+)/i', '/', $path);
        }
        if ($separator == "\\"){ 
            return preg_replace('/([\\'.$separator.'\/]+)/i', ''.$separator.'', $path);
        }
        return $path;
    }
    ///<summary></summary>
    ///<param name="filename"></param>
    ///<param name="content"></param>
    ///<param name="chmod" default="IGK_DEFAULT_FILE_MASK"></param>
    /**
    * 
    * @param mixed $filename
    * @param mixed $content
    * @param mixed $chmod the default value is IGK_DEFAULT_FILE_MASK
    */
    public static function AppendToFileAsUTF8WBOM($filename, $content, $chmod=IGK_DEFAULT_FILE_MASK){
        return self::WriteToFile($filename, $content, true, $chmod, "a+");
    }
    ///<summary></summary>
    ///<param name="inputDir"></param>
    ///<param name="outputDir"></param>
    ///<param name="recursive" default="false"></param>
    ///<param name="overwrite" default="false"></param>
    /**
    * 
    * @param mixed $inputDir
    * @param mixed $outputDir
    * @param mixed $recursive the default value is false
    * @param mixed $overwrite the default value is false
    */
    public static function CopyFiles($inputDir, $outputDir, $recursive=false, $overwrite=false){
        $hdir=opendir($inputDir);
        $sep='/';
        if($hdir){
            while(($r=readdir($hdir))){
                if($r == "." || ($r == ".."))
                    continue;
                $f=$inputDir. $sep. $r;
                $p=$outputDir. $sep. $r;
                if(file_exists($p) == false)
                    copy($f, $p);
            }
            closedir($hdir);
        }
    }
    ///<summary></summary>
    ///<param name="dirname"></param>
    ///<param name="mode" default="IGK_DEFAULT_FOLDER_MASK"></param>
    /**
    * 
    * @param mixed $dirname
    * @param mixed $mode the default value is IGK_DEFAULT_FOLDER_MASK
    */
    public static function CreateDir($dirname, $mode=IGK_DEFAULT_FOLDER_MASK){               
        return igk_io_createdir($dirname, $mode);
    }
    ///<summary> Create a directory recursivily</summary>
    ///<dir>directory to create</dir>
    ///<root>mus add a as directory separator </root>
    ///<return>-1 if dir is empty, </return>
    /**
    *  Create a directory recursivily
    */
    public static function CreateRDir($dir, $root=false){
        if(empty($dir)){
            return -1;
        }
        if(is_dir($dir))
            return 1;
        $d=explode(DIRECTORY_SEPARATOR, igk_io_dir($dir));
        $s=IGK_STR_EMPTY;
        for($i=0; $i < count($d); $i++){
            if($root || ($i > 0)){
                $s .= DIRECTORY_SEPARATOR;
            }
            $s .= $d[$i];
            if(empty($s) || is_dir($s))
                continue;
            if(!@mkdir($s))
                return false;
        }
        return true;
    }
    ///<summary>DIRECTORY FUNCTION.  </summary>
    /**
    * DIRECTORY FUNCTION.
    */
    public static function GetBaseDir($dir=null){
        return igk_io_basedir($dir);
    }
    ///<summary> get relative path according to the IGK_APP_DIR</summary>
    ///<param name="dir">must be a full path to existing file or  existing directory </param>
    /**
    *  get relative path according to the IGK_APP_DIR
    * @param mixed $dir must be a full path to existing file or existing directory
    */
    public static function GetBaseDirRelativePath($dir, $separator=DIRECTORY_SEPARATOR){
        $doc_root=IGKIO::GetBaseDir();
        return self::GetSysRelativePath($dir, $doc_root, $separator);
    }
    ///<summary>GET BASE FOLDER FULLPATH</summary>
    /**
    * GET BASE FOLDER FULLPATH
    */
    public static function GetBaseFolderFullpath($dir){
        $d=igk_app()->CurrentPageFolder;
        if(!empty($d) && ($d != IGK_HOME_PAGEFOLDER))
            return igk_io_dir(igk_io_currentrelativepath(IGK_APP_DIR. "/".$d."/".$dir));
        return igk_io_dir(igk_io_currentrelativepath(IGK_APP_DIR. "/".$dir));
    }
    ///<summary>get the current base uri according to local specification</summary>
    ///<param name="dir">null or existing fullpath directory or file element. </param>
    /**
    * get the current base uri according to local specification
    * @param mixed $dir null or existing fullpath directory or file element.
    */
    public static function GetBaseUri($dir=null, $secured=false, & $path=null){
        return igk_io_baseuri($dir, $secured, $path);
    }
    ///<summary></summary>
    ///<param name="source"></param>
    ///<param name="destination"></param>
    ///<param name="separator" default="DIRECTORY_SEPARATOR"></param>
    /**
    * 
    * @param mixed $source
    * @param mixed $destination
    * @param mixed $separator the default value is DIRECTORY_SEPARATOR
    */
    public static function GetChildRelativePath($source, $destination, $separator=DIRECTORY_SEPARATOR){
        $doc_root= igk_html_uri($source);
        $dir = igk_html_uri($destination);
        if (strpos($dir, $doc_root)!==0)
            return;
        $i=IGKString::IndexOf($dir, $doc_root);
        if($i != -1){
            $dir=substr($dir, $i + strlen($doc_root));
        }
        $basedir=self::GetRootBaseDir();
        if($basedir != "/")
            $dir=str_replace($basedir, IGK_STR_EMPTY, $dir);
        while((strlen($dir) > 0) && ($dir[0] == "/")){
            $dir=substr($dir, 1);
        }
        return empty($dir) ? null: self::__fixPath($dir, $separator);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetCurrentDir(){
        return getcwd();
    }
    ///<summary>get relative path according to IGK_APP_DIR base dir</summary>
    ///@dir: absolute path or basedir relative path
    /**
    * get relative path according to IGK_APP_DIR base dir
    */
    public static function GetCurrentDirRelativePath($dir, $mustexists=1, $separator=DIRECTORY_SEPARATOR){
        $doc=igk_io_rootdir();
        $cdir=IGKIO::GetCurrentDir();
        $bdir=IGKIO::GetBaseDir();
        $dir=igk_io_dir($dir);
        $i=-1;
        $v_iscurrent=($bdir == $cdir);
        if($v_iscurrent){
            if($mustexists){
                if(file_exists($dir))
                    $dir=igk_realpath($dir);
                $d=self::GetBaseDirRelativePath($dir);
            }
            else{
                $dir=$cdir.$separator.$dir;
                $d=self::GetBaseDirRelativePath($dir);
            }
            return $d;
        }
        if(empty($dir)){
            return self::GetRelativePathToDir($dir, $cdir, $bdir);
        }
        $r=igk_realpath($dir);
        if($r != null)
            $r=self::GetSysRelativePath($r, $cdir);
        else{
            $r=self::GetSysRelativePath(igk_io_basedir($dir), $cdir);
        }
        return $r;
    }
    ///<summary>return relative uri from server requested URI</summary>
    ///<param name="dir"> full path to resources</param>
    /**
    * return relative uri from server requested URI
    * @param mixed $dir  full path to resources
    */
    public static function GetCurrentRelativeUri($dir=IGK_STR_EMPTY){
        $__dir=$dir;
        $v_basedir=igk_io_basedir();
        $r_uri=null;
        $v_isdir=true;
        $sep="/";
        $r_uri=igk_getv(explode("?", igk_io_request_uri()), 0);
        $v_isdir=IGKString::EndWith($r_uri, '/');
        $cdir=IGKIO::GetRootUri(igk_str_rm_last($r_uri, '/'));
        $is_root=igk_io_basedir_is_root();
        $bdir=$is_root ? igk_io_baseuri(): IGKIO::GetRootUri();
        $dir=igk_str_rm_start(igk_html_uri($dir), $sep);
        if(!$is_root){
            $sbdir=igk_html_uri(igk_io_basedir());
            $srdir=igk_html_uri(igk_io_rootdir());
            if(strstr($sbdir, $srdir)){
                $child=igk_str_rm_last(substr($sbdir, strlen($srdir) + 1), $sep);
                $dir=$child.$sep.$dir;
            }
            else{
                return null;
            }
        }
        $i=-1;
        if($bdir == $cdir){
            if(empty($dir))
                return "./";
            return self::GetRootRelativePath($dir);
        }
        $i=IGKString::IndexOf($cdir, $bdir);
        $c=0;
        $h="";
        if(($lv=igk_io_dir_level()) > 0){
            $h=str_repeat("../", $lv);
        }
        if(($sdir=IGK_BASE_DIR) != $v_basedir){
            while($sdir != "." && !strstr($v_basedir, $sdir)){
                $h .= "../";
                $sdir=dirname($sdir);
                $c++;
            }
            return igk_html_uri($h.substr($v_basedir, strlen($sdir) + 1).$sep.$dir);
        }
        else{
            $sdir=$cdir;
            $counter=0;
            while(!empty($sdir) && ($sdir != $bdir)){
                $h .= "../";
                $sdir=dirname($sdir);
                if($sdir == ".")
                    break;
            }
            if(empty($dir))
                return $h;
            return igk_html_uri($h.$dir);
        }
    }
    ///<summary>tranforme le repertoire passer en paramÃ¨tre en une chemin compatible celon le systeme d'exploitation serveur</summary>
    /**
    * tranforme le repertoire passer en paramÃ¨tre en une chemin compatible celon le systeme d'exploitation serveur
    */
    public static function GetDir($dir){
        return igk_io_dir($dir);
    }
    ///<summary></summary>
    ///<param name="folder"></param>
    /**
    * 
    * @param mixed $folder
    */
    public static function GetDirFileList($folder){
        if(!is_dir($folder))
            return false;
        $dirs=array();
        $hdir=opendir($folder);
        if($hdir){
            while(($cdir=readdir($hdir))){
                if(($cdir == ".") || ($cdir == ".."))
                    continue;
                $f=self::GetDir($folder."/".$cdir);
                if(is_file($f)){
                    $dirs[]=$f;
                }
            }
            closedir($hdir);
        }
        return $dirs;
    }
    ///<summary></summary>
    ///<param name="folder"></param>
    /**
    * 
    * @param mixed $folder
    */
    public static function GetDirList($folder){
        if(!is_dir($folder))
            return false;
        $dirs=array();
        $hdir=opendir($folder);
        if($hdir){
            while(($cdir=readdir($hdir))){
                if(($cdir == ".") || ($cdir == ".."))
                    continue;
                $f=self::GetDir($folder."/".$cdir);
                if(is_dir($f)){
                    $dirs[]=$f;
                }
            }
            closedir($hdir);
        }
        return $dirs;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="match"></param>
    ///<param name="recursive" default="false"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $match
    * @param mixed $recursive the default value is false
    */
    public static function GetDirs($dir, $match, $recursive=false){
        if(is_dir($dir) === false)
            return null;
        $v_out=array();
        $hdir=@opendir($dir);
        if($hdir){
            while(($r=readdir($hdir))){
                if($r == "." || ($r == ".."))
                    continue;
                $f=$dir. DIRECTORY_SEPARATOR. $r;
                if(is_dir($f) && (($match == null) || (($match != null) && (preg_match($match, $f))))){
                    $v_out[]=$f;
                }
                if($recursive){
                    foreach(igk_io_dirs($f, $match, $recursive) as $k){
                        $v_out[]=$k;
                    }
                }
            }
            closedir($hdir);
        }
        return $v_out;
    }
    ///<summary></summary>
    ///<param name="filename"></param>
    /**
    * 
    * @param mixed $filename
    */
    public static function GetFileExt($filename){
        $pathinfo=pathinfo($filename);
        try {
            if(isset($pathinfo["extension"]))
                return $pathinfo["extension"];
        }
        catch(Exception $exception){
            die($filename);
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="filename"></param>
    /**
    * 
    * @param mixed $filename
    */
    public static function GetFileName($filename){
        $pathinfo=pathinfo($filename);
        $b=$pathinfo["basename"];
        return $b;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="match"></param>
    ///<param name="recursive" default="false"></param>
    ///<param name="excludedir" default="null" ref="true"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $match
    * @param mixed $recursive the default value is false
    * @param mixed * $excludedir the default value is null
    */
    public static function GetFiles($dir, $match, $recursive=false, & $excludedir=null){
        if(is_dir($dir) === false)
            return null;
        $v_out=array();
        $dir=igk_str_rm_last(igk_html_uri($dir), '/');
        $q=0;
        $dirs=array();
        $dir=igk_html_uri($dir);
        array_push($dirs, $dir);
        $iscallable=is_callable($match);
        $sep='/';
        $fc=function(){
            return false;
        };
        if(is_string($excludedir)){
            $fc=function($d, $m, $ignoredname){
                return preg_match($ignoredname, $m);
            };
        }
        else if(is_array($excludedir)){
            $fc=function($d, $m, $ignoredname){
                return isset($ignoredname[$m]) || isset($ignoredname[$d]);
            };
        }
        while($q=array_pop($dirs)){
            $hdir=@opendir($q);
            while(($r=readdir($hdir))){
                if($r == "." || ($r == ".."))
                    continue;
                $mdata=0;
                $f=$q.$sep. $r;
                if(!is_dir($f) && (($iscallable && ($mdata=$match($f, $excludedir))) || ($match == null) || (is_string($match) && preg_match($match, $f)))){
                    if($mdata == -1){
                        continue;
                    }
                    $v_out[]=$f;
                }
                else{
                    if(is_dir($f) && !$fc($f, $r, $excludedir) && $recursive){
                        array_push($dirs, $f);
                    }
                }
            }
            closedir($hdir);
        }
        return $v_out;
    }
    ///<summary></summary>
    ///<param name="size"></param>
    /**
    * 
    * @param mixed $size
    */
    public static function GetFileSize($size){
        if($size == 0)
            return "0 Bytes";
        $sizes=array(
            'Bytes',
            'KB',
            'MB',
            'GB',
            'TB',
            'PB',
            'EB',
            'ZB',
            'YB'
        );
        return (round($size/pow(1024, ($i=floor(log($size, 1024)))), 2). ' '. $sizes[$i]);
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="recursive" default="true"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $recursive the default value is true
    */
    public static function GetPictureFile($dir, $recursive=true){
        if(is_dir($dir) === false)
            return null;
        $tab=array();
        $tdir=array();
        $hdir=opendir($dir);
        if($hdir){
            while(($r=readdir($hdir))){
                if($r == "." || ($r == ".."))
                    continue;
                $f=$dir. DIRECTORY_SEPARATOR. $r;
                if(is_file($f)){
                    $ext=strtolower(IGKIO::GetFileExt($f));
                    switch($ext){
                        case "png":
                        case "jpeg":
                        case "jpg":
                        case "ico":
                        $tab[]=$f;
                        break;
                    }
                }
                else if(is_dir($f)){
                    $tdir[]=$f;
                }
            }
            closedir($hdir);
        }
        if($recursive){
            foreach($tdir as $k){
                $m=self::GetPictureFile($k);
                if($m != null){
                    $tab=array_merge($tab, $m);
                }
            }
        }
        return $tab;
    }
    ///<summary></summary>
    ///<param name="secure" default="false"></param>
    /**
    * 
    * @param mixed $secure the default value is false
    */
    public static function GetPort($secure=false){
        $p=igk_getv($_SERVER, 'SERVER_PORT');
        if(($secure) && ($p != 443) || (!$secure && ($p != 80)))
            return $p;
        return null;
    }
    ///<summary></summary>
    ///<param name="sourcepath"></param>
    ///<param name="targetdir"></param>
    ///<param name="separator" default="DIRECTORY_SEPARATOR"></param>
    /**
    * 
    * @param mixed $sourcepath
    * @param mixed $targetdir
    * @param mixed $separator the default value is DIRECTORY_SEPARATOR
    */
    public static function GetRelativePath($sourcepath, $targetdir, $separator=DIRECTORY_SEPARATOR){
        $i=IGKString::IndexOf($targetdir, $sourcepath);
        if($i != -1){
            $s=self::__fixpath(substr($targetdir, strlen($sourcepath)));
            while(!empty($s) && IGKString::StartWith($s, DIRECTORY_SEPARATOR)){
                $s=substr($s, 1);
            }
            return $s;
        }
        $dir=$sourcepath;
        $cdir=$sourcepath;
        $bdir=$targetdir;
        $i=-1;
        $c=0;
        $tsdir=explode(DIRECTORY_SEPARATOR, $cdir);
        $tbdir=explode(DIRECTORY_SEPARATOR, $bdir);
        $rstep=false;
        while(($c < count($tbdir)) && ($c < count($tsdir))){
            if($tbdir[$c] != $tsdir[$c]){
                $rstep=true;
                break;
            }
            $c++;
        }
        $s=IGK_STR_EMPTY;
        if($rstep){
            for($h=$c; $h < count($tbdir); $h++){
                $s .= "..".DIRECTORY_SEPARATOR;
            }
        }
        for($h=$c; $h < count($tsdir); $h++){
            if($h > $c)
                $s .= DIRECTORY_SEPARATOR;
            $s .= $tsdir[$h];
        }
        return $s;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="cdir"></param>
    ///<param name="bdir"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $cdir
    * @param mixed $bdir
    */
    private static function GetRelativePathToDir($dir, $cdir, $bdir){
        $i=IGKString::IndexOf($cdir, $bdir);
        if($i != -1){
            $cdir=substr($cdir, $i + strlen($bdir));
        }
        $i=IGKString::IndexOf($dir, $bdir);
        if($i != -1){
            $dir=substr($dir, $i + strlen($bdir));
        }
        $dir=IGKIO::RemoveFirstDirectorySeparator($dir);
        $cdir=IGKIO::RemoveFirstDirectorySeparator($cdir);
        $t=count(explode(DIRECTORY_SEPARATOR, $cdir));
        for($i=0; $i < $t; $i++){
            $dir="..".DIRECTORY_SEPARATOR.$dir;
        }
        return empty($dir) ? null: IGKIO::__fixPath($dir);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetRequestBaseUri(){
        $refUri=IGKIO::GetRootUri(igk_getv(explode("?", igk_io_request_uri()), 0));
        return $refUri;
    }
    ///end relative
    ///<summary>Get the Root directory according to DocumentRoot apache configuration </summary>
    ///@get the root dir according to document root. uses for css script file
    ///<param name="dir">relative dirctory that will be append to result</param>
    /**
    * Get the Root directory according to DocumentRoot apache configuration
    * @param mixed $dir relative dirctory that will be append to result
    */
    public static function GetRootBaseDir($dir=null){
        $s=self::GetBaseDir();
        $s=str_replace("\\", "/", $s);
        $doc=str_replace("\\", "/", igk_io_rootdir());
        $dir=str_replace("\\", "/", $dir);
        if(strlen($s) > 0){
            if($s[0] == "/"){
                $s=strstr($s, $doc);
                $s=trim(substr($s, strlen($doc)));
                if((strlen($s) > 0) && ($s[0] != "/"))
                    $s="/".$s;
            }
            else{
                $s=substr($s, strlen($doc));
                if((strlen($s) > 0) && $s["0"] != "/")
                    $s .= "/";
            }
        }
        if($dir){
            if($s == "/")
                $s=IGK_STR_EMPTY;
            if(IGKString::StartWith("/", $dir))
                $s .= $dir;
            else
                $s .= "/".$dir;
        }
        return $s;
    }
    ///<summary> get relative path according to the DOCUMENT_ROOT</summary>
    ///<remark>dir = must be a full path to an existing file or directory</remark>
    /**
    *  get relative path according to the DOCUMENT_ROOT
    */
    public static function GetRootRelativePath($dir, $separator=DIRECTORY_SEPARATOR){
        $doc_root=igk_io_rootdir();
        $i=IGKString::IndexOf($dir, $doc_root);
        $c=IGK_STR_EMPTY;
        if($i != -1){
            $dir=substr($dir, $i + strlen($doc_root));
            $bdir=igk_io_dir($doc_root."/".self::GetRootBaseDir());
            $c=igk_io_getrelativepath($bdir, $doc_root);
        }
        $dir=str_replace(self::GetRootBaseDir(), IGK_STR_EMPTY, $dir);
        while((strlen($dir) > 0) && ($dir[0] == DIRECTORY_SEPARATOR)){
            $dir=substr($dir, 1);
        }
        if($c)
            $dir=$c.DIRECTORY_SEPARATOR.$dir;
        return igk_html_uri(empty($dir) ? null: self::__fixPath($dir));
    }
    ///<summary></summary>
    ///<param name="uri" default="IGK_STR_EMPTY"></param>
    ///<param name="secured" default="null"></param>
    /**
    * 
    * @param mixed $uri the default value is IGK_STR_EMPTY
    * @param mixed $secured the default value is null
    */
    public static function GetRootUri($uri=IGK_STR_EMPTY, $secured=null){
        if(!$secured && igk_sys_srv_is_secure())
            $secured=true;
        if($secured){
            $out='https://';
        }
        else{
            $out='http://';
        }
        $port="";
        if($c=self::GetPort($secured)){
            $port=':'.$c;
        }
        $n=igk_io_server_name();
        if(!empty($n))
            $out .= igk_str_rm_last($n, '/').$port;
        if(!empty($uri))
            $out .= '/'.igk_str_rm_start($uri, '/');
        $out=str_replace('\\', '/', $out);
        return $out;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="doc_root"></param>
    ///<param name="separator" default="DIRECTORY_SEPARATOR"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $doc_root
    * @param mixed $separator the default value is DIRECTORY_SEPARATOR
    */
    public static function GetSysRelativePath($dir, $doc_root, $separator=DIRECTORY_SEPARATOR){
        if(empty($dir) || empty($doc_root))
            return null;
        $i=IGKString::IndexOf($dir, $doc_root);
        if($i != -1){
            $dir=igk_str_rm_start(substr($dir, $i + strlen($doc_root)), $separator);
            return $dir;
        }
        $p="../";
        $found=false;
        while(!empty($doc_root)){
            $doc=dirname($doc_root);
            if($doc == $doc_root){
                break;
            }
            $doc_root=$doc;
            $i=IGKString::IndexOf($dir, $doc_root);
            if($i == -1){
                $p .= "../";
            }
            else{
                $found=true;
                break;
            }
        }
        if($found){
            $dir=igk_str_rm_start(substr($dir, $i + strlen($doc_root)), $separator);
            return igk_io_dir($p.$dir);
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public static function IsAbsolutePath($uri){
        $uri=igk_io_dir($uri);
        return file_exists($uri) && ($uri == igk_realpath($uri));
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    /**
    * 
    * @param mixed $dir
    */
    public static function IsDirEmpty($dir){
        if(!is_dir($dir))
            return true;
        $hdir=@opendir($dir);
        if($hdir){
            $empty=true;
            while($s=readdir($hdir)){
                if(($s == ".") || ($s == ".."))
                    continue;
                $empty=false;
                break;
            }
            closedir($hdir);
            return $empty;
        }
        else{
            igk_debug_wln("warning:impossible d'ouvir le repertoire : ".$dir);
        }
        return true;
    }
    ///<summary>check is this file is present on server .symbolink link resolved</summary>
    /**
    * check is this file is present on server .symbolink link resolved
    */
    public static function IsRealAbsolutePath($uri){
        $uri=igk_io_dir($uri);
        return !empty($c=igk_realpath($uri));
    }
    ///<summary>read entiere file in one shot. speed for small file</summary>
    /**
    * read entiere file in one shot. speed for small file
    */
    public static function ReadAllText($filename){
        if(file_exists($filename) == false)
            return null;
        $fsize=@filesize($filename);
        if($fsize<=0)
            return null;        
        $str='';
        if($fw=fopen($filename, "r")){
            while($fsize > 0){
                if(empty($b=fread($fw, $fsize))){
                    die(__("Failed to ready data"));
                }
                $str .= $b;
                $fsize -= strlen($b);
            }
            fclose($fw);
        }
        else{
            igk_ilog(__("Failed to open : {0}", $filename));
        }
        return $str;
    }
    ///<summary></summary>
    ///<param name="f"></param>
    ///<param name="offset"></param>
    ///<param name="ln"></param>
    /**
    * 
    * @param mixed $f
    * @param mixed $offset
    * @param mixed $ln
    */
    public static function ReadFile($f, $offset, $ln){
        if(!file_exists($f))
            return null;
        $fsize=filesize($f);
        $ln=min($ln, $fsize - $offset);
        if($ln > 0){
            $hf=fopen($f, "r");
            fseek($hf, $offset);
            $o=fread($hf, $ln);
            fclose($hf);
            return $o;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    /**
    * 
    * @param mixed $dir
    */
    public static function RemoveFirstDirectorySeparator($dir){
        while((!empty($dir) && ($dir[0] == DIRECTORY_SEPARATOR))){
            $dir=substr($dir, 1);
        }
        return $dir;
    }
    ///<summary>REMOVE FOLDER</summary>
    /**
    * REMOVE FOLDER
    */
    public static function RmDir($dir, $recursive=true, $callback=null){
        if(!is_dir($dir))
            return false;
        $pdir=array($dir);
        $kdir=array($dir);
        $d=1;
        while($dir=array_pop($pdir)){
            $hdir=opendir($dir);
            if(!$hdir)
                return false;
            while(($f=readdir($hdir))){
                if(($f == ".") || ($f == ".."))
                    continue;
                $v=igk_io_dir($dir."/".$f);
                if ($callback && !$callback($v)){
                    continue;
                }
                if(is_dir($v)){
                    if($recursive){
                        array_push($pdir, $v);
                        array_push($kdir, $v);
                    }
                    else{
                        $d=0;
                        break;
                    }
                }
                else if(is_file($v)|| is_link($v)){
                    if($recursive)
                        unlink($v);
                    else{
                        $d=0;
                        break;
                    }
                }
            }
            closedir($hdir);
        }
        while($d && ($dir=array_pop($kdir))){
            @rmdir($dir);
        }
        return igk_count($kdir) == 0;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="pattern" default="null"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $pattern the default value is null
    */
    public static function RmFiles($dir, $pattern=null){
        if(!is_dir($dir))
            return false;
        $hdir=opendir($dir);
        if(!$hdir)
            return false;
        while(($f=readdir($hdir))){
            if(($f == ".") || ($f == ".."))
                continue;
            $v=igk_io_dir($dir."/".$f);
            if(is_file($v)){
                if(($pattern == null) || preg_match($pattern, $v)){
                    unlink($v);
                }
            }
        }
        closedir($hdir);
        return true;
    }
    ///<summary>write text to a file</summary>
    ///<remarks>return true if success. or throw exception</remarks>
    /**
    * write text to a file
    */
    public static function WriteToFile($filename, $content, $overwrite=true, $chmod=IGK_DEFAULT_FILE_MASK, $type="w+"){
        return igk_io_save_file_as_utf8_wbom($filename, $content, $overwrite, $chmod, $type);
    }
    ///<summary></summary>
    ///<param name="filename"></param>
    ///<param name="content"></param>
    ///<param name="overwrite" default="true"></param>
    ///<param name="chmod" default="IGK_DEFAULT_FILE_MASK"></param>
    /**
    * 
    * @param mixed $filename
    * @param mixed $content
    * @param mixed $overwrite the default value is true
    * @param mixed $chmod the default value is IGK_DEFAULT_FILE_MASK
    */
    public static function WriteToFileAsUtf8WBOM($filename, $content, $overwrite=true, $chmod=IGK_DEFAULT_FILE_MASK){
        return self::WriteToFile($filename, $content, $overwrite, $chmod);
    }
}
///<summary> used to store message data</summary>
/**
*  used to store message data
*/
final class IGKMedia implements ArrayAccess{
    const CUSTOM_COLOR=0x1;
    const DEFAULT_THEME=0x2;
    const FILES_THEME=0x5;
    const FONT_THEME=0x3;
    const MEDIA_ID=0x0;
    const PROPERTIES_THEME=0x4;
    private $_;
    ///<summary>.ctr media </summary>
    /**
    * .ctr media
    */
    public function __construct($type, $name){
        $this->_=array();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $n
    * @return *
    */
    public function & __get($n){
        $o=null;
        if(method_exists($this, "get".$n)){
            $o=call_user_func(array($this, "get".$n), array_slice(func_get_args(), 1));
        }
        return $o;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){}
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        if(empty($this->_)){
            return array();
        }
        return array("\0".__CLASS__."\0_");
    }
    ///<summary>get media definition</summary>
    /**
    * get media definition
    */
    public function getCssDef($theme, $minfile=true, $themeexport=false, $doc=null){
        $o="";
        $tv="";
        $lineseparator=$minfile ? "": IGK_LF;
        $def=$this->getDef();
        if($def){
            foreach($def as $k=>$v){
                $kv=trim(igk_css_treat($theme, $v, null));
                if(!empty($kv)){
                    $o .= $k."{".$kv."}".$lineseparator;
                    $tv=1;
                }
            }
        }
        return $o;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getDef(){
        return $this->getFlag(self::DEFAULT_THEME);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $n
    * @return *
    */
    private function & getFlag($n){
        $g=null;
        if(isset($this->_[$n])){
            $g=& $this->_[$n];
        }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getId(){
        return $this->getFlag(self::MEDIA_ID);
    }
    ///<summary>get if this media storage is empty</summary>
    /**
    * get if this media storage is empty
    */
    public function isEmpty(){
        return count($this->_) == 0;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function offsetExists($n){
        $g=$this->getFlag(self::DEFAULT_THEME);
        if($g){
            return isset($g[$n]);
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function offsetGet($n){
        $g=$this->getFlag(self::DEFAULT_THEME);
        if($g){
            return igk_getv($g, $n);
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function offsetSet($n, $v){
        $g=null;
        $g=& $this->getFlag(self::DEFAULT_THEME);
        if(!$g){
            $g=array();
            $this->_[self::DEFAULT_THEME]=& $g;
        }
        $g[$n]=$v;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function offsetUnset($n){
        $g=$this->getFlag(self::DEFAULT_THEME);
        if($g){
            unset($g[$n]);
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    private function setFlag($n, $v){
        $this->_[$n]=$v;
        return $this;
    }
}
///<summary>udpate menuitem class</summary>
/**
* udpate menuitem class
*/
class IGKMenuItem{
    const GP_NAME=0x2;
    const NAME=0x1;
    const PAGE=0x6;
    const POSITION=0x4;
    const TITLE=0x5;
    const URI=0x3;
    private $_;
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $args
    */
    public function __call($n, $args){
        igk_die(__CLASS__.":::NO EXTRA ".$n);
    }
    ///<summary></summary>
    ///<param name="$name"></param>
    ///<param name="$title" default="null"></param>
    ///<param name="$uri" default="null"></param>
    ///<param name="$position" default="10"></param>
    ///<param name="$imagekey" default="null"></param>
    ///<param name="$t" default="null"></param>
    ///<param name="$group" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $title the default value is null
    * @param mixed $uri the default value is null
    * @param mixed $position the default value is 10
    * @param mixed $imagekey the default value is null
    * @param mixed $t the default value is null
    * @param mixed $group the default value is null
    */
    public function __construct($name, $title=null, $uri=null, $position=10, $imagekey=null, $t=null, $group=null){
        $this->_=array();
        $this->setFlag(self::NAME, $name);
        $this->setFlag(self::TITLE, $title ?? $name);
        $this->setFlag(self::PAGE, $title);
        $this->setFlag(self::POSITION, $position);
        $this->setFlag(self::URI, $uri);
        $this->setFlag(self::GP_NAME, $group);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        if(method_exists($this, "get".$n)){
            return call_user_func_array(array($this, "get".$n), array());
        }
        return igk_die(__CLASS__.":::not defined ".$n);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){
        igk_die("can't set : ".$n);
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__."[".$this->getName()."]";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function add(){
        igk_die(__METHOD__."");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentPage(){
        return igk_getv($this->_, self::PAGE);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getGroup(){
        return igk_getv($this->_, self::GP_NAME);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasChilds(){
        return 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIndex(){
        return igk_getv($this->_, self::POSITION);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return igk_getv($this->_, self::NAME);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTitle(){
        return igk_getv($this->_, self::TITLE);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUri(){
        return igk_getv($this->_, self::URI);
    }
    ///<summary></summary>
    ///<param name="p"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $p
    * @param mixed $v
    */
    public function setFlag($p, $v){
        if($v == null){
            unset($this->_[$p]);
        }
        else
            $this->_[$p]=$v;
    }
    ///<summary></summary>
    ///<param name="gpName"></param>
    /**
    * 
    * @param mixed $gpName
    */
    public function setGroup($gpName){
        $this->setFlag(self::GP_NAME, $gpName);
        return $this;
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public static function SortMenuByDisplayText($a, $b){
        return strcmp(__("menu.".$a->Name), __("menu.".$b->Name));
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public static function SortMenuByIndex($a, $b){
        if($a->Index < $b->Index)
            return -1;
        else if($a->Index == $b->Index)
            return self::SortMenuByName($a, $b);
        return 1;
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public static function SortMenuByName($a, $b){
        return strcmp($a->Name, $b->Name);
    }
    ///<summary></summary>
    ///<param name="u"></param>
    /**
    * 
    * @param mixed $u
    */
    public function updateUri($u){}
}
///<summary>Represente class: IGKPluginConfigMenuItem</summary>
/**
* Represente IGKPluginConfigMenuItem class
*/
final class IGKPluginConfigMenuItem extends IGKMenuItem {
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $uri
    */
    public function __construct($ctrl, $uri){
        parent::__construct("plugins", "plugins", $uri, 500, "plugins", null, "files");
    }
}
///<summary>represent menu build utility class.</summary>
/**
* represent menu build utility class.
*/
final class IGKMenuUtils {
    ///<summary></summary>
    ///<param name="target"></param>
    ///<param name="table"></param>
    ///<param name="tab"></param>
    /**
    * 
    * @param mixed $target
    * @param mixed $table
    * @param mixed $tab
    */
    public static function BuildDbMenu($target, $table, $tab){
        self::BuildMenu($target, $tab, $menu, $pages);
    }
    ///<summary></summary>
    ///<param name="targetNode"></param>
    ///<param name="tab">array of IGKMenuItem</param>
    ///<param name="menus" ref="true">menu references</param>
    ///<param name="pages" ref="true">pages references</param>
    /**
    * 
    * @param mixed $targetNode
    * @param mixed $tab
    * @param mixed * $menus
    * @param mixed * $pages
    */
    public static function BuildMenu($targetNode, $tab, & $menus, & $pages){
        $v_list=array();
        $v_rlist=array();
        foreach($tab as $v){
            $n=strtolower($v->Name);
            $p=strtolower(self::GetParentName($v->Name));
            if(isset($v_list[$p])){
                $v_list[$p]->add($v);
            }
            else{
                $v_list[$n]=$v;
                if(isset($v_rlist[$n])){
                    foreach($v_rlist[$n] as $tk=>$tv){
                        $v->add($tv);
                    }
                    unset($v_rlist[$n]);
                }
                else{
                    if(isset($v_rlist[$p])){
                        $tb=$v_rlist[$p];
                        $tb[]=$v;
                    }
                    else
                        $tb=array($v);
                    $v_rlist[$p]=$tb;
                }
            }
        }
        igk_usort($tab, array("IGKMenuItem", "SortMenuByIndex"));
        foreach($tab as $t=>$m){
            if($m->MenuParent == null){
                $menus[$m->Name]=self::InitMenu($targetNode, $m, $pages);
            }
        }
    }
    ///<summary></summary>
    ///<param name="menu"></param>
    /**
    * 
    * @param mixed $menu
    */
    public static function GetMenuLevel($menu){
        $q=$menu->MenuParent;
        $i=0;
        while($q !== null){
            $q=$q->MenuParent;
            $i++;
        }
        return $i;
    }
    ///<summary>get parent name of  the menu</summary>
    /**
    * get parent name of the menu
    */
    public static function GetParentName($name){
        $t=explode(".", $name);
        $c=count($t);
        if($c > 1){
            $out=IGK_STR_EMPTY;
            $v_sep=false;
            for($i=0; $i < $c-1; $i++){
                if($v_sep)
                    $out .= ".";
                else
                    $v_sep=true;
                $out .= $t[$i];
            }
            return $out;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="target"></param>
    ///<param name="menu"></param>
    ///<param name="pages" ref="true"></param>
    /**
    * 
    * @param mixed $target
    * @param mixed $menu
    * @param mixed * $pages
    */
    public static function InitMenu($target, $menu, & $pages){
        $add_uri=null;
        $node=null;
        if(isset($page)){
            $page=strtolower($menu->CurrentPage);
            if(isset($pages [$page])){
                if(!is_array($pages [$page])){
                    $cp=$pages [$page];
                    $cp->PageIndex=0;
                    $pages[$page]=array($cp);
                    $cp->MenuItem["href"]=$cp->MenuItem["href"];
                }
                $pages [$page][]=$menu;
                $menu->PageIndex=count($pages [$page])-1;
                $add_uri="&pageindex=".$menu->PageIndex;
                if($menu->MenuParent){
                    $add_uri=strtolower("&v=".substr($menu->Name, strlen($menu->MenuParent->Name) + 1));
                }
            }
            else{
                $pages [$page]=$menu;
            }
        }
        if($add_uri)
            ;
        $menu->updateUri($add_uri);
        if($menu->HasChilds){
            $menu->sortChilds();
            $menucl="igk-submenu submenu_".self::GetMenuLevel($menu);
            $v_ul=$menu->Node->add("ul")->setClass($menucl);
            foreach($menu->getChilds() as $k){
                $v=self::InitMenu($v_ul, $k, $pages);
            }
        }
        $target->add("li")->add('a')->setAttribute("href", $menu->getUri())->Content=__("menu.".$menu->Name);
    }
    ///<summary></summary>
    ///<param name="target"></param>
    ///<param name="menuTab"></param>
    /**
    * 
    * @param mixed $target
    * @param mixed $menuTab
    */
    public static function InitMenuArray($target, $menuTab){
        $pages=array();
        foreach($menuTab as $k=>$v){
            $c=new IGKMenuItem($k, null, igk_getv($v, "uri"));
            self::InitMenu($target, $c, $pages);
        }
    }
}
///<summary>Represente class: IGKNSValue</summary>
/**
* Represente IGKNSValue class
*/
final class IGKNSValue implements IIGKHtmlGetValue{
    private $m_n;
    private $m_ns;
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="ns"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $ns
    */
    public function __construct($n, $ns){
        $this->m_ns=$ns;
        $this->m_n=$n;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__.":ns:".$this->m_ns;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        if(igk_html_is_ns_child($this->m_n)){
            return $this->m_ns;
        }
        return null;
    }
}
///<summary> Number operator class </summary>
/**
*  Number operator class
*/
final class IGKNumber {
    static $sm_sizeFormat=array(
            "Tb"=>1099511627776,
            "Gb"=>1073741824,
            "Mb"=>1048576,
            "Kb"=>1024,
            "B"=>1
        );
    ///<summary></summary>
    ///<param name="d"></param>
    /**
    * 
    * @param mixed $d
    */
    private static function __GetValue($d){
        if(is_int($d) || preg_match("/[0-9]/i", $d)){
            return $d;
        }
        else
            return 10 + (ord($d) - ord('A'));
    }
    ///<summary></summary>
    ///<param name="d"></param>
    ///<param name="base"></param>
    /**
    * 
    * @param mixed $d
    * @param mixed $base
    */
    public static function FromBase($d, $base){
        $o=0;
        $v=strtoupper(IGK_STR_EMPTY.$d);
        $ln=strlen($v);
        for($i=0; $i < $ln; $i++){
            $h=self::__GetValue($v[$ln - $i-1]);
            $o += pow($base, $i) * $h;
        }
        return $o;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    ///<param name="round" default="4"></param>
    /**
    * 
    * @param mixed $value
    * @param mixed $round the default value is 4
    */
    public static function GetMemorySize($value, $round=4){
        if($value == 0)
            return "0 byte";
        foreach(self::$sm_sizeFormat as $k=>$v){
            if($value > $v){
                return round(($value/$v), $round)." ".__("enum.sizeUnit.".$k);
            }
        }
        return "0 byte";
    }
    ///<summary></summary>
    ///<param name="r"></param>
    /**
    * 
    * @param mixed $r
    */
    private static function HexP($r){
        $g=($r>=10) ? chr(ord("A") + ($r-10)): $r;
        return $g;
    }
    ///<summary></summary>
    ///<param name="d"></param>
    ///<param name="base"></param>
    ///<param name="length" default="-1"></param>
    /**
    * 
    * @param mixed $d
    * @param mixed $base
    * @param mixed $length the default value is -1
    */
    public static function ToBase($d, $base, $length=-1){
        if(is_numeric($d) == false)
            return "0";
        $o=IGK_STR_EMPTY;
        if($base > 0){
            if(is_string($d)){
                for($i=0; $i < strlen($d); $i++){
                    $th=ord($d[$i]);
                    $p=(int)($th/$base);
                    $r=($th % $base);
                    if($p < $base){
                        if($p != 0)
                            $o=self::HexP($p). self::HexP($r);
                        else
                            $o=self::HexP($r);
                    }
                    else{
                        $o=self::HexP($r). $o;
                        $o=self::ToBase($p, $base). $o;
                    }
                }
            }
            else{
                $p=(int)($d / $base);
                $r=$d % $base;
                if($p < $base){
                    if($p != 0)
                        $o=self::HexP($p). self::HexP($r);
                    else
                        $o=self::HexP($r);
                }
                else{
                    $o=self::HexP($r). $o;
                    $o=self::ToBase($p, $base). $o;
                }
            }
        }
        if($length != -1){
            for($i=strlen($o); $i < $length; $i++){
                $o="0". $o;
            }
        }
        return $o;
    }
}
///<summary>buffer management utility class. encapsulation design pattern</summary>
/**
* buffer management utility class. encapsulation design pattern
*/
final class IGKOb {
    ///<summary></summary>
    /**
    * 
    */
    public static function CleanAndStart(){
        while(ob_get_level() > 0){
            ob_end_clean();
        }
        ob_start();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Clear(){
        ob_end_clean();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Content(){
        return ob_get_contents();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Start(){
        ob_start();
    }
}
///<summary> used to storage - </summary>
/**
*  used to storage -
*/
final class IGKObjStorage{
    ///<summary></summary>
    ///<param name="tab" default="null"></param>
    /**
    * 
    * @param mixed $tab the default value is null
    */
    public function __construct($tab=null){
        if($tab && is_array($tab)){
            foreach($tab as $k=>$v){
                $this->$k=$v;
            }
        }
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function __get($v){
        if(isset($this->$v)){
            return $this->$v;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function __set($n, $v){
        if($v === null){
            unset($this->$n);
            return;
        }
        $this->$n=$v;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__;
    }
}

///<summary>Represente class: IGKAdditionCtrlInfo</summary>
/**
* Represente IGKAdditionCtrlInfo class
*/
final class IGKAdditionCtrlInfo extends IGKObject {
    private $m_DefaultValue;
    private $m_Type;
    private $m_Values;
    ///<summary>.ctr</summary>
    ///<param name="type">type of the parameter. select|text|textarea|bool|radio</param>
    ///<param name="def">array of value in case of "select" or default value</param>
    ///<param name="def1">default value in case of type "select" </param>
    /**
    * .ctr
    * @param mixed $type type of the parameter. select|text|textarea|bool|radio
    * @param mixed $def array of value in case of "select" or default value
    * @param mixed $def1 default value in case of type "select"
    */
    public function __construct($type, $def, $def1=null){
        $this->m_Type=$type;
        if(strtolower($type) == "select"){
            $this->m_Values=$def;
            $this->m_DefaultValue=$def1;
        }
        else{
            $this->m_DefaultValue=$def;
            $this->m_Values=null;
        }
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKAdditionalCtrlInfo";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getclDefaultValue(){
        return $this->m_DefaultValue;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getclType(){
        return $this->m_Type;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getclValues(){
        return $this->m_Values;
    }
}


///<summary>Represente class: IGKApp</summary>
/**
* Represente IGKApp class
*/
final class IGKApp extends IGKObject implements IIGKParentDocumentHost{
    private $_f;
    private $m_settings;
    private static $sm_instance;
    public static $DEBUG;
    public static $INITENV;
    // public static $LibFiles;
    // public static $controllerdir;
    static $REG_CSS_CLASS_EVT;
    const DOC_NAME = "main_document";


    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="arguments"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $arguments
    */
    public function __call($name, $arguments){
        if(function_exists("igk_".$name)){
            return call_user_func_array("igk_".$name, $arguments);
        }
        igk_die("access to method {$name} not allowed");
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __checkDomain(){
        $domain=$this->Session->Domain;
        $buri=$this->Configs->website_domain;
        if($domain !== $buri){
            if(!empty($domain)){
                $this->Session->Domain=$buri;
                session_write_close();
                igk_session_destroy();
                igk_getconfigwebpagectrl()->reconnect();
                igk_exit();
            }
            $this->Session->Domain=$buri;
        }
    }
    ///<summary></summary>
    /**
    *
    */
    private function __checkSubDomain(){
        if(defined('IGK_CONFIG_PAGE') || igk_is_cmd()){
            return;}
        $uri=igk_io_fullrequesturi();
        if(igk_io_handle_system_command($uri)){
            igk_exit();
        }
        igk_sys_handle_ctrl_request_uri($uri);
        $row=null;
        $c=IGKSubDomainManager::getInstance()->checkDomain(null, $row);
        if($c !== false){
            $v_ruri=igk_io_base_request_uri();
            $this->setSubDomainCtrl($c);
            $this->setSubDomainCtrlInfo($row);
            $app=$this;
            $tab=explode('?', $v_ruri);
            $uri=igk_getv($tab, 0);
            $params=igk_getv($tab, 1);
            $entry="";
            if($row){
                if(!empty($e=trim($row->clView)))
                $entry="/".$e;
            }
            $page="{$entry}".$uri;
            $actionctrl=igk_getctrl(IGK_SYSACTION_CTRL);
            $k=IGK_REG_ACTION_METH;
            $pattern=igk_sys_ac_getpattern($k);
            $e=new IGKSystemUriActionPatternInfo(array(
                "action"=>$k,
                "value"=>$c->getRegInvokeUri(),
                "pattern"=>$pattern,
                "uri"=>$page,
                "keys"=>igk_str_get_pattern_keys($k),
                "ctrl"=>$c,
                "requestparams"=>$params,
                "context"=>"subdomain"
            ));
            if($actionctrl && ($c !== $actionctrl)){ 
                $app->Session->RedirectionContext=1; 
                if(!$c->NoGlobalAction && ($ce=$actionctrl->matche_global($page))){
                    try {
                        $ce->ctrl=null;
                        $actionctrl->invokeUriPattern($ce); 
                    }
                    catch(Exception $e){
                        igk_show_exception($e);
                        igk_exit();
                    }
                    return;
                }
                else {
                    $actionctrl->invokeCtrlUriPattern($c, $e);
                }
            } 
        }
        else{
            $s=igk_io_subdomain_uri_name();
            if(!empty($s) && !strstr(igk_app()->configs->website_domain, $s)){
                if(igk_server()->REQUEST_PATH == '/'){
                    $msg=__("Subdomain not accessible : {0}", $s);
                    if($def_ctrl=igk_get_defaultwebpagectrl()){
                        throw new IGKException($msg, 500);
                    }
                    else{
                        igk_set_header(500);
                        igk_wln_e('[igk]', $msg);
                    }
                }
            }
        }
        $this->setSubDomainCtrl(null);
        $this->setSubDomainCtrlInfo(null);
    }
    ///<summary>.ctr</summary>
    /**
    * .ctr
    */
    private function __construct($info=null){
        $this->_f=array(
            IGK_CONFIG_FLAG=>0x0
        );
    }
    public function getSettings(){
        if ($this->m_settings === null){
            $this->m_settings = new IGKAppSetting();
        } 
        return $this->m_settings;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function __get($name){
        if(function_exists("igk_".$name)){
            return call_user_func_array("igk_".$name, array());
        }
        return parent::__get($name);
    }
    ///init default page rendering system
    /**
    */
    private function __initDefaultPage(){
        $doc = $this->getDoc();
    }
    ///<summary></summary>
    ///<param name="igk"></param>
    /**
    * 
    * @param mixed $igk
    */
    private static function __initDocument($igk){
        $igk->ViewControllers();
        igk_set_env(IGK_KEY_FORCEVIEW, 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    // public function __sleep(){
    //     $t=igk_reflection_get_member($this);
    //     if(empty($this->_f)){
    //         unset($t["\0".__CLASS__."\0_f"]);
    //     }
    //     else{
    //         $sk=IGKSession::SESS_CONTROLLERPARAM_KEY;
    //         $sess=$this->getSession();
    //         $r=array();
    //         $tab=$sess->getData();
    //         if(isset($tab[$sk])) foreach(($tb=$tab[$sk]) as $k=>$m){
    //             if(count($m) == 0){
    //                 continue;
    //             }
    //             $r[$k]=$m;
    //         }
    //         $g=& $sess->getData();
    //         $g[$sk]=$r;
    //     }
    //     return array_keys($t);
    // }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "igk framework[Version:". IGK_VERSION."]";
    }
    public function __set($n, $v){
        die("not allowed ".$n);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initControllers(){
        IGKControllerManagerObject::getInstance(function(){
            $this->initControllerComplete();
        });
    }
    ///<summary>Initialize a document </summary>
    /**
    * 
    */
    private function _initDocument(){
        $v_doc = new IGKHtmlDoc();
        $v_doc->setup_document();
        $v_doc->registerHook();
        igk_sys_html_initdoc($v_doc);
        $v_doc->setParam(IGK_DOC_ID_PARAM, self::DOC_NAME);
        return $v_doc;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _load(){
        // $this->m_authorizations=new IGKAuthorization($this);
        include_once(IGK_LIB_DIR."/.run_script.global.pinc");
        $this->settings->firstUse = true;
    }
    ///<summary></summary>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $method
    */
    public function addCurrentPageFolderEvent($method){}
    ///<summary></summary>
    ///<param name="document"></param>
    /**
    * 
    * @param mixed $document
    */
    public function BindScriptTo($document){
        $manager=$this->getDoc()->ScriptManager;
        if($manager !== null)
            $manager->bindScriptTo($document);
        else{
            die(__CLASS__." : Manager is null <br />".igk_show_trace());
        }
    }
    ///<summary>destroy the application</summary>
    /**
    * destroy the application
    */
    public static function Destroy(){
        if(self::$sm_instance !== null){
            igk_notification_push_event("sys://events/destroyapp", self::$sm_instance, __FUNCTION__);
            self::$sm_instance=null;
            return 1;
        }
        return 0;
    }
    ///return current application configuration setting
    /**
    */
    public function getAppConfiguration(){
        return $this->m_appconfigs;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAppDir(){
        $g=IGK_APP_DIR;
        return isset($g) ? IGK_APP_DIR: IGK_LIB_DIR;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAutorisations(){
        return $this->m_authorizations;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getBaseCurrentCtrl(){
        return igk_get_env("sys://basecurrent_ctrl");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigMode(){
        return igk_getv(igk_getconfigwebpagectrl(), 'IsConnected');
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigs(){
        return IGKAppConfig::getInstance()->Data;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getControllerManager(){
        static $manager=null;
        if($manager == null){
            $manager=IGKControllerManagerObject::getInstance();
        }
        return $manager;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getcreateAt(){
        return $this->_f[IGK_CREATE_AT];
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentPage(){
        return igk_getv(igk_getctrl(IGK_MENU_CTRL), 'CurrentPage', 'home');
    }
    ///<summary>get api current page folder</summary>
    /**
    * get api current page folder
    */
    public function getCurrentPageFolder(){
        return igk_io_current_page_folder();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentPageIndex(){
        return igk_getv(igk_getctrl(IGK_MENU_CTRL), 'CurrentPageIndex', 0);
    }
    ///<summary> get the global document</summary>
    /**
    *  get the global document
    */
    public function getDoc(){
        static $v_doc=null;
        if(!self::IsInit()){
            session_destroy();
            igk_die("can't get core document - application not initialized");
            return null;
        }
        if ($v_doc === null){
			// 0 : index of global document setting
            $v_doc = new IGKHtmlDoc(0);
            $v_doc->setup_document();
            $v_doc->registerHook();
            igk_sys_html_initdoc($v_doc);
            $v_doc->setParam(IGK_DOC_ID_PARAM, self::DOC_NAME);
        }
        return $v_doc;

        //  print_r($this->settings->firstUse
         // igk_exit();
        // if($v_doc == null){
        //     $doc=$this->session->Doc;
        //     if($doc === null){
        //         $doc= $this->_initDocument();
        //     }
        //     $v_doc=$doc;
        // }
        // else{
        //     if($v_doc !== ($doc=$this->session->Doc)){
        //         $v_doc=$doc;
        //     }
        // }
        // return $v_doc;
    }
    ///<summary> get if application is in first used</summary>
    /**
    *  get if application is in first used
    */
    public function getFirstUse(){
        return $this->settings->firstUse;
    }
    private static function _CreateAppInfo(){

        return  (object)[
            IGK_CREATE_AT=>igk_date_now(),
            IGK_VERSION_ID=>IGK_VERSION,
            IGK_CLIENT_IP=> igk_getv($_SERVER, "REMOTE_ADDR"),
            IGK_CLIENT_AGENT => igk_getv($_SERVER, "HTTP_USER_AGENT"),
            IGK_SESSION_ID=>"",
            IGK_CURRENT_DOC_INDEX_ID =>-1,
            "appInfo"=>(object)[
                "controllers"=>[],
                "documents"=>[],
                "components"=>igk_prepare_components_storage()
            ]
        ];
    }
    ///<summary>get the igk instance value</summary>
    /**
    * get the igk instance value
	* @return IGKApp instance
    */
    public static function getInstance(){

        if(self::$sm_instance === null){
            if(isset($_SESSION)){
                $start = 0;
                ($obj = igk_create_session_instance(IGK_APP_SESSION_KEY, function()use(& $start){
                    $t=igk_date_now();
                    $sess_id=session_id();
                    $obj= self::_CreateAppInfo();// new IGKApp();
                    $obj->{IGK_CREATE_AT}=$t;
                    $obj->{IGK_SESSION_ID}=$sess_id;
                    $start = 1;
                    return $obj;
                })) || igk_die("--Failed to create application instance--");
                self::$sm_instance = new IGKApp($obj);
                if ($start)
                    igk_hook("SessionStart", $obj);
                self::$sm_instance->_load();
            }
            else{
                $obj= self::_CreateAppInfo();
                $obj->{IGK_SESSION_ID}=-1;
                self::$sm_instance= new IGKApp($obj);
            }
            if(!isset($_SESSION) && !igk_is_cmd() && !defined('IGK_NO_SESSION')){
                $ctx=igk_current_context();
                if(!igk_sys_env_production()){ 
                    igk_die(json_encode([
                        "message"=>__("can't create session instance : session not started"), 
                        'context'=>$ctx, 
                        'baseuri'=>igk_io_baseuri()
                    ]));
                }
                else{
                    if($ctx == IGKAppContext::initializing){                       
                        igk_wln_e("Initializing on production ".$ctx, "baseuri: ". igk_io_baseuri(), "baserootdir: ".igk_io_rootbasedir());
                    }
                }
            }
        }
        else{
            //+ check if ok
            if (isset($_SESSION)){
                $iapp=igk_getv($_SESSION, IGK_APP_SESSION_KEY);
            }
            // if(($iapp !== null) && ($iapp !== self::$sm_instance) && (get_class($iapp) === __CLASS__)){
            //     self::$sm_instance = $iapp;
            //     return $iapp;
            // }
        }
        if (isset(self::$sm_instance->Doc)){ 
            igk_exit();
        }
        return self::$sm_instance;
    }
    ///<summary>call this function in order to initiale application for non session handling</summary>
    public static function InitSingle(){
        if (self::$sm_instance === null){
            $obj = (object)[];
            self::$sm_instance = new IGKApp($obj); 
            igk_initenv(IGK_BASE_DIR);
            self::$sm_instance->setIsInit(true);
        }  
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getInvokedUriController(){
        return igk_getv($this->_f, IGK_INVOKE_URI_CTRL);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConfigurating(){
        return $this->getCurrentPage() == IGK_CONFIG_MODE;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsInit(){
        return ((igk_getv($this->_f, IGK_ISINIT_FLAG, 0)& 0x02) >> 1) == 1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetLibFolder(){
        return IGK_LIB_DIR;
    }
    ///JUMP:
    /**
    */
    public function getSelectedController(){
        igk_die("Not Implement ".__METHOD__);
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getServer(){
        return igk_server();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSession(){
        static $sm_session=null;
        if($sm_session === null){
			$tab = null;
			if (!($appinfo = igk_app()->settings->appInfo)){
                if (igk_is_atomic()){
                    $appinfo = self::_CreateAppInfo(); 
                    igk_app()->settings->appInfo = $appinfo;  
                } else {                     
                    igk_die("can't create appinfo");
                }
            }            
            if(isset($appinfo->session)){
                $tab= & $appinfo->session;
            }
            else{
                //+ get array reference
                $tab=array();
				$appinfo->session = & $tab;
            }
			$sm_session=new IGKSession($this, $tab);
            $this->_f[IGK_SESS_FLAG] = & $sm_session->getData();
        }
        return $sm_session;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getsessionId(){
        return $this->_f[IGK_SESSION_ID];
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSubDomainCtrl(){
        return igk_environment()->subdomainctrl;
        //igk_get_env("app$this->getTem
        //return igk_getv($this->_f, IGK_SUBDOMAIN_CTRL);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSubDomainCtrlInfo(){
        return igk_getv($this->_f, IGK_SUBDOMAIN_CTRL_INFO);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTargetNode(){
        return $this->Doc;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUser(){
        return $this->getSession()->User;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getViewMode(){

		if (!isset($this->m_settings->{IGK_VIEW_MODE_FLAG}))
			return IGKViewMode::VISITOR;
        return $this->m_settings->{IGK_VIEW_MODE_FLAG};// $this->_f[IGK_VIEW_MODE_FLAG];
    }
    ///<summary>init global application entry</summary>
    ///<param name="file">source file</param>
    ///<param name="renderDefault">render the default document. </param>
    ///<remark>if renderDefault=1 the default document will only be rendered if it's not sub included</remark>
    /**
    * init global application entry
	 * @param mixed $file source file
	 * @param mixed $renderDefault render the default document.
    */
    public static function Init($file, $renderDefault=1, $setting=null){

        $file=is_file($file) ? realpath($file) : igk_realpath($file) ;
        if(!defined('IGK_APP_DIR')){
            define('IGK_APP_DIR', ($file == null) ? dirname(igk_server()->SCRIPT_FILENAME): dirname($file));
        }
        if(!defined("IGK_MAIN_FILE"))
            define("IGK_MAIN_FILE", $file);
        $flow=igk_get_env("sys://initAppFlow");
        if($flow){
            $flow($file, $renderDefault, $setting);
            return;
        }
        $v_igk=self::getInstance();
        if(defined("IGK_NO_WEB")){
            self::InitNoWebInstance($v_igk);
            return;
        }

        igk_set_env(IGK_ENV_APP_CONTEXT, IGKAppContext::starting);
        $b= $v_igk->Session->domainBaseFile;
        if(isset($b) && (!$setting || !$setting->domainfileNotMaintain)){
            if($b !== $file){
                igk_set_header(500);
                igk_ilog(implode("", ["<div>/!\\ Domain startup file changed - cookies missmatch</div>", $b. " vs ".$file]));
                igk_session_destroy();
                igk_dev_wln_e(__FILE__.":".__LINE__."sub domain missmatch startup file", $b. " vs ".$file, session_id(), ini_get("session.save_path"), "real : ".session_save_path());
                igk_exit();
            }
        }
        else{
            $v_igk->Session->domainBaseFile= $file;
        }
        $v_igk->Session->RedirectionContext=0;
        $v_igk->setBaseCurrentCtrl(null);
        $p=igk_server()->SERVER_PORT;
        if($v_igk->Configs->force_secure_redirection && ($sport=$v_igk->Configs->secure_port ?? 443) && ($p != $sport)){
            $s=igk_secure_uri(igk_io_fullrequesturi(), true, false);
            igk_navto($s);
            igk_exit();
        }
        if($v_igk->getIsInit()){
            igk_set_env(IGK_ENV_APP_CONTEXT, IGKAppContext::running);
            if($v_igk->Doc == null){
                $buri=igk_io_fullbaserequesturi();
                self::Destroy();
                igk_session_destroy();
                igk_navto($buri);
                igk_exit();
            }
            $v_igk->__checkDomain();
            $v_igk->__checkSubDomain();
            $c=$v_igk->getControllerManager()->InvokeUri();
            $defctrl=igk_get_defaultwebpagectrl();
            if(igk_own_view_ctrl($defctrl) && igk_const_defined("IGK_REDIRECTION", 1)){
                igk_sys_render_default_uri(null, $defctrl);
                return;
            }
            if(defined("IGK_FORCSS"))
                return;
            $v_igk->maintainPageFolderView(false);
        }
        else{
            $v_igk->setIsInit(true);
            self::RegViewPicture();
            $v_igk->_initControllers();
            $v_spagef=$v_igk->Session->PageFolder;
            $v_initFrom1stUse=false;
            $c=null;
            $v_igk->__checkDomain();
            if($v_igk->FirstUse){

                igk_invoke_session_event(IGK_ENV_APP_INIT, array($v_igk, null));
                if(function_exists($fc = "InitDefaultPage")){
                    call_user_func_array($fc, [$v_igk]);
                }
                else{
                    $v_igk->__initDefaultPage();
                }
                self::__initDocument($v_igk);
                $v_igk->settings->firstUse = null;
                $v_initFrom1stUse=true;
            }
            $v_igk->Session->initalize($v_igk);

			if (empty($v_igk->session->getLang())){
					R::ChangeLang(IGKUserAgent::GetDefaultLang());
			}

            if(igk_is_const_defined("IGK_FORCSS|IGK_FRAMEWORK_ATOMIC"))
                return;
            $v_igk->__checkSubDomain();
            $c=$v_igk->getControllerManager()->InvokeUri();
            $v_igk->maintainPageFolderView();
            $linf=$v_igk->Session->LastInvokedCtrl;
            if($c && ($c != $linf)){
                $v_igk->Session->LastInvokedCtrl=$c;
                igk_invoke_session_event("sys://event/LastCtrlChanged", $v_igk, $c);
            }
            if($v_igk->isConfig){
                igk_getctrl(IGK_MYSQL_DB_CTRL)->initSDb(false, false);
                $v_igk->isConfig=false;
            }
            if($v_igk->CurrentPage != igk_web_defaultpage()){
                $s=igk_io_base_request_uri();
                if((empty($s)) && preg_match("/\?p=".$v_igk->CurrentPage."/i", igk_io_request_uri()) == false){
                    $uri=igk_io_baseuri()."?p=".$v_igk->CurrentPage;
                    igk_navto($uri);
                }
            }
        }
        if($renderDefault){
            igk_sys_render_default_uri();
            self::Render($v_igk, $file);
        }
    }
    ///<summary>initialize Balafon application With atomic context</summary>
    ///<remark>in that context only registrated controller can be used</remark>
    ///<remark>if you plan to use session. please start session before invoking this method</remark>
    /**
    * initialize Balafon application With atomic context
    */
    public static function InitAtomic(){
        $v_igk=self::getInstance();
        if($v_igk->getIsInit()){
            return;
        }
        if(!defined("IGK_FRAMEWORK_ATOMIC"))
            define("IGK_FRAMEWORK_ATOMIC", 1);
        igk_load_env_files(IGK_LIB_DIR);
        $v_igk->Session->initalize($v_igk);
        $v_igk->_initControllers();
        igk_app_store_in_session($v_igk);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function initControllerComplete(){
        $this->setIsInit(true);
        if(defined('IGK_NO_WEB'))
            return;
    }
    ///<summary> init for no web activity</summary>
    /**
    *  init for no web activity
    */
    private static function InitNoWebInstance($igk){
        if($igk->getIsInit()){
            return;
        }
        $igk->setIsInit(true);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function InitStatic(){
        IGKApp::$REG_CSS_CLASS_EVT=strtolower("sys://event/".__CLASS__."/registercssclass");
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsInit(){
        return self::getInstance()->getIsInit();
    }
    ///<summary></summary>
    ///<param name="view"></param>
    /**
    * 
    * @param mixed $view
    */
    public function IsSupportViewMode($view){
        return (($this->getViewMode() & $view) == $view);
    }
    ///<summary></summary>
    ///<param name="v_initFrom1stUse" default="true"></param>
    /**
    * 
    * @param mixed $v_initFrom1stUse the default value is true
    */
    private function maintainPageFolderView($v_initFrom1stUse=true){
        if(!$v_initFrom1stUse && (igk_server()->REQUEST_METHOD != "GET")){
            return;}
        if(defined("IGK_NOCURRENTPAGE"))
            $v_cpage=IGK_HOME_PAGEFOLDER;
        else
            $v_cpage=$this->CurrentPageFolder;
        $v_opage=$this->Session->PageFolder;
        if($v_opage != $v_cpage){
            if(!defined("IGK_NOCURRENTPAGE"))
                $this->Session->PageFolder=$v_cpage;
            if(!$v_initFrom1stUse || ($v_initFrom1stUse && ($v_cpage != IGK_HOME_PAGEFOLDER))){
                $this->onCurrentPageFolderEvent($v_opage);
                igk_set_env(IGK_ENV_PAGEFOLDER_CHANGED_KEY, 1);
            }
        }
    }
    ///<summary></summary>
    ///<param name="url"></param>
    /**
    * 
    * @param mixed $url
    */
    public static function NavigateTo($url){
        igk_navto($url);
    }
    ///<summary></summary>
    ///<param name="oldpage"></param>
    /**
    * 
    * @param mixed $oldpage
    */
    public function onCurrentPageFolderEvent($oldpage){
        $f=$this->CurrentPageFolder;
        $v_evt=array("currentPage"=>$f, "oldPage"=>$oldpage);
        igk_set_env("sys://view/context", array("name"=>"currentfolderchanged", "event"=>$v_evt));
        igk_notification_push_event(IGKEvents::HOOK_PAGEFOLDER_CHANGED, $this, $v_evt);
        igk_set_env("sys://view/context", null);
    }

    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function regCssController($ctrl){
        igk_die(__FUNCTION__." Not Implement");
    }
    ///<summary></summary>
    /**
    * 
    */
    private static function RegViewPicture(){
        if(igk_getr("c") == IGK_PIC_RES_CTRL){
            if(igk_getr("css") == 1){
                $f=igk_getr("f", "viewpic");
                if($f == "viewpic"){
                    igk_getctrl(IGK_PIC_RES_CTRL)->$f();
                    igk_exit();
                }
            }
        }
        if(igk_getr("vimg", null) != null){
            igk_getctrl(IGK_PIC_RES_CTRL)->viewpic(igk_getr("vimg"));
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $method
    */
    public function removeCurrentPageFolderEvent($method){
        igk_unreg_hook(IGKEvents::HOOK_PAGEFOLDER_CHANGED, $method);
    }
    ///<summary></summary>
    ///<param name="v_igk"></param>
    ///<param name="file" default="null"></param>
    /**
    * 
    * @param mixed $v_igk
    * @param mixed $file the default value is null
    */
    private static function render($v_igk, $file=null){
     
        $fview=$v_igk->Session->getParam("forceview");
        if(!defined("IGK_NO_RENDER") && igk_file_isnotincluded($file)){
            if($fview == 1){
                $v_igk->Session->setParam("forceview", null);
                if(igk_get_env(IGK_KEY_FORCEVIEW) !== 1){
                    igk_sys_force_view();
                }
            }
            igk_set_session_redirection(null);
            self::RenderDocument();
            session_write_close();
            igk_exit();
        }
    }
    ///<summary>force to render global html document</summary>
    /**
    * force to render global html document
    */
    public static function RenderDocument($doc=null, $refreshDefault=1, $ctrl=null){
        $igk=self::$sm_instance;
        $doc=$doc ?? $igk->Doc;
        if(!$igk->ConfigMode && $igk->Configs->allow_auto_cache_page){
            $ctrl=igk_getctrl("cache");
            if($ctrl){
                $ctrl->loadCache($igk->CurrentPage.".html", igk_app());
            }
        }
        else{
            if($refreshDefault){
                $ctrl=$ctrl ?? igk_get_defaultwebpagectrl();
                if($ctrl && (igk_get_env(IGK_KEY_FORCEVIEW) !== 1)){
                    if(!igk_get_env("sys://tempdata")){
                        igk_set_env("sys://tempdata", 1);
                    }
                    if(!igk_get_env(IGK_ENV_PAGEFOLDER_CHANGED_KEY)){
                        $ctrl->View();
                    }
                }
            } 
            // + | Render document
            if (igk_server()->accepts(["gzip"])){
                ob_start();
                $c = $doc->renderAJX();
                igk_zip_output(ob_get_clean());
            }else {
                $doc->renderAJX();
            }
            igk_flush_data();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function reset(){
        $this->settings->firstUse =true;
        $this->Doc->body->ClearChilds();
    }
    ///<summary></summary>
    ///<param name="filename"></param>
    /**
    * 
    * @param mixed $filename
    */
    public static function Run($filename){
        igk_sys_render_index($filename);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setBaseCurrentCtrl($v){
		igk_set_env("sys://basecurrent_ctrl", $v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function setConfig($v){
        igk_die(__CLASS__."::".__FUNCTION__." is Not Defined Impletement ");
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setcreateAt($v){
        igk_app()->settings->{IGK_CREATE_AT} = $v;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $value
    * @param mixed $index the default value is 0
    */
    public function setCurrentPage($value, $index=0){
        $p=$this->CurrentPage;
        $i=$this->CurrentPageIndex;
        $index=($index == 0) ? igk_getr("pageindex", $index): $index;
        if(($p != $value) || ($index != $i)){
            igk_getctrl(IGK_MENU_CTRL)->setPage($value, $index);
        }
    }
    ///<summary></summary>
    ///<param name="document"></param>
    /**
    * 
    * @param mixed $document
    */
    private function setDocument($document){
        $this->session->Doc=$document;
        $appdoc=igk_app()->getDoc();
        $thisdoc=$this->getDoc();
        $v=$appdoc === $document;
        $this->m_doc=$thisdoc;
    }
    ///<summary></summary>
    ///<param name="error"></param>
    ///<param name="uri" default="null"></param>
    /**
    * 
    * @param mixed $error
    * @param mixed $uri the default value is null
    */
    public static function setErrorQuery($error, $uri=null){
        igk_set_env("sys://error//Query", array("error"=>$error, "uri"=>$uri));
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $v
    */
    public function setFlag($id, $v){
        if($v == null){
            unset($this->_f[$id]);
        }
        else{
            $this->_f[$id]=$v;
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    private function setIsInit($v){
        $iv=igk_getv($this->_f, IGK_ISINIT_FLAG, 0);
        $this->_f[IGK_ISINIT_FLAG]= $v ? $iv | 0x02: ($iv & ~0x2);
	}
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    // public function setsessionId($v){
        // $this->_f[IGK_SESSION_ID]=$v;
    // }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    protected function setSubDomainCtrl($v){
        igk_environment()->subdomainctrl = $v;
        //return $this->setFlag(IGK_SUBDOMAIN_CTRL, $v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    protected function setSubDomainCtrlInfo($v){
        return $this->setFlag(IGK_SUBDOMAIN_CTRL_INFO, $v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setViewMode($v){
        $m = $this->getViewMode();
        if($m === $v)
            return;
		if ($v ==  IGKViewMode::VISITOR)
			$v = null;
		$this->m_settings->{IGK_VIEW_MODE_FLAG} = $v;
        $this->ViewControllers();
        igk_hook(IGK_HOOK_VIEW_MODE_CHANGED, [$this, $v]);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function storeDBConfigsSettingMenu(){
        $tab=$this->m_configMenuConf;
        $f=IGK_LIB_DIR."/Data/config.menu.xml";
        if(file_exists($f)){
            $d=igk_createnode("configmenu");
            foreach($tab as $k=>$v){
                $s=$d->add($k);
                foreach($v as $c=>$cm){
                    $s->add($c)->Content=$cm;
                }
            }
            igk_io_save_file_as_utf8($f, $d->render(), true);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){}
    ///<summary></summary>
    /**
    * 
    */
    public function ViewControllers($forceview=0){
        IGKControllerManagerObject::getInstance()->ViewControllers($forceview);
    }
}

///<summary>Represente class: IGKAppConfig</summary>
/**
* Represente IGKAppConfig class
*/
final class IGKAppConfig extends IGKObject {
    const CHANGE_REG_KEY="IGKConfigDataChanged";
    private $m_configEntries;
    private $m_configSavedEvent;
    private $m_datas;
    private $m_oldState;
    /** @var IGKAppConfig */
    private static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->_loadSystemConfig();
    }
   
    ///<summary>load configuration files </summary>
    /**
    * load configuration files
    */
    private function _loadSystemConfig(){
        $file=IGK_CONF_DATA;
        $this->m_configEntries=array();
        $fullpath=igk_io_syspath($file);
        IGK\System\Configuration\ConfigUtils::LoadData($fullpath, $this->m_configEntries);        
        $this->m_datas = new ConfigData($fullpath, $this, $this->m_configEntries);
        date_default_timezone_set( igk_getv($this->m_datas, 'date_time_zone', "Europe/Brussels"));         
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _updateCache(){
        $f=igk_io_syspath(IGK_CACHE_DATAFILE);
        if($this->Data->cache_loaded_file){
            if(file_exists($f))
                @unlink($f);
            igk_notifyctrl()->addMsg(__("Cache file stored"));
        }
        else{
            if(file_exists($f)){
                $c=@unlink($f);
                $t=@unlink(self::LibCacheFile());
                igk_notifyctrl()->addMsg(__("Unlink file: {0}", basename($f)));
            }
        }
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="arg"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $arg
    */
    public function addConfigSavedEvent($obj, $arg){
        igk_die(__METHOD__." Not Obselete");
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function checkConfigDataChanged($ctrl){
        $v=$ctrl->isChanged(IGKAppConfig::CHANGE_REG_KEY, $this->m_oldState);
        if($v){
            $this->_loadSystemConfig();
            return true;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigEntries(){
        return $this->m_configEntries;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getData(){
        return $this->m_datas;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance === null){
            self::$sm_instance=new IGKAppConfig();
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function onConfigSaved(){
        if($this->m_configSavedEvent){
            $this->m_configSavedEvent->Call($this, null);
        }
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="arg"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $arg
    */
    public function removeConfigSavedEvent($obj, $arg){
        igk_die(__METHOD__." Not Obselete");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function saveConfig($force=false){
        if($this->m_datas == null)
            return false;
        $this->m_datas->SortByKeys();
        if($this->m_datas->saveData($force)){ 
            $this->_updateCache();
            igk_sys_regchange(self::CHANGE_REG_KEY, $this->m_oldState);
            $this->onConfigSaved();
        }
        return true;
    }
}
///<summary>represent attributes management of object</summary>
/**
* represent attributes management of object
*/
class IGKAttribute extends IGKObject {
    static $classAttributes=array();
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
    ///<summary></summary>
    ///<param name="classOrObject"></param>
    /**
    * 
    * @param mixed $classOrObject
    */
    public static function GetAttributes($classOrObject){
        $n=null;
        if(is_string($classOrObject)){
            $n=$classOrObject;
        }
        else
            $n=get_class($classOrObject);
        return igk_getv(self::$classAttributes, $n);
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    ///<param name="attribute"></param>
    ///<param name="allowmultiple" default="true"></param>
    ///<param name="inherits" default="false"></param>
    /**
    * 
    * @param mixed $classname
    * @param mixed $attribute
    * @param mixed $allowmultiple the default value is true
    * @param mixed $inherits the default value is false
    */
    public static function Register($classname, $attribute, $allowmultiple=true, $inherits=false){
        $n=get_class($attribute);
        if(class_exists($classname)){
            if(igk_reflection_class_extends($n, __CLASS__)){
                if(($tab=igk_getv(self::$classAttributes, $classname)) == null){
                    $tab=array();
                }
                $tab[]=$attribute;
                self::$classAttributes[$classname]=$tab;
            }
        }
    }
}
///<summary>represent a controllertype manager attribute</summary>
/**
* represent a controllertype manager attribute
*/
class IGKControllerTypeAttribute extends IGKAttribute{
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
}
///<summary> global registration class to register data table</summary>
/**
*  global registration class to register data table
*/
final class IGKBalafonDBManager extends IGKObject {
    private $m_regTables;
    static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->m_regTables=array();
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCount(){
        return igk_count($this->m_regTables);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            self::$sm_instance=new IGKBalafonDBManager();
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    ///<param name="tablenameinterface"></param>
    /**
    * 
    * @param mixed $tablenameinterface
    */
    public function register_db_table($tablenameinterface){
        if(igk_reflection_interface_exists($tablenameinterface)){
            $this->m_regTables[$tablenameinterface]=$tablenameinterface;
        }
    }
}
///<summary>reprenset color in Byte </summary>
/**
* reprenset color in Byte
*/
class IGKColor extends IGKObject {
    private $m_A;
    private $m_B;
    private $m_G;
    private $m_R;
    ///<summary></summary>
    ///<param name="r"></param>
    ///<param name="g"></param>
    ///<param name="b"></param>
    ///<param name="a"></param>
    /**
    * 
    * @param mixed $r
    * @param mixed $g
    * @param mixed $b
    * @param mixed $a
    */
    public function __construct($r, $g, $b, $a){
        $this->m_R=self::trimByte($r);
        $this->m_G=self::trimByte($g);
        $this->m_B=self::trimByte($b);
        $this->m_A=self::trimByte($a);
    }
    public function toWebColor(){
        if ($this->m_A != 255){
            return "rgba(".
            $this->m_R.",".
            $this->m_G.",".
            $this->m_B.",".
            ($this->m_A * 100)/255
           . ")";
        }
        else {
        return "#". IGKNumber::ToBase($this->m_R, 16, 2).
            IGKNumber::ToBase($this->m_G, 16, 2).
            IGKNumber::ToBase($this->m_B, 16, 2);
        }
    }
    private static function trimByte($a){
        return max(min($a, 255), 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Black(){
        return self::FromFloat(0.0);
    }
    ///<summary></summary>
    ///<param name="rgb"></param>
    ///<param name="g" default="null"></param>
    ///<param name="b" default="null"></param>
    ///<param name="a" default="null"></param>
    /**
    * 
    * @param mixed $rgb
    * @param mixed $g the default value is null
    * @param mixed $b the default value is null
    * @param mixed $a the default value is null
    */
    public static function FromFloat($rgb, $g=null, $b=null, $a=null){
        if($g === null)
            return new IGKColor($rgb * 255, $rgb * 255, $rgb * 255, 255);
        return new IGKColor($rgb * 255, $g * 255, $b * 255, $a * 255);
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public static function FromString($s){
        $c=IGKColorf::FromString($s);
        return self::FromFloat($c->R, $c->G, $c->B, 255);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getA(){
        return $this->m_A;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getB(){
        return $this->m_B;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getG(){
        return $this->m_G;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getR(){
        return $this->m_R;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setA($value){
        if(($value>=0) && ($value<=255))
            $this->m_A=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setB($value){
        if(($value>=0) && ($value<=255))
            $this->m_B=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setG($value){
        if(($value>=0) && ($value<=255))
            $this->m_G=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setR($value){
        if(($value>=0) && ($value<=255))
            $this->m_R=$value;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function White(){
        return self::FromFloat(1.0);
    }
}
///<summary>represent color float</summary>
/**
* represent color float
*/
class IGKColorf extends IGKObject {
    private $m_A;
    private $m_B;
    private $m_G;
    private $m_R;
    ///<summary></summary>
    ///<param name="cl"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $cl
    * @param mixed $v
    */
    private static function __bindStringData($cl, $v){
        $v=trim(strtoupper($v));
        if(IGKString::StartWith($v, "#") || IGKString::StartWith($v, "0x")){
            $v=str_replace("#", IGK_STR_EMPTY, $v);
            $v=str_replace("0x", IGK_STR_EMPTY, $v);
            $i=0;
            switch(strlen($v)){
                case 8:
                break;
                case 4:
                $v=IGK_STR_EMPTY. $v[0]. $v[0]. $v[1]. $v[1]. $v[2]. $v[2]. $v[3]. $v[3];
                break;
                case 6:
                $v="FF". $v;
                break;
                case 3:
                $v="FF". $v[0]. $v[0]. $v[1]. $v[1]. $v[2]. $v[2];
                break;
                default:
                break;
            }
            try {
                $i=IGKNumber::FromBase($v, 16);
                $r=(($i >> 16)& 0x00FF);
                $g=(($i >> 8)& 0x00FF);
                $b=(($i)& 0x00FF);
                $cl->m_R=$r / 255.0;
                $cl->m_G=$g / 255.0;
                $cl->m_B=$b / 255.0;
            }
            catch(Exception $ex){}
        }
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function FromString($v){
        $t=igk_css_get_color_value($v);
        if(empty($t)){
            $cl=new IGKColorf();
            $cl->m_A=1.0;
            self::__bindStringData($cl, $v);
            return $cl;
        }
        $cl=new IGKColorf();
        $cl->m_A=1.0;
        self::__bindStringData($cl, $t);
        return $cl;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getA(){
        return $this->m_A;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getB(){
        return $this->m_B;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getG(){
        return $this->m_G;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getR(){
        return $this->m_R;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function loadw($v){
        self::__bindStringData($this, $v);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setA($value){
        if(($value>=0) && ($value<=1.0))
            $this->m_A=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setB($value){
        if(($value>=0) && ($value<=1.0))
            $this->m_B=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setG($value){
        if(($value>=0) && ($value<=1.0))
            $this->m_G=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setR($value){
        if(($value>=0) && ($value<=1.0))
            $this->m_R=$value;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function toByte(){
        return IGKColor::FromFloat($this->R, $this->G, $this->B, $this->A);
    }
}



///<summary>Android Style manager controlleur</summary>
/**
* Android Style manager controlleur
*/
final class IGKAndroidStyleManager extends BaseController {
   
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return igk_agent_isandroid();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        IGKOwnViewCtrl::RegViewCtrl($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){
        igk_reg_hook(IGK_EVENT_DOC_BEFORE_RENDER, "igk_android_onrenderdoc");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){}
}
///<summary>Represente class: IGKCachableViewCtrl</summary>
/**
* Represente IGKCachableViewCtrl class
*/
abstract class IGKCachableViewCtrl extends BaseController {
    ///<summary></summary>
    /**
    * 
    */
    public function getisCachable(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if($this->isCachable){
            if(!igk_getctrl("cache")->loadCache($this->Name)){
                parent::View();
                igk_getctrl("cache")->storeCache($this->Name, $this->TargetNode->Render());
            }
        }
        else{
            parent::View();
        }
    }
}
///<summary>used to manage config manager</summary>
/**
* used to manage config manager
*/
final class IGKConfigCtrl extends BaseController implements IIGKConfigController {
    const CONNEXION_FRAME= IGK_CONNEXION_FRAME;
	const CFG_USER = IGK_CFG_USER;
    ///<summary>.ctr conig controller</summary>
    /**
    * .ctr conig controller
    */
    public function __construct(){
        parent::__construct();
        $this->m_confctrls=array();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        igk_trace();
        igk_wln_e("CallDirect Magic Property  : ".__CLASS__." try get {$n} : ");
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function __init_cache_tools($t){
        $t->addDiv()->addSectionTitle(4)->Content=__("title.cacheTools");
        $frm=$t->addForm();
        $frm["action"]=$this->getUri("updatecacheConfig_ajx");
        $u=$this->getUri("activehtmlCache-ajx");
        $div=$frm->addDiv();
        $div->addLabel("a_html_cache")->setClass("dispib")->Content=__("Html Cache");
        $div->addToggleStateButton("a_html_cache", "on", igk_sys_is_htmlcaching())->setClass("dispib")->setAttribute("onchange", "ns_igk.ajx.get('{$u}&cache='+ns_igk.geti(event.target.checked),null,ns_igk.ajx.fn.no); return false;");
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function __init_log_tools($t){
        $t->addDiv()->addSectionTitle(4)->Content=__("Logs");
        $frm=$t->addForm()->setId("config-log-form");
        $frm["action"]=$this->getUri("update");
        $bar=$frm->addActionBar();
        $bar->addAJXAButton($this->getUri("viewLogs"))->setClass("igk-btn clsubmit igk-btn-default")->Content=__("View global log");
        $bar->addAJXAButton($this->getUri("clearLogs"))->setClass("igk-btn clsubmit igk-btn-default")->Content=__("Clear Log");
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function __initPageConfig(){
        $app=igk_app();

        $this->setEnvParam("conf://initPageConfig", 1);
        $bbox=$app->Doc->body->addBodyBox();
        $bbox->ClearChilds();
        switch($app->CurrentPageFolder){
            case IGK_CONFIG_PAGEFOLDER:
				$app->Doc->body["class"]="-igk-client-page +igk-cnf-body +google-Roboto";
            break;
			default:
				$app->Doc->body["class"]="+igk-client-page -igk-cnf-body -google-Roboto";
            break;
        }
        $this->setEnvParam("conf://initPageConfig", null);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __NoIE6supportView(){
        igk_wln("no ie 6 supported");
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="target"></param>
    ///<param name="name"></param>
    ///<param name="param"></param>
    /**
    * 
    * @param mixed $target
    * @param mixed $name
    * @param mixed $param
    */
    function _checkedItemConfig($target, $name, $param){
        $target->add("label", array("for"=>$name))->Content=__("lb.".$param);
        $chb=$target->addInput($name, "checkbox", null);
        $chb["value"]="1";
        if(igk_app()->Configs->$param)
            $chb["checked"]="true";
    }
    ///<summary></summary>
    ///<param name="o"></param>
    ///<param name="e"></param>
    /**
    * 
    * @param mixed $o
    * @param mixed $e
    */
    private function _cnfPageFolderChanged($o, $e){
        $app=igk_app();
        $bbox=$app->Doc->body->addBodyBox();
        $bbox->clearChilds();
        // $t= $this->getTargetNode();
        // $t->clearChilds();
        $app->Doc->body["class"]="+igk-client-page -igk-cnf-body";

        switch($app->CurrentPageFolder){
            case "home":
            $defctrl=igk_get_defaultwebpagectrl();
            if($defctrl != null){
                $defctrl->View();
            }
            else{
                igk_set_env(IGK_ENV_PAGEFOLDER_CHANGED_KEY, null);
            }
            break;
            case IGK_CONFIG_PAGEFOLDER:
				$this->__initPageConfig();
            break;
        }
    }
    ///<summary> load view configuration file </summary>
    /**
    *  load view configuration file
    */
    private function _loadSystemConfig(){
        $file=IGK_CONF_DATA;
        $e=array();
        $fullpath=igk_io_syspath($file);
        $e=$this->getConfigSettings()->configEntries;
        IGK\System\Configuration\ConfigUtils::LoadData($fullpath, $e);
        
    }
    ///<summary></summary>
    ///<param name="page"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $page
    * @param mixed $context the default value is null
    */
    protected function _selectMenu($page, $context=null){
        igk_getctrl(IGK_MENU_CTRL)->selectConfigMenu($page, IGKConfigCtrl::class);
        $this->m_menuName=$page;
    }
    ///<summary>send mail notification</summary>
    /**
    * send mail notification
    */
    private function _send_notification_mail(){
        $ctrl=$this;
        $app=igk_app();
        if($app->Configs->informAccessConnection){
            $to=$app->Configs->website_adminmail;
            if($to){
                $message=igk_createnode("div");
                $message->addArticle($ctrl, "mail.notify.template", (object)array(
                    "clDate"=>igk_mysql_datetime_now(),
                    "clDomain"=>$app->Configs->website_domain
                ));
                $d=igk_get_document('sys://mail/notification');
                if($d === igk_app()->Doc){
                    igk_die("notification is equal to global document ");
                }
                $opt=igk_xml_create_render_option();
                $opt->Context="mail";
                $opt->NoStoreRendering=1;
                $d->body->ClearChilds()->add($message);
                if(!igk_mail_sendmail($to, "no-reply@".igk_app()->Configs->website_domain, __("title.mail.adminnotifyconnexion_1", $app->Configs->website_domain), $d->Render($opt), null)){
                    igk_ilog(implode(" - ", [ __FILE__.":".__LINE__, "message notification failed"]));
                }
            }
            else{
                igk_ilog(implode(" - ", [__FILE__.":".__LINE__, "/!\\ Can't send mail notification"]));
            }
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function _view_ConfigMenuSetting($node){
        $c=$node->addPanelBox();
        igk_html_add_title($c, "title.ConfigurationMenuSetting");
        $c->addHSep();
        $f=$this->getDataDir()."/config.menu.xml";
        $txt=IGKIO::ReadAllText($f);
        $dummy=igk_createnode("dummy");
        $dummy->Load($txt);
        $b=igk_getv($dummy->getElementsByTagName("configmenu"), 0);
        $v_subdiv=$c->addDiv();
        foreach($b->Childs as  $v){
            $v_d=$v_subdiv->addDiv();
            $t=$v_d->addDiv(array("class"=>"table table-stripped config-menu-title"));
            $t->Content=$v->TagName;
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function activehtmlCache_ajx(){
        if(igk_getr("cache")){
            igk_sys_enable_html_caching();
        }
        else{
            igk_sys_disable_html_caching();
        }
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function addConfigSettingChangedEvent($obj, $method){
        igk_die(__METHOD__. " Obselete");
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function addConfigUserChangedEvent($obj, $method){
        igk_die(__METHOD__. " Obselete");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function back(){
        $rf=$this->getParam("referer");
        if($rf){
            $this->setParam("referer", null);
            igk_navto($rf);
        }
        else
            igk_navto_home(null);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function cc_controllerschema(){
        igk_app()->getControllerManager()->cm_controllerschema();
    }
    ///<summary>view current controller hierachi</summary>
    ///<obselete />
    /**
    * view current controller hierachi
    */
    public function cc_view_controllerschema_ajx(){igk_wln_e(__METHOD__, __FILE__.":".__LINE__, "obselete");
    }
    ///<summary></summary>
    ///<param name="user"></param>
    /**
    * 
    * @param mixed $user
    */
    private function check_connect($user){
        $adm=strtolower(igk_app()->Configs->admin_login);
        $adm_pwd=strtolower(igk_app()->Configs->admin_pwd);
        return (($adm == $user->clLogin) && ($adm_pwd == $user->clPwd));
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function checkConfigDataChanged($ctrl){
        if(IGKAppConfig::getInstance()->checkConfigDataChanged($ctrl)){
            $this->onConfigSettingChanged();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function checkForUpdate(){
        $r=igk_createnode("response");
        $v=igk_getr("v", '0.0.0.0');
        $buri=IGK_WEB_SITE;
        $uri=$buri."/api/v2/sysversion";
        $sys=0;
        $r->addXmlNode("status")->Content=0;
        $r->addXmlNode("request")->Content="{$sys}";
        $r->addXmlNode("uri")->Content=$uri;
        $r->RenderAJX();
        igk_exit();
        if(!empty($sys) && preg_match("/^([0-9]+)\.([0-9]+)(\.([0-9]+)\.([0-9]+))?$/", $sys)){
            $p=igk_cmp_version($v, $sys);
            if($p == 0){
                $m=$r->add("Message");
                $m->addDiv()->Content=__("msg.youareuptodate");
                $r->add("Status")->Content=0;
            }
            else if($p == -1){
                $r->add("Status")->Content=1;
                $d=$r->add("Message")->addDiv();
                $d->setStyle("padding-top:10px; padding-bottom:10px");
                $u=igk_io_fullbaserequesturi()."/".$this->getUri('conf_install_update');
                $d->addDiv()->Content=__("msg.uptodaterequired");
                $d->addDiv()->Content=__("app.new.version_1", $sys);
                $d->addInput("btn.update", "submit", __("Update"))->setAttribute("onclick", "javascript: ns_igk.os.update('$u'); return false;");
                $dv=$d->addDiv();
                $dv->setId("dialog");
                $dv->setClass("igk-dialog-temp wait");
                $dv->addDiv()->setClass("title")->Content=__("title.pleasewait");
                $m=$dv->addDiv()->setClass("msg")->addDiv();
                $m->addDiv()->Content=__("msg.updatingpleasewait");
                $m->addDiv()->addLineWaiter();
                $dv=$d->addDiv();
                $dv->setId("dialog");
                $dv->setClass("igk-dialog-temp os-complete");
                $dv->addDiv()->setClass("title")->Content=__("title.OS");
                $m=$dv->addDiv()->setClass("msg")->addDiv();
                $m->addDiv()->Content=__("msg.loadingcomplete");
            }
            else{
                $m=$r->add("Message");
                $m->addDiv()->Content=__("msg.yourversionishighter");
                $r->addNode("Status")->Content="0";
            }
        }
        else{
            $r->add("Message")->Content="";
            $r->add("Status")->Content=-1890;
        }
        $r["xmlns:igk"]=IGK_SCHEMA_NS;
        $r->RenderXML();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function clearcache(){  
        igk_clear_cache();       
        if(igk_is_ajx_demand()){
            igk_ajx_toast(__("Clear cache success"), "igk-success");
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function clearLogs(){
        if(!igk_is_conf_connected() && !igk_server_is_local()){
            return false;
        }
        $log=dirname(igk_ilog_file());
        $tab=igk_io_getfiles($log);
        foreach($tab as $f){
            @unlink($f);
        }
        if(igk_is_ajx_demand()){
            igk_ajx_toast(__("Clear caches log"), "igk-success");
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clearsession(){
        $this->SelectedConfigCtrl=null;
        igk_getctrl(IGK_SESSION_CTRL)->ClearS();
    }
    ///<summary></summary>
    ///<param name="navigate" default="true"></param>
    /**
    * 
    * @param mixed $navigate the default value is true
    */
    public function ClearSessionAndReconnect($navigate=true){
        if($this->getIsConnected()){
            $uri=$this->getReconnectionUri();
            igk_getctrl(IGK_SESSION_CTRL)->ClearS(false);
            igk_navto($uri);
            igk_exit();
        }
        igk_navtocurrent();
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="content"></param>
    /**
    * 
    * @param mixed $content
    */
    private function conf_install_checklib($content){
        return true;
    }
    ///<summary></summary>
    ///<param name="file" default="null"></param>
    ///<param name="outdir" default="null"></param>
    /**
    * 
    * @param mixed $file the default value is null
    * @param mixed $outdir the default value is null
    */
    public function conf_install_platform($file=null, $outdir=null){
        $odir=$outdir == null ? igk_io_basedir(): $outdir;
        $f=$file == null ? igk_getv(igk_getv($_FILES, "clFile"), "tmp_name"): $file;
        $r=false;
        $bckdir = igk_io_applicationdatadir()."/Backup";

        if(!empty($f)){
            $i=IGKIO::CreateDir($odir);
            $c=igk_zip_unzip_filecontent($f, "__lib.def");
            if(!empty($c)){
                if($this->conf_install_checklib($c)){
                    $bDomain=IGKSubDomainManager::GetBaseDomain();
                    IGKIO::CreateDir($bckdir);
                    igk_zip_folder($bckdir."/Lib.zip", igk_io_basedir()."/Lib", "Lib");
                    igk_zip_unzip($f, $odir);
                    $cf=igk_io_basedir("__lib.def");
                    if(file_exists($cf))
                        unlink($cf);
                    IGKControllerManagerObject::ClearCache();
                    IGKSubDomainManager::StoreBaseDomain($this, $bDomain);
                    $r=true;
                }
            }
            else{
                igk_debug_wln("lib file definition not found !!!!");
            }
        }
        else{
            igk_log_write_i("config_install", "/!\ not installed");
        }
        if(($file == null) && ($outdir == null)){
            igk_getconfigwebpagectrl()->reconnect();
            igk_exit();
        }
        return $r;
    }
    ///<summary></summary>
    ///<param name="ruri" default="null"></param>
    /**
    * 
    * @param mixed $ruri the default value is null
    */
    public function conf_install_update($ruri=null){
        if(!igk_is_conf_connected()){
            return false;
        }
        $u=IGK_WEB_SITE."/balafon/download/0";
        $f=igk_get_web_content($u);
        $rep=igk_createnode("response");
        if(!empty($f)){
            $dir=igk_io_dir(IGK_LIB_DIR."/tmp");
            igk_io_createdir($dir);
            $fn=tempnam($dir, "cnf");
            $k=$fn.".zip";
            rename($fn, $k);
            $fn=$k;
            $rep->loadArray(array("uri"=>$u, "datalength"=>strlen($f), "tmp_name"=>$fn));
            igk_io_save_file_as_utf8_wbom($fn, $f, true);
            $c=false;
            if(file_exists($fn)){
                $c=$this->conf_install_platform($fn, null);
                if(file_exists($fn))
                    unlink($fn);
                $rep->loadArray(array("status"=>$c));
            }
            else{
                $rep->loadArray(array("status"=>$c));
            }
        }
        if($c){
            igk_getctrl(IGK_SESSION_CTRL)->forceview();
            $rep->addNode("ruri")->Content=$ruri ? $ruri: igk_io_fullbaserequesturi()."/";
        }
        $rep->RenderAJX();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function conf_runCtrlConfig(){
        $tctrl=igk_sys_getall_ctrl();
        if($tctrl){
            $param=array();
            foreach($tctrl as  $v){
                $v->SetupCtrl($param);
            }
        }
        igk_app()->Doc->Theme->save();
        igk_notifyctrl()->addMsgr("msg.runCtrlConfigComplete");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function conf_update_setting(){
 
        $app=igk_app();
        $c = new stdClass();
        $c->allow_debugging=igk_getr("cldebugmode", false) == "on"?1:0;
        $c->allow_article_config=igk_getr("clarticleconfig", false) == "on"?1:0;
        $c->allow_auto_cache_page=igk_getr("clautocachepage", false)=="on"?1:0;
        $c->cache_file_time=igk_getr("clcache_file_time", false) =="on"?1:0;
        $c->cache_loaded_file=igk_getr("clCacheLoadedFile", false) == "on"?1:0;
        $c->informAccessConnection=  (igk_getr("clinformAccessConnection", false) =='on')?1:0; // (igk_getr("clinformAccessConnection", false)=="on");
     
        foreach($c as $k=>$v){
            $app->Configs->{$k} = $v;
        }
         
        igk_save_config();
        igk_notifyctrl()->setNotifyHost(null);
        $this->View();
        igk_notifyctrl()->addMsgr("msg.configOptionsUpdated");
        igk_resetr();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function configure_search_ajx(){
        $s=igk_getr("clsearch");
        $n=igk_html_node_notagnode();
        if(!empty($s)){
            $s="/(".$s.")/i";
        }
        else{
            $s="/(.)+/i";
        }
        $this->configure_settings_load_data($n, $s);
        $n->RenderAJX();
    }
    ///<summary>global configure setting request</summary>
    /**
    * global configure setting request
    */
    public function configure_settings(){
        if(!igk_is_conf_connected()){
            igk_navto($this->getAppUri());
        }
        igk_header_no_cache();
        igk_set_env("sys://designMode/off", 1);
        igk_set_env("sys://defaultpage/off", 1);
        $doc=igk_get_document($this, 0);
        $t=$doc->body->clearChilds()->addBodyBox()->clearChilds()->addDiv();
        $t->addDiv()->Content=__("Configuration view");
        self::ViewInContext($this, "general.config.view", ["t"=>$t, "doc"=>$doc, "pagell"=>"configure_setting"]);
        $doc->renderAJX();
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="h"></param>
    ///<param name="rg" default="'/(.)*/'"></param>
    /**
    * 
    * @param mixed $h
    * @param mixed $rg the default value is '/(.)\*\/'
    */
    private function configure_settings_load_data($h, $rg='/(.)*/'){
        $tab=$h->addTable()->setClass("fitw")->setStyle("font-size:0.86em");
        $t=igk_app()->getConfigs()->getEntries();
        $t=igk_get_env(IGK_ENV_GLOBAL_SETTING);
        $r=$tab->add("thead")->setClass("igk-fixed-header")->addTr();
        $r->addTH()->Content=__("Name");
        $r->addTH()->Content=__("Type");
        $r->addTH()->Content=__("Status");
        $r->addTH()->setStyle("width:100%")->Content=__("Value");
        $r->addTH()->Content=__("Description");
        $ti=array("admin_pwd"=>1);
        $p="";
        $gf=igk_app()->Configs;
        if($t){
            $m=array_keys($t);
            sort($m);
            $st=$tab->add("tbody");
            foreach($m as $vk=>$k){
                $s=$t[$k];
                if(isset($ti[$k]) || !preg_match($rg, $k))
                    continue;
                $cnf=igk_getv($gf, $k);
                $r=$st->addTr();
                $r->addTd()->Content=$k;
                $r->addTd()->Content='string';
                $r->addTd()->Content=$s->clData == $cnf;
                $td=$r->addTd();
                $td->Content=$cnf;
                $td->setClass("e");
                $r->addTd()->Content=$s->clDesc;
            }
        }
        $uri=$this->getUri("configure_store_ajx");
        $tab->addScript()->Content=<<<EOF
			var q = \$igk(igk.getParentScriptByTagName('table'));

igk.ready(function(){
	var e_=null;
	var u_='{$uri}';

	function _start(){
		if (e_==null){

		}
	}

	q.select('.e').each(function(){
		// console.debug('reg event');
		this.reg_event("dblclick", function(){
			 //console.debug("on dbl click");
			 if (e_!=null){
				 if (e_.t==this)
					 return;
				 //restore to default
				 \$igk(e_.t).setHtml(e_.c);
				 e_ = null;
			 }
			 var s = this.innerHTML;
			 var i = this.parentNode.childNodes[0].innerHTML;
			 e_ = {
				 c:s,
				 t:this
			 };
			 var n = ns_igk.createNode('form');
			 n.o["action"] = u_;
			 n.add('input').setAttributes({
				 'id':'clName',
				 'type':'hidden',
				 'value':i
			 });
			 var v_s = n.add('input').setAttributes({
				 'id':'clValue',
				 'class':'cltext igk-form-control',
				 'value':s
			 }).reg_event("keypress", function(evt){
				// console.debug(evt.keyCode);
				switch (evt.keyCode){
					case 13:
					 evt.preventDefault();
					 var mq=this.value;
					 igk.ajx.post(u_, "clName="+this.form["clName"].value+"&clValue="+this.value, function(xhr){
						 if (this.isReady()){
							 if (!e_)return;
							 \$igk(e_.t).setHtml(mq);

							 if (e_.c!=mq){
								 e_.t.parentNode.childNodes[2].innerHTML='<b>user define</b>';
							 }
							 e_ = null;
						 }
					 });
					 break;
					 case 27:
							//restore
							\$igk(e_.t).setHtml(e_.c);
							e_ = null;
						break;
				 }
			 });

			 \$igk(this).setHtml('').add(n);
			 v_s.o.focus();

		});
		return 1;
	});

});
EOF;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function configure_store_ajx(){
        if(!igk_is_conf_connected()){
            return;}
        $n=igk_getr("clName");
        igk_app()->Configs->$n=igk_getr("clValue");
        igk_app()->Configs->saveData();
    }
    ///<summary></summary>
    ///<param name="u" default="null"></param>
    ///<param name="pwd" default="null"></param>
    ///<param name="redirect" default="true"></param>
    /**
    * 
    * @param mixed $u the default value is null
    * @param mixed $pwd the default value is null
    * @param mixed $redirect the default value is true
    */
    public function connectToConfig($u=null, $pwd=null, $redirect=true){
      


        if(igk_server()->method("POST") && igk_valid_cref(1)){
            if(!igk_sys_env_production()){
                $u=$u == null ? "admin": "";
            }
            $app=igk_app();
            if(!$this->getIsConnected()){
                $not= igk_notifyctrl("connexion:frame");  
                $u=($u == null) ? strtolower(igk_getr("clAdmLogin", $u)): $u;
                $pwd=($pwd == null) ? strtolower(md5(igk_getr("clAdmPwd", $pwd))): md5($pwd);        
                if(empty($u) || empty($pwd)){
                    $not->addError( __("err.login.failed"));                 
                }
                else{
                    $adm=strtolower($app->Configs->admin_login);
                    $adm_pwd=strtolower($app->Configs->admin_pwd);
                    if(($adm == $u) && ($adm_pwd == $pwd)){
                        $us=(object)array(
                            "clLogin"=>$u,
                            "clPwd"=>$pwd,
                            "csrf"=>"igk-".(rand() + time())
                        );
                        $obj_u=igk_sys_create_user($us);
                        $this->setConfigUser($obj_u);
                        $this->_send_notification_mail();
                    }
                    else{
                        $not->addError(__("err.login.failed"));  
                        igk_ilog("failed connection");
                    }
                }
            }
        }else {
       
            if (!$redirect){
			    igk_set_header(500);
                igk_wln_e(__("Mandatory failed"));
            }
		}
        if($redirect){
            igk_navto("./");
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function forceview(){
        igk_getctrl(IGK_SESSION_CTRL)->forceview();
    }
    ///<summary></summary>
     
    ///<summary></summary>
    /**
    * 
    */
    public function getCanConfigure(){
        return ($this->getIsConnected());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigEntries(){
        return $this->getParam("configentries");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigFrame(){
        return $this->getEnvParam("configframe");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigMenuNode(){
		static $configMenu;
		if ($configMenu === null){
			$configMenu = igk_createnode("div");
			$configMenu->setId("igk-cnf-menu");
			$configMenu["class"] = "igk-cnf-menu";
		}
		return $configMenu;
        //return $this->getConfigSettings()->MenuNode;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigNode(){
		static $confNode;
		if ($confNode ===null){
			$confNode = igk_createNode("div");
			$confNode->setId("igk-cnf-content")->setClass("igk-cnf-content");
		}
		return $confNode;

		// return $this->getEnvParam("configNode", function(){
			// $t = igk_createNode("div");
		// });
		// igk_wln_e("config node");

        // return $this->getConfigSettings()->ConfigNode;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "configs";
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getConfigSettings(){
        if(!($s=$this->getParam($key = "configsettings"))){ 
            $s=(object)array(
                "SelectedController"=>null,
                "configEntries"=>null,
				"ConfigView"=>null
            );
            $this->setParam($key, $s);
        }
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigUser(){
        return $this->getParam(self::CFG_USER); // $this->getConfigSettings()->ConfigUser;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigView(){
        return $this->getConfigSettings()->ConfigView;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDbConstantFile(){
        return igk_sys_db_constant_cache();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsAvailable(){
        return ($this->getCurrentPageFolder() == IGK_CONFIG_PAGEFOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConfiguring(){
        return ($this->getIsConnected()) && (igk_app()->CurrentPageFolder == IGK_CONFIG_MODE);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConnected(){
        return defined('IGK_CONF_CONNECT') || ($this->getConfigUser() !== null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return $this->getIsAvailable() && igk_const_defined("IGK_CONFIG_PAGE", 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_CONF_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getphpinfo(){
        $cnf=$this->getConfigNode()->ClearChilds();
        IGKOb::Start();
        phpinfo();
        $b=IGKOb::Content();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getReconnectionUri(){
        $uri=igk_io_baseuri();
        $clct=$this->getSelectedConfigCtrl();
        if($_cu=$this->getConfigUser()){
            $q=array(
                "u"=>$_cu->clLogin,
                "pwd"=>$_cu->clPwd,
                "selectedCtrl"=>$clct ? $clct->Name: null,
                "selectPage"=>$this->getSelectedMenuName(),
                "baseUri"=>igk_getv(explode('?',
                igk_io_base_request_uri()),
                0)
            );
            $uri=$this->getUri("startconfig&q=".base64_encode('?'.http_build_query($q)));
        }
        return $uri;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegisterToViewMecanism(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSelectedConfigCtrl(){
        return igk_getctrl($this->getConfigSettings()->SelectedController);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSelectedMenuName(){
        return igk_getv($this->getConfigSettings(), "SelectedMenuName");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gotoindex(){
        $u = igk_io_baseuri();
        // header("Location: ".$u);
        igk_environment()->navgoto = 1;
        igk_navto($u); 
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="callback"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $callback
    */
    public function init_param_callback($name, $callback){
        $bar=$this->getParam($name);
        if($bar == null){
            $bar=$callback($this);
            $this->setParam($name, $bar);
        }
        return $bar;
    }
    ///register config controlleur
    /**
    */
    protected function InitComplete(){
        parent::InitComplete();
        IGKOwnViewCtrl::RegViewCtrl($this);
        $this->m_configuration=false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function initConfigMenu(){
        $t = array(
            new IGKMenuItem(IGK_HOME_PAGEFOLDER,
            IGK_DEFAULT_VIEW,
            $this->getUri("setpage"),
            -900),
            new IGKMenuItem("PhpInfo",
            "phpinfo",
            $this->getUri("show_phpinfo"),
            -800),
            new IGKMenuItem("ServerInfo",
            "serverinfo",
            $this->getUri("show_serverinfo"),
            -750),
            
            new IGKMenuItem("GoToIndex",
            null,
            igk_io_baseuri(),  
            10800),
        );
       
        $t[] = new IGKMenuItem("LogOut", null, $this->getUri("logout"), 20000);
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function initConnexionNode(){   
 
        $bfrm=igk_createnotagnode();
        $igk_framename=IGK_FRAMEWORK;
        $igk_version=IGK_VERSION;
		 $doc=$this->getDoc();

		igk_google_addfont($doc, "Roboto");

        if($bmc=igk_require_module("igk/BMC", 0, 0)){

            $bmc->initdoc($doc);
            $doc->setHeaderColor("#4588fa");
            $root=$bfrm->addDiv()->setClass("disptable fit")->addDiv();
            $root->setclass("disptabc alignm fitw");
            $dv=$root->addDiv();
            $dv["class"]="igk-adm-login-form";
            $frm=$dv->addBMCShape()->addDiv()->addForm()->setClass("dispb");
            $frm["action"]=$this->getUri("connectToConfig");
            $frm->addObData(function(){igk_html_form_init();}, null);
            $frm->addDiv()->setClass("igk-adm-logo")->Content=  igk_svg_use("balafon_logo");
            $frm->addDiv()->addNotifyHost("connexion:frame", 0);
            $frm->addBMCTextfield("clAdmLogin", array(
                "text"=>__("Login"),
                "tip"=>__("Admin login"),
                "type"=>"text"
            ), "", null, 1, 1)->addBMCRipple();
            $frm->addBMCTextfield("clAdmPwd", array(
                "text"=>__("Password"),
                "tip"=>__("Admin password"),
                "type"=>"password"
            ), "", null, 1, 1)->addBMCRipple();
            $frm->addInput("goodUri", "hidden", $this->getAppUri());
            $frm->addInput("badUri", "hidden", $this->getAppUri());
            $bar=$frm->addActionBar()->setStyle("margin: auto;");
            $bar->addButton("connect", 1)->setClass("bmc-raise igk-winui-bmc-button")->Content=__("Connect");
            $bar->addABtn(igk_io_baseuri())->setClass("igk-pull-right")->Content=__("Back to {0}", igk_sys_domain_name());
            $root->addDiv()->setAttribute("style", "font-size:0.8em; text-align:center")->addDiv()->Content="{$igk_framename} - ( ".IGK_PLATEFORM_NAME." ) - {$igk_version}<br />Configuration";
            $root->addDiv()->setClass("alignc")->addIGKCopyright();
            return $bfrm; 
        }
        // else if(!igk_environment()->is("production")){
        //     $d=$bfrm->addObData(function(){
        //         echo "<div >/!\\bmc not found</div>";
        //     });
        //     $d["class"]="posab";
        // }
        $frm=$bfrm->addForm()->AppendAttributes(array("class"=>"connexion_frame"));
        $frm->ClearChilds();
        $frm->addObData(function(){igk_html_form_init();
        }
        , null);
        $frm["method"]="POST";
        $frm["action"]=$this->getUri("connectToConfig");
        // $a=igk_createnode("a")->AppendAttributes(array("href"=>new IGKHtmlRelativeUriValueAttribute()));
        // $a->Content="Go to index ";
        // $a["style"]="color:white;";
        $c=null;
        $android=0;
        if(igk_agent_isandroid()){
            $android=1;
            igk_css_regclass(".igk-android-login-form", "[bgcl:igk-android-login-form-bg]");
            igk_css_regcolor("igk-android-login-form-bg", "#eee");
            $frm["class"]=null;
            $frm["class"]="fit alignc alingm ";
            $frm["style"]="position:relative; padding-bottom:48px;font-size:1.3em;";
            $frm->Box["style"]="top:0px; bottom:0px; position:relative; overflow-y:auto; height:100%; background-color:#37C4FF;vertical-align:middle;";
            $dv= $frm->pageCenterBox(function($dv)use($frm, $igk_version, $igk_framename){
         
            $dv->addDiv()->setClass("dispib")->setAttribute("style", "text-align:center; color:#efefef; font-size:3.4em;vertical-align:middle; margin-bottom:32px;padding-top:32px;")->Content=IGK_PLATEFORM_NAME."<span class=\"igk-smaller alignt\" style=\"font-size:0.4em\">&copy;</span> Configuration";
            $kdiv=$frm->addDiv()->setClass("no-overflow");
            $kdiv["style"]="height:auto; vertical-align:bottom; display:inline-block;  vertical-align:middle; ";
            $div=$kdiv->addDiv();
            $row=$kdiv->addContainer()->addDiv()->setClass("dispib")->setStyle("max-width:250px")->addRow();
            $row->addCol("igk-col-3-3")->addDiv()->setClass("alignl")->addNotifyHost("connexion:frame");
            $cdiv=$row->addCol("igk-col-3-3")->addDiv();
            $cdiv->addLabel()->setClass("igk-hbox")->Content=__("lb.clLogin");
            $cdiv->addInput("clAdmLogin", "text")->setAttribute("placeholder", __("Admin login"))->setClass("-cltext dispb igk-sm-fitw igk-form-control")->setStyle("border:none; border-bottom: 2px solid black; ");
            $cdiv=$row->addCol("igk-col-3-3")->addDiv();
            $cdiv->addLabel()->setClass("igk-hbox")->Content=__("lb.clPwd");
            $cdiv->addInput("clAdmPwd", "password")->setAttribute("placeholder", __("Admin password"))->setAttribute("autocomplete", "current-password")->setClass("-clpassword dispb igk-sm-fitw igk-form-control")->setStyle("border:none; border-bottom: 2px solid black;");
            $cdiv=$row->addCol("igk-col-3-3")->addDiv()->setClass('alignc');
            $cdiv->addDiv()->addInput("btn_connect", "submit", __("btn.connect"))->setClass("-clsubmit fitw igk-btn igk-btn-connect");
            $cdiv=$frm->addContainer()->setClass("igk-smaller");
            $cdiv->addA(igk_io_baseuri())->Content="goto index";
            $frm->addDiv()->setClass("dispb posfix fitw no-overflow loc_l loc_b")->setAttribute("style", "font-size:0.8em; position:fixed; height:48px;")->addDiv()->Content="{$igk_framename} - ( ".IGK_PLATEFORM_NAME." ) - {$igk_version}<br />Configuration";

            });
        }
        else{ 
            $lang=function($n){
                return __($n);
            };
            $bfrm->addObData(function(){
                $admin_bg=IGKResourceUriResolver::getInstance()->resolve(IGK_LIB_DIR."/Data/R/img/login_bg.jpg");
                if($admin_bg){
?><img src="<?= $admin_bg ?>" alt='admin background' class="posfix cnf-bg" style="z-index:-101; top: 0px; " />
<?php
                }
            }
            , null);
            $baseuri=igk_io_baseuri();
            $out=<<<EOF
<script type="text/javascript">if (window.ns_igk) window.ns_igk.winui.fn.close_all_frames();</script>
<div id="connectionTag" class="igk-cnf-connexion-div google-Roboto">
<div  style="max-width:300px;  position:relative; color:white;  display:inline-block;" >
<div id="id_layer" style="width:300px; z-index:0;">
<div id="id_board"  style="width:301px; padding-top: 48px; background-repeat:no-repeat; left:0px; top:0px;">
	<div id="notify-z" class="notify-z" ></div>
	<ul style="padding-bottom:1.5em" >
        <li><label class="cllabel alignl" for="clAdmLogin" >{$lang('Login')}</label>
        <input type="text" name="clAdmLogin" id="clAdmLogin" class="cltext" autocomplete="off" placeholder="{$lang('Admin login')}" /><br /></li>
        <li><label class="cllabel alignl" for="clAdmPwd" >{$lang('Password')}</label>
        <input type="password" name="clAdmPwd" id="clAdmPwd" class="clpassword " autocomplete="current-password" placeholder="{$lang('Admin password')}" /><br /></li>
	</ul>
    <div class="igk-row" >
        <div class="igk-col fitw alignc">
            <input type="submit" class="igk-btn clsubmit dispib" name="connect" value="{$lang('Connexion')}" />
            <a href="{$baseuri}" class="dispb alignc" style="font-size: 10pt; padding-top:2em" >{$lang('home page')}</a>
        </div>
	</div>
</div>
<div id="id_content" class="config-desc">
${igk_framename} - ${igk_version}<br />
{$lang('dashboard')}
</div>
<div id="id_foot" style="width:301px; height:31px; position:absolute;background-repeat:no-repeat; left:0px; top:0px;">
</div>
</div>
</div>
	<div id="igk_cpv"></div>
</div>
EOF;
            $dv=$frm->addDiv();
            $g=$dv->addSingleNodeViewer('NoTagNode')->targetNode;
            $g->load($out);
            $i=$g->getElementById("id_board");
            $c=$g->getElementById("igk_cpv");
            $notz=$g->getElementById("notify-z");
            if($notz){
                $not = igk_notifyctrl("connexion:frame");  
                $notz->addNotifyHost("connexion:frame"); 
            }
            if(!is_object($i)){
                igk_die("/!\ not an object \$i. getElementById failed to retrieve id_board.");
            }
        }
        if(!$android){
            $d=$bfrm->addDiv()->setClass("mobilescreen dispn");
            $d->addDiv()->addSectionTitle(4)->Content=__("Login Form");
            $dv=$d->addDiv();
            $form = $dv->addForm();
            $form["action"]=$this->getUri("connectToConfig");
            $form["method"] = "POST";
            $form->addObData(function(){igk_html_form_init();}, null);
            $form->addFields([
                "clAdmLogin"=>["type"=>"text", "label_text"=>__("Login"),  "placeholder"=>__('Admin login'), "attribs"=>[]],
                "clAdmPwd"=>["type"=>"password", "label_text"=>__("Password"), "placeholder"=>__('Admin password'), "attribs"=>[]]
            ]);
            $acbar = $form->addActionBar();
            $acbar->addSubmit("btn.submit", __("connect"));
            $d->addDiv()->Content=IGK_COPYRIGHT;
        }
        if($c)
            $c->Content=IGK_COPYRIGHT;
 
        return $bfrm;
    } 
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $this->setParam(IGK_KEY_CSS_NOCLEAR, 1);
        $node = igk_createnode("div")->setAttribute("class", "igk-cnf-page fit igk-parentscroll igk-powered-viewer overflow-y-a");
        $v_cnf = igk_createnode("div")->AppendAttributes(array("class"=>"igk-cnf-frame")); 
		$v_cnf->add($this->getConfigMenuNode());
		$v_cnf->add($this->getConfigNode());
        $this->setConfigFrame($v_cnf); 
        return $node;
    }
    ///<summary></summary>
    ///<param name="f"></param>
    /**
    * 
    * @param mixed $f
    */
    public function IsFunctionExposed($f){
        $v=false;
        if(method_exists(get_Class($this), $f)){
            $b=new ReflectionMethod(get_class($this), $f);
            $v=$b->isPublic();
        }
        if($v && igk_is_conf_connected()){
            return $v;
        }
            return $v || (strtolower($f) == "connecttoconfig");

    }
    ///<summary></summary>
    /**
    * 
    */
    public function login(){
        igk_wln_e(__FILE__.":".__LINE__, "Not implement");
    }
    ///<summary></summary>
    ///<param name="redirect" default="true"></param>
    ///<param name="detroysession" default="true"></param>
    /**
    * 
    * @param mixed $redirect the default value is true
    * @param mixed $detroysession the default value is true
    */
    public function logout($redirect=true, $detroysession=true){
   
        if($this->getIsConnected()){
            $this->setConfigUser(null);
            $this->setSelectedConfigCtrl(null);
        }
        if($detroysession)
            igk_session_destroy();
        $this->View();
        if($redirect){
            igk_navtocurrent();
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function onConfigSettingChanged(){
        if($this->m_configSettingChangedEvent != null)
            $this->m_configSettingChangedEvent->Call($this, null);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function onConfigUserChanged(){
        igk_notification_push_event(IGK_CONF_USER_CHANGE_EVENT, $this);
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function onHandleSessionEvent($msg){
        switch($msg){
            case IGK_ENV_SETTING_CHANGED:
            $this->checkConfigDataChanged(null);
            break;
        }
    }
    ///<summary>preview referer result</summary>
    /**
    * preview referer result
    */
    public function preview_result_ajx(){ 
        $d=igk_createnode();
        if ($uri=igk_server()->HTTP_REFERER){
            $s=igk_curl_post_uri($uri);
            if($s){
                $t=IGKHtmlReader::Load($s);
                $head=igk_getv($t->getElementsByTagName("head"), 0);
                $body=igk_getv($t->getElementsByTagName("body"), 0);
                $tl=igk_getv($head->getElementsByTagName("title"), 0);
                $d->addDiv()->setClass("fcl-blue igk-title-5")->Content=$tl ? $tl->innerHTML: "NoTitle";
                $dv=$d->addDiv();
                if($body){
                    $dv->Content=igk_html_render_text_node($body);
                }
                else{
                    $dv->Content="body is null";
                }
            } else {
                $d->content = "failed to send uri: ".$uri;
            } 
            igk_ajx_notify_dialog("Page Result Preview", $d);
        }
    }
    ///<summary></summary>
    ///<param name="navigate" default="true"></param>
    /**
    * 
    * @param mixed $navigate the default value is true
    */
    public function reconnect($navigate=true){
        $this->ClearSessionAndReconnect($navigate);
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function registerConfig($ctrl){
        $c=$this->getParam("m_confctrls", array());
        $c[$ctrl->Name]=$ctrl;
    }
    ///<summary> override register Hook</summary>
    /**
    *  override register Hook
    */
    protected function registerHook(){
        igk_reg_hook(IGKEvents::HOOK_PAGEFOLDER_CHANGED, function(){
            $this->_cnfPageFolderChanged($this, null);
        });
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function reloadConfig($uri){
        $tab=igk_getquery_args($uri);
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method" default="null"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method the default value is null
    */
    public function removeConfigSettingChangedEventt($obj, $method=null){
        igk_die(__METHOD__. " Obselete");
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method" default="null"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method the default value is null
    */
    public function removeConfigUserChangedEvent($obj, $method=null){
        igk_die(__METHOD__. " Obselete");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function resetconfig(){
        if(igk_qr_confirm()){
            @unlink(igk_io_currentrelativepath("Data/configure"));
            igk_getctrl(IGK_MYSQL_DB_CTRL)->initSDb(false);
            $this->reconnect();
        }
        else{
            $frame=igk_frame_add_confirm($this, "frame_reset_config", $this->getUri("resetconfig"));
            $frame->Form->Div->Content=__("msg.confirmResetConfig");
        }
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setConfigFrame($value){
        $this->setEnvParam("configframe", $value);
        return $this;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    // protected function setConfigMenuNode($n){
        // $this->getConfigSettings()->MenuNode=$n;
    // }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    // protected function setConfigNode($v){
        // this->getConfigSettings()->ConfigNode=$v;
    // }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    private function setConfigUser($v){
        if($this->getConfigUser() !== $v){
            // $this->getConfigSettings()->ConfigUser=$v;
			$this->setParam(self::CFG_USER, $v);
            $this->onConfigUserChanged();
        }
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setConfigView($v){
        $this->getConfigSettings()->ConfigView=$v;
    }
    ///<summary></summary>
    ///<param name="p" default="null"></param>
    ///<param name="stored"></param>
    /**
    * 
    * @param mixed $p the default value is null
    * @param mixed $stored the default value is 0
    */
    public function setpage($p=null, $stored=0){
     
 
        $key="cnf://no_reload";
        if($sp=igk_get_env($key)){
            return;
        }
        if($stored){
            igk_set_env($key, 1);
        }
        $_cv=$this->getConfigView();
        if(!empty($p)){
            if($_cv != $p){
                $this->setParam("cnf://no_recallview", 1);
            }
            $this->setConfigView($p);
        }
        else{
            $this->setConfigView(IGK_DEFAULT_VIEW);
        }
        $p=$this->getConfigView();
        $app=igk_app();
        $cnf_n=$this->getConfigNode();
        if($cnf_n === null){
            $cnf_n=igk_createnode("div");
            $this->ConfigNode=$cnf_n;
        } 
        $cnf_n->clearChilds();
        $v_supported=true;
        igk_notify_sethost($cnf_n->addDiv());
        $ctrl = $this;
        switch($p){
            case "configurationmenusetting":
            $this->SelectedConfigCtrl=null;
            $this->_selectMenu("ConfigurationMenuSetting", "IGKConfigCtrl::setpage");
            $div=$cnf_n->addDiv();
            $this->_view_ConfigMenuSetting($div);
            break;
            case "phpinfo":
				$this->_selectMenu("phpinfo", "IGKConfigCtrl::setpage");
				$iframe=$cnf_n->add("iframe", array("class"=>"fitw fith no-border"));
				$iframe["src"]=$this->getUri("getphpinfo");
				$iframe["style"]="min-height:800px; ";
            break;
            case "serverinfo":
				$this->_selectMenu("serverinfo", "IGKConfigCtrl::setpage");
				include($this->getViewFile("config.server_info.phtml"));
            break;
            case IGK_DEFAULT_VIEW: 
                include($this->getViewFile("config.default_page.phtml"));
                igk_set_env($key, 1);
            break;
            default:
				$v_supported=false;
            break;
        }
		//$cnf_n->clearChilds();//addDiv()->Content = "OK";
    }
    ///set selected menu config
    ///$ctrl = selected config controller
    ///$menuname = menu name
    ///$context = from context. info
    /**
    */
    public function setSelectedConfigCtrl($ctrl, $fromContext=null){
        $_select=$this->getSelectedConfigCtrl();
        if($_select !== $ctrl){

            // igk_wln_e("selected config ...", $ctrl );
            $this->getConfigSettings()->SelectedController= $ctrl ? $ctrl->getName() : null;
            if($ctrl && ($cp=$ctrl->getConfigPage())){
                $this->_loadSystemConfig();
                $this->_selectMenu($cp, IGKConfigCtrl::class);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function show_configuration_menu_setting(){
        $this->SelectedConfigCtrl=null;
        $this->setpage("configurationmenusetting", 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function show_phpinfo(){
        $this->SelectedConfigCtrl=null;
        $this->setpage("phpinfo", 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function show_serverinfo(){
        $this->SelectedConfigCtrl=null;
        $this->setpage("serverinfo", 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function showConfig(){
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function startconfig(){

        $q=base64_decode(igk_getr("q"));
        $ajx=igk_getr("ajx");
        $tab=igk_getquery_args($q);
        $u=(object)array("clLogin"=>$tab["u"], "clPwd"=>$tab["pwd"]);
        $v=$this->check_connect($u);
        if($v){
            $this->initTargetNode();
            $this->setConfigUser(igk_sys_create_user($u));
            $ctrl=igk_getctrl(igk_getv($tab, "selectedCtrl", IGK_CONF_CTRL));
            $p=igk_getv($tab, "selectPage", IGK_DEFAULT_VIEW);
            if($ctrl){
                $ctrl->showConfig();
            }
            else{
                $this->ShowConfig();
            }
            if(igk_getr("navigate", 1)){
                if(!$ajx){
                    $uri=igk_io_baseuri(igk_getv(explode('?', igk_getv($tab, "baseUri", igk_io_baseuri())), 0));
                    igk_navto($uri);
                    igk_exit();
                }
                else{
                    if($ctrl){
                        $ctrl->TargetNode->RenderAJX();
                    }
                }
            }
        }
        else{
            igk_notifyctrl()->addErrorr("err.failedtoconnect");
        }
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function test_send_mail(){
        $this->_send_notification_mail();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_adminpwd(){
        $d=igk_getr("passadmin");
        if($d && (strlen($d) >= IGK_MAX_CONFIG_PWD_LENGHT)){
            igk_app()->Configs->admin_pwd=md5($d);
            igk_save_config();
            igk_resetr();
            igk_notifyctrl(__FUNCTION__)->addSuccessr("msg.pwdupdated");
        }
        else{
            igk_notifyctrl(__FUNCTION__)->addErrorr("e.adminpwdnotupdated");
        }
        $this->View();
        igk_navtocurrent("/#adminpwd-form");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_default_tagname(){
        $s=igk_getr("cldefault_node_tagname", "div");
        if(!empty($s))
            igk_app()->Configs->app_default_controller_tag_name=$s;
        igk_save_config();
        igk_resetr();
        $this->View();
        igk_notifyctrl()->setNotifyHost(null);
        igk_notifyctrl()->addMsgr("msg.ConfigOptionsUpdated");
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_defaultlang(){
        $app=igk_app();
        $app->Configs->default_lang=igk_getr("cldefaultLang", "Fr");
        igk_save_config();
        igk_notifyctrl()->addMsgr("msg.update_defaultlang");
        $this->View();
        igk_navtocurrent('?l='.$app->Configs->default_lang);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_domain_setting(){
        $d=igk_getr("website_domain", IGK_DOMAIN);
        $title=igk_getr("website_title");
        $prefix=igk_getr("website_prefix");
        $app=igk_app();
        if($d && strlen($d) && igk_is_domain_name($d)){
            $app->Configs->website_domain=$d;
            IGKSubDomainManager::StoreBaseDomain($this, $d);
        }
        $app->Configs->website_title=$title;
        $app->Configs->website_prefix=$prefix;
        $app->Configs->website_adminmail=igk_getr("website_adminmail", null);
        $app->Configs->company_name=igk_getr("company_name");
        igk_io_save_file_as_utf8_wbom(igk_io_applicationdatadir()."/domain.conf", $d, true);
        igk_save_config();
        igk_notifyctrl(__FUNCTION__)->addSuccessr("msg.settingupdate");
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if(!$this->getIsVisible() || igk_get_env(IGK_KEY_VIEW_FORCED)){
            return;
		} 
        $data=$this->getEnvParam("CNFDATA", function(){
            $s="^/Configs(/:lang)?(".IGK_REG_ACTION_METH.")?(;(:options))?";
            $uri=igk_io_request_uri();
            $b=igk_sys_ac_create_pattern(null, $uri, $s);
            if($b->matche($uri)){
                return $b->getQueryParams();
            }
            return [];
        });
        if(isset($data["lang"]) && !empty($data["lang"])){
            igk_ctrl_change_lang($this, $data);
        }
        $this->setEnvParam("cnf_query_options", $data);
        if(($t=$this->getTargetNode()) == null){
            igk_die("target node for config not initialized");
        }
        if(is_string($t)){
            igk_die("bad for ".get_class($this));
        }
        $menuctrl=igk_getctrl(IGK_MENU_CTRL);
        $app=igk_app();
        $bbox=$app->Doc->body->addBodyBox();
        $bbox->ClearChilds();


        switch($app->CurrentPageFolder){
            case IGK_CONFIG_MODE:
				$app->Doc->body["class"]="-igk-client-page +igk-cnf-body +google-Roboto";
				igk_html_add($t, $bbox);
            break;
			default:
				$app->Doc->body["class"]="+igk-client-page -igk-cnf-body -google-Roboto";
            return;
        } 
	    $t->ClearChilds();
        if($this->getIsAvailable()){
            if(igk_agent_isie() && igk_agent_ieversion() < 7){
                $this->__NoIE6supportView();
                return;
            } 
            if ($f=igk_realpath($this->getStylesDir()."/config.pcss")){ 
                $app->Doc->Theme->addTempFile($f);
            }

            if(!$this->getIsConnected()){
                igk_io_protect_request(igk_io_baseuri()."/Configs");
                $cnode=$this->initConnexionNode();
                $t->addNotifyHost();
                $t["class"] = "+con-start";
                igk_html_add($cnode, $t);
                $this->setEnvParam(self::CONNEXION_FRAME, $cnode);
            }
            else{
                $menuctrl->setConfigParentView($this->getConfigMenuNode());
                $cnode=$this->getEnvParam(self::CONNEXION_FRAME);
                if($cnode){
                    igk_html_rm($cnode, true);
					$this->setEnvParam(self::CONNEXION_FRAME, null);
				}
                $this->setEnvParam(IGK_KEY_CSS_NOCLEAR, 1);
                $this->_include_view_file("config.layout");
                $this->setEnvParam(IGK_KEY_CSS_NOCLEAR, 0);
                $v_cctrl=$this->getSelectedConfigCtrl();

                if($v_cctrl === null){
                    $this->setpage();
                }
                else{
                    if(igk_get_env("sys://config/selectedview") !== $v_cctrl){
                        $tab=$this->getEnvParam("cnf_query_options");
                        $g=igk_pattern_view_extract($v_cctrl, $tab, 1); 
                        $v_cctrl->regSystemVars(array_merge(isset($g["c"]) ? [$g["c"]]: [], is_array($v_t=igk_getv($g, "param")) ? $v_t: []), igk_getv($g, "query_options"));
                        $v_cctrl->showConfig();
                    }
                }
            }
        }  
        $this->_onViewComplete(); 
    }
    ///<summary></summary>
    /**
    * 
    */
    public function viewLogs(){
        $log=igk_ilog_file();
        $d=igk_createnode("div");
        $d["class"]="logview";
        $d["style"]="max-height:420px; overflow:auto";
        if(file_exists($log)){
            $tab=explode(IGK_LF, igk_io_read_allfile($log));
            $dv=$d->addDiv();
            foreach($tab as $line){
                $dv->add("li")->Content=$line;
            }
        }
        else{
            $d->addPanel()->setClass("igk-danger")->Content=__("No log found");
        }
        if(igk_is_ajx_demand()){
            igk_ajx_notify_dialog(__("logs"), $d->render());
            igk_exit();
        }
        igk_wln_e("log view ");
    }
}

///<summary>Represente class: IGKControllerAndArticlesCtrl</summary>
/**
* Represente IGKControllerAndArticlesCtrl class
*/
final class IGKControllerAndArticlesCtrl extends IGKConfigCtrlBase {
    const SL_SELECTCONTROLLER=1;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
        $this->m_SelectedController=null;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    private function __updateview($ctrl){
        if($ctrl && $ctrl->getIsVisible()){
            if(($this->CurrentPageFolder == IGK_CONFIG_PAGEFOLDER) && igk_reflection_class_extends(get_class($ctrl), IGKConfigCtrlBase::class))
                $ctrl->showConfig();
            else
                $ctrl->View();
        }
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function __viewDefaultPageCtrl($t){
        $frm=$t->addForm();
        $frm->setId("view-default-form");
        $frm["action"]=$this->getUri("setdefaultpage");
        igk_html_add_title($frm, "title.defaultpagectrl");
        $ul=$frm->add('ul');
        $li=$ul->addLi();
        $sl=$li->add("select")->setClass("igk-form-control");
        $sl["id"]=
        $sl["name"]="clDefaultCtrl";
        $sl["onchange"]="javascript:window.igk.ajx.post('".$this->getUri('setdefaultpage_ajx&')."'+this.id+'='+this.value, null, null);";
        $ctrltab=igk_get_all_uri_page_ctrl();
        if(count($ctrltab) == 0){
            igk_app()->Configs->default_controller=null;
            $ul->addLi()->addspan()->Content=__("Warning.NoDefaultController");
        }
        else{
            $this->setup_defaultpage($ctrltab);
            $v_kn=strtolower(igk_app()->Configs->default_controller);
             foreach($ctrltab["@base"] as $k){
                $opt=$sl->add("option");
                $n=strtolower($k->Name);
                $opt["value"]=$k->Name;
                if($n == $v_kn){
                    $opt["selected"]="true";
                }
                $opt->Content=$k->getDisplayName();
            }
            $tt=$sl->addDiv();
            $tt["class"]="t";
            foreach($ctrltab["@templates"] as $k){
                $opt=$sl->add("option");
                $n=strtolower($k);
                $opt["value"]=$k;
                if($n == $v_kn){
                    $opt["selected"]="true";
                }
                $opt->Content=$k;
            }
        }
        $frm->addDiv()->add("noscript")->addInput("btn_add", "submit");
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function __viewMenuHostCtrl($t){
        $frm=$t->AddForm();
        $frm->setId("menuhost-form");
        $frm["action"]=$this->getUri("ca_setmenuhost");
        $tab=igk_sys_getuserctrls();
        if(igk_count($tab) == 0){
            $frm->add("div")->Content=__("msg.nocontroller.for.menu");
        }
        else{
            igk_html_add_title($frm, "lb.MenuHostCtrl");
            $sl=$frm->addUl()->addLi()->add("select")->setClass("igk-form-control");
            $sl->setId("clCtrlMenuHost");
            $sl["onchange"]="javascript:window.igk.ajx.post('".$this->getUri('ca_setmenuhost_ajx&')."'+this.id+'='+this.value, null, null);";
            $sl->add("option", array("value"=>IGK_STR_EMPTY))->Content=IGK_HTML_SPACE;
            $v_menuhost=igk_app()->Configs->menuHostCtrl;
            foreach($tab as $v){
                $opt=$sl->add("option", array("value"=>$v->getName()));
                if($v->getName() == $v_menuhost){
                    $opt["selected"]="true";
                }
                $opt->Content=$v->getDisplayName();
            }
            $frm->addDiv()->add("noscript")->addInput("btn_add", "submit");
        }
    }
    ///<summary></summary>
    ///<param name="file"></param>
    ///<param name="v_content"></param>
    ///<param name="property" default="null"></param>
    /**
    * 
    * @param mixed $file
    * @param mixed $v_content
    * @param mixed $property the default value is null
    */
    private function __write_article_for_tiny($file, $v_content, $property=null){
        if(empty($file))
            return false;
        $v_dummy=igk_createnode("dummy");
        $v_dummy->Load($v_content);
        if($v_dummy->HasChilds){
            if($property){
                if($property->RemoveImgSize){
                    $tab=$v_dummy->getElementsByTagName("image");
                    foreach($tab as $k){
                        $k->setAttributes([
                            "width"=>null,
                            "height"=>null]);
                        
                    }
                }
                $tab=$v_dummy->getElementsByTagName("*");
                if($property->RemoveStyles){
                    foreach($tab as $k){
                        $k["style"]=null;
                    }
                }
            }
            $s=null;
            if($v_dummy->ChildCount === 1){
                $s=igk_xml_create_render_option();
                $s->Indent=true;
                $s->ParentDepth=$v_dummy->Childs[0];
                if(get_class($s->ParentDepth) === "IGKHtmlText"){
                    igk_io_save_file_as_utf8($file, $s->ParentDepth->Render(null), true);
                }
                else
                    igk_io_save_file_as_utf8($file, $s->ParentDepth->getinnerHtml($s), true);
            }
            else{
                $s=igk_xml_create_render_option();
                $s->Indent=true;
                $s->ParentDepth=$v_dummy;
                igk_io_save_file_as_utf8($file, $s->ParentDepth->getinnerHtml($s), true);
            }
            return true;
        }
            igk_io_save_file_as_utf8($file, $v_content, true);
            return true;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="p"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $p
    */
    public function _buildAdditionalInfo($ctrl, $p){
        $d=null;
        $tab=null;
        if(is_object($ctrl)){
            $n=igk_sys_ctrl_type($ctrl);
            $d=igk_getv(IGKCtrlTypeManager::GetControllerTypes(), $n);
            if(method_exists($ctrl, "GetCustomConfigInfo")){
                $tab=$ctrl->GetCustomConfigInfo();
            }
        }
        else if(is_string($ctrl)){
            $d=igk_getv(IGKCtrlTypeManager::GetControllerTypes(), $ctrl);
        }
        if($d !== null){
            if ($h=call_user_func(array($d, "GetAdditionalConfigInfo"), array())){
                $tab=array_merge($h, $tab ?? array());
            }
        }
        if(is_array($tab)){
            $conf = $ctrl->Configs; 
            foreach($tab as $k=>$v){
                if(is_object($v)){
                    $li=$p->addLi();
                    $lb=$li->addLabel($k, __("lb.".$k));
                    if(igk_getv($v, "clRequire")){
                        $lb->setClass("clrequired");
                    }
                    $defaultv=igk_getv($conf, $k, igk_getv($v, "clDefaultValue"));
                    switch(strtolower($v->clType)){
                        case "select":
                        igk_html_build_select($li, $k, $v->clValues, null, $defaultv, null);
                        break;
                        case "file":
                        break;
                        case "bool":
                        $chk=$li->addInput($k, "checkbox", "1");
                        if($defaultv == 1)
                            $chk->activate('checked');
                        break;
                        default:
                        $li->addInput($k, "text", $defaultv); 
                        break;
                    }
                }
                else{
                    $p->addLi()->addSLabelInput($v, "text", igk_getv($conf, $v)); 
                }
            }
        }
    }
    ///<summary></summary>
    ///<param name="div"></param>
    ///<param name="ctrl" default="null"></param>
    /**
    * 
    * @param mixed $div
    * @param mixed $ctrl the default value is null
    */
    private function _buildViewArticle($div, $ctrl=null){
        $div->addDiv()->Content= "Not Implement: ".__FUNCTION__;
    }
    ///<summary>build adapter selection list</summary>
    /**
    * build adapter selection list
    */
    private function _ca_add_adapter($node, $k, $default=null, $nonevalue=false){
        $t=IGKDataAdapter::GetAdapters();
        $node->add("label", array("for"=>$k))->Content=__("lb.".$k);
        $sl=$node->addSelect("ctrl-adapter");
        $uri=$this->getUri("lst_adapter_ajx");
        $sl["onchange"]="javascript: ns_igk.ajx.get('{$uri}&t='+this.value,null, ns_igk.ajx.fn.replace_content( \$igk(this.parentNode).select('.igk-db-ad').getItemAt(0).o)); return false;";
        $sl["id"]=
        $sl["name"]=$k;
        foreach($t as $m=>$c){
            $opt=$sl->add("option");
            $opt["value"]=$m;
            if($m == $default)
                $opt["selected"]="true";
            $opt->Content=$m;
        }
        $node->addDiv()->setClass("igk-db-ad")->Content="";
    }
    ///<summary></summary>
    ///<param name="li"></param>
    ///<param name="name"></param>
    ///<param name="value" default="null"></param>
    ///<param name="showspace" default="true"></param>
    /**
    * 
    * @param mixed $li
    * @param mixed $name
    * @param mixed $value the default value is null
    * @param mixed $showspace the default value is true
    */
    private function _frm_tablevisiblectrl($li, $name, $value=null, $showspace=true){
        $tab=igk_sys_getuserctrls();
        if(count($tab) > 0){
            $li->addLabel()->Content=__("lb.parentctrl");
            $sel=$li->add("select");
            $sel["id"]=
            $sel["name"]=$name;
            $sel["class"]="igk-form-control";
            if($showspace)
                $sel->add("option", array("value"=>IGK_STR_EMPTY))->Content=IGK_HTML_SPACE;
            foreach($tab as $v){
                $opt=$sel->add("option", array("value"=>$v->getName()));
                $opt->Content=$v->DisplayName;
                if($value && !$value == $v->getName()){
                    $this->value=$v->getName();
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _getarticleid(){
        return $this->getName()."_articles";
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _getviewid(){
        $this->getName()."_views";
    }
    ///<summary></summary>
    ///<param name="col"></param>
    /**
    * 
    * @param mixed $col
    */
    private function _view_ctrl_EditCtrl($col){
        $frm=$col->addColViewBox()->addForm();
        $frm["action"]=$this->getUri("ca_drop_controller");
        igk_html_add_title($frm, "title.controllers");
        $select=$frm->addUl()->addLi()->add("select");
        $target=$this->TargetNode["id"];
        $uri=$this->getUri('select_controller_ajx&n=');
        $select["onchange"]="javascript: return \$ns_igk.ctrl.ca.editChange(this, '{$target}', '{$uri}');";
        $select["class"]="igk-form-control";
        $select["name"]=
        $select["id"]="controller";
        $tab =igk_sys_getuserctrls();
        $g = null;
        if ( ($ts = $this->SelectedController) && !($g = igk_getctrl($this->SelectedController, false))){
            $this->SelectedController = null;
        } 
        if(count($tab) > 0){
            foreach($tab as $v){
                if($g === null){
                    $this->SelectedController =$v->getName();
                    $g = $v;
                }
                $opt=$select->add("option", array("value"=>$v->getName()));
                if($v->getName() == $this->SelectedController)
                    $opt["selected"]="true";
                $opt->Content=$v->getDisplayName();
            }
            $dv=$frm->addDiv();
            $this->_view_ctrl_options($g, $dv);
        }
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="target"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $target
    */
    private function _view_ctrl_info($ctrl, $target){
        if($ctrl == null)
            return;
        $p=$target->addDiv();
        $p["class"]="igk-cnf-ctrl-info";
        $p->addDiv(array("class"=>"igk-cnf-selected-ctrl"))->Content=$this->SelectedController;
        $p->addDiv()->Content=__("Q.ISWEBPAGECTRL_1", igk_parsebools(igk_reflection_class_extends(get_class($ctrl), IGKDefaultPageController::class)));
        $p->addDiv()->Content=__("lb.CtrlType"). " : ". igk_sys_ctrl_type($ctrl);
        $p->addDiv()->Content=__("lb.Location_1", $ctrl->getDeclaredDir());
        $p->addBr();
        if(method_exists($ctrl, "getAppUri")){
            $dv=$p->addDiv();
            $appuri=$ctrl->getAppUri();
            if($appuri)
                $dv->addABtn($appuri)->Content= __("Visit");
        }
        $table=$p->addDiv()->setClass("fitw")->setStyle("overflow-x:auto")->addTable();
        $v_parent=igk_getctrl($ctrl->Configs->clParentCtrl);
        if($v_parent != null){
            $t=$table->addTr();
            $t->add("th")->Content= __("Parent");
            $t->add("th")->Content=IGK_HTML_SPACE;
            $tr=$table->addTr();
            $tr->addTd()->addLi()->add("a", array(
                "href"=>"#",
                "onclick"=>"javascript:window.igk.fn.config.select_ctrl(this, '".$this->TargetNode["id"]."', '".$this->getUri('select_controller_ajx&n='.$ctrl->Configs->clParentCtrl)."'); "
            ))->Content=$ctrl->Configs->clParentCtrl;
            IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"min-with:16px; min-height:16px;")), $this->getUri("ca_remove_parent&clCtrl=".$ctrl->getName()."&clParent=".$ctrl->Configs->clParentCtrl), "drop_16x16");
        }
        else{
            $tr=$table->addTr();
            $tr->add("td", array("colspan"=>2))->Content= __("No parent found");
        }
        $p->addBr();
        $table=$p->addDiv()->setClass("fitw")->setStyle("overflow-x:auto")->addTable();
        $table["class"]="fitw";
        $tr=$table->addTr();
        $tr->add("th")->Content= __("Childs");
        $tr->add("th")->Content= __("Index");
        $tr->add("th", array("style"=>"width:16px"))->addSpace();
        if(igk_count($ctrl->Childs) > 0){
            $tab=$ctrl->Childs;
            usort($tab, "igk_sort_byNodeIndex");
            foreach($tab as $k){
                $tr=$table->addTr();
                $tr->addTd()->add("a", array(
                    "href"=>IGK_JS_VOID,
                    "onclick"=>"javascript:window.igk.fn.config.select_ctrl(this, '".$this->TargetNode["id"]."', '".$this->getUri('select_controller_ajx&n='.$k->Name)."'); return false; "
                ))->Content=$k->Name;
                $tr->addTd()->Content=$k->TargetNode->Index;
                IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"min-with:16px; min-height:16px;")), $this->getUri("ca_remove_child&clParentCtrl=".$ctrl->Name."&clChild=".$k->Name), "drop_16x16");
            }
        }
        else{
            $tr=$table->addTr();
            $tr->add("td", array("colspan"=>3))->Content=__("msg.nochilds");
        }
        $p->addHSep();
        $table=$p->addDiv()->setClass("fitw")->setStyle("overflow-x:auto")->addTable();
        $tr=$table->addTr();
        $tr->add("th")->Content=__("lb.properties");
        $tr->add("th")->Content=__("lb.values");
        foreach($ctrl->Configs as $k=>$v){
            if($k == "clParentCtrl")
                continue;
            $tr=$table->addTr();
            $tr->addTd()->addLabel()->Content=__("lb.".$k);
            $tr->addTd()->addLabel()->Content=$v;
        }
        $div=$p->addDiv();
        $this->_view_ctrl_options($ctrl, $div);
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="dv"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $dv
    */
    private function _view_ctrl_options($ctrl, $dv){
        $dv["class"]="+c-opts";
        $bar = $dv->addActionBar();

        IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("ca_add_ctrl_frame_ajx")), "add_16x16")->setClass("igk-btn");
        IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("ca_edit_ctrl_ajx")), "edit_16x16")->setClass("igk-btn");
        IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("ca_edit_ctrl_properties_ajx")), "setting_16x16")->setClass("igk-btn");
        if($ctrl->CanEditDataTableInfo){
            IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("ca_edit_db_ajx")), "ico_db_16x16")->setClass("igk-btn");
        }
        if(igk_count(igk_db_get_ctrl_tables($ctrl)) > 0){
            IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("ca_reset_db_ajx")), "db_reset_16x16")->setClass("igk-btn");
        }

        // $bar->addAJXPickFile(
        //     $this->getUri("ca_update_ctrl"),
        //     json_encode([
        //         "accept"=>".zip"
        // ]))->setAttribute("value", "update")
        // ->setClass("igk-btn");
        if (class_exists(ZipArchive::class)){
            $btn = igk_html_installer_button($bar, 
                IGK\System\Installers\IGKBalafonProjectInstaller::class,
                __("Update Project"),
                "/update?controller=".urlencode(get_class($ctrl))
            );
            $btn->setClass("igk-btn");
        }
        IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("ca_ctrl_drop")), "drop_16x16")->setClass("igk-btn");
        $dv->div()->setId("update_target");
    } 
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function _view_default_tab($t){
        $t->addNotifyHost();
        $tv=$t->addRow();
        $this->__viewDefaultPageCtrl($tv->addCol("igk-col-4-2 igk-col-sm-3-3")->addDiv()->setClass("igk-col-view-box"));
        $this->__viewMenuHostCtrl($tv->addCol("igk-col-4-2 igk-col-sm-3-3")->addDiv()->setClass("igk-col-view-box"));
        $row=$t->addRow();
        $this->_view_ctrl_EditCtrl($row->addCol("igk-col-3-3"));
        $v_dv=$row->addCol("igk-col-3-3")->addDiv()->setClass("cnf-edit-view-result igk-row");
        $this->_viewCtrlEditResult($v_dv);
        if(igk_get_defaultwebpagectrl() == null){
            $_dv=$row->addCol("igk-col-3-3")->addDiv();
            $_box=$_dv->addActionBar();
            $_box->addAJXA("#")->setAttribute("onclick", igk_js_post_frame($this->getUri("ca_add_ctrl_frame_ajx"))." return false;")->Content=igk_svg_use("add");
        }
        $this->TargetNode->addScript()->Content=<<<EOF
window.igk.system.createNS("igk.fn.config", {select_ctrl: function(i, targetid, uri){var q = window.igk.getParentById(i, targetid ); window.igk.ajx.post(uri, null, function(xhr){  if (this.isReady()){ this.setResponseTo(q); var p = q.getElementsByTagName('select')[0]; p.focus(); }})}});
EOF;
    }
    ///<summary></summary>
    ///<param name="v_dv"></param>
    /**
    * 
    * @param mixed $v_dv
    */
    private function _viewCtrlEditResult($v_dv){
        if(!($c=$this->SelectedController))
            return;
        $txb=$v_dv->addCol("igk-col-3-3")->addColViewBox()->addComponent($this, "AJXTabControl", __METHOD__, 1);
        $suri=igk_register_temp_uri(__CLASS__)."/controller"; 
        $ctab=[
			"Info"=>(object)array("uri"=>$suri."/infotab", "tab"=>"infotab"),
			"View"=>(object)array("uri"=>$suri."/views", "tab"=>"views"),
			"Articles"=>(object)array("uri"=>$suri."/articles", "tab"=>"articles")
		];
        !empty($vtab=$this->getParam("tab:editresult")) || ($vtab="infotab");
        foreach($ctab as $k=>$v){
            $txb->addTabPage($k, $v->uri, $vtab == $v->tab);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function add_view(){
        $n=igk_getr(IGK_FD_NAME);
        $ctrl=$this->SelectedController;
        $content=trim(igk_getr("clContent"));
        $val=IGKValidator::Init();
        if(IGKValidator::IsStringNullOrEmpty($n)){
            $val->addLi()->Content="Name not defined";
        }
        if(empty($content)){
            $content .= "<?php\n";
            $content .= "// file: ".$n."\n";
            $content .= "// date: ".date("Ymd H:i:s")."\n";
            $content .= "// author : ".igk_sys_getconfig("script_author", IGK_AUTHOR)." \n";
            $content .= "// copyright : ".igk_sys_getconfig("script_copyright", IGK_COPYRIGHT)." \n";
            $content .= "// desc: \n";
            $content .= "\n\$t->clearChilds();\n";
        }
        if(!$val->HasChilds){
            $a=igk_getctrl($ctrl)->getViewDir();
            if(IGKIO::CreateDir($a)){
                $file=$a."/".$n.".".IGK_DEFAULT_VIEW_EXT;
                igk_io_save_file_as_utf8($file, igk_html_unscape($content), true);
            }
        }
        else{
            $this->msbox->copyChilds($this->val);
        }
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_add_article(){
        $ctrl=igk_getr("clCtrl");
        $name=igk_getr(IGK_FD_NAME);
        $content=igk_getr("clContent");
        $lang=igk_getr("clLang", igk_sys_getconfig("default_lang", "fr"));
        $e=igk_createnode("error");
        if(IGKValidator::IsStringNullOrEmpty($name)){
            $e->addLi()->Content="name not defined";
        }
        if(IGKValidator::IsStringNullOrEmpty($lang)){
            $e->addLi()->Content="Language not define";
        }
        if(!$e->HasChilds){
            $obj_ctrl=igk_getctrl($ctrl);
            if($obj_ctrl == null){
                die("not controller found");
            }
            $a=$obj_ctrl->getArticlesDir();
            IGKIO::CreateDir($a);
            $file=igk_io_get_article_file($name, $a, $lang);
            if($this->__write_article_for_tiny($file, igk_html_unscape($content))){
                igk_resetr();
                igk_setr("controller", $ctrl);
            }
            else{
                igk_notifyctrl()->addErrorr("err.filenotsaved");
            }
            igk_set_env("replace_uri", igk_io_request_uri_path());
        }
        else{
            $this->msbox->copyChilds($e);
        }
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_add_article_frame(){
        $ctrl=(($c=igk_getctrl(igk_getr("ctrlid", null), false)) != null) ? $c: $this->SelectedController;
        if($ctrl == null){
            igk_notifyctrl()->addMsg("no controller selected");
            return null;
        }
        $d=igk_createNode("div");
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("ca_add_article");
        $frm->addSLabelInput(IGK_FD_NAME);
        $frm->addBr();
        $lg=$this->m_selectedLang ? $this->m_selectedLang: "fr";
        $frm->addLabel()->Content=__("lb.currentlang", $lg);
        $frm->addInput("clLang", "hidden", $lg);
        $frm->addInput("clCtrl", "hidden", $ctrl->Name);
        $frm->addBr();
        $txt=$frm->addTextArea("clContent", null);
        igk_js_enable_tinymce($frm, 'exact', 'clContent');
        $frm->addHSep();
        $frm->addBtn("btn_save", __("btn.save"));
        if(igk_is_ajx_demand()){
            igk_ajx_panel_dialog(__("Add Article"), $d);
        }
        return $d;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_add_article_frame_ajx(){
        $frame=$this->ca_add_article_frame();
        if($frame){
            $frame->RenderAJX();
        }
    }
    ///<summary>add controller request</summary>
    /**
    * add controller request
    */
    public function ca_add_ctrl(){
        $this->ca_add_ctrl_frame_ajx();
    } 

    ///<summary></summary>
    /**
    * 
    */
    public function ca_add_ctrl_frame(){
        $frameid=__FUNCTION__."::Frame";
        if(igk_qr_confirm()){
            igk_frame_close($frameid);
            igk_ajx_panel_dialog_close();
            $this->ca_addCtrl();
            unset($frame);
            $this->view();
            igk_js_ajx_view_ctrl($this);
        }
        $frame=igk_html_frame($this, $frameid);
        $frame->Title=__("title.AddController");
        $frame->BoxContent->ClearChilds();
        $frm=$frame->BoxContent->addForm();
        $frm["action"]=$this->getUri("ca_add_ctrl");
        $nid=$this->TargetNode["id"];
        $js_change_func=<<<EOF
if (ns_igk.ctrl.ca_ctrl_change)
ns_igk.ctrl.ca_ctrl_change('{$this->getUri("ca_get_ctrl_type_info_ajx&n=")}', this);
EOF;
        $frm["onsubmit"]="javascript: window.igk.ajx.postform(this,'".$this->getUri("ca_add_ctrl_frame_ajx")."', ns_igk.ajx.fn.replace_or_append_to_body, false ); this.reset(); return false;";
        $frm->addDiv()->addNotifyHost('controller');
        $frm->addInput('notification', 'hidden', 'controller');
        $ul=$frm->add("ul")->setStyle("overflow-y:auto; max-height:300px");
        $ul->addLi()->addSLabelInput(IGK_FD_NAME, "text", null, null, true);
        $ul->addLi()->addSLabelInput("clDisplayName");
        $h=$ul->addLi()->addSLabelInput("clRegisterName");
        $h->input["tooltip"]=__("tooltip.controller.registername");
        $li=$ul->addLi();
        $li->add("label", array("for"=>"clCtrlType"))->Content=__("lb.ctrlType");
        $ul->addLi()->addSLabelInput("clOutFolder");
        $t=array_keys(IGKCtrlTypeManager::GetControllerTypes());
        sort($t);
        $sel=$li->addSelect("clCtrlType");
        foreach($t as $k=>$v){
            $opt=$sel->add("option");
            $opt->Content=$v;
            if($v == "DefaultPage"){
                $opt["selected"]=true;
            }
            $opt["value"]=$v;
        }
        $sel["onchange"]="javascript:{$js_change_func};";
        $p=$this->getParam("ca:view_frame");
        if($p == null){
            $p=$ul->addLi()->addDiv();
            $p->setId("view_frame");
            $p["class"]="igk-ctrl-additionnal-properties";
            $this->setParam("ca:view_frame", $p);
        }
        $p->ClearChilds();
        igk_html_add($p, $ul);
        $this->_ca_add_adapter($ul->addLi(), "clDataAdapterName", IGK_MYSQL_DATAADAPTER);
        $li=$ul->addLi();
        $li->addLabel("clDataSchema");
        $sl=$li->addSelect('clDataSchema');
        foreach(['true', 'false'] as $k){
            $op=$sl->addOption();
            $op["value"] = $k=='true'?1:0;
            $op->Content=__("enum.".$k);
            if($k == "false"){
                $op->setAttribute("selected", true);
            }
        }
        $this->_frm_tablevisiblectrl($ul->addLi(), "clParentCtrl");
        $ul->addLi()->addSLabelInput("clTargetNodeIndex");
        $ul->addLi()->addSLabelInput("clVisiblePages", 'text', "*");
        $ul->addLi()->addSLabelInput("clDescription");
        $frm->addHSep();
        $frm->addInput("confirm", "hidden", "1");
        $frm->addBtn("btn_add", __("btn.Add"));
        if(!igk_is_ajx_demand()){
            $u=igk_io_baseuri(IGK_BALAFON_JS_CORE_FILE);
            $frm->addScript()->setAttribute('src', $u);
        }
        $frm->addBalafonJS()->Content=<<<EOF
ns_igk.ready(
function(){
var r = \$igk(\$ns_igk.getParentScriptForm());
if (!r)return;
 (function(q){ if (!q)return;
 var p = q.select("#liPageName").getItemAt(0);
 var c = q.select("#clWebPage").getItemAt(0);
 if (c && p)
	c.reg_event("change",function(){ if (this.checked) p.css('display:block;'); else p.css('display:none'); });})(r);
	var q = (r).select("#clCtrlType").getItemAt(0);
	if (ns_igk.ctrl.ca_ctrl_change)
		ns_igk.ctrl.ca_ctrl_change('{$this->getUri("ca_get_ctrl_type_info_ajx&n=")}', q.o);
});
EOF;
        return $frame;
    }
    ///<summary>view add controller frame</summary>
    /**
    * view add controller frame
    */
    public function ca_add_ctrl_frame_ajx($renderframe=true){
        $frame=$this->ca_add_ctrl_frame();
        if($renderframe){
            igk_frame_close($frame->id);
            igk_ajx_panel_dialog(__("Add new Controller"), $frame->BoxContent);
        }
    }
    ///<summary>build a add view frame</summary>
    /**
    * build a add view frame
    */
    public function ca_add_view_frame(){
        $frame=igk_createnode("div");
        $d=$frame;
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("add_view");
        $frm->addSLabelInput(IGK_FD_NAME);
        $frm->addBr();
        $frm->addTextArea("clContent")->setClass("php-code")->setStyle("min-width: 360px; min-height:320px; padding: 4px;");
        $frm->addHSep();
        $frm->addBtn("btn_save", __("Save"));
        if(igk_is_ajx_demand()){
            igk_ajx_panel_dialog(__("Add view"), $frame);
        }
        else{
            igk_app()->Doc->body->addObData(function() use ($frame){igk_ajx_panel_dialog(__("Add view"), $frame);
            }
            , IGK_HTML_NOTAG_ELEMENT);
        }
        return $frame;
    }
    ///<summary>Request add controller</summary>
    /**
    * Request add controller
    */
    public function ca_addCtrl(){
        if(igk_qr_confirm() && $this->ConfigCtrl->getIsConnected()){
            $ctrl=igk_getctrl(IGK_CTRL_MANAGER);
            $g=0;
            $msg="msg.ctrl.notadded";
            $v_not=igk_notifyctrl(igk_getr("notification", 'controller'));
            if($ctrl->addControllerRequest(null, igk_getr("clWebPage", false), igk_getr("clParentCtrl", null))){
                $g=1;
                !igk_is_ajx_demand() && $v_not->addMsgr("msg.controlleradded");
                $msg="msg.ctrl.added";
            }
            else{
                !igk_is_ajx_demand() && $v_not->addErrorr("err.controllernotadded");
                $g=4;
            }
            igk_ajx_toast(__($msg), igk_css_type($g));
            igk_resetr();
            $this->setParam("ca:view_frame", null);
            $this->View();
            if(igk_is_ajx_demand()){
                igk_ajx_replace_ctrl_view($this);
                igk_exit();
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_addfield_ajx(){
        $c=$this->ca_getFieldInfo(IGKDbColumnInfo::NewEntryInfo());
        if($table=$this->getParam("ctrl:ca_tabInfo")){
            igk_html_add($c, $table);
        }
        igk_wln($c->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_ClearTableList_ajx(){
        $this->setParam("ctrl:ca_tabInfo", null);
        $f=igk_getctrl($this->SelectedController)->getDBConfigFile();
        if(file_exists($f))
            @unlink($f);
        igk_wl($this->ca_getTableInfo()->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_ctrl_article_select_lang_ajx(){
        $ctrl=igk_getctrl(igk_getr("ctrl"), false);
        $this->m_selectedLang=igk_getr("n");
        $div=igk_createnode("div");
        $this->_buildViewArticle($div, $ctrl);
        igk_wl($div->innerHTML);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_ctrl_drop(){
        $this->ca_drop_controller_ajx($this->SelectedController);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_db_drop_db_file_ajx(){
        $f=igk_getctrl($this->SelectedController)->getDBConfigFile();
        if(file_exists($f)){
            unlink($f);
            $this->View();
            igk_frame_close("add_edit_db_frame");
        }
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_download_view(){
        $n=igk_getr("n");
        $ctrl=$this->SelectedController;
        if(($ctrl == null) || !isset($n))
            return null;
        $f=igk_io_dir(igk_getctrl($ctrl)->getViewDir()."/".$n);
        if(file_exists($f)){
            igk_download_file(basename($f), $f);
            igk_exit();
        }
    }
    ///<summary>drop article in ajx request</summary>
    /**
    * drop article in ajx request
    */
    public function ca_drop_article_ajx(){
        $n=base64_decode(igk_getr("n"));
        $ctrl=($c=igk_getr("ctrlid", null)) ? igk_getctrl($c): $this->SelectedController;
        $f= igk_realpath($n);
        $_FRAMENAME="frame_".__FUNCTION__;
        if(!file_exists($f)){
            if(($ctrl == null) || !isset($n)){
                igk_notifyctrl()->addErrorr("err.nocontroller.selected");
                igk_notifyctrl()->TargetNode->RenderAJX();
                igk_notifybox_ajx("controller not selected");
                return null;
            }
            $f=igk_io_dir(igk_getctrl($ctrl)->getArticlesDir()."/".$n);
        }
        if(file_exists($f)){
            if(igk_qr_confirm()){
                unlink($f);
                $this->View();
                if(igk_is_ajx_demand()){
                    igk_ajx_replace_ctrl_view($this);
                }
            }
            else{
                $frame=igk_frame_add_confirm($this, $_FRAMENAME, $this->getUri("ca_drop_article_ajx"));
                $frame->Form->Div->Content=__(IGK_MSG_DELETEFILE_QUESTION, basename($n));
                $frame->Form["igk-confirmframe-response-target"]=strtolower($ctrl);
                $frame->Form->addInput("n", "hidden", base64_encode($n));
                $frame->Form->addInput("navigate", "hidden", igk_getr("navigate"));
                $frame->Form->addInput("ctrlid", "hidden", $ctrl ? $ctrl->Name: null);
                $frame->RenderAJX();
            }
        }
        else{
            igk_notifyctrl()->addInfor("msg.ca_drop_article_ajx_no_article_to_remove");
            igk_notifyctrl()->TargetNode->RenderAJX();
        }
    }
    ///<summary></summary>
    ///<param name="ctrl" default="null"></param>
    ///<param name="reconnect" default="1"></param>
    /**
    * 
    * @param mixed $ctrl the default value is null
    * @param mixed $reconnect the default value is 1
    */
    public function ca_drop_controller_ajx($ctrl=null, $reconnect=1){
        $a=$ctrl ? $ctrl: (($ctrl=igk_getr("clController")) ? $ctrl: igk_getr("n"));
        if($a){
            $ctrl=igk_getctrl($a, false);
            if($ctrl == null)
                return;
            $is_ajx=igk_is_ajx_demand();
            if(igk_qr_confirm()){
                if($ctrl->canDelete){
                    $uri=igk_getconfigwebpagectrl()->getReconnectionUri();
                    if(igk_getctrl(IGK_CTRL_MANAGER)->removeCtrl($a)){
                        $this->SelectedController=null;
                        $this->View();
                        $ctrl=igk_getconfigwebpagectrl();
                        if($is_ajx){
                            $doc=igk_get_last_rendered_document();
                            if($doc === null)
                                $doc=igk_app()->Doc;
                            if(defined('IGK_CONFIG_PAGE'))
                                igk_getconfigwebpagectrl()->View();
                            $doc->body->RenderAJX();
                            igk_exit();
                        }
                        else if($reconnect){
                            $ctrl->ClearSessionAndReconnect(false);
                        }
                    }
                    else{
                        igk_ilog("drop the controlleur failed : ".$a, __FUNCTION__);
                    }
                }
                else{
                    $this->msbox->addErrorr("err.dropctrlfailed");
                }
            }
            else{
                $d=igk_createnode("div");
                $d->addDiv()->Content=__(IGK_MSG_DELETECTRL_QUESTION, $a);
                $frm=$d->addForm();
                $frm["action"]=$this->getUri("ca_drop_controller_ajx");
                $frm->addInput("clController", "hidden", $a);
                $frm->addInput("forceview", "hidden", igk_getr("forceview", null));
                if(igk_is_ajx_demand()){
                    $frm->addInput("ajx", "hidden", 1);
                }
                $b=$frm->addDiv();
                $b->addInput("yes", "submit", __("btn.yes"));
                $b->addInput("no", "button", __("btn.no"));
                $frm->addConfirm();
                $frm->addToken();
                igk_ajx_notify_dialog(__("title.dropController"), $d);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_drop_view(){
        $n=igk_getr("n");
        $ctrl=$this->SelectedController;
        if(($ctrl == null) || !isset($n))
            return null;
        $f=igk_io_dir(igk_getctrl($ctrl)->getViewDir()."/".$n);
        if(file_exists($f)){
            if(igk_qr_confirm()){
                if(file_exists($f))
                    unlink($f);
                $this->View();
                if(igk_is_ajx_demand()){
                    igk_ajx_panel_dialog_close();
                    igk_ajx_replace_ctrl_view($this);
                    igk_exit();
                }
            }
            else{
                $frame=igk_createNode("div");
                $form=$frame->add("form");
                $form["action"]=$this->getUri("ca_drop_view");
                $form->addDiv()->Content=__(IGK_MSG_DELETEFILE_QUESTION, $n);
                $form->addInput("n", "hidden", $n);
                $form->addInput("confirm", "hidden", 1);
                igk_frame_bind_action($form->addActionBar(), 0);
                if(igk_is_ajx_demand()){
                    $form["igk-ajx-form"]=1;
                    igk_ajx_panel_dialog(__("Confirm"), $frame);
                    return;
                }
            }
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_dropfield(){
        $n=igk_getr("n");
        $table=$this->getParam("ctrl:ca_tabInfo");
        $tr=$table->getElementByAttribute("__id", $n);
        if($tr){
            igk_html_rm($tr);
        }
    }
    ///<summary> edition d'article simple par une demande ajax</summary>
    /**
    *  edition d'article simple par une demande ajax
    */
    public function ca_edit_article_ajx($ctrlid=null, $name=null){
        $ajx=0;
        $f="";
        $n="";
        $f=base64_decode(igk_getr("fn"));
        $ctrlid=$ctrlid ?? igk_getr("ctrlid");
        $ctrl=igk_getctrl($ctrlid);
        $f=file_exists($f) ? $f: $ctrl->getArticle($f);
        if(file_exists($f)){
            $str=igk_io_read_allfile($f);
            $t=igk_createnode("div");
            $t->addDiv()->Content= "Path: ".igk_io_basepath(igk_io_basedir($f));
            $frm=$t->addForm();
            $frm["action"]=$this->getUri("update_article".(($ajx == 1) ? null: "#".$this->_getarticleid()));
            $ul=$frm->add("ul");
            $ul["class"]="fitw";
            $ul->addLi()->addTextArea("clContent", $str)->setClass("igk-text-editor");
            $txt["class"]="fitw tyni";
            $frm->addInput("clfile", "hidden", base64_encode(urlencode($f)));
            $frm->addInput("navigate", "hidden", igk_getr("navigate", 0));
            $frm->addInput("ajx", "hidden", 1);
            $frm->addInput("cluri", "hidden", igk_getv($_SERVER, 'HTTP_REFERER'));
            $frm->addActionBar()->addInput("btn.edit", "submit", __("btn.edit"));
            igk_js_enable_tinymce($ul, "textarea#clContent");
            igk_ajx_panel_dialog(__("title.edit_1", basename($f)), $t);
           
        }
        else{
            igk_ajx_panel_dialog(__("Edit"), __("File not found: {0}", $f));
        }
        igk_exit();
    }
    ///<summary> create d'un FrameDialog pour l'Ã©dition d'article </summary>
    ///<params>
    ///$ctrlid: controller ou id du controller
    ///$name: nom ou chemin d'accÃ¨ss au fichier
    ///$ajx:  s'il s'agit d'un context ajax ou nom
    ///$mode: si mode = 1 alors le name un le chemin d'accÃ¨s complet au fichier sinon il s'agit du nom dans le repertoire Articles du controlleur
    ///$force: force creation if not exists
    ///</params>
    /**
    *  create d'un FrameDialog pour l'Ã©dition d'article
    */
    public function ca_edit_article_frame($ctrlid=null, $name=null, $ajx=0, $mode=0, $force=false){
        $ctrl=igk_getctrl($ctrlid ? $ctrlid: igk_getr("ctrlid"), false);
        $n=$name ? $name: igk_getr("n");
        $f=igk_realpath(base64_decode($n));
        if(!file_exists($f)){
            if(($ctrl == null) || !isset($n))
                return null;
            if($mode == 0)
                $f=igk_io_dir($ctrl->getArticlesDir()."/".$n);
        }
        if($force || file_exists($f)){
            $articleid=$this->_getarticleid();
            $frame=igk_html_frame($this, "frame_edit_article", $ajx == 1 ? null: "#".$articleid);
            $frame->ClearChilds();
            $frame->Title=__("title.editarticle_1", basename($f));
            $str=IGKIO::ReadAllText($f);
            $d=$frame->BoxContent;
            $frm=$d->addForm();
            $frm["action"]=$this->getUri("update_article".(($ajx == 1) ? null: "#".$articleid));
            $ul=$frm->add("ul");
            $txt=$ul->addLi()->addTextArea("clContent", $str);
            $txt["class"]="frame_textarea";
            $frm->addInput("clfile", "hidden", base64_encode(urlencode($f)));
            $frm->addInput("clframe", "hidden", $frame["id"]);
            $frm->addInput("clctrl", "hidden", $ctrl ? $ctrl->Name: null);
            $frm->addBtn("btn_update", __("Update"))->setClass("igk-btn igk-btn-default");
            $frame->Form=$frm;
            return $frame;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="ctrlid" default="null"></param>
    ///<param name="name" default="null"></param>
    /**
    * 
    * @param mixed $ctrlid the default value is null
    * @param mixed $name the default value is null
    */
    public function ca_edit_articlewtiny_f_ajx($ctrlid=null, $name=null){
        $n=$name ? $name: igk_getr("n", igk_getr("fn"));
        $frame=$this->ca_edit_articlewtiny_f_frame($ctrlid, $n, 1, igk_getr("m", 0), igk_getr("fc"));
        if($frame){
            igk_ajx_notify_dialog(__("title.editarticlewtiny_1", basename(base64_decode($n))), $frame->Render(null));
        }
        else{
            igk_ilog(__METHOD__." with tiny failed to create frame");
            igk_ilog(igk_ob_get($_REQUEST));
            igk_ilog(base64_decode(igk_getr("fn")));
        }
    }
    ///<summary></summary>
    ///<param name="ctrlid" default="null"></param>
    ///<param name="name" default="null"></param>
    ///<param name="ajx"></param>
    ///<param name="mode"></param>
    ///<param name="force" default="false"></param>
    /**
    * 
    * @param mixed $ctrlid the default value is null
    * @param mixed $name the default value is null
    * @param mixed $ajx the default value is 0
    * @param mixed $mode the default value is 0
    * @param mixed $force the default value is false
    */
    public function ca_edit_articlewtiny_f_frame($ctrlid=null, $name=null, $ajx=0, $mode=0, $force=false){
        $ctrl=igk_getctrl($ctrlid ? $ctrlid: igk_getr("ctrlid"), false);
        $n=$name ? $name: igk_getr("n");
        if((($mode == 0) && ($ctrl === null)) || !isset($n)){
            igk_ilog("not set");
            return null;
        }
        if($mode == 0)
            $f=igk_io_dir($ctrl->getArticlesDir()."/".$n);
        else
            $f=base64_decode($n);
        if($force || file_exists($f)){
            $str=IGKIO::ReadAllText($f);
            $frm=igk_createnode('form');
            $frm["action"]=$this->getUri("ca_update_articlewtiny_f");
            $ul=$frm->add("ul");
            $ul->addLi()->addSLabelInput("clRemoveStyles", "checkbox");
            $ul->addLi()->addSLabelInput("clRemoveImgSize", "checkbox");
            $ul->addLi()->addTextArea("clContent", $str);
            igk_js_enable_tinymce($ul, "clContent");
            $frm->addInput("clfile", "hidden", base64_encode(urlencode($f)));
            $frm->addInput("clframe", "hidden", 'frame_edit_article');
            if($ctrl)
                $frm->addInput("clctrl", "hidden", $ctrl->Name);
            $frm->addBtn("btn_update", __("Update"));
            return $frm;
        }
        return null;
    }
	public function ca_edit_articlewtiny(){

		$q = igk_getr("q");
		$h = igk_html_uri(IGK_APP_DIR.base64_decode($q));




		if (file_exists($h)){

			if (igk_server()->method("POST")){
				if (igk_getr("btn_save")){

					igk_header_set_contenttype("txt");
					// igk_wln_e(igk_getr("content"));
					igk_io_w2file($h, igk_getr("content"));
					igk_navto_referer();
				}
			}


			$frm = igk_createnode('form');
			$frm["action"] = $this->getUri(__FUNCTION__);
			$frm["method"] = "POST";
			igk_html_form_initfield($frm);
			$frm->addFields([
				"q"=>["value"=>$q,"type"=>"hidden"],
				"content"=>["value"=> file_get_contents($h),"type"=>"textarea"]
			]);
			$acbar = $frm->addActionBar();
			$acbar->addInput("btn.save", "submit", __("Save"));
			igk_js_enable_tinymce($frm, "#content");
			igk_ajx_panel_dialog(__("Edit"), $frm);
		}

	}
    ///<summary></summary>
    ///<param name="ctrlid" default="null"></param>
    ///<param name="name" default="null"></param>
    ///<param name="ajx"></param>
    ///<param name="mode"></param>
    /**
    * 
    * @param mixed $ctrlid the default value is null
    * @param mixed $name the default value is null
    * @param mixed $ajx the default value is 0
    * @param mixed $mode the default value is 0
    */
    public function ca_edit_articlewtiny_frame($ctrlid=null, $name=null, $ajx=0, $mode=0){
        $ctrl=igk_getctrl($ctrlid ? $ctrlid: igk_getr("ctrlid"), false);
        $n=$name ? $name: igk_getr("n");
        if(($ctrl == null) || !isset($n))
            return null;
        if($mode == 0)
            $f=igk_io_dir($ctrl->getArticlesDir()."/".$n);
        else
            $f=base64_decode($n);
        if(file_exists($f)){
            $articleid=$this->_getarticleid();
            $frame=igk_html_frame($this, "frame_edit_article", $ajx == 1 ? null: "#".$articleid);
            $frame->ClearChilds();
            $frame->Title=__("title.editarticlewtiny_1", basename($f));
            $str=IGKIO::ReadAllText($f);
            $d=$frame->BoxContent;
            $frm=$d->addForm();
            $frm["action"]=$this->getUri("update_articlewtiny".(($ajx == 1) ? null: "#".$articleid));
            $ul=$frm->add("ul");
            $ul->addLi()->addSLabelInput("clRemoveStyles", "checkbox");
            $ul->addLi()->addSLabelInput("clRemoveImgSize", "checkbox");
            $ul->addLi()->addTextArea("clContent", $str);
            igk_js_enable_tinymce($ul, "clContent");
            $frm->addInput("clfile", "hidden", base64_encode(urlencode($f)));
            $frm->addInput("clframe", "hidden", $frame["id"]);
            $frm->addInput("clctrl", "hidden", $ctrl->Name);
            $frm->addBtn("btn_update", __("Update"));
            return $frame;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="oldcontent" default="null"></param>
    /**
    * 
    * @param mixed $oldcontent the default value is null
    */
    public function ca_edit_ctrl_ajx($oldcontent=null){
        $name=igk_getr("n", null);
        $ctrl=$name == null ? igk_getctrl($this->SelectedController, false): igk_getctrl($name, false);
        if($ctrl == null)
            return null;
        $f=igk_io_dir($ctrl->getDeclaredFileName());
        if(file_exists($f)){
            $frame=igk_html_frame($this, "frame_edit_ctrl", ".");
            $frame->ClearChilds();
            $frame->Title=__("title.editctrl", basename($f));
            $str=null;
            if(!$oldcontent)
                $str=IGKIO::ReadAllText($f);
            $d=$frame->BoxContent;
            $frm=$d->addForm();
            $frm["action"]=$this->getUri("update_ctrl". ($name == null ? IGK_STR_EMPTY: "&n=".$name));
            if($oldcontent){
                $frm->add("div", array("class"=>"notification_bad"))->Content= __("Old Content is not defined");
            }
            $ul=$frm->add("ul");
            $v_txtarea=$ul->addLi()->addDiv()->setClass("fitw overflow-x-a")->addTextArea("clContent", ($oldcontent == null) ? $str: $oldcontent)->setClass("igk-php-code")->setAttribute("spellcheck", "false");
            $frm->addInput("clfile", "hidden", base64_encode(urlencode($f)));
            $frm->addInput("clframe", "hidden", $frame["id"]);
            $frm->addHSep();
            $frm->addBtn("btn_update", __("Update"));
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    ///<param name="rendering" default="true"></param>
    /**
    * 
    * @param mixed $rendering the default value is true
    */
    public function ca_edit_ctrl_atricles_ajx($rendering=true){
        $frame_name="ca_edit_ctrl_atricles_ajx_frame";
        $frame=igk_html_frame($this, $frame_name);
        $p=$frame->ForCtrl;
        $n=igk_getr("n", $p ? $p->Name: null);
        $ctrl=igk_getctrl($n);
        if($ctrl == null){
            $frame->ForCtrl=null;
            $frame->IsRegister=null;
            igk_frame_close($frame_name);
            return;
        }
        $frame->Title=__("title.editctrlaticles_1", $ctrl->Name);
        $frame->CloseUri=$this->getUri("unreg_view_frame");
        $c=$frame->BoxContent;
        $c->ClearChilds();
        $d=$c->addDiv();
        $this->_buildViewArticle($d, $ctrl);
        $t=$frame->IsRegister;
        if(!$t){
            $t=true;
            $frame->IsRegister=$t;
            $ctrl->addViewCompleteEvent($this, "view_frame_complete");
        }
        if($rendering)
            $frame->RenderAJX();
        $frame->ForCtrl=$ctrl;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_edit_ctrl_force_view_ajx(){
        $n=igk_getctrl(igk_getr("n"));
        if($n){
            igk_ajx_replace_ctrl_view($n);
        }
    }
    ///<summary></summary>
    ///<param name="render" default="true"></param>
    /**
    * 
    * @param mixed $render the default value is true
    */
    public function ca_edit_ctrl_properties_ajx($render=true){
        $name=igk_getr("n", null);
        $ctrl=$name == null ? igk_getctrl($this->SelectedController, false): igk_getctrl($name, false);
        if($ctrl == null)
            return null; 
        $title=__("title.editctrl.properties_1", $ctrl->Name);
        $frm=igk_createnode('form');
        $frm["action"] = $this->getUri("ca_update_ctrl_properties". ($name == null ? IGK_STR_EMPTY: "&n=".$name));        
        $ul=$frm->addDiv()->setClass("igk-v-h")->setStyle("max-height:200px; overflow-y:auto;")->add("ul");
        $d =igk_sys_getdefaultctrlconf();
        $v_itab=null;
        $v_classname=get_class($ctrl);
        if(method_exists($v_classname, "GetNonConfigurableConfigInfo")){
            $v_itab=igk_array_tokeys(call_user_func_array(array($v_classname, "GetNonConfigurableConfigInfo"), array()));
        } 

        foreach(array_keys($d) as $k){
            if(isset($v_itab[$k]))
                continue;
            $vv=igk_getv($ctrl->Configs, $k);
            switch(strtolower($k)){
                case "clparentctrl":
                $t=igk_getctrl(IGK_MENU_CTRL)->__getEditController($ul, $vv, "lb.parentcontroller", $this->SelectedController);
                $t->setId($k);
                break;
                case "cldataadaptername":
                $li=$ul->addLi();
                $this->_ca_add_adapter($li, $k, $vv);
                break;
                case "cldataschema":
                $li=$ul->addLi();
                $li->add("label", array("for"=>$k))->Content=__("lb.".$k);
                $sl=$li->addSelect($k);
                foreach(["enum.false"=>0, "enum.true"=>1] as $ck=>$cv){
                    $opt = $sl->addOption();
                    $opt->setAttribute("value", $cv);
                    $opt->Content = __($ck);
                    if ($vv == $cv){
                        $opt->setAttribute("selected", true);
                    }
                }
                // $sl->addOption()->setAttribute("value", 0)->Content=__("enum.false");
                // $sl->addOption()->setAttribute("value", 1)->Content=__("enum.true");
                break;
                default:
                $li=$ul->addLi();
                $li->add("label", array("for"=>$k))->Content=__("lb.".$k);
                $li->addInput($k, "text", $vv);
                break;
            }
        }
        $this->_buildAdditionalInfo($ctrl, $ul);
        $frm->addHSep();
        $frm->addBtn("btn_update", __("Update"))->setClass("igk-btn");
        if($render)
            igk_ajx_panel_dialog($title, $frm);
        return $frm;
    }
    ///<summary></summary>
    ///<param name="render" default="true"></param>
    /**
    * 
    * @param mixed $render the default value is true
    */
    public function ca_edit_ctrl_views_ajx($render=true){
        igk_die(__METHOD__);
        // $frame = null;
        // $fid="ca_edit_ctrl_views_ajx_frame";
        // $p=$frame->ForCtrl;
        // $ctrl=igk_getctrl(igk_getr("n", $p ? $p->Name: null), false);
        // $title=__("title.editcontrollerviews_1", $ctrl->Name);
        // $c=igk_createnode("div");
        // $this->loader->view("tab.views", ["t"=>$c->addDiv(), "ctrl"=>$ctrl]);
        // if($render)
        //     igk_ajx_notify_dialog($title, $c->Render(null));
        // return $frame;
    }
    ///<summary>request edit data table structures with ajx </summary>
    /**
    * request edit data table structures with ajx
    */
    public function ca_edit_db_ajx($ctrl=null, $table=null){
        $ctrl=$ctrl == null ? igk_getctrl($this->SelectedController): $ctrl;
        if($ctrl == null)
            return;
        $t=$this->ca_getTableInfo($ctrl, $table);
        if($t == null)
            return;
        $table=$table == null ? $ctrl->DataTableName: $table;
        $frame=igk_html_frame($this, "add_edit_db_frame", $table ? $this->getUri("ca_edit_db_close_frame&db_tbr=".$table): null);
        $frame->Title=__("title.editdbArticle", $ctrl);
        $d=$frame->BoxContent;
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("ca_update_dbdata");
        $div=$frm->addDiv();
        $div["style"]="max-width:824px; max-height:400px; min-height: 200px;  overflow:auto;";
        $ul=$div->add("ul");
        $ul->Index=-10;
        $ul->addLi()->addSLabelInput("clTableName", "text", $table);
        $div->addHSep();
        $div->addDiv()->setClass("fitw overflow-x-a")->add($t);
        $frm->addHSep();
        $div=$frm->addDiv();
        $a=IGKHtmlUtils::AddImgLnk($div, "#", "add_16x16");
        $a["onclick"]=igk_js_ajx_post_auri($this->getUri("ca_addfield_ajx"), "window.igk.ctrl.ca_update");
        $a=IGKHtmlUtils::AddImgLnk($div, "#", "drop_16x16");
        $a["onclick"]=igk_js_ajx_post_auri($this->getUri("ca_ClearTableList_ajx"), "window.igk.ctrl.ca_updatetable");
        $frm->addInput("btn.update", "submit", __("Update"));
        $f=$ctrl->getDBConfigFile();
        if(file_exists($f)){
            $frm->addInput("btn.update", "button", __("btn.dropdb"))->setAttribute("onclick", igk_js_ajx_post_auri("ca_db_drop_db_file_ajx"));
        }
        igk_wl($frame->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_edit_db_close_frame(){
        $table=igk_getr("db_tbr");
        $key="ctrl:ca_tabInfo".($table ? "/".$table: "");
        $this->setParam($key, null);
    }
    ///<summary>edit controller view</summary>
    ///<param name="oldcontent" default="null">the old content</param>
    ///<param name="errormesage" default="null">error message</param>
    ///<param name="error" default="null"></param>
    /**
    * edit controller view
    * @param mixed $oldcontent the default value is null
    * @param mixed $errormesage the default value is null
    * @param mixed $error the default value is null
    */
    public function ca_edit_view($oldcontent=null, $errormesage=null, $error=null){
        $ctrl=igk_getctrl($this->SelectedController, false);
        $n=igk_getr("n");
        if(($ctrl == null) || !isset($n))
            return null;
        $f=igk_io_dir($ctrl->getViewDir()."/".$n);
        if(file_exists($f)){
            $frame=igk_html_frame($this, "frame_edit_view", "#".$this->_getviewid());
            $frame->ClearChilds();
            $frame->Title=__("title.editview_1", basename($f));
            $str=null;
            if(!$oldcontent)
                $str=utf8_decode(IGKIO::ReadAllText($f));
            $d=$frame->BoxContent;
            $frm=$d->addForm();
            $frm["action"]=$this->getUri("ca_update_view#".$this->_getviewid());
            if($error){
                $frm->add("div", array("class"=>"notification_bad"))->Content="Somme Error Append When try to save the file: <br/ >". $errormesage."<br/>".$oldcontent;
            }
            $k=($oldcontent == null) ? $str: $oldcontent;
            $ul=$frm->add("ul");
            $area=$ul->addLi()->addTextArea("clContent", $k);
            $area["style"]="width: 400px; min-height: 300px;";
            $frm->addInput("clfile", "hidden", base64_encode(urlencode($f)));
            $frm->addInput("clframe", "hidden", $frame["id"]);
            $frm->addInput("n", "hidden", $n);
            $frm->addHSep();
            $frm->addBtn("btn_update", __("Update"));
            $frm->Width="400px";
            $frm->Height="300px";
            if(igk_is_ajx_demand()){
                igk_ajx_panel_dialog(__("title.editview_1", basename($f)), $frame->BoxContent);
            }
            else{
                igk_navtocurrent();
            }
            return $frame;
        }
    }
    ///<summary>get controller type addition info</summary>
    /**
    * get controller type addition info
    */
    public function ca_get_ctrl_type_info_ajx(){
        $p=$this->getParam("ca:view_frame");
        $n=igk_getr("n");
        if($p != null){
            $p->ClearChilds();
            $this->_buildAdditionalInfo($n, $p);
            $p->RenderAJX();
        }
        else{
            igk_notifybox_ajx("no [ca:view_frame] setup");
        }
    }
    ///<summary></summary>
    ///<param name="info"></param>
    /**
    * 
    * @param mixed $info
    */
    public function ca_getFieldInfo($info){
        $tr=igk_createnode("tr");
        $tr["__id"]=igk_new_id();
        $tr->addTd()->Content=IGK_HTML_SPACE;
        foreach($info as $v=>$k){
            $td=$tr->addTd();
            switch(strtolower($v)){
                case "clisunique":
                case "clautoincrement":
                case "clisprimary":
                case "clisindex":
                case "clnotnull":
                case "clisuniquecolumnmember":
                case "clisnotinqueryinsert":
                $c=$td->add("div", array("class"=>"dispb fitw", "style"=>"text-align:center;"))->addInput("__cl".$v."[]", "checkbox", null, array("onchange"=>"javascript:(function(q){window.igk.ctrl.ca_update_checkchange(q, '".$v."[]');})(this);"));
                if($k)
                    $c["checked"]="true";
                $td->addInput($v."[]", "hidden", $k);
                break;
                case "cltype":
                igk_html_build_select($td, $v."[]", IGKdbColumnDataType::GetDbTypes(), null, $k);
                break;default:
                $i=$td->addInput($v."[]", "text", $k);
                $i["class"]="-cltext";
                $i["style"]="max-width:125px;";
                break;
            }
        }
        IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("ca_dropfield&n=".$tr["__id"]), "drop_16x16");
        return $tr;
    }
    ///<summary>retrieve data table info</summary>
    ///<param name="ctrl" default="null">controller table</param>
    ///<param name="table" default="null">table name</param>
    /**
    * 
    * @param mixed $ctrl the default value is null
    * @param mixed $table the default value is null
    */
    public function ca_getTableInfo($ctrl=null, $table=null){
        $key="ctrl:ca_tabInfo".($table ? "/".$table: "");
        $t=$this->getParam($key);
        $tb=null;
        if($t != null)
            return $t;
        else
            $tb=igk_createnode("table");
        $ctrl=$ctrl == null ? igk_getctrl($this->SelectedController): $ctrl;
        $tr=$tb->addTr();
        $t=IGKDbColumnInfo::GetColumnInfo();
        $tr->add("th")->Content=IGK_HTML_SPACE;
        foreach($t as $v=>$k){
            $tr->add("th")->Content=__("lb.".$v);
        }
        $tr->add("th")->Content=IGK_HTML_SPACE;
        if($table == null){
            if(file_exists($ctrl->getDBConfigFile())){
                $tab=$ctrl->getDataTableInfo();
                foreach($tab as $k){
                    $tb->add($this->ca_getFieldInfo($k));
                }
            }
            else{
                $info=IGKDbColumnInfo::NewEntryInfo();
                $info->clIsPrimary=true;
                $tb->add($this->ca_getFieldInfo($info));
            }
        }
        else{
            $inf=igk_db_get_table_info($table);
            if(isset($inf["ColumnInfo"]))
                $inf=$inf["ColumnInfo"];
            foreach($inf as $k){
                $tb->add($this->ca_getFieldInfo($k));
            }
        }
        $this->setParam($key, $tb);
        return $tb;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_remove_child(){
        $ctrl=igk_getctrl(igk_getr("clParentCtrl"));
        $p=igk_getctrl(igk_getr("clChild"));
        if(!$ctrl || !$p)
            return;
        $p->setWebParentCtrl(null, true);
        $ctrl->unregChildController($p);
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_remove_parent(){
        $ctrl=igk_getctrl(igk_getr("clCtrl"));
        $p=igk_getctrl(igk_getr("clParent"));
        if(!$ctrl || !$p)
            return;
        $p->unregChildController($ctrl);
        $ctrl->setWebParentCtrl(null, true);
        $this->View();
    }
    ///<summary>use to reset data base for the current controller</summary>
    /**
    * use to reset data base for the current controller
    */
    public function ca_reset_db_ajx(){
        if(igk_qr_confirm()){
            $ctrl=igk_getctrl($this->SelectedController, false);
            $c=igk_getctrl("api");
            IGKOb::Start();
            if($c->datadb("resetctrldb", $ctrl)){
                igk_notifyctrl()->addMsgr("msg.database_reset");
            }
            else{
                igk_notifyctrl()->addErrorr("err.database_reset");
            }
            IGKOb::Clear();
            igk_navtocurrent();
        }
        $frame=igk_frame_add_confirm($this, __METHOD__, $this->getUri(__FUNCTION__));
        $frame->Title="Confirm ?";
        $dc=$frame->Form->Div;
        $dc->addDiv()->Content=__("warn.question.dbwillbedestroyed");
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_selectedCtrlChanged(){
        $t=$this->getParam("ctrl:ca_tabInfo");
        if($t != null)
            $t->ClearChilds();
        $this->setParam("ctrl:ca_tabInfo", null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_setmenuhost(){
        $v_n=igk_getr("clCtrlMenuHost");
        igk_app()->Configs->menuHostCtrl=$v_n;
        igk_save_config();
        $this->View();
        $ctrl=igk_getctrl($v_n);
        igk_getctrl(IGK_MENU_CTRL)->setMenuhostCtrl($ctrl);
        igk_sys_viewctrl($v_n);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_setmenuhost_ajx(){
        $this->ca_setmenuhost();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_tabv_ajx(){
        if(!igk_is_ajx_demand()){
            igk_navto(igk_io_baseuri());
        }
        $g=igk_getr("g");
        $n=$this->getParam(__CLASS__."://tabview_node/");
        if(!$n)
            $n=igk_createnode();
        $n->clearChilds();
        switch($g){
            case 1:
            $this->_view_default_tab($n);
            break;
            case 2:
            $frm=$n->addForm();
            $frm->addDiv()->Content="/!\\ Not Implement !";
            break;
            case 3:
            $c=igk_template_mananer_ctrl();
            if($c){
                $c->showConfig($n);
            }
            else{
                $n->addDiv()->setClass("igk-danger")->Content=__("warn.notemplatemanagerfound");
            }
            break;default:
            $frm=$n->addForm();
            $frm->addDiv()->Content=__("warn.notimplement");
            break;
        }
        $n->RenderAJX();
        $this->setParam(__CLASS__."://tabselected", $g);
        $this->setParam(__CLASS__."://tabview_node/", $n);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_update_articlewtiny_f(){
        if(!igk_app()->ConfigMode){
            igk_navtocurrent();
            return;
        }
        $this->update_articlewtiny();
        $_REQUEST["ctrlid"]=igk_getr("clctrl");
        $_REQUEST["n"]=basename(urldecode(base64_decode(igk_getr("clfile"))));
        igk_frame_close("frame_edit_article");
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_update_ctrl_properties(){
        $name=igk_getr("n", null);
        $ctrl=$name == null ? igk_getctrl($this->SelectedController, false): igk_getctrl($name, false);
        if($ctrl == null){
            return null;
        }
        $c=igk_get_robj();
        $oldparent=$ctrl->Configs->clParentCtrl;
        foreach($c as $k=>$v){
            $s=igk_getr($k);
            switch($k){
                case "clParentCtrl":{
                    if($s == "none"){
                        $ctrl->Configs->$k=null;
                    }
                    else{
                        if(igk_can_set_ctrlparent($ctrl, $s)){
                            $ctrl->Configs->$k=$s;
                        }
                        else{
                            igk_debug_wln("can't changed parent");
                        }
                    }
                }
                break;
                default:
                $ctrl->Configs->$k=$s;
                break;
            }
        }
        if(method_exists($ctrl, "SetCustomConfigInfo")){
            $t=$ctrl->Configs;
            $ctrl->SetCustomConfigInfo($t); 
        }
        $notify = igk_notifyctrl();
        if ($ctrl->storeConfigSettings()){ 
            $notify->addSuccess(__("Controller [{0}] updated", $ctrl->Name)); 
        } else {
            igk_ilog("configuration failed");
            $notify->addError(__("Update controller setting failed."));
        }
        if($ctrl->Configs->clParentCtrl != $oldparent){
            igk_sys_viewctrl($oldparent);
        }
        igk_ctrl_viewparent($ctrl);
        if(!igk_is_confpagefolder()){  
            $this->ca_edit_ctrl_properties_ajx(false);
        }
         
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_update_dbdata(){
        $obj=igk_get_robj();
        $e=igk_createnode(IGK_DATA_DEF_TAGNAME);
        $e["TableName"]=igk_getr("clTableName");
        unset($obj->clTableName);
        $v_kexist=array();
        for($i=0; $i < igk_count($obj->clName); $i++){
            if(empty($obj->clName[$i]) || isset($v_kexist[$obj->clName[$i]]))
                continue;
            $v_kexist[$obj->clName[$i]]=1;
            $cl=$e->add(IGK_COLUMN_TAGNAME);
            foreach($obj as $k=>$v){
                $cl[$k]=$v[$i];
            }
        }
        $f=igk_getctrl($this->SelectedController)->getDBConfigFile();
        igk_io_save_file_as_utf8($f, $e->Render((object)array("Indent"=>true)));
        igk_frame_close("add_edit_db_frame");
        $this->setParam("ctrl:ca_tabInfo", null);
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_update_view(){
        $f=urldecode(base64_decode(igk_getr("clfile")));
        $v_c=igk_str_remove_empty_line(igk_getr("clContent"));
        $v_frame=igk_getr("clframe");
        $ctrl=igk_getctrl($this->SelectedController, false);
        $v_old=IGKIO::ReadAllText($f);
        igk_io_savecontentfromtextarea($f, $v_c, true);
        $error=array();
        $code=0;
        if(!igk_is_function_disable("exec")){
            @exec("php -l \"".$f."\"", $error, $code);
        }
        if($code == 0){
            igk_notifyctrl()->addMsg(__("MSG.ViewFileSaved", basename($f)));
        }
        $ctrl->View();
        igk_frame_close($v_frame);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ca_view_body_ajx(){
        $uri=base64_decode(igk_getr("uri"));
        igk_loadr($uri);
        if(igk_app()->getControllerManager()->InvokeUri($uri, false)){
            igk_app()->getControllerManager()->ViewControllers();
            igk_app()->Doc->body->RenderAJX();
        }
    }
    ///<summary> handle view tab information </summary>
    /**
    *  handle view tab information
    */
    public function controller($view="infotab"){
        $t=igk_createnode("div");
        if(file_exists($file=$this->getViewFile("tab.".$view, 0))){
            $this->loader->view($file, ["t"=>$t, "viewid"=>$this->_getviewid(), "s_ctrl"=>igk_getctrl($this->SelectedController), "articleid"=>$this->_getarticleid()]);
            $this->setParam("tab:editresult", $view);
        }
        else{
            $t->addPanel()->setClass("igk-danger")->Content=__("No configuration page available");
        }
        $t->renderAJX();
        igk_exit();
    }
    ///<summary>get an article and download it </summary>
    /**
    * get an article and download it
    */
    public function download_article(){
        $n=igk_getr("n");
        $ctrl=$this->SelectedController;
        if(($ctrl == null) || !isset($n))
            return null;
        $f=igk_io_dir(igk_getctrl($ctrl)->getArticlesDir()."/".$n);
        if(file_exists($f)){
            igk_download_file(basename($f), $f);
            igk_navtocurrent();
            igk_exit();
        }
    }
    ///<summary>remove an article.	</summary>
    /**
    * remove an article.
    */
    public function drop_article(){
        $n=igk_getr("n");
        $ctrl=$this->SelectedController;
        if(($ctrl == null) || !isset($n))
            return null;
        $f=igk_io_dir(igk_getctrl($ctrl)->getArticlesDir()."/".$n);
        $_FRAMENAME="frame_drop_article_confirmation";
        if(file_exists($f)){
            if(igk_qr_confirm()){
                unlink($f);
                igk_wln_e("drop article");
            }
            else{
                $frame=igk_frame_add_confirm($this, $_FRAMENAME, $this->getUri("drop_article"));
                $frame->Form->Div->Content=__(IGK_MSG_DELETEFILE_QUESTION, $n);
                $frame->Form->addInput("n", "hidden", $n);
            }
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function edit_article(){
        $this->ca_edit_article_frame($this->SelectedController, igk_getr("n"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function edit_articlewtiny(){
        $this->ca_edit_articlewtiny_frame($this->SelectedController, igk_getr("n"));
    }
    ///<summary>filter article by language</summary>
    /**
    * filter article by language
    */
    public function filter_article_by_lang(){
        $this->m_filter_article_lang=igk_getr("n");
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "articleconfig";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCtrlArticle(){
        $c=igk_getr("ctrl");
        $n=igk_getr("n");
        igk_getctrl($c)->getArticle($n);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_CA_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSelectedController(){
        return $this->getParam(self::SL_SELECTCONTROLLER);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        $this->setup_defaultpage();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initialize(){
        igk_reg_hook("SelectedControllerChanged", array($this, "ca_selectedCtrlChanged"));
    }
    ///<summary></summary>
    ///<param name="funcname"></param>
    /**
    * 
    * @param mixed $funcname
    */
    public function IsFunctionExposed($funcname){
        $rgx="/(view_body_ajx|update_article)/i";
        if(igk_is_conf_connected() || preg_match($rgx, $funcname))
            return true;
        return parent::IsFunctionExposed($funcname);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lst_adapter_ajx(){
        $n=igk_createnode("div");
        $t=igk_getr("t");
        $cs=get_class(igk_get_data_adapter($t));
        if(method_exists($cs, "GetSchemaOptions")){
            call_user_func_array(array($cs, "GetSchemaOptions"), array($n));
        }
        $n->RenderAJX();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function onSelectedControllerChanged(){
        igk_hook("SelectedControllerChanged", $this, array($this->getSelectedController()));
    }
    ///<summary>search article . reload the view</summary>
    /**
    * search article . reload the view
    */
    public function search_article(){
        $this->m_search_article=igk_getr("m_search_article");
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function search_view(){
        $this->m_search_view=igk_getr("m_search_view");
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function select_controller_ajx(){
        $this->SelectedController=igk_getr("n");
        $n=igk_createnode("div");
        $this->_viewCtrlEditResult($n);
        $n->RenderAJX();
    }
    ///<summary>set the default page controller</summary>
    /**
    * set the default page controller
    */
    public function setdefaultpage(){
        $n=igk_getr("clDefaultCtrl");
        if(igk_app()->Configs->default_controller != $n){
            igk_app()->Configs->default_controller=$n;
            igk_save_config();
            $this->View();
            igk_app()->Session->setParam("forceview", 1);
            igk_notification_push_event("sys://event/defaultpagechanged", $this);
            igk_kill_all_sessions(session_id());
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function setdefaultpage_ajx(){
        $this->setdefaultpage();
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setSelectedController($value){
        if($this->SelectedController != $value){
            $this->setParam(self::SL_SELECTCONTROLLER, $value);
            $this->onSelectedControllerChanged();
        }
    }
    ///<summary></summary>
    ///<param name="ctrltab" default="null"></param>
    /**
    * 
    * @param mixed $ctrltab the default value is null
    */
    private function setup_defaultpage($ctrltab=null){
        $ctrl=igk_get_defaultwebpagectrl();
        if(($ctrl == null) && (count($ctrltab=igk_getv($ctrltab == null ? igk_get_all_uri_page_ctrl(): $ctrltab, "@base")) > 0)){
            $n=$ctrltab[0]->getName();
            if(igk_app()->Configs->default_controller != $n){
                igk_app()->Configs->default_controller=$ctrltab[0]->getName();
                igk_save_config();
            }
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="list"></param>
    ///<param name="content"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $list
    * @param mixed $content
    */
    public function TabViewPage($n, $list, $content){
        $g=$this->getParam(__CLASS__."://tabselected", 1);
        $i=1;
        $content->ClearChilds();
        foreach($list->getElementsByTagName("li") as $k){
            if($i == $g){
                $k->setClass("+igk-active");
                $content->addAJXScriptContent($k->getParam("uri"), $k->getParam("method"));
            }
            else
                $k->setClass("-igk-active");
            $i++;
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function unreg_view_frame(){
        $frame_name="ca_edit_ctrl_atricles_ajx_frame";
        $frame=igk_get_frame($frame_name);
        if($frame != null){
            $frame->ForCtrl->removeViewCompleteEvent($this, "view_frame_complete");
            igk_frame_close($frame_name);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_article(){
        $ajx=igk_is_ajx_demand() || igk_getr("ajx");
        $f=urldecode(base64_decode(igk_getr("clfile")));
        $v_c=igk_str_remove_empty_line(igk_html_unscape(igk_getr("clContent")));
        $v_frame=igk_getr("clframe");
        $v_dummy=igk_createnode("div");
        $id=igk_getr("clctrl");
        $ctrl=igk_getctrl($id, false);
        $n=igk_getr("n");
        if($n && !file_exists($f) && $ctrl){
            $f=$ctrl->getArticle($n);
        }
        if(!empty($f)){
            try {
                $v_dummy->Load($v_c);
                if(igk_io_save_file_as_utf8($f, $v_c, true, false)){
                    $this->__updateview($ctrl);
                    igk_notifyctrl()->addMsg(__("msg.filesaved_1", basename($f)));
                }
                else
                    igk_notifyctrl()->addError(__("err.filenotsaved_1", basename($f)));
                if($ctrl)
                    igk_ctrl_viewparent($ctrl, null);
                if(igk_frame_is_available($v_frame))
                    igk_frame_close($v_frame, false);
            }
            catch(Exception $ex){
                igk_notifyctrl()->addError(__("err.filenotsaved_1", basename($f)));
                igk_notifyctrl()->addError($ex);
                igk_show_exception($ex);
                igk_exit();
            }
        }
        $rf=igk_getv(parse_url(igk_sys_srv_referer()), "path");
        if(!$ajx){
            igk_navtocurrent();
        }
        if(!empty($rf)){
            igk_navto($rf);
        }
        igk_ajx_toast(__("msg.articleupdated"));
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_articlewtiny(){
        $f=urldecode(base64_decode(igk_getr("clfile")));
        $v_c=igk_str_remove_empty_line(igk_html_unscape(igk_getr("clContent")));
        $id=igk_getr("clctrl");
        $v_frame=igk_getr("clframe");
        $property=(object)array(
            "RemoveImgSize"=>igk_getr("clRemoveImgSize"),
            "RemoveStyles"=>igk_getr("clRemoveStyles")
        );
        $ctrl=igk_getctrl($id, false);
        if($this->__write_article_for_tiny($f, $v_c, $property)){
            $this->__updateview($ctrl);
            igk_notifyctrl()->addMsg(__("msg.filesaved", basename($f)));
        }
        else{
            igk_notifyctrl()->addError(__("e.filenotsaved", basename($f)));
        }
    }
    ///<summary></summary>
    ///<param name="oldcontent" default="null"></param>
    /**
    * 
    * @param mixed $oldcontent the default value is null
    */
    public function update_ctrl($oldcontent=null){
        $f=urldecode(base64_decode(igk_getr("clfile")));
        $v_c=utf8_encode(igk_html_unscape(igk_getr("clContent"), IGK_STR_EMPTY));
        $v_frame=igk_getr("clframe");
        $ctrl=igk_getctrl($this->SelectedController, false);
        if(igk_php_check_and_savescript($f, $v_c, $error, $code) == false){
            $this->ca_edit_view($v_c, count($error)."update_ctrl::failed: code : ".$code." ". implode("<br />", $error), true);
        }
        else{
            igk_session_destroy();
            igk_getconfigwebpagectrl()->reconnect();
            igk_notifyctrl()->addMsg(__("MSG.ViewFileSaved", basename($f)));
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->TargetNode;
        if($this->getIsVisible()){
            IGKHtmlUtils::AddItem($t, $this->ConfigNode);
            $t=$t->ClearChilds()->addPanelBox();
            igk_html_add_title($t, "Controller & Articles");
            $t->addReplaceUri(); 
            $b = $t->addDiv();
            igk_html_article($this, "controller_and_article", $b); 

            $dv=$t->addDiv()->setClass("gc-v");
            $v_tabc=$dv->addComponent($this, "AJXTabControl", __METHOD__, 1);
            $v_tabc->ClearChilds();
            $g=$this->getParam(__CLASS__."://tabselected", 1);
            $h=array("controller");
            foreach($h as $k=>$v){
                $r=$k + 1;
                $v_tabc->addTabPage(__("tab.".$v), $this->getUri("ca_tabv_ajx&g={$r}"), 0);
            }
            $v_tabc->setTabViewListener(null);
            $v_tabc->select(0);
        }
        else{
            $this->TargetNode->ClearChilds();
            igk_html_rm($this->TargetNode);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function view_frame_complete(){
        $tb=$_REQUEST;
        igk_resetr();
        $this->ca_edit_ctrl_atricles_ajx(false);
        $_REQUEST=$tb;
    }
}
///<summary>Represente class: IGKFileManagerCtrl</summary>
/**
* Represente IGKFileManagerCtrl class
*/
final class IGKFileManagerCtrl extends IGKConfigCtrlBase {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _getPageInfo(){
        static $c=null;
        if($c == null){
            if(!($c=$this->getParam("PageInfo"))){
                $c=igk_createobj();
                $c->m_directory="";
                $this->setParam("PageInfo", $c);
            }
        }
        return $c;
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="t" default="null"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed $t the default value is null
    */
    private function _showdir($dir, $t=null){
        $_info=$this->_getPageInfo();
        $path=igk_io_currentrelativepath($dir ? $dir: "");
        if(empty($dir) || !is_dir($path)){
            $path=igk_io_basedir();
        }
        $t=$t ?? $this->TargetNode;
        $tab=$t->addPanelBox()->addDiv()->setStyle("overflow: auto; min-width: 300px;")->addTable()->setClass("config-file_listview fitw");
        $tr=$tab->addTr();
        IGKHtmlUtils::AddToggleAllCheckboxTh($tr);
        $tr->add("th")->setAttribute("style", "width:100%")->Content=__(IGK_FD_NAME);
        $tr->add("th")->setClass("no-wrap")->Content=__("clSize");
        $tr->add("th")->Content=IGK_HTML_SPACE;
        $tr->add("th")->Content=IGK_HTML_SPACE;
        $tr->add("th")->Content=IGK_HTML_SPACE;
        $hdir=opendir($path);
        $cangotoperent=false;
        if($hdir){
            $files=array();
            $dirs=array();
            while(($cdir=readdir($hdir))){
                if(($cdir == ".") || ($cdir == "..")){
                    if(($dir != null) && ($dir != '/') && ($cdir == "..") && ($dir != ".")){
                        $cangotoperent=true;
                    }
                    continue;
                }
                $cf=igk_io_dir($path."/".$cdir);
                if(is_dir($cf)){
                    $dirs[$cdir]=$cf;
                }
                else if(is_file($cf)){
                    $files[$cdir]=$cf;
                }
            }
            closedir($hdir);
            igk_array_sortkey($files);
            igk_array_sortkey($dirs);
            if($cangotoperent){
                $tr=$tab->addTr();
                $tr->addTd()->Content=IGK_HTML_SPACE;
                $tr->add("td", array("colspan"=>"6"))->addLi()->add("a", array(
                    "href"=>$this->getUri("gotoparent"),
                    "onclick"=>"javascript: (function(i){var q= window.igk.getParentById(i, '".$this->TargetNode["id"]."'); if (q){ window.igk.ajx.post('".$this->getUri("gotoparent_ajx")."', null, function(xhr){ if (this.isReady()){ q.innerHTML = xhr.response; }});}})(this); return false;",
                    "class"=>"config-fileviewdir"
                ))->Content="..";
            }
            foreach($dirs as $k=>$v){
                $f=base64_encode(urldecode($k));
                $tr=$tab->addTr();
                $li=$tr->add("td", array("style"=>"width:16px;"))->addLi();
                $li->addInput(IGK_STR_EMPTY, "checkbox", null, null);
                $tr->addtd()->addLi()->add("a", array(
                    "href"=>$this->getUri("opendir&d=".urldecode($k)),
                    "class"=>"config-fileviewdir",
                    "onclick"=>"javascript:(function(i){var q= window.igk.getParentById(i, '".$this->TargetNode["id"]."');if (q){ window.igk.ajx.post('".$this->getUri("opendir_ajx&d=".urldecode($k))."', null, ns_igk.ajx.fn.bindto(q,i.href)); return false;}})(this); return false;"
                ))->Content=$k;
                $tr->add("td")->Content=IGK_HTML_SPACE;
                $tr->add("td")->Content=IGK_HTML_SPACE;
                $tr->add("td")->Content=IGK_HTML_SPACE;
                $tr->add("td")->Content=IGK_HTML_SPACE;
                if(IGKIO::IsDirEmpty($v)){
                    IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"with:16px; height:16px;")), $this->getUri("drop_dir_or_file&d=".$f), "drop_16x16");
                }
                else
                    $tr->addtd()->Content=IGK_HTML_SPACE;
            }
            $_info=$this->_getPageInfo();
            if($_info){
                foreach($files as $k=>$v){
                    $f=base64_encode(urldecode($k));
                    $tr=$tab->addTr();
                    $li=$tr->add("td", array("style"=>"width:16px;"))->addLi();
                    $li->addInput(IGK_STR_EMPTY, "checkbox", null, null);
                    $li=$tr->addTd()->addLi();
                    $li->add("a", array(
                        "href"=>$this->getUri("get_file&d=".$f),
                        "class"=>"config-fileviewfile"
                    ))->Content=$k;
                    $file=igk_io_currentrelativepath($_info->m_directory. "/".$k);
                    if(file_exists($file)){
                        $size=@filesize($file);
                        if($size === false){
                            $tr->add("td", array("class"=>"alignr"))->Content="?";
                        }
                        else
                            $tr->add("td", array("class"=>"alignr no-wrap"))->Content=IGKIO::GetFileSize($size);
                    }
                    else
                        $tr->addTd()->Content="broken";
                    IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"width:16px; min-height:16px")), $this->getUri("edit&d=".$f), "edit_16x16");
                    IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"width:16px; min-height:16px")), $this->getUri("change_authorisation&d=".$f), "ico_auth_16x16");
                    IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"width:16px; min-height:16px")), $this->getUri("fc_renameframe&d=".$f), "ico_rename_16_x16");
                    IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"width:16px")), $this->getUri("drop_dir_or_file&d=".$f), "drop_16x16");
                }
            }
        }
    }
    ///<summary></summary>
    ///<param name="li"></param>
    ///<param name="name"></param>
    ///<param name="check"></param>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $li
    * @param mixed $name
    * @param mixed $check
    * @param mixed $key
    */
    private function addcheckbox($li, $name, $check, $key){
        $li->addInput($name, "checkbox", false, array("checked"=>$check));
        $li->add("label", array("for"=>$name))->Content=__($key);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function change_authorisation(){
        if(!igk_is_conf_connected())
            return;
        $d=urldecode(base64_decode(igk_getr("d")));
        $_dir=$this->_getPageInfo()->m_directory;
        $file=igk_io_currentrelativepath($_dir."/".$d);
        if(!igk_qr_confirm()){
            $frame=igk_frame_add_confirm($this, "change_authorisation_frame", $this->getUri("change_authorisation"));
            $frame->Title=__("title.changeFileAuthorization", $d);
            $div=$frame->Form->Div;
            $div->addDiv()->Content=__("lb.user");
            $div->addHSep();
            $c=$div->add("ul");
            $perms=@fileperms($file);
            $this->addcheckbox($c->addLi(), "ur", false, "lb.Read");
            $this->addcheckbox($c->addLi(), "uw", false, "lb.Write");
            $this->addcheckbox($c->addLi(), "ux", false, "lb.Execute");
            $div->addDiv()->Content=__("lb.group");
            $div->addHSep();
            $c=$div->add("ul");
            $this->addcheckbox($c->addLi(), "gr", false, "lb.Read");
            $this->addcheckbox($c->addLi(), "gw", false, "lb.Write");
            $this->addcheckbox($c->addLi(), "gx", false, "lb.Execute");
            $div->addDiv()->Content=__("lb.other");
            $div->addHSep();
            $c=$div->add("ul");
            $this->addcheckbox($c->addLi(), "or", false, "lb.Read");
            $this->addcheckbox($c->addLi(), "ow", false, "lb.Write");
            $this->addcheckbox($c->addLi(), "ox", false, "lb.Execute");
            $div->addHSep();
            $this->addcheckbox($div->addDiv(), "clRecursif", true, "lb.Recursive");
            $frame->Form->addInput("d", "hidden", base64_encode(urlencode($d)));
        }
        else{
            $u=0;
            $g=0;
            $o=0;
            $u |= igk_getr("ur") ? 4: 0;
            $u |= igk_getr("uw") ? 2: 0;
            $u |= igk_getr("ux") ? 1: 0;
            $g |= igk_getr("gr") ? 4: 0;
            $g |= igk_getr("gw") ? 2: 0;
            $g |= igk_getr("gx") ? 1: 0;
            $o |= igk_getr("or") ? 4: 0;
            $o |= igk_getr("ow") ? 2: 0;
            $o |= igk_getr("ox") ? 1: 0;
            $v='0'.$u.''.$g.''.$o;
            if(file_exists($file) || is_dir($file)){
                if(is_dir($file) && igk_getr("clRecursif")){
                    $r=igk_file_chmod($file, octdec($v), true);
                }
                else
                {
                if(@chmod($file, octdec($v))){
                    igk_notifyctrl()->addMsg(__("Permission changed : {0}", substr(sprintf('%o', $file), -4)));
                }
                else
                    igk_notifyctrl()->addError(__("Can't change file permission : [{0}]", basename($file)));
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function createdir(){
        $ndir=igk_getr(IGK_FD_NAME);
        if(empty($ndir))
            return;
        $_info=$this->_getPageInfo();
        $path=igk_io_dir(igk_io_currentrelativepath($_info->m_directory)."/".$ndir);
        if(!is_dir($path)){
            mkdir($path);
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function createdir_frame(){
        $frame=igk_html_frame($this, "createdir_frame");
        $frame->Title=__("title.createDirFrame");
        $frame->BoxContent->ClearChilds();
        $frame->Width="300";
        $d=$frame->BoxContent;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("createdir");
        $frm->addSLabelInput(IGK_FD_NAME);
        $frm->addHSep();
        $frm->addBtn("btn_confirm", __("btn.create"));
        if(igk_is_ajx_demand()){
            $frame->renderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function createfile(){
        $url=igk_getr("uri");
        if(($url == null) || is_file($url)){
            return;}
        igk_io_save_file_as_utf8($url, IGK_STR_EMPTY, true);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function createNewFile(){
        $f=igk_getr("clNew");
        $dir=$this->getParam("dir") || $dir=igk_io_basedir("");
        if(!$dir || !igk_io_touch($dir."/".$f)){
            igk_ajx_toast("failed to create some file at : {$dir}");
            return;
        }
        igk_ajx_toast("File Created", "igk-success");
        $this->View();
        $c=new IGKHtmlAJXCtrlReplacementNode();
        $c->addCtrl($this, $this->TargetNode);
        $c->RenderAJX();
        return;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function drop_dir_or_file(){
        if(!igk_is_conf_connected()){
            return;}
        $d=urldecode(base64_decode(igk_getr("d")));
        $_dir=$this->_getPageInfo()->m_directory;
        $file=igk_io_currentrelativepath($_dir."/".$d);
        if(igk_qr_confirm()){
            if(is_file($file)){
                unlink($file);
                $this->View();
            }
            else if(is_dir($file)){
                IGKIO::rmDir($file);
                $this->View();
            }
        }
        else{
            $frm=igk_frame_add_confirm($this, "confirm_file_delete", $this->getUri("drop_dir_or_file"));
            $frm->Form->Content=__(IGK_MSG_DELETEFILE_QUESTION, basename($file));
            $frm->Form->addInput("d", "hidden", base64_encode(urlencode($d)));
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function edit(){
        if(!igk_is_conf_connected())
            return;
        $d=urldecode(base64_decode(igk_getr("d")));
        $file=igk_io_currentrelativepath($this->_getPageInfo()->m_directory. "/".$d);
        if(is_file($file)){
            $frame=igk_html_frame($this, "config-edit_file", "#filesystem", igk_app()->Doc->body);
            $str=IGKIO::ReadAllText($file);
            $frame->Title=__("title.editFile_1", basename($file));
            $frame->ClearChilds();
            $d=$frame->BoxContent;
            $frame=$d->addForm();
            $frame["action"]=$this->getUri("updatefile#fileman");
            $ul=$frame->add("ul");
            $txt=$ul->addLi()->addTextArea("clContent", $str);
            $txt->setStyle("min-width:400px; min-height:260px");
            $frame->addInput("clfile", "hidden", base64_encode(urlencode(basename($file))));
            $frame->addHSep();
            $frame->addBtn("btn_update", __("Update"));
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function fc_rename(){
        $_dir=$this->_getPageInfo()->m_directory;
        $d=urldecode(base64_decode(igk_getr("d")));
        $e=igk_getr(IGK_FD_NAME);
        $file=igk_io_currentrelativepath($_dir. "/".$d);
        $out=igk_io_currentrelativepath($_dir. "/".$e);
        rename($file, $out);
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function fc_renameframe(){
        $d=urldecode(base64_decode(igk_getr("d")));
        $frame=igk_frame_add_confirm($this, "rename_file_frame", $this->getUri("fc_rename"));
        $frame->Title=__("title.renamefile_1", $d);
        $div=$frame->Form->Div;
        $div->addInput("d", "hidden", igk_getr("d"));
        $div->addSLabelInput(IGK_FD_NAME, IGK_FD_NAME, "text", $d);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function fm_updatefile(){
        $url=igk_getr("uri");
        $content=igk_getr("content");
        if(($url == null) || is_file($url)){
            return;}
        igk_io_save_file_as_utf8($url, $content, true);
    }
    ///<summary></summary>
    ///<param name="file" default="null"></param>
    /**
    * 
    * @param mixed $file the default value is null
    */
    public function get_file($file=null){
        if(!igk_is_conf_connected())
            return;
        $d=urldecode(base64_decode(igk_getr("d")));
        $_dir=$this->_getPageInfo()->m_directory;
        $file=$file ? $file: igk_io_currentrelativepath($_dir. "/".$d);
        if(is_file($file)){
            $size=filesize($file);
            igk_download_content(basename($file), $size, IGKIO::ReadAllText($file));
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "filemanager";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gotoparent(){
        $c=dirname($this->_getPageInfo()->m_directory);
        if(!empty($c)){
            $this->_getPageInfo()->m_directory=$c;
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gotoparent_ajx(){
        $count=igk_getr("n", 1);
        $c=$this->_getPageInfo()->m_directory;
        while($count > 0){
            $c=dirname($c);
            $count--;
        }
        if(!empty($c)){
            if($c === ".")
                $this->_getPageInfo()->m_directory=null;
            else
                $this->_getPageInfo()->m_directory=$c;
        }
        $this->View();
        igk_wl($this->TargetNode->innerHTML);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function loadfiles(){
        $t=igk_getv($_FILES, "clFile");
        $_info=$this->_getPageInfo();
        $path=igk_io_currentrelativepath($_info->m_directory);
        igk_frame_close("upload_files_frame");
        $error=false;
        if(is_array($t["name"])){
            for($i=0; $i < count($t["name"]); $i++){
                if($t["error"][$i] == 0){
                    move_uploaded_file($t["tmp_name"][$i], igk_io_dir($path."/".$t["name"][$i]));
                }
                else{
                    igk_notifyctrl()->addError("can't upload file [".$t["name"][$i]."] error : ".$t["error"][$i]." ". ini_get("upload_max_filesize")." file is authorized");
                    $error=true;
                }
            }
        }
        else{
            if($t["error"] == 0){
                move_uploaded_file($t["tmp_name"], igk_io_dir($path."/".$t["name"]));
                $error=true;
            }
        }
        if(!$error){
            igk_notifyctrl()->addMsgr("MSG.FileUploadSuccess");
        }
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function loadfiles_frame(){
        $frame=igk_html_frame($this, "upload_files_frame");
        $frame->BoxContent->ClearChilds();
        $frame->Title=__("title.loadFilesFrames");
        $frame->Width="300";
        $d=$frame->BoxContent;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("loadfiles");
        $frm->addFile("clFile", true);
        $frm->addInput("MAX_FILE_SIZE", "hidden", "15000000");
        $frm->addHSep();
        $frm->addBtn("btn_confirm", __("Upload"));
        if(igk_is_ajx_demand()){
            $frame->renderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function open_fulldir(){
        $this->setParam("dir", igk_getr("d"));
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function open_fulldir_ajx(){
        $this->open_fulldir();
        igk_wl($this->TargetNode->innerHTML);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function opendir(){
        $d=(igk_getr("d"));
        $_inf=$this->_getPageInfo();
        if($d){
            $ps=$_inf->m_directory;
            if(($ps == null) || ($ps == "/"))
                $ps=$d;
            else
                $ps .= "/".$d;
            if(is_dir(igk_io_basedir()."/".$ps))
                $_inf->m_directory=$ps;
            $this->View();
            igk_navtocurrent();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function opendir_ajx(){
        $_info=$this->_getPageInfo();
        $d=(igk_getr("d"));
        if($d){
            if(($_info->m_directory == null) || ($_info->m_directory == "/"))
                $_info->m_directory=$d;
            else
                $_info->m_directory .= "/".$d;
            $this->View();
        }
        igk_wl($this->TargetNode->innerHTML);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function removeAll(){
        if(igk_qr_confirm()){
            igk_notifyctrl()->addError("Dont be so .... No Implement ". __LINE__);
        }
        else{
            $frame=igk_frame_add_confirm($this, "confirm_remove_all", $this->getUri("removeAll"));
            $frame->Form->Div->Content=__(IGK_MSG_DROPALL_QUESTION);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function updatefile(){
        if(!igk_getconfigwebpagectrl()->IsConnected)
            return;
        $_info=$this->_getPageInfo();
        $d=urldecode(base64_decode(igk_getr("clfile")));
        $file=igk_io_currentrelativepath($_info->m_directory. "/".$d);
        if(is_file($file)){
            igk_io_savecontentfromtextarea($file, igk_getr("clContent"), true);
            igk_frame_close("config-edit_file");
        }
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }
        $c=$this->TargetNode;
        IGKHtmlUtils::AddItem($c, $this->ConfigNode);
        $c=$c->clearChilds()->addPanelBox();
        $c->addScript($this->getScriptDir()."/igk/ctrl/.filemanager.js");
        $buri=$this->getUri();
        $c->addScript()->Content=<<<EOF
igk.ctrl.filemanager.init({uri: '{$buri}'});
EOF;
$dv=$c->addDiv();
        $dv["class"]="dialog";
        $dv->addObData(function(){
            $d=igk_createnode("dialog", null, "New File");
            $d["class"]="new-file";
            $frm=$d->addForm();
            $frm["igk-ajx-form"]=1;
            $frm["style"]="max-width:300px";
            $frm["action"]=$this->getUri("createNewFile");
            $frm->addInput("clNew", "text", "empty.php");
            $frm->addButton("Create", "submit")->setAttribute("value", __("Create File"));
            $d->RenderAJX();
        });
        $d=$c->addDiv();
        igk_html_add_title($d, "title.FileManager");
        igk_html_article($this, "filesystem.description", $c->addDiv());
        $bar=$c->addActionBar();
        IGKHtmlUtils::AddBtnLnk($bar, __("btn.loadFiles"), $this->getUri("loadfiles_frame"))->setAttribute("igk-ajx-lnk", 1);
        IGKHtmlUtils::AddBtnLnk($bar, __("btn.createDir"), $this->getUri("createdir_frame"))->setAttribute("igk-ajx-lnk", 1);
        $bar->addAJSButton("igk.ctrl.filemanager.newFile()")->Content=__("New File");
        $_info=$this->_getPageInfo();
        $sep=explode(DIRECTORY_SEPARATOR, igk_io_dir($_info->m_directory));
        if(($count=count($sep)) > 0){
            $bs=$c->addPanelBox()->addDiv()->setClass("igk-breadcrumbs");
            $cpath=null;
            $nid=$this->TargetNode["id"];
            for($i=0; $i < $count; $i++){
                if($i != 0){}
                $bs->addLi()->addA("#")->setAttribute("onclick", "javascript:ns_igk.ajx.post('".$this->getUri("gotoparent_ajx&n=".($count - $i-1))."', null, ns_igk.ajx.fn.bindto(ns_igk.getParentById(this, '".$nid. "'))); return false; ")->Content=$sep[$i];
            }
        }
        $this->_showdir($_info->m_directory);
    }
}
///<summary>used to store and manage global group's authorisation</summary>
/**
* used to store and manage global group's authorisation
*/
final class IGKGroupAuthorisationsController extends IGKConfigCtrlBase{
    ///<summary></summary>
    ///<param name="frm"></param>
    /**
    * 
    * @param mixed $frm
    */
    private function _auth_options($frm, $drop=false){
        $bar = $frm->addActionBar();
        IGKHtmlUtils::AddImgLnk($bar, igk_js_post_frame($this->getUri("auth_add_authorisation_ajx")), "add_16x16")
        ->setAttribute("class", "igk-btn");
        if ($drop){
            $bar->abtn($this->getUri("auth_drop_selection"))
            ->on("click"," ns_igk.winui.form.postData(this, '^.igk-form'); return false;")
            ->google_icons("delete");
        }
    }

    public function auth_drop_selection(){
        $d = json_decode(igk_io_get_uploaded_data());
        if ($d && ($tb = igk_getv($d, "clAuths[]"))){ 
            $dr = false;
            if (!is_array($tb)){
                $tb = [$tb];
            }
            foreach($tb as $k){
                if ($dr = igk_db_delete($this, igk_db_get_table_name(IGK_TB_AUTHORISATIONS), array(IGK_FD_ID=>$k))){
                    continue;
                }
                break;
            } 
            if (igk_is_ajx_demand()){
                $this->view();
                if ($dr){
                    igk_ajx_toast("auth deleted", "igk-success");
                } else {
                    igk_ajx_toast("auth not deleted", "igk-danger");
                }
                $d = $this->_authview();
                igk_ajx_replace_node($d,"#auth"); 
                igk_exit();
            }
        }
        igk_navto($this->getUri("view"));
    }
    ///<summary></summary>
    ///<param name="q"></param>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $q
    * @param mixed $t
    */
    private function _isAuth($q, $t){
        foreach($q->Rows as $v){
            if($v->clGroup_Id == $t)
                return $t;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth(){
        $this->setParam("autview", null);
        $d = $this->_authview();
        $d->renderAJX();
        igk_exit();
    }
    private function _authview(){
        $c = igk_db_count_rows($tb,null,$this);
        $d=igk_createnode("div");
        $d->class = "+auth-view";
        $d["id"]="auth";
        $frm=$d->addCol("igk-col igk-col-3-3")->addForm();
        $frm->addNotifyHost();
        $this->_auth_options($frm, $c > 0);
        $table = null;
        // TODO Paginate sample:    
        $tb = igk_db_get_table_name(IGK_TB_AUTHORISATIONS);
     
        $page = igk_getr("authpage", 1); // this->getParam("authpage");
        $total = 20;

        $r=igk_db_table_select_where($tb, null, $this, null, [
            "Limit"=>[($page-1)*$total, $max = ($page*$total)]
        ]);
 
        if($r){ 
            foreach($r->Rows as  $v){
                if (!$table){
                    $table=$frm->tablehost()->table()->header("" , __("lb.clName"), 
                    __("lb.clGroups"), "", ""
                    );
                    $table["class"]="igk-table igk-table-hover igk-table-striped";
                }
                $tr=$table->addTr();
                $tr->addTd()->addInput("clAuths[]", "checkbox", $v->clId);
                $tr->addTd()->Content = $v->clName;
                $tr->addTd()->Content = $this->getGroupNamesLitteral($v->clId);
                IGKHtmlUtils::AddImgLnk($tr->addTd(), igk_js_post_frame($this->getUri("auth_edit_frame_ajx&clId=".$v->clId)), "edit_16x16");
                IGKHtmlUtils::AddImgLnk($tr->addTd(), igk_js_post_frame($this->getUri("auth_delete_authorisation_ajx&clId=".$v->clId)), "drop_16x16");
            }
        }
        if ($c>$total){

            $dv = $frm->div()->ul()->setclass("igk-action-bar");// ->Content=  "Pagination";
            //render paginate
            // no requirement
            $items = 10;
            $item = $c / $total;
            $selpage = $page;
            for($i=0;$i < $item ; $i++){
                $sl = $i+1;
                $li = $dv->li()->setClass("dispib");
                if ($sl == $page){
                    $li->class = "+selected";
                }
                $li->a("?authpage=".$sl)->setClass("igk-btn")->Content = $sl;
            }

        }    
        if($r){
            $this->_auth_options($frm, $c > 0);
        }
        return $d;
    }
    private function getGroupNamesLitteral($authid){
        static $groups; 
        $auths = igk_db_table_select_where(
            IGK_TB_GROUPAUTHS, ["clAuth_Id"=>$authid], $this);
        if ($groups === null){
            $groups = igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPS), null, $this)->getRows();
        } 

        if ($g = $auths){
            $def = [];
            foreach($g->getRows() as $r){
                if ($gg = igk_getv($groups, $r->clGroup_Id)){
                    $def[$r->clGroup_Id] = "<a href=\"".$this->getUri("group_members&id=".$r->clGroup_Id)."\" >".$gg->clName."</a>";
                }
            }
            if (count($def)>0){
                return implode(", ", array_values($def));
            }
        };
        return "&nbsp;";
    }
    public function group_members(){
        $id = igk_getr("id");

        $d = igk_createnode("div");
        $d->h2()->Content = "Group Members";
        $g = \IGK\Models\Usergroups::select_all(["clGroup_Id"=>$id]);
        $d->div()->ul()->loop($g)->host(function($n, $v){
            $li = $n->li();
            $user = \IGK\Models\Users::cacheRow($v->clUser_Id);
            $li->Content = "&lt;".$user->fullname()."&gt; ".$user->clLogin;
        });
        $d->renderAJX();
        igk_exit();
        return $d;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth_add_authorisation_ajx(){
        if(igk_qr_confirm()){
            $o=igk_get_robj();
            $tb = igk_db_get_table_name(IGK_TB_AUTHORISATIONS, $this);
            $notify = igk_notifyctrl("notifyauth");
            if(igk_db_insert($this, $tb, $o))
                $notify->addMsgr("msg.authorisation.added");
            else{
                $notify->addErrorr("msg.authorisation.notadded");
            }
            $this->View();
            igk_navtocurrent();
        }
        else{
            $frame= igk_createnode("div"); // igk_html_frame($this, __FUNCTION__);
            // $frame->Title=__("title.edit_authorisation_1");
            $d=$frame->div();
            $frm=$d->addForm();
            $frm["action"]=$this->getUri(__FUNCTION__);
            $d=$frm->addDiv();
            $d["class"]="igk-form-group";
            $d->addSLabelInput(IGK_FD_NAME);
            $frm->addHSep();
            $frm->addInput("confirm", "hidden", "1");
            $frm->actionbar(function($a){
                $a->addInput("btn.confirm", "submit", __("btn.add"));
            });

            // $frame->RenderAJX();
            igk_ajx_panel_dialog(__("Add Authorisation"), $frame);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth_add_group_ajx(){
        $id=igk_getr(IGK_FD_ID);
        $row=igk_db_table_select_row(IGK_TB_AUTHORISATIONS, $id);
        if($row == null){
            igk_navtocurrent();
            igk_exit();
        }
        if(igk_qr_confirm()){
            igk_frame_close(__FUNCTION__);
            $gp=igk_getr("clGroups");
            igk_db_delete($this, $this->getDataTableName(), array(IGK_FD_AUTH_ID=>$id));
            if($gp){
                foreach($gp as  $v){
                    igk_db_insert($this, $this->getDataTableName(), array(IGK_FD_AUTH_ID=>$id, IGK_FD_GROUP_ID=>$v));
                }
                igk_db_reload_index($this, $this->getDataTableName());
            }
            $this->View();
            igk_navtocurrent();
        }
        else{
            $frame=igk_html_frame($this, __FUNCTION__);
            $frame->Title=__("title.add_group_1", $row->clName);
            $frame->BoxContent->ClearChilds();
            $d=$frame->BoxContent->addDiv();
            $frm=$d->addForm();
            $frm["action"]=$this->getUri(__FUNCTION__);
            $d=$frm->addDiv();
            $d["class"]="igk-form-group";
            $table=$d->addTable();
            $table ["class"]="igk-table-striped";
            $table->setHeader(IGK_STR_EMPTY, __("lb.clGgroupName"), IGK_STR_EMPTY);
            $r=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPS));
            foreach($r->Rows as  $v){
                $tr=$table->addRow();
                $tr->addTd()->addInput("clGroups[]", "checkbox", $v->clId);
                $tr->addTd()->Content=$v->clName;
            }
            $frm->addHSep();
            $frm->addInput("confirm", "hidden", "1");
            $frm->addInput(IGK_FD_ID, "hidden", $id);
            $frm->addInput("btn.confirm", "submit");
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth_check_auth(){
        $uri = $this->getUri(__FUNCTION__);
        // igk_wln_e("bind...");
        if (igk_server()->method("POST")){

           //  igk_wln("uri: ", $uri, igk_app_is_uri_demand($this, __FUNCTION__),  $_SERVER);
            $id= igk_getr("clUser");
            $auth= trim(igk_getr("clAuth"));
            $strict= igk_getr("strict", false);
            
            // $id = 4;
            // $auth = "tbn_ctrl/Administrators";
            // $strict = true; 
            // $v_r = false;
            
            
            if ($row= \IGK\Models\Users::select_row($id)){                
                $v_r = $row->auth($auth);
            }         
            $d=igk_createnode();
            $d->setId("auth_output");
            $t='danger';
            if($v_r){
                $t='success';
            } 
            $d->addPanel()->setClass("igk-".$t)->Content= 
            __("autorisiation: {0}", $auth ." ".
            __($v_r?"success":"failed")
        ); 
        $this->View();
        if (igk_is_ajx_demand()){
            //$d->renderAJX();
            igk_ajx_replace_node($d, "#auth_output");
            igk_exit();
        }
        }
        igk_navto($this->getUri('view').'#'.__FUNCTION__);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth_delete_authorisation_ajx(){
        $id=igk_getr(IGK_FD_ID);
        $row=igk_db_table_select_row(IGK_TB_AUTHORISATIONS, $id);
        if(igk_qr_confirm() && $row){
            igk_db_delete($this, igk_db_get_table_name(IGK_TB_AUTHORISATIONS), array(IGK_FD_ID=>$id));
            $this->View();
            igk_navtocurrent();
        }
        else{
            $frame=igk_frame_add_confirm($this, __FUNCTION__, $this->getUri(__FUNCTION__));
            $frame->Form->addInput(IGK_FD_ID, "hidden", $id);
            $frame->Form->Div->Content=__("q.confirm_auth_suppression");
            $frame->RenderAJX(); 

        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth_edit_frame_ajx(){
        $id=igk_getr(IGK_FD_ID);
        $row=igk_db_table_select_row(IGK_TB_AUTHORISATIONS, $id);
        if($row == null){
            igk_navtocurrent();
        }
        if(igk_qr_confirm()){
            //igk_frame_close(__FUNCTION__);
            $tbname= igk_db_get_table_name($this->getDataTableName(), $this);
            $gp=igk_getr("clGroups");
            igk_db_delete($this, $tbname, array(IGK_FD_AUTH_ID=>$id));
            if($gp){
                foreach($gp as  $v){
                    igk_db_insert($this, $tbname, array(IGK_FD_AUTH_ID=>$id, IGK_FD_GROUP_ID=>$v, "clGrant"=>1));
                }
                igk_db_reload_index($this, $tbname);
            }
            $this->View();
            igk_navtocurrent();
        }
        else{   
            
            $frm= igk_createnode("form");
            $frm["action"]=$this->getUri(__FUNCTION__);
            $frm["class"]= "auth-edit-form";
            $d=$frm->addDiv();
            $d["class"]="igk-form-group";
            $table=$d->tablehost()->table();
            $table["class"]="igk-table igk-table-hover";
            $r=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPS), null);
            if($r){
                $g=igk_db_table_select_where($this->getDataTableName(), array(IGK_FD_AUTH_ID=>$id));
                $groupindex=array();
                foreach($g->Rows as  $v){
                    $groupindex[$v->clGroup_Id]=$v;
                }
                $tr=$table->addTr();
                $tr->add("th")->addSpace();
                $tr->add("th")->setClass("fitw")->Content=__("lb.Group");
                $tr->add("th")->addSpace();
                foreach($r->Rows as $v){
                    $tr=$table->addTr();
                    $tr->addTd()->addInput("clGroups[]", "checkbox", $v->clId)->setAttribute("checked", isset($groupindex[$v->clId]));
                    $tr->addTd()->Content=$v->clName;
                    IGKHtmlUtils::AddImgLnk($tr->addTd(), igk_js_post_frame($this->getUri("auth_remove_group_ajx&clId=".$id."&clGroupId=".$v->clId)), "drop_16x16");
                }
            } 
            $frm->addHSep();
            $frm->addInput(IGK_FD_ID, "hidden", $id);
            $frm->addInput("confirm", "hidden", 1);
            $frm->addInput("btn.confim", "submit", __("btn.confirm")); 
            igk_ajx_panel_dialog(__("Update authorization : {0}", $row->clName),$frm);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function auth_remove_group_ajx(){
        if(igk_qr_confirm()){
            igk_frame_close(__FUNCTION__);
            $h=igk_db_delete($this, $this->getDataTableName(), array(
                IGK_FD_ID=>igk_getr(IGK_FD_ID),
                IGK_FD_GROUP_ID=>igk_getr(IGK_FD_GROUP_ID)
            ));
            if($h)
                igk_notifyctrl()->addMsgr("msg.group.removed");
            else{
                igk_notifyctrl()->addErrorr("msg.group.not_removed");
            }
            $this->View();
            igk_navtocurrent();
        }
        else{
            $frame=igk_frame_add_confirm($this, __FUNCTION__, $this->getUri(__FUNCTION__));
            $frame->Form->addInput(IGK_FD_ID, "hidden", igk_getr(IGK_FD_ID));
            $frame->Form->Div->Content=__("q.confirm_remove_group_auth");
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function checkauth(){
        $this->setParam("autview", 2);
        $d=igk_createnode("div");
        $row=$d->addRow();
        $frm=$row->addCol()->addForm();
        $frm["action"]=$this->getUri("auth_check_auth");
        $frm["class"]="dispb";
        $frm["igk-ajx-form"] = 1;
        igk_notify_sethost($frm->addDiv(), "notify:checkauth");
        $ul=$frm->add("ul");
        $li=$ul->addLi();
        $li->addLabel()->Content=__("lb.users");
        $select=$li->addSelect("clUser");
        $r=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USERS), null, $this);
        $select->add("option");
        if($r) foreach($r->Rows as  $v){
            if($v->clLastName == "IGKSystem")
                continue;
            $opt=$select->add("option");
            $opt["value"]=$v->clId;
            $fn=trim(igk_user_fullname($v));
            $opt->Content=(empty($fn) ? "NoName://[".$v->clLogin."]": $fn);
        }
        $li=$ul->addLi();
        $li->addLabel()->Content=__("Autorisation");
        $li->adddiv()->addInput("clAuth", "text", "")->setStyle("width: 100%");
        $frm->addInput("btn.input", "submit", __("Check autorisation"));
        $d->addDiv()->setId("auth_output");
        $d->renderAJX();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigCategory(){
        return "management";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "groupauth";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_GROUPAUTHS);
    }
    ///<summary></summary>
    ///<param name="s"></param>
    ///<param name="actionName"></param>
    ///<param name="authTable" default="IGK_TB_AUTHORISATIONS"></param>
    ///<param name="userGroupTable" default="IGK_TB_GROUPAUTHS"></param>
    /**
    * 
    * @param mixed $s
    * @param mixed $actionName
    * @param mixed $authTable the default value is IGK_TB_AUTHORISATIONS
    * @param mixed $userGroupTable the default value is IGK_TB_GROUPAUTHS
    */
    public function IsUserAuthorized($s, $actionName, $authTable=IGK_TB_AUTHORISATIONS, $userGroupTable=IGK_TB_GROUPAUTHS){
        if(($s == null) || empty($actionName))
            return false;
        if($s->clLevel == -1)
            return true;
        return igk_db_is_user_authorized($s, $actionName, $authTable, $userGroupTable);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){

        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }

		$cnf = $this->getConfigNode();
		$t = $this->getTargetNode();
		IGKHtmlUtils::AddItem($t, $cnf);

        $t->ClearChilds();
        $box=$this->viewConfig($t, "title.manageauth", ".help/auth.managerdesc");
        $aut_view = $this->getParam("autview", 1);
        $pan=$box->addNodeCallback(__FUNCTION__."/setting", function($c)use($aut_view) {
            $buri=igk_register_temp_uri(__CLASS__);
            $tab=$c->addAJXTabControl();
            $tab->addTabPage(__("Authorization"), $buri."/auth", $aut_view==1);
            $tab->addTabPage(__("CheckAuth"), $buri."/checkauth", $aut_view==2);
            return $tab;
        }
        , $this); 
    }
}
///<summary>used to store and manage global user's group authorisation </summary>
/**
* used to store and manage global user's group authorisation
*/
final class IGKGroupController extends IGKConfigCtrlBase {
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    private function _removeGroup($id){
        igk_db_delete($this, $this->getDataTableName(), array(IGK_FD_ID=>$id));
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _showConfig(){
        igk_html_add($this->TargetNode, $this->ConfigNode);
        $node=$this->TargetNode->addPanelBox();
        igk_html_add_title($node->addDiv(), "title.Groups");
        $node->addHSep();
        $node->addPanelBox()->addArticle($this, "group.description");
        $node->addHSep();
        switch($this->CurrentView){
            case "viewusers":
            $d=$node->addDiv();
            $id=igk_getr(IGK_FD_ID);
            if (!($group=$this->getParam("selectedGroup"))){
                $group = igk_db_table_select_row(IGK_TB_GROUPS, $id);
            }
            if($group == null){
                $this->CurrentView=null;
                $this->View();
                igk_exit();
            }
            $d->addDiv()->addSectionTitle(5)->Content=__("title.group_1", $group->clName);
            $d=$node->addDiv();
            IGKHtmlUtils::AddImgLnk($d, $this->getUri("group_default_view"), "back_48x48", "48px", "48px");
            igk_notify_sethost($d->addDiv());
            $options=$d->addDiv();
            $users=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USERS), null);
            $tb=$d->addDiv()->addTable();
            $tb["class"]="igk-table-hover";
            $r=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USERGROUPS), array(IGK_FD_GROUP_ID=>$group->clId));
            $tb->setHeader(IGK_STR_EMPTY, __(IGK_FD_NAME), IGK_STR_EMPTY);
            if($r && $r->HasRow){
                $max=10;
                foreach($r->Rows as  $v){
                    $r=$tb->addRow();
                    $u=igk_db_table_select_row(IGK_TB_USERS, array(IGK_FD_ID=>$v->clUser_Id));
                    if($u){
                        $r->addTd()->addInput("clUsers[]", "checkbox", $u->clId);
                        $td=$r->addTd();
                        $td->addspan()->Content=$u->clLogin;
                        $td->addspan()->setClass("fts-i")->Content="(". igk_user_fullname($u).")";
                        IGKHtmlUtils::AddImgLnk($r->addTd(), $this->getUri("group_remove_user&clId=".$v->clId), "drop_16x16");
                    }
                    $max--;
                    if($max<=0)
                        break;
                }
            }
            else{
                $d->addDiv()->Content="No Rows";
            }
            $frm=$options->addForm();
            $frm["action"]=$this->getUri("group_add_userto_group");
            $p=$frm->addSelect(IGK_FD_USER_ID);
            if($users){
                foreach($users->Rows as  $v){
                    if($v->clLastName == "IGKSystem"){
                        continue;
                    }
                    $p->add("option")->setAttribute("value", $v->clId)->Content=igk_user_fullname($v). " (<i>".$v->clLogin."</i>)";
                }
            }
            $group = $this->getParam("selectedGroup");
            $frm->addInput(IGK_FD_GROUP_ID, "hidden", $group->clId);
            IGKHtmlUtils::AddImgLnk($frm->addspan(), "javascript: \$igk(this).getParentByTagName('form').submit();", "add_16x16");
            
            break;
            default:
            $frm=$node->addForm()->setClass("conf-group-list-form");
            $table=$frm->addDiv()->setClass("overflow-x-a")->addTable();
            $table["class"]="igk-table igk-table-striped";
            $tr=$table->addTr();
            $tr->add("th", array("style"=>"width:16px;"))->addSpace();
            $tr->add("th", array("class"=>"fitw"))->Content=__("lb.clName");
            $tr->add("th", array("class"=>"fitw"))->Content=__("Users");
            $tr->add("th", array("style"=>"width:16px;"))->Content=IGK_HTML_SPACE;
            $tr->add("th", array("style"=>"width:16px;"))->Content=IGK_HTML_SPACE;
            // igk_environment()->querybuilder = 1;
            // $grp_table = IGK\Models\Groups::table();
            // $ugrp_table = IGK\Models\Usergroups::table();
            // $e= IGK\Models\Groups::select_query(null, [
            //     queryConstant::Distinct=>1,
            //     queryConstant::Joins=>[
            //         [$ugrp_table=>["type"=>queryConstant::LeftJoin, $grp_table.".clId = ".$ugrp_table.".clGroup_Id"]]
            //     ],
            //     "Columns"=>["*"],
            //     // "GroupBy"=>[$grp_table.".clId"]
            // ])->getRows();
             $e = $this->getDbEntries();
            if($e && ($e->RowCount > 0)) foreach($e->Rows as $v){
                $count = IGK\Models\Usergroups::count([
                    "clGroup_Id"=>$v->clId
                ]);
                $tr=$table->addTr();
                $tr->addTd()->addInput("r", "checkbox", $v->clId);
                $tr->addTd()->Content=$v->clName;
                $tr->addTd()->Content= $count;
                IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("group_view_user&clId=".$v->clId), "user_16x16");
                $td=$tr->addTd();
                IGKHtmlUtils::AddImgLnk($td, igk_js_post_frame($this->getUri("group_dropgroup_ajx&clId=".$v->clId)), "drop_16x16")->setAlt("drop group");
            }
            $frm->addHSep();
            $v_ackdiv=$frm->addDiv();
            $bar=$frm->addActionBar(); 
            IGKHtmlUtils::AddImgLnk($bar->addSpan()->setClass("igk-btn"), igk_js_post_frame($this->getUri("group_add_group_ajx")), "add_16x16");
            break;
        }
    }
    ///<summary></summary>
    ///<param name="groupname"></param>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $groupname
    * @param mixed $n
    */
    public function addAuthToGroup($groupname, $n){
        $ad=igk_get_data_adapter($this);
        if(!$ad->connect()){
            return false;
        }
        $gid=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPS), array(IGK_FD_NAME=>$groupname), $this)->getRowAtIndex(0);
        if(!$gid)
            return false;
        $auth=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_AUTHORISATIONS), array(IGK_FD_NAME=>$n), $this)->getRowAtIndex(0);
        if(!$auth)
            return false;
        $b=array("clGroup_Id"=>$gid->clId, "clAuth_Id"=>$auth->clId);
        $h=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPAUTHS), $b, $this);
        $s=0;
        if(!$h || ($h->RowCount == 0)){
            $obj=igk_db_create_row(IGK_TB_GROUPAUTHS);
            $obj->clGroup_Id=$gid->clId;
            $obj->clAuth_Id=$auth->clId;
            $obj->clGrant=1;
            $s=igk_db_insert_if_not_exists($this, igk_db_get_table_name(IGK_TB_GROUPAUTHS), $obj);
        }
        $ad->close();
        return $s;
    }
    ///<summary></summary>
    ///<param name="groupname"></param>
    ///<param name="u"></param>
    /**
    * 
    * @param mixed $groupname
    * @param mixed $u
    */
    public function addUserToGroup($groupname, $u){
        if(empty($groupname) || !$u)
            return false;
        $ad=igk_get_data_adapter($this);
        if(!$ad->connect()){
            return false;
        }
        $gid=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_GROUPS), array(IGK_FD_NAME=>$groupname), $this)->getRowAtIndex(0);
        if($gid == null){
            $gid=igk_db_create_row(IGK_TB_GROUPS);
            $gid->clName=$groupname;
            if(igk_db_insert($this, igk_db_get_table_name(IGK_TB_GROUPS), $gid)){
                $gid->clId=$ad->getlastId();
            }
            else{
                $ad->close();
                return false;
            }
        }
        $b=array(IGK_FD_USER_ID=>$u->clId, IGK_FD_GROUP_ID=>$gid->clId);
        $h=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_USERGROUPS), $b, $this);
        $s=0;
        if(!$h || ($h->RowCount == 0)){
            $s=igk_db_insert_if_not_exists($this, igk_db_get_table_name(IGK_TB_USERGROUPS), $b);
        }
        $ad->close();
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigCategory(){
        return "management";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "groupconfig";
    }
    ///<summary>get group table definition</summary>
    /**
    * get group table definition
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_GROUPS);
    }
    ///<summary>return an array of authorisation that this user support</summary>
    /**
    * return an array of authorisation that this user support
    */
    public function getUserAuths($u){
        $ad=igk_get_data_adapter($this);
        if(!$ad->connect())
            return null;
        $t=array();
        $c=igk_db_table_select_where(igk_db_get_table_name(IGK_TB_AUTHORISATIONS), null, $this);
        if($c && $c->Success){
            foreach($c->Rows as  $v){
                if($u->IsAuthorize($v->clName)){
                    $t[$v->clId]=$v->clName;
                }
            }
        }
        $ad->close();
        return $t;
    }
    ///<summary>return an array of groups that this user is member of</summary>
    /**
    * return an array of groups that this user is member of
    * @deprecated user model to insteed
    */
    public function getUserGroups($u, $options=null){
        // igk_trace();
        // igk_exit();
        // $ad=igk_get_data_adapter($this);
        // if(!$ad->connect())
        //     return null;
        // if ($options===null)
        //     $options = [];
        $gid = \IGK\Models\Usergroups::getUserGroups($u->clId);
        // $options["OrderBy"] = ["clName|ASC"];
        // $options["Joins"] = [
        //     [Groups::table()=>QueryBuilder::LeftJoin(Groups::table().".clId on clGroup_Id")]
        // ];

        // $gid= null;
        // //  Usergroups::select_query(
        // //     array(IGK_FD_USER_ID=>$u->clId), 
        // //     $options);

        // $t=array();
        if($gid && $gid->Success){
            foreach($gid->Rows as  $v){
                $g=$ad->select(igk_db_get_table_name(IGK_TB_GROUPS), array(IGK_FD_ID=>$v->clGroup_Id))->getRowAtIndex(0);
                $t[$v->clGroup_Id]=$g->clName;
            }
        } 
        return $t;
    }
    ///<summary></summary>
    ///<param name="n" default="null"></param>
    /**
    * 
    * @param mixed $n the default value is null
    */
    public function group_add($n=null){
        if($n == null){
            $v=igk_get_robj();
            $table = igk_db_get_table_name(IGK_TB_GROUPS);
            if($v){
                $e=igk_db_table_select_where($table, array(IGK_FD_NAME=>$v->clName), $this);
                if($e){
                    $s=$e->Success;
                    if(!$s){
                        igk_db_insert($this, $table, $v);
                    }
                }
                $this->View();
            }
        }
        else{
            $table = igk_db_get_table_name(IGK_TB_GROUPS);
            $e=igk_db_table_select_where($table, array(IGK_FD_NAME=>$n), $this);
            if($e){
                $s=$e->Success;
                if(!$s){
                    igk_db_insert($this, $table, array(IGK_FD_NAME=>$n));
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_add_group_ajx(){
        $frame=igk_html_frame($this, "group_add_new_frame");
        $frame->title=__("title.AddNewGroup");
        $div=$frame->BoxContent;
        $frm=$div->addForm();
        $frm["action"]=$this->getUri("group_add");
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput(IGK_FD_NAME, IGK_STR_EMPTY);
        $frm->addHSep();
        $frm->addInput("btn.add", "submit", __("btn.Add"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_add_userto_group(){
        $obj=igk_get_robj();
        $table = igk_db_get_table_name(IGK_TB_USERGROUPS);
        if(igk_db_insert_if_not_exists($this, $table, array(
            IGK_FD_USER_ID=>$obj->clUser_Id,
            IGK_FD_GROUP_ID=>$obj->clGroup_Id
        ))){
            igk_notifyctrl()->addMsgr("msg.group.association.success");
        }
        else{
            igk_notifyctrl()->addErrorr("e.group.association.failed");
        }
        $this->View();
        igk_navto(igk_server()->HTTP_REFERER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_default_view(){
        $this->CurrentView=null;
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_dropgroup_ajx(){
        $id=igk_getr(IGK_FD_ID);
        if(igk_qr_confirm()){
            if($this->_removeGroup($id)){
                igk_notifyctrl()->addMsgr("msg.group.removed");
            }
            $this->View();
            $this->TargetNode->RenderAJX();
        }
        else{
            $frame=igk_frame_add_confirm($this, "confirm_frame", $this->getUri("group_dropgroup_ajx&clId=".$id));
            $frame->Form->Div->Content=__("msg.confirmsuppression");
            $frame->Form->Div->addInput(IGK_FD_ID, "hidden", $id);
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_remove_user(){
        $table = igk_db_get_table_name(IGK_TB_USERGROUPS);
        igk_db_delete($this, $table, igk_getr(IGK_FD_ID));
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_view_auth(){
        $this->CurrentView="viewauth";
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function group_view_user(){
        $this->CurrentView="viewusers";
        $this->setParam("selectedGroup", igk_db_table_select_row(
            igk_db_get_table_name(IGK_TB_GROUPS), igk_getr(IGK_FD_ID)));
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){
        igk_reg_hook(IGKEvents::HOOK_DB_DATA_ENTRY, function($hook){
            $db=$hook->args[0];
            $n=$hook->args[1];
            if($n == $this->getDataTableName()){
                $db->insert($n, array(IGK_FD_NAME=>"user"));
                $db->insert($n, array(IGK_FD_NAME=>"administrator"));
                $db->insert($n, array(IGK_FD_NAME=>"client"));
                $db->insert($n, array(IGK_FD_NAME=>"vendor"));
                $db->insert($n, array(IGK_FD_NAME=>"robot"));
            }
        });
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $this->TargetNode->ClearChilds();
        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }
        $this->_showConfig();
    }
}
///represent a language language controller
/**
*/
final class IGKLangCtrl extends IGKConfigCtrlBase {
    const DEFAULT_LANG_FOLDER=IGK_DEFAULT_LANG_FOLDER;
    const SEARCH_KEY=0x01;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function add_key(){
        $n=igk_getr(IGK_FD_NAME);
        $v=igk_getr("clvalue");
        if(!empty($n)){
            R::AddLang($n, $v);
            R::SaveLang();
        }
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function add_key_frame_ajx(){
        $frame=igk_html_frame($this, "add_key_frame");
        $frame->ClearChilds();
        $frame->Title=__("title.editLangkeyframe");
        $d=$frame->BoxContent;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("add_key");
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput(IGK_FD_NAME);
        $ul->addLi()->addSLabelInput("clvalue");
        $frm->addHSep();
        $frm->addBtn("btn_add", __("btn.add"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clearall(){
        if(igk_qr_confirm()){
            R::ClearLang();
            $this->View();
        }
        else{
            $frame=igk_frame_add_confirm($this, "frame_Clearall", $this->getUri("Clearall"));
            $frame->Form->Div->Content=__("Q.AREUSHURETODELETEALL");
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function get_new_keys(){
        $this->m_search_new_key=!($this->m_search_new_key);
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "langconfig";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConfigPageAvailable(){
        return  !igk_environment()->is("production");
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function GetLangExpression($key){
        igk_set_env(__FUNCTION__, 1);
        $t=$this->getFlag("EDITION_KEY");
        if(!isset($t[$key]))
            return "";
        $g=igk_getv($t, $key, []);
        $t=[];
        foreach($g as  $v){
            $o=call_user_func_array(array("R", "ngets"), array_merge(array($key), $v));
            $t[]=$o->getValue();
        }
        igk_set_env(__FUNCTION__, null);
        return igk_json_encode((object)$t);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getlangkeys(){
        $format=igk_getr("format", "xml");
        $v_node=igk_createnode("languages");
        switch($format){
            case "xml":
            header("Content-Type: application/xml");
            break;
        }
        $v_node["name"]=R::GetCurrentLang();
        $tab=R::GetLangInfo();
        $ktab=array_keys($tab);
        igk_usort($ktab, "igk_key_sort");
        $c=0;
        foreach($ktab as $k){
            $v=$tab[$k];
            $tr=$v_node->add("item");
            $tr["name"]=igk_parsexmlvalue($k);
            $tr["value"]=igk_parsexmlvalue($v);
        }
        igk_wl($v_node->Render());
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_LANG_CTRL;
    }

    ///<summary></summary>
    /**
    * 
    */
    public function getSearchKey(){
        return $this->getParam(self::SEARCH_KEY);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        igk_reg_hook("LangPageChanged", function($e){
            $this->View();
        });
        if(!igk_sys_env_production()){
            igk_reg_hook("LangKeyAdded", function($e){
                $this->keyAdded($this, $e->args[0]);
            });
        } 
    }
    ///<summary></summary>
    ///<param name="funcName"></param>
    /**
    * 
    * @param mixed $funcName
    */
    public function IsFunctionExposed($funcName){
        switch($funcName){
            case "getlangkeys":
            case "mod_key":
            return true;
        }
        return parent::IsFunctionExposed($funcName);
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $key
    */
    public function keyAdded($obj, $key){
        $v=$this->getEnvParam("lang:onview");
        if(!$v && $this->getIsVisible()){
            if(!empty($key)){
                $this->View();
            }
            else
                igk_die("try to add empty key");
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lang_add_lang(){
        $f=igk_getv($_FILES, "clFile");
        $c=igk_getr("clKey");
        igk_getctrl(IGK_CSVLANGUAGE_CTRL)->addLang($c);
        if($f["size"] > 0){
            igk_getctrl(IGK_PIC_RES_CTRL)->loadtempfile($f["tmp_name"], $f["name"], "flag_".$c, "Flags");
        }
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lang_add_new_frame_ajx(){
        $frame=igk_html_frame($this, "add_lang_frame");
        $frame->Title=__("title.AddNewLang");
        $frame->ClearChilds();
        $frm=$frame->BoxContent->addForm();
        $frm["action"]=$this->getUri("lang_add_lang");
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput("clKey");
        $ul->addLi()->addSLabelInput("clFile", "file");
        $frm->addHSep();
        $frm->addInput("btn_submit", "submit", __("btn.add"));
        $frame->RenderAJX();
        return $frame;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lang_getKeys_ajx(){
        return;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lang_skey(){
        $this->setSearchKey(igk_getr("q"));
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lang_skey_ajx(){
        $this->lang_skey();
        igk_wl($this->TargetNode->innerHTML);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lang_store_external(){
        R::SaveLangXml();
        $f=igk_io_basedir(IGK_RES_FOLDER."/Lang/".R::GetCurrentLang().".xml");
        igk_download_file("lang.".R::GetCurrentLang().".xml", $f);
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="$c"></param>
    /**
    * 
    * @param mixed $c
    */
    private function loadLangOptions($c){
        IGKHtmlUtils::AddBtnLnk($c, __("btn.add"), "#", array("onclick"=>igk_js_post_frame($this->getUri("add_key_frame_ajx")). " return false; "));
        IGKHtmlUtils::AddBtnLnk($c, __("btn.searchnewkey"), $this->getUri("get_new_keys"));
        IGKHtmlUtils::AddBtnLnk($c, __("btn.reload"), $this->getUri("reloadlang"));
        IGKHtmlUtils::AddBtnLnk($c, __("btn.storeasexternal"), $this->getUri("lang_store_external"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function mod_key(){
        if(!igk_is_conf_connected()){
            igk_navto(igk_io_baseuri());
            igk_exit();
        }
        if(igk_qr_confirm()){
            $n=igk_getr(IGK_FD_NAME);
            $v=igk_getr("clValue");
            R::AddLang($n, $v);
            R::SaveLang();
            if(R::GetKeyValue($n) != $v){
                igk_die("failed to store value");
            }
            $g=$this->GetLangExpression($n);
            igk_frame_close(__FUNCTION__);
            igk_app()->ViewControllers();
            igk_createnode("script")->setContent("igk.winui.framebox.closeCurrentFrame(); igk.rmCurrentScript(); ")->RenderAJX();
            $this->ResetLangExpression($n);
            igk_createnode("script")->setContent("igk.winui.langkey.fn.update('{$n}', '{$v}', {$g});")->RenderAJX();
            igk_notification_push_event("sys://langkey/changed", $this);
            igk_exit();
        }
        else{
            $f=igk_html_frame($this, __FUNCTION__);
            $f->BoxContent->ClearChilds();
            $frm=$f->BoxContent->addDiv()->addForm();
            $frm["action"]=$this->getUri(__FUNCTION__);
            $frm["igk-ajx-form"]=1;
            $f->Title=__("title.lang.changekeyvalue");
            $frm->addGroupControl()->addSLabelInput(IGK_FD_NAME, "text", igk_getr("key"))->input->setClass("igk-form-control")->setAttribute("readonly", "true");
            $frm->addGroupControl()->addSLabelInput("clValue", "text", igk_getr("key"))->input->setClass("igk-form-control");
            $frm->addHSep();
            $frm->addDiv()->addInput("btn.update", "submit", __("Update"))->setClass("igk-btn igk-btn-default");
            $frm->addDiv()->addInput("confirm", "hidden", 1);
            $frm->addHidden("ctrl", igk_getr("ctrl"));
            $f->RenderAJX();
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function onLangChanged($ctrl){
        $r=R::getInstance();
        $c=$r->langChangedConf;
        if($ctrl->isChanged("LangChanged", $c)){
            $this->reloadlang();
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $args
    */
    public function RegKeyLang($key, $args){
        if(!igk_get_env("GetLangExpression") && igk_env_count(__FUNCTION__) == 1){
            $this->setFlag("EDITION_KEY", null);
        }
        $t=$this->getFlag("EDITION_KEY") ?? array();
        if(isset($t[$key])){
            $t[$key][]=$args;
        }
        else
            $t[$key][]=$args;
        $this->setFlag("EDITION_KEY", $t);
        return igk_count($t[$key]) - 1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function reloadlang(){
        R::LoadLang();
        $this->View();
    }
    ///remove selected items
    /**
    */
    public function removeselectedmenu(){
        $m=igk_getr("max_values", 0);
        $keys=igk_getr("e_keys", null);
        $mc=0;
        $tab=& R::getInstance()->langRes;
        $before=count($tab);
        for($i=0; $i < $m; $i++){
            $t=igk_getr("check_values_".$i);
            if($t){
                $n=$keys[$i];
                if(R::RemoveKey($n)){
                    $mc++;
                }
            }
        }
        $after=count($tab);
        if(R::SaveLang()){
            igk_notifyctrl()->addMsg("delete selected value ".$mc. ":".$before. " / ".$after. "/".count(R::getInstance()->langRes));
        }
        else{
            igk_notifyctrl()->addErrorr("E.LangNotSave");
        }
        igk_navtocurrent();
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    private function ResetLangExpression($key){
        $t=$this->getFlag("EDITION_KEY");
        if($t){
            unset($t[$key]);
        }
        $this->setFlag("EDITION_KEY", igk_count($t) > 0 ? $t: null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function rmkey(){
        $n=base64_decode(igk_getr("n"));
        R::RemoveKey($n);
        R::SaveLang();
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function sourceScript(){
        $uri=$this->getUri("");
        return "ns_igk.readyinvoke('igk.ctrl.regCtrl', '{$this->Name}', '{$uri}');";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_language_ajx(){
        if(igk_getr("btn_rmsel") != null){
            $this->removeselectedmenu();
            return;
        }
        $td=igk_getr("e_keys", null);
        $tv=igk_getr("e_values", null);
        if(is_array($td)){
            foreach($td as $k=>$v){
                R::AddLang($v, $tv[$k]);
            }
        }
        if(R::SaveLang()){
            igk_notifyctrl()->addMsgr("msg.languageupdated");
        }
        else{
            igk_notifyctrl()->addErrorr("E.LanguageNotupdated");
        }
        igk_ajx_replace_ctrl_view($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        igk_google_addfont(igk_app()->Doc, "Roboto");
        $this->setEnvParam("lang:onview", true);
        igk_app()->Doc->getLang( R::GetCurrentLang());
        $c=$this->TargetNode;
        $c["class"]="google-Roboto";
        $c->ClearChilds();
        if(!$this->getIsVisible()){
            igk_html_rm($c);
            return;
        }
        igk_html_add($c, $this->ConfigNode);
        $c->Index=100;
        $div=$c->addDiv()->addPanelBox();
        igk_html_add_title($div, "title.language.ctrlconfig");
        $div->addHSep();
        $div->addPanelBox()->addArticle($this, "language.description");
        $div=$div->addDiv();
        $div["style"]="margin:16px 0px 16px 0px;";
        $div->addHSep();
        $frm=$div->addForm();
        $languages=$frm->add("ul");
        $languages["class"]=
        $languages["id"]="igk-language-list";
		if ($g = igk_getctrl(IGK_CSVLANGUAGE_CTRL)->Languages){
			foreach($g as $v){
				$languages->addLi()->add("a", array("href"=>"?l=".$v))->add("img", array("src"=>R::GetImgUri("flag_$v")));
			}
		}
        IGKHtmlUtils::AddImgLnk($frm, igk_js_post_frame($this->getUri("lang_add_new_frame_ajx")), "add_16x16");       
    }
}
require_once(__DIR__."/Lib/Classes/IGKMYSQLDbConfigController.php");


///<summary>mail controller</summary>
/**
* mail controller
*/
class IGKMailCtrl extends IGKConfigCtrlBase {

    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="func"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $func
    */
    public function addMailSendEvent($obj, $func){
        igk_die(__METHOD__." Not Obselete");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "mailserver";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_MAIL_CTRL;
    }
    ///<summary>initialize system mail configuration</summary>
    ///<param name="mail">mail object</param>
    /**
    * Rinitialize system mail configuration
    * @param mixed $mail
    */
    private function init_mail_config($mail){
        $mail->UseAuth=igk_app()->Configs->mail_useauth;
        $mail->User=igk_app()->Configs->mail_user;
        $mail->Pwd=igk_app()->Configs->mail_password;
        $mail->Port=igk_app()->Configs->mail_port;
        $mail->SmtpHost=igk_app()->Configs->mail_server;
        $mail->SocketType=igk_app()->Configs->mail_authtype;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function initMailSetting(){
        ini_set("smpt_port", igk_app()->Configs->mail_port);
        ini_set("SMTP", igk_app()->Configs->mail_server);
        ini_set("sendmail_from", igk_app()->Configs->mail_admin);
    }
    ///<summary></summary>
    ///<param name="func" default="null"></param>
    /**
    * 
    * @param mixed $func the default value is null
    */
    public function IsFunctionExposed($func){
        $tab=igk_array_createkeyarray(array("sendmailto", "register"), 1);
        if(isset($tab[$func]))
            return true;
        return parent::IsFunctionExposed($func);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function lock_mail(){
        $c=igk_getr("clEmail");
        igk_db_update($this, igk_db_get_table_name(IGK_TB_MAINLINGLISTS), array("clActive"=>2), array("clEmail"=>$c));
        igk_sys_force_view();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function mail_testmail(){
        $app=igk_app();
        $to=igk_getr("clTestMail");
        if (empty($subject = igk_getr("subject")))
            $subject = __("Mail test: {0}", $app->Configs->website_domain);
        if (empty($msg=igk_getr("msg")))
            $msg = __("<h1>Mail </h1><div>This is a test mail from <b>{0}</b></div>", $app->Configs->website_domain);
        igk_app()->Configs->mail_testmail=$to;
        igk_save_config();
        $mailctrl=igk_getctrl(IGK_MAIL_CTRL);
        $c=$app->Configs->mail_contact;
        if(($mailctrl != null) && !empty($c)){
            if($mailctrl->sendmail($c, $to, $subject, $msg)){
                igk_notifyctrl("mail:notifyResponse")->addSuccessr("msg.mailsend");
                igk_resetr();
            }
            else{
                igk_notifyctrl("mail:notifyResponse")->addError(__("msg.mailnotsend"). " ".$mailctrl->ErrorMsg. " ".igk_debuggerview()->getMessage());
            }
        }
        else{
            $this->msbox->addError("error ... ".$app->Configs->mail_contact);
        }
        igk_set_env("replace_uri", igk_io_request_uri_path());
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function mail_update(){
        $server=igk_getr("server");
        $mail=igk_getr("baseFrom");
        $port=igk_getr("port");
        $useauth=igk_getr("useauth");

		if (igk_server()->method("POST") &&  igk_valid_cref(1)){
            $cnf = igk_app()->Configs;
			$cnf->mail_server=$server;
			$cnf->mail_port=$port;
			$cnf->mail_admin=$mail;
			$cnf->mail_useauth=$useauth;
			$cnf->mail_contact=igk_getr("clContactTo");
			$cnf->mail_authtype=igk_getr("clAuthType");
			$cnf->mail_user=igk_getr("clMailUser");
			$cnf->mail_password=igk_getr("clMailPwd");
			igk_save_config();
			igk_notifyctrl("mailconfig")->addSuccessr("Mail setting's updated");
		}
        igk_navtocurrent();
    }
    ///<summary></summary>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $args
    */
    public function onMailSended($args){
        igk_hook("MailSend", array($this, $args));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function register(){
        $n="sys://mailregisterform";
        $c=igk_getr("clEmail");
        $n=igk_notifyctrl()->getNotification($n, true);
        if(empty($c)){
            $n->addErrorr("msg.emailnotvalid");
        }
        else{
            $n->addMsgr("msg.mailregistered");
            igk_resetr();
            igk_db_insert_if_not_exists($this, IGK_TB_MAINLINGLISTS ,array("clEmail"=>$c));
        }
        igk_sys_force_view();
        igk_navtocurrent();
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="func"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $func
    */
    public function removeMailSendEvent($obj, $func){
        igk_die(__METHOD__." Not Obselete");
    }
    ///<summary></summary>
    ///<param name="fromName"></param>
    ///<param name="message" default="null"></param>
    /**
    * 
    * @param mixed $fromName
    * @param mixed $message the default value is null
    */
    public function send_contactmail($fromName, $message=null){
        $obj=igk_get_robj();
        $enode=igk_createnode("div");
        $mail=new IGKMail();
        $this->initMailSetting();
        $this->init_mail_config($mail);
        $mail->addTo(igk_app()->Configs->mail_contact);
        $div=igk_createnode("div");
        $div["style"]="border:1px solid black; min-height:32px;";
        $ul=$div->add("ul");
        $ul->addLi()->Content="Message From: ".$fromName;
        $ul->addLi()->Content="Email: ".$obj->clYourmail;
        $msg=$div->addDiv();
        $msg->Content=$obj->clMessage;
        $mail->HtmlMsg=utf8_decode($div->Render());
        $mail->Title=utf8_decode($obj->clSubject);
        $mail->ReplyTo=$obj->clYourmail;
        $mail->From="website@".igk_app()->Configs->website_domain;
        if($mail->sendMail()){
            igk_resetr();
            $div=igk_createnode("div");
            $div->Content=__("msg.email.correctlysend");
            $div->addScript()->Content="igk.animation.autohide(igk.getParentScript(), 3000);";
            $e=new IGKHtmlSingleNodeViewer($div);
            $this->onMailSended(array(
                "clEmail"=>$obj->clYourmail,
                "clFirstName"=>$obj->clFirstName,
                "clLastName"=>$obj->clLastName
            ));
            return array(true, $e);
        }
        else{
            $enode->addLi()->Content=__("msg.mail.sendmailfailed");
            return array(false, $enode);
        }
    }
    ///<summary></summary>
    ///<param name="from"></param>
    ///<param name="to"></param>
    ///<param name="subject"></param>
    ///<param name="message"></param>
    ///<param name="reply" default="null"></param>
    ///<param name="attachement" default="null"></param>
    ///<param name="type" default="text/html"></param>
    /**
    * 
    * @param mixed $from
    * @param mixed $to
    * @param mixed $subject
    * @param mixed $message
    * @param mixed $reply the default value is null
    * @param mixed $attachement the default value is null
    * @param mixed $type the default value is "text/html"
    */
    public function sendmail($from, $to, $subject, $message, $reply=null, $attachement=null, $type="text/html"){
        $header=null;
        $this->initMailSetting();
        if($reply){
            ini_set("mail_from", $reply);
        }
        return IGKMail::Mail($to, $subject, $message, $from, $reply, $attachement, $type);       
    }
    ///<summary></summary>
    /**
    * 
    */
    public function sendmailto(){
        $to=igk_getr("n");
        $s=igk_getr("s");
        $m=igk_createnode("script");
        $m->Content=<<<EOF
window.open("mailto:$to?subject=$s","sendmail");
EOF;
        igk_app()->Doc->body->add(new IGKHtmlSingleNodeViewer($m));
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }
        $c=$this->TargetNode;
        igk_html_add($c, $this->ConfigNode);
        $c=$c->ClearChilds()->addPanelBox();
        igk_html_add_title($c, "title.configmailserver"); 
        igk_html_article($this, "mailserver", $c->addPanel());
        $div=$c->addDiv();

        $div->addNotifyHost("mailconfig");
        $frm=$div->addForm();
        $frm["method"]="POST";
        $frm["action"]=$this->getUri("mail_update");

        igk_html_form_initfield($frm);
        $attribs = ["class"=>"fitw igk-form-control form-control"];

        $frm->addDiv()->addSLabelInput("server", "text", igk_app()->Configs->mail_server, $attribs);
        $frm->addDiv()->addSLabelInput("baseFrom", "text", igk_app()->Configs->mail_admin, $attribs);
        $frm->addDiv()->addSLabelInput("port", "text", igk_app()->Configs->mail_port, $attribs);
        $o=$frm->addDiv()->addSLabelInput("useauth", "checkbox", igk_app()->Configs->mail_useauth, $attribs);
        $o->input["value"]="1";
        $o->setclass("dispib")->setStyle("width: 32px;");
        $frm->div()->host(function($t){
            $t->addLabel("cl.mailAuthType", __("clAuthType"));
            $sl=igk_html_build_select($t, "clAuthType", array("ssl"=>"ssl", "tsl"=>"tsl"), null, igk_app()->Configs->mail_authtype);            
            $sl["class"]="igk-form-control";
        });
        
        
        
        $frm->addDiv()->addSLabelInput("clMailUser", "text", igk_app()->Configs->mail_user);
        $frm->addDiv()->addSLabelInput("clMailPwd", "password", igk_app()->Configs->mail_password);
        $frm->addDiv()->addSLabelInput("clContactTo", "text", igk_app()->Configs->mail_contact, $attribs);
        $frm->actionbar(function($t){
            $t->addBtn("btn_update", __("Update"));
        });

        $frm=$div->addForm();
        igk_notify_sethost($frm->addDiv(), "mail:notifyResponse");
        $frm["method"]="POST";
        $frm["action"]=$this->getUri("mail_testmail");
        $frm["class"] = "+send-mail-form";
        $fs=$frm->add("fieldset");
        $fs["style"]="padding: 15px; margin-left:-15px; margin-right: -15px; margin-bottom: 10px; border-bottom:none;";        
        $fs->add("legend")->setContent(__("Mail testing"));

        $frm->host(function($f){
            $f->addDiv()->addSLabelInput("clTestMail", "text", igk_app()->Configs->mail_testmail);
            $g = $f->addDiv()->addSLabelInput("subject", "text", "");
            $g->input->setAttribute("placeholder", __("Subject"));
            $dv=$f->addDiv();
            $dv->addLabel("msg")->Content=__("Message");
            $dv->addTextarea("msg")
            ->setClass("igk-form-control")
            ->setAttribute("placeholder", "Message");
            $dv = $f->addDiv();
            $dv->add("label")->Content = "&nbsp;";
            $dv->actionbar()->setClass("dispib")->addBtn("btn_testmail", __("Send"));
        });

        if($rp=igk_get_env("replace_uri")){
            $c->addObData(function() use ($rp){igk_ajx_replace_uri(igk_io_request_uri_path());
            });
        }
    }
}
///<summary>represent a menu controller. It's used to manage global menu and system's configuration menu.</summary>
/**
* represent a menu controller. It's used to manage global menu and system's configuration menu.
*/
final class IGKMenuCtrl extends IGKConfigCtrlBase {
    const CONFIG_MENU_FLAG=0xa02;
    const CONFIG_SELECTED_GROUP=0xa03;
    const CONFIG_SELECTED_MENU=0xa04;
    const CONFIG_SELECTED_PAGE=0xa05;
    const MENU_CHANGE_KEY="CustomMenuChanged";
    const SYSTEM_MENU_FLAG=0xa01;
    const USER_MENU_FLAG=0xa0a;
    ///<summary></summary>
    ///<param name="storeconfig" default="true"></param>
    /**
    * 
    * @param mixed $storeconfig the default value is true
    */
    function __ClearConfigMenu($storeconfig=true){
        $this->m_customMenu=array();
        $this->storeDBConfigsSettingMenu($storeconfig);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
        $this->m_CurrentPage=IGK_DEFAULT_VIEW;
        $this->m_CurrentPageIndex=0;
    }
    ///<summary></summary>
    ///<param name="div"></param>
    ///<param name="selectedMenu"></param>
    ///<param name="key" default="lb.Controller"></param>
    ///<param name="remove" default="IGK_STR_EMPTY"></param>
    /**
    * 
    * @param mixed $div
    * @param mixed $selectedMenu
    * @param mixed $key the default value is "lb.Controller"
    * @param mixed $remove the default value is IGK_STR_EMPTY
    */
    public function __getEditController($div, $selectedMenu, $key="lb.Controller", $remove=IGK_STR_EMPTY){
        $tab=igk_sys_getuserctrls();
        $li=$div->addLi();
        $li->addLabel()->Content=__($key);
        $sel=$li->add("select");
        $sel["class"] = "igk-form-control";
        $sel["id"]=
        $sel["name"]="clController";
        $sel->add("option", array("value"=>"none"))->Content=IGK_HTML_SPACE;
        if(count($tab) > 0){
            foreach($tab as $v){
                if(strtolower($remove) == strtolower($v->getName()))
                    continue;
                $opt=$sel->add("option", array("value"=>$v->getName()));
                if($selectedMenu == $v->getName())
                    $opt["selected"]=true;
                $opt->Content=$v->getName();
            }
        }
        return $sel;
    }
    ///<summary></summary>
    ///<param name="host"></param>
    ///<param name="ctrl"></param>
    ///<param name="target"></param>
    ///<param name="tab"></param>
    ///<param name="tname" default="li"></param>
    ///<param name="selected" default="null"></param>
    /**
    * 
    * @param mixed $host
    * @param mixed $ctrl
    * @param mixed $target
    * @param mixed $tab
    * @param mixed $tname the default value is "li"
    * @param mixed $selected the default value is null
    */
    private function __initBuildMenu($host, $ctrl, $target, $tab, $tname="li", $selected=null){
        $cp=array_merge($tab);
        $keys=array_keys($cp);
        $values=array_values($cp);
        $pile=array();
        $path="";
        $m=null;
        $ul = null;
        while((igk_count($cp) > 0) && ($q=(object)array(
            "c"=>array_shift($cp),
            "key"=>array_shift($keys),
            "target"=>$target
        )) || ((igk_count($pile)>=0) && ($m=array_pop($pile)))){
            if($m){
                $keys=array_keys($m->c);
                $cp=$m->c;
                $target=$m->target;
                $path=$m->key;
                $m=null;
                continue;
            }
            $li=$q->target->add($tname);
            $k=$q->key;
            $v=$q->c;
            if($selected == $k){
                $li->setClass("igk-active");
            }
            if($host->Diseable == $k){
                $li->setClass("igk-diseable");
            }
            $uri="#";
            if(is_string($v))
                $uri=$v;
            else if(is_object($v))
                $uri=$v->getUri();
            $a=$li->addA($uri)->setClass("");
            $a->Content=__("Menu.".$k);
            if(is_array($v)){
                $ul=$li->add($target->TagName);
                array_push($pile, (object)array(
                    "c"=>$v,
                    "key"=>!empty($path) ? $path.".".$k: $k,
                    "target"=>$ul
                ));
            }
            else if(is_object($v) && method_exists($v, "getSubmenu")){
                $t=$v->getSubmenu();
                if($t && (igk_count($t) > 0)){
                    array_push($pile, (object)array(
                        "c"=>$v,
                        "key"=>!empty($path) ? $path.".".$k: $k,
                        "target"=>$ul
                    ));
                }
            }
        }
    }
    ///<summary>load configuration menu</summary>
    /**
    * load configuration menu
    */
    private function __loadConfigurationMenuSetting(){
        $tab=array();
        $f=IGK_LIB_DIR."/".IGK_DATA_FOLDER."/config.menu.xml";
        if(file_exists($f)){
            $d=igk_createnode("div");
            $d->Load(igk_io_read_allfile($f));
            $e=igk_getv($d->getElementsByTagName("configmenu"), 0);

            $c=$e ? $e->Childs: null;
            foreach($c as  $v){
                $s=array();
                $ch=$v->Childs;
                if($ch){
                    foreach($ch as $c=>$m){
                        $s[$m->TagName]=$m->innerHTML;
                    }
                    $tab[$v->TagName]=(object)$s;
                }
            }
        }
        return (object)$tab;
    }
    ///<summary></summary>
    /**
    * 
    */
    function __saveConfigMenu(){
        igk_debug_wln("warning: _saveConfigMenu [".igk_count($this->m_customMenu)."]");
        $out=IGK_STR_EMPTY;
        $i=false;
        $line=null;
        foreach($this->m_customMenu as $v){
            if($i)
                $out .= IGK_LF;
            $line=IGK_STR_EMPTY;
            $v_sep=false;
            foreach($v as $c=>$m){
                $m=trim($m);
                if($v_sep){
                    $line .= igk_csv_sep();
                }
                else{
                    $v_sep=true;
                }
                if(!empty($m))
                    $line .= $m;
            }
            $out .= $line;
            $i=true;
        }
        $v=igk_io_save_file_as_utf8(igk_io_currentrelativepath(IGK_MENU_CONF_DATA), $out, true);
        if($v)
            igk_sys_regchange(self::MENU_CHANGE_KEY, $this->m_menuChangedState);
        return $v;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    private function _getParentName($name){
        return IGKMenuUtils::GetParentName($name);
    }
    ///<summary></summary>
    ///<param name="menu"></param>
    /**
    * 
    * @param mixed $menu
    */
    private function _getRootMenu($menu){
        if(($menu == null) || is_array($menu))
            return null;
        if($menu->MenuParent === null)
            return $menu;
        return $this->_getRootMenu($menu->MenuParent);
    }
    ///<summary></summary>
    ///<param name="e" ref="true"></param>
    ///<param name="v_ctab"></param>
    ///<param name="cul"></param>
    ///<param name="bygroup" default="false"></param>
    /**
    * 
    * @param mixed * $e
    * @param mixed $v_ctab
    * @param mixed $cul
    * @param mixed $bygroup the default value is false
    */
    private function _initConfigMenu(& $e, $v_ctab, $cul, $bygroup=false){
        if($bygroup){
            $group=array();
            foreach($v_ctab as $t=>$m){
                $gp=$m->Group;
                if(!empty($gp)){
                    if(!isset($group[$gp])){
                        $group[$gp]=array();
                    }
                    $group[$gp][]=(object)array("Menu"=>$m, "Node"=>IGK_STR_EMPTY);
                }
                else{
                    var_dump($m);
                    igk_wln("no group ".$m);
                }
            }
            $div=$cul->addAccordeon();
            foreach($group as $k=>$v){
                $ul=igk_createnode("div");
                $t=igk_createnode();
                $t["class"]="igk-row thead";
                $t->addDiv()->setClass("ico ".strtolower($k));
                $t->addDiv()->Content=__("group.".$k);
                $pan=$div->addPanel($t, $ul, false);
                $pan->setClass("fmenu-h");
                foreach($v as $t=>$m){
                    $this->_initMenu($ul, $m->Menu, $e);
                    $e[$m->Menu->Name]=$m->Menu;
                }
            }
        }
        else{
            foreach($v_ctab as $t=>$m){
                $this->_initMenu($cul, $m, $e);
                $e[$m->name]=$m;
            }
        }
    }
    ///<summary></summary>
    ///<param name="ul"></param>
    ///<param name="menu"></param>
    ///<param name="pages" default="null" ref="true"></param>
    /**
    * 
    * @param mixed $ul
    * @param mixed $menu
    * @param mixed * $pages the default value is null
    */
    private function _initMenu($ul, $menu, & $pages=null){
        IGKMenuUtils::InitMenu($ul, $menu, $pages);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initSysConfigMenu(){
        igk_set_env("sys://configs/menu", $this->__loadConfigurationMenuSetting());
        //$tab=array();
        $ctab=array();
        $v_ctab=array();
        //$v_Menus=array();
        $v_CPages=array();
        $v_confctrl=igk_getconfigwebpagectrl();
        foreach(igk_app()->getControllerManager()->getControllers() as $v){
            if($v !== $v_confctrl){
                if(!(is_subclass_of(get_class($v), IGKConfigCtrlBase::class) && $v->getIsConfigPageAvailable()))
                    continue;
                $cm=$v->initConfigMenu();
                if($cm !== null){
                    $v_ctab=array_merge($v_ctab, $cm);
                }
            }
            else{
                $ctab=array_merge($ctab, $v->initConfigMenu());
            }
        }
        //$v_sortByIndex=array("IGKMenuItem", "SortMenuByIndex");
        //$v_sortByName=array("IGKMenuItem", "SortMenuByName");
        $v_sortByDisplayText=array("IGKMenuItem", "SortMenuByDisplayText");
        $v_configTargetNode=igk_createnode("div");
        $v_configTargetNode["class"]="igk-config-menu-font google-Roboto";
        // $v_configTargetNode["igk-js-autofix"]=1;
        // $v_configTargetNode["igk-autofix-style"]="{'left':'0px', 'top':'10px', 'bottom':'10px', 'width':'200px'}";
        $v_configTargetNode->Index=-9999;
        $v_configTargetNode->clearChilds();
        $v_configTargetNode->addVscrollbar();
        $div=$v_configTargetNode->addLi()->addDiv();
        $ul=$div->add("ul");
        $this->_initConfigMenu($v_CPages, $ctab, $ul, false);
        igk_usort($v_ctab, $v_sortByDisplayText);
        $this->_initConfigMenu($v_CPages, $v_ctab, $v_configTargetNode->addLi()->add("ul"), true);
        $v_configTargetNode->addBalafonJS()->Content=<<<EOF
ns_igk.readyinvoke('igk.configmenu.init', ns_igk.getParentScript());
EOF;
        return $v_configTargetNode;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _LoadConfigMenu(){
        $this->m_customMenu=array();
        $f=igk_io_syspath(IGK_MENU_CONF_DATA);
        $txt=IGKIO::ReadAllText($f);
        $lines=explode(IGK_LF, $txt);
        foreach($lines as $l){
            if(empty($l))
                continue;
            $e=explode(igk_csv_sep(), $l);
            $name=strtoupper(trim($e[0]));
            if(empty($name))
                continue;
            $this->m_customMenu [$name]=array(
                IGK_FD_NAME=>$name,
                "clIndex"=>trim(igk_getv($e,
                1)),
                "clController"=>trim(igk_getv($e,
                2)),
                "clMethod"=>trim(igk_getv($e,
                3)),
                "clPage"=>trim(igk_getv($e,
                4)),
                "clGroup"=>trim(igk_getv($e,
                5)),
                "clAvailable"=>trim(igk_getv($e,
                6)),

            );
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _LoadMenu(){
        throw new Exception("Not implement");
    }
    ///<summary></summary>
    ///<param name="table"></param>
    ///<param name="oMenu" default="null"></param>
    /**
    * 
    * @param mixed $table
    * @param mixed $oMenu the default value is null
    */
    private function _m_loadTableHeader($table, $oMenu=null){
        $tr=$table->addTr();
        IGKHtmlUtils::AddToggleAllCheckboxTh($tr);
        $ct=$this->DataTableInfo;
        foreach($ct as $k){
            $tr->add("th")->add('a', array(
                "href"=>$this->getUri("menu_sortby&n=".$k->clName. (($oMenu == null) ? null: "&m=".$oMenu)),
                "onclick"=>igk_js_ajx_post_luri('table')
            ))->Content=__($k->clName);
        }
        $tr->add("th", array("style"=>"width:8px; "))->Content=IGK_HTML_WHITESPACE;
        $tr->add("th", array("style"=>"width:8px; "))->Content=IGK_HTML_WHITESPACE;
    }
    ///<summary></summary>
    ///<param name="target"></param>
    /**
    * 
    * @param mixed $target
    */
    private function _m_otherMenuView($target){
        $this->addTitle($target, "title.OtherMenuManager");
        $target->addHSep();
        igk_html_article($this, "menu.othermenudescription", $target->addDiv());
        $target->addHSep();
        $frm=$target->addForm();
        $li=$frm->add("ul")->addLi();
        $li->addLabel("lb.Menus", "clMenus");
        igk_html_build_select($li, "clMenus", array());
        $table=$frm->addTable();
        $this->_m_loadTableHeader($table, "d");
        $btndiv=$frm->addDiv();
        igk_html_toggle_class($table);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _ReLoadMenu(){
        $this->_LoadMenu();
        $this->selectConfigMenu($this->m_menu_cselected ? $this->m_menu_cselected->Name: "default");
        $this->View();
    }
    ///<summary></summary>
    ///<param name="newPage" default="null"></param>
    /**
    * 
    * @param mixed $newPage the default value is null
    */
    public function changeDefaultPage($newPage=null){
        $newPage=igk_gettv($newPage, igk_getr("defaultmenupage"));
        if($newPage){
            igk_app()->Configs->menu_defaultPage=$newPage;
            igk_save_config();
            igk_notifyctrl()->addMsg("configuration update");
        }
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigCurrentPage(){
        return $this->getFlag("m_CurrentPage");
    }
    ///<summary>get config menu node</summary>
    /**
    * get config menu node
    */
    public function getConfigMenu(){
        return $this->getFlag(self::CONFIG_MENU_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "menu";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigSelectedGroup(){
        return $this->getFlag(self::CONFIG_SELECTED_GROUP);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigSelectedMenu(){
        return $this->getFlag(self::CONFIG_SELECTED_MENU);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigSelectedPage(){
        return $this->getFlag(self::CONFIG_SELECTED_PAGE);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigTargetNode(){
        static $config_target = null;
        if ($config_target === null){
            $config_target = igk_createNode("div");
        }
        return $config_target;
        // return $this->getFlag("m_configTargetNode");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentPage(){
        return $this->getFlag("m_CurrentPage");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentPageIndex(){
        return $this->getFlag("m_CurrentPageIndex");
    }
     
    
    ///<summary>get data table info</summary>
    /**
    * return data table info
    */
    public function getDataTableInfo(){
        return array(
            new IGKDbColumnInfo(array(
                IGK_FD_NAME=>IGK_FD_NAME,
                IGK_FD_TYPE=>"VARCHAR",
                IGK_FD_TYPELEN=>255,
                "clIsUnique"=>true,
                "clIsPrimary"=>true
            )),
            new IGKDbColumnInfo(array(IGK_FD_NAME=>"clIndex", IGK_FD_TYPE=>"Int")),
            new IGKDbColumnInfo(array(
                IGK_FD_NAME=>"clController",
                IGK_FD_TYPE=>"VARCHAR",
                IGK_FD_TYPELEN=>255
            )),
            new IGKDbColumnInfo(array(
                IGK_FD_NAME=>"clMethod",
                IGK_FD_TYPE=>"VARCHAR",
                IGK_FD_TYPELEN=>255
            )),
            new IGKDbColumnInfo(array(
                IGK_FD_NAME=>"clPage",
                IGK_FD_TYPE=>"VARCHAR",
                IGK_FD_TYPELEN=>255
            )),
            new IGKDbColumnInfo(array(
                IGK_FD_NAME=>"clAvailable",
                IGK_FD_TYPE=>"VARCHAR",
                IGK_FD_TYPELEN=>1,
                "clDefault"=>1
            ))
        );
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return '%prefix%globalmenu';
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDefaultEntry(){
        return array(
            IGK_FD_NAME=>null,
            "clIndex"=>0,
            "clController"=>null,
            "clMethod"=>null,
            "clPage"=>null,
            "clGroup"=>null,
            "clAvailable"=>null
        );
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getGlobalMenu(){
        if(is_array($this->m_Menus)){
            $t=array();
            $t=array_merge($t, $this->m_Menus);
            return $t;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getMenu($name){
        if($v=igk_getv($this->getGlobalMenu(), strtoupper($name)))
            return $v;
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_MENU_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getPageList(){
        if($this->m_Pages)
            return array_keys($this->m_Pages);
        return array();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getRootMenu($name){
        return $this->_getRootMenu($name);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRoots(){
        $t=array();
        $h=$this->getGlobalMenu();
        if($h && is_array($h)){
            foreach($h as $k){
                if($k->MenuParent == null)
                    $t[]=$k;
            }
        }
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUserMenu(){
        return $this->m_customMenu;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        $this->CurrentPage=igk_gettv(igk_app()->Configs->menu_defaultPage, IGK_DEFAULT_VIEW);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="ctrl"></param>
    ///<param name="target"></param>
    ///<param name="tab"></param>
    ///<param name="li" default="li"></param>
    ///<param name="selected" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $ctrl
    * @param mixed $target
    * @param mixed $tab
    * @param mixed $li the default value is "li"
    * @param mixed $selected the default value is null
    */
    public function initCustomMenu($name, $ctrl, $target, $tab, $li="li", $selected=null){
        static $cs_regmenu=null;
        if($cs_regmenu == null){
            $cs_regmenu=array();
        }
        $e=igk_getv($cs_regmenu, $name);
        if($e == null){
            $e=new IGKMenuHostControl();
            $cs_regmenu[$name]=$e;
        }
        $this->__initBuildMenu($e, $ctrl, $target, $tab, $li, $selected);
        return $e;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected static function initDb(){
        $f=igk_io_syspath(IGK_MENU_CONF_DATA);
        if(file_exists($f) == false){
            $content=<<<EOF
DEFAULT,0,,,default,1
EOF;
            igk_io_save_file_as_utf8($f, $content, true);
            $this->_ReLoadMenu();
            return 1;
        } 
        return 0;
    }
    public function getDataAdapterName(){
        return IGK_CSV_DATAADAPTER;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $ul=igk_createnode("ul"); 
        return $ul;
    }
    ///<summary></summary>
    ///<param name="navigate" default="true"></param>
    /**
    * 
    * @param mixed $navigate the default value is true
    */
    public function menu_add_menu($navigate=true){
        $this->reg_menu($_REQUEST);
        $this->View();
        if($navigate){
            igk_navtocurrent();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_add_menu_frame_ajx(){
        $frame=igk_html_frame($this, "theme_menu_add_menu_frame");
        $frame->Title=__("title.Menu");
        $d=$frame->BoxContent;
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("menu_add_menu");
        $div=$frm->addDiv();
        $div->addLi()->addSLabelInput(IGK_FD_NAME, "text", null, null, true);
        $div->addLi()->addSLabelInput("clIndex", "text", null, array("isnumeric"=>true), true);
        $div->addLi()->addSLabelInput("clPage");
        $this->__getEditController($div, null);
        $div->addLi()->addSLabelInput("clMethod");
        $div->addLi()->addSLabelInput("clGroup");
        $li=$div->addLi();
        $li->addLabel()->Content=__("clAvailable");
        $chb=$li->addInput("clAvailable", "checkbox");
        $chb["checked"]=true;
        $div->addHSep();
        $frm->addBtn("btn_add", __("btn.Add"));
        igk_wl($frame->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_Clearallmenu(){
        if(igk_qr_confirm()){
            $this->m_customMenu=array();
            $this->__saveConfigMenu();
            $this->_ReLoadMenu();
            $this->View();
            igk_navtocurrent();
        }
        else{
            $frame=igk_frame_add_confirm($this, "menu_Clearallmenu_confirm_frame", $this->getUri("menu_Clearallmenu"));
            $frame->Form->Div->Content=__(IGK_MSG_DELETEMENU_QUESTION);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_drop_selected_menu(){
        $this->menu_drop_selected_menu_ajx();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_drop_selected_menu_ajx(){
        if(!$this->ConfigCtrl->IsConnected)
            return;
        $m=igk_getr("menu");
        $c=false;
        foreach($m as  $n){
            $n=strtoupper($n);
            if(isset($this->m_customMenu[$n])){
                unset($this->m_customMenu[$n]);
                $c=true;
            }
        }
        if($c){
            $this->__saveConfigMenu();
            $this->_ReLoadMenu();
            igk_notifyctrl()->addMsg("menu ".$n. " removed");
        }
        else{
            igk_notifyctrl()->addError("menu ".$n. " not removed");
        }
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_dropmenu(){
        $n=igk_getr("n", IGK_STR_EMPTY);
        $n=strtoupper($n);
        if(isset($this->m_customMenu[$n])){
            unset($this->m_customMenu[$n]);
            $this->__saveConfigMenu();
            $this->_ReLoadMenu();
            igk_notifyctrl()->addMsg("menu ".$n. " removed");
        }
        else{
            igk_notifyctrl()->addError("menu ".$n. " not removed");
        }
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_dropmenu_ajx(){
        if(igk_qr_confirm()){
            $this->menu_dropmenu();
        }
        else{
            $frame=igk_frame_add_confirm($this, __FUNCTION__."_frame", $this->getUri("menu_dropmenu_ajx"));
            $frame->Form->addInput("n", "hidden", igk_getr("n"));
            $frame->Form->Div->Content=__("msg.deletemenu.question_1", igk_getr("n"));
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    ///<param name="name" default="null"></param>
    /**
    * 
    * @param mixed $name the default value is null
    */
    public function menu_editmenuframe($name=null){
        $name=($name == null) ? igk_getr("n"): $name;
        if(!isset($this->m_customMenu[$name]))
            return;
        $v_menu=$this->m_customMenu[$name];
        $frm=igk_getctrl(IGK_FRAME_CTRL)->createFrame("theme_editMenu_frame", $this);
        IGKHtmlUtils::AddItem($frm, igk_app()->Doc->body);
        $frm->Title=__("title.EditMenu", $name);
        $d=$frm->Box;
        $frm->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("save_menu");
        $div=$frm->addDiv();
        $index=igk_getsv(igk_getv($v_menu, "clIndex"), '0');
        $div->addLi()->addSLabelInput(IGK_FD_NAME, "text", igk_getv($v_menu, IGK_FD_NAME), null, true);
        $div->addLi()->addSLabelInput("clIndex", "text", $index, array("isnumeric"=>true), true);
        $div->addLi()->addSLabelInput("clPage", "text", igk_getv($v_menu, "clPage"), null);
        $this->__getEditController($div, igk_getv($v_menu, "clController"));
        $div->addLi()->addSLabelInput("clMethod", "text", igk_getv($v_menu, "clMethod"));
        $div->addLi()->addSLabelInput("clGroup", "text", igk_getv($v_menu, "clGroup"));
        $li=$div->addLi();
        $li->addLabel()->Content=__("clAvailable");
        $chb=$li->addInput("clAvailable", "checkbox");
        if(igk_getv($v_menu, "clAvailable")){
            $chb["checked"]=true;
        }
        $div->addInput("confirm", "hidden", 1);
        $div->addHSep();
        $frm->addBtn("btn_add", __("btn.save"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function menu_sortby(){
        $r=igk_getr("n");
        $m=igk_getr("m");
        $index=0;
        if($m == null){
            if($r == $this->m_sortby)
                $this->m_sortby="r_".$r;
            else
                $this->m_sortby=$r;
        }
        else{
            $index=1;
            if($r == $this->m_sortby)
                $this->m_osortby="r_".$r;
            else
                $this->m_osortby=$r;
        }
        $this->View();
        igk_wl(igk_getv($this->TargetNode->getElementsByTagName("table"), $index)->Render());
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    public function MenuConfig($t){
        $v_mdiv=$t->addDiv();
        $v_mdiv["class"]="dispib alignt marg4";
        $frm=$v_mdiv->addForm();
        $this->addTitle($frm, "title.MenuDefaultPage");
        $frm["action"]=$this->getUri("changeDefaultPage");
        $frm["method"]="post";
        $frm->addLabel("defaultMenuPage");
        $frm->addInput("defaultmenupage", "text", igk_gettv(igk_app()->Configs->menu_defaultPage, IGK_DEFAULT_VIEW));
        $frm->addBr();
        $frm->addInput("btn_d", "submit", __("btn.submit"));
        $c=$v_mdiv->addForm();
        $c["id"]="config-menu_form";
        $c["action"]="#".$c["id"];
        $this->addTitle($c, "title.MenuManager");
        $c->addHSep();
        igk_html_article($this, "menu.description", $c->addDiv());
        $c->addHSep();
        $c->addBr();
        $c->addBr();
        $tab=$c->add("table", array("class"=>"fitw"));
        $ct=$this->DataTableInfo;
        $this->_m_loadTableHeader($tab);
        if (is_array($d=$this->m_customMenu))
        { 
        usort($d, array($this, "sortmenu"));
        foreach($d as $v){
            $tr=$tab->addTr();
            $tr->addTd()->addInput("menu[]", "checkbox", $v[IGK_FD_NAME]);
            foreach($ct as $m){
                $oi=$m->clName;
                switch(strtolower($oi)){
                    case "clindex":
                    $tr->addTd()->Content=igk_parse_num($v[$oi]);
                    break;default:
                    if(isset($v[$oi])){
                        if($oi == IGK_FD_NAME){
                            $tr->addTd()->add("a", array("href"=>$this->getUri("menu_editmenuframe&n=".$v[IGK_FD_NAME])))->Content=$v[$oi];
                        }
                        else
                            $tr->addTd()->Content=$v[$oi];
                    }
                    else
                        $tr->addTd()->Content=IGK_HTML_WHITESPACE;
                    break;
                }
            }
            IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("menu_editmenuframe&n=".$v[IGK_FD_NAME]), "edit_16x16");
            IGKHtmlUtils::AddImgLnk($tr->addTd(), igk_js_post_frame($this->getUri("menu_dropmenu_ajx&n=".$v[IGK_FD_NAME])), "drop_16x16");
        }
    }
        $c->addBr();
        $div=$c->addDiv();
        $a=IGKHtmlUtils::AddImgLnk($div, $this->getUri("menu_drop_selected_menu_ajx"), "drop_16x16");
        $a["onclick"]="javascript: var q =  \$igk(this).getParentByTagName('form'); q.action = this.href; q.submit();  return false;";
        IGKHtmlUtils::AddBtnLnk($c, "btn.add", igk_js_post_frame($this->getUri("menu_add_menu_frame_ajx")));
        IGKHtmlUtils::AddBtnLnk($c, "btn.rmAll", $this->getUri("menu_Clearallmenu"));
        igk_html_toggle_class($tab);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function onConfigPageChanged(){
        $this->m_configCurrentPageChangedEvent->Call($this, null);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function onPageChanged(){
        $this->m_CurrentPageChangedEvent->Call($this, null);
    }
    ///<summary></summary>
    ///<param name="t"></param>
    ///<param name="saveconfig" default="true"></param>
    /**
    * 
    * @param mixed $t
    * @param mixed $saveconfig the default value is true
    */
    public function reg_menu($t, $saveconfig=true){
        if(is_array($t) == false)
            return;
        extract($t);
        $clIndex=igk_getsv($clIndex, 0);
        $this->val->ClearChilds();
        if(IGKValidator::IsStringNullOrEmpty($clName))
            $this->val->add("Name is null or empty");
        if(isset($this->m_customMenu[IGK_FD_NAME])){
            $this->val->add("Menu already registered");
        }
        if($this->val->HasChilds){
            $this->msbox->copyChilds($this->val);
        }
        else{
            $clName=strtoupper($clName);
            $this->m_customMenu[$clName]=array(
                IGK_FD_NAME=>trim($clName),
                "clIndex"=>trim($clIndex),
                "clController"=>trim($clController) == "none" ? null: trim($clController),
                "clMethod"=>trim($clMethod),
                "clPage"=>trim($clPage),
                "clGroup"=>trim($clGroup),
                "clAvailable"=>(isset($clAvailable) ? 1: 0)
            );
            $this->storeDBConfigsSettingMenu($saveconfig);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){}
    ///<summary></summary>
    ///<param name="pageName"></param>
    /**
    * 
    * @param mixed $pageName
    */
    public function registerPage($pageName){
        $pages=$this->getParam("pages", array(), 1);
        if(!isset($pages[$pageName])){
            $pages[$pageName]=array();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function save_menu(){
        if(!igk_qr_confirm()){
            return;}
        $this->menu_add_menu(false);
        $this->View();
        igk_frame_close("theme_editMenu_frame", false);
    }
    ///<summary></summary>
    ///<param name="page"></param>
    ///<param name="fromcontext" default="null"></param>
    /**
    * 
    * @param mixed $page
    * @param mixed $fromcontext the default value is null
    */
    public function selectConfigMenu($page, $fromcontext=null){
        $page=strtolower($page);
        $v_page=$this->getConfigSelectedPage();
        if($v_page != $page){
            $menu=$this->getConfigSelectedMenu();
            if($menu)
                $menu["class"]="-igk-active";
            $menu=null;
            $this->setConfigSelectedPage($page);
            $this->setConfigSelectedMenu($menu);
        }
    }
    ///<summary></summary>
    ///<param name="page"></param>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $page
    * @param mixed $index the default value is 0
    */
    public function selectGlobalMenu($page, $index=0){
        $page=strtolower($page);
        if(isset($this->m_Pages[$page])){
            if($this->m_menu_selected != null){
                $this->m_menu_selected["class"]="-igk-menu_selected";
            }
            $v_rootmenu=null;
            $v_p=$this->m_Pages[$page];
            if(!is_array($v_p))
                $v_rootmenu=$this->_getRootMenu($v_p);
            else{
                if(isset($v_p[$this->m_CurrentPageIndex]))
                    $v_rootmenu=$this->_getRootMenu($v_p[$this->m_CurrentPageIndex]);
            }
            if($v_rootmenu){
                $this->m_menu_selected=$v_rootmenu->MenuItem;
                $this->m_menu_selected["class"]="+igk-menu_selected";
            }
        }
        else{
            if(IGKServerInfo::IsLocal()){
                igk_notifyctrl()->addError("[web_global_menu] not define [".$page."] - ". igk_io_request_uri());
            }
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    public function setConfigParentView($node){
        if($node){
            $t = $this->getconfigTargetNode();
            $b=$this->_initSysConfigMenu();
            // if($this->getParam(self::CONFIG_MENU_FLAG) != 1){
            //     $this->setParam(self::CONFIG_MENU_FLAG, 1);

            //     // $this->setconfigTargetNode($b);

            // }
            IGKHtmlUtils::AddItem($b, $t);
            IGKHtmlUtils::AddItem($t, $node);
        }
    }
    ///<summary></summary>
    ///<param name="menu"></param>
    /**
    * 
    * @param mixed $menu
    */
    public function setConfigSelectedMenu($menu){
        $this->setFlag(self::CONFIG_SELECTED_MENU, $menu);
    }
    ///<summary></summary>
    ///<param name="page"></param>
    /**
    * 
    * @param mixed $page
    */
    public function setConfigSelectedPage($page){
        $this->setFlag(self::CONFIG_SELECTED_PAGE, $page);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    // public function setconfigTargetNode($n){
    //     $this->setFlag("m_configTargetNode", $n);
    //     return $this;
    // }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setMenuhostCtrl($value){
        $mhostctrl=$this->getParam("menuhostctrl");
        if($mhostctrl != $value){
            if(is_object($mhostctrl)){
                $mhostctrl->unregView($this);
            }
            $mhostctrl=$value;
            if($mhostctrl != null)
                $mhostctrl->regView($this, "setMenuview");
            $this->setParam("menuhostctrl", $mhostctrl);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function setMenuview(){
        if(igk_app()->Configs->menuHostCtrl){
            $menu_host=igk_getctrl(igk_app()->Configs->menuHostCtrl);
            if($menu_host != null){
                $this->setMenuhostCtrl($menu_host);
                $this->setParentView($menu_host->TargetNode);
            }
        }
    }
    ///<summary></summary>
    ///<param name="page"></param>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $page
    * @param mixed $index
    */
    public function setPage($page, $index){
        if(!$this->ConfigCtrl->IsConfiguring){
            $this->m_CurrentPage=$page;
            $this->m_CurrentPageIndex=$index;
            $this->onPageChanged();
        }
        else{
            if(($this->m_configCurrentPage != $page) || ($this->m_configCurrentPageIndex != $index)){
                $this->m_configCurrentPage=$page;
                $this->m_configCurrentPageIndex=$index;
                $this->onConfigPageChanged();
            }
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    public function setParentView($node){
        if($node){
            IGKHtmlUtils::AddItem($this->m_menuTargetNode, $node);
        }
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public function sortmenu($a, $b){
        if($this->m_sortby){
            $m=$this->m_sortby;
            if(IGKString::StartWith($this->m_sortby, "r_")){
                switch(strtolower($m)){
                    case "clindex":
                    $i=igk_getv($a, "clIndex");
                    $j=igk_getv($b, "clIndex");
                    if($i < $j)
                        return -1;
                    else if($i > $j)
                        return 1;
                    break;
                    case "clcontroller":default:
                    return strcmp(igk_getv($b, $m), igk_getv($a, $m));
                }
                return strcmp(igk_getv($b, IGK_FD_NAME), igk_getv($a, IGK_FD_NAME));
            }
            else{
                switch(strtolower($m)){
                    case "clindex":
                    $i=igk_getv($a, "clIndex");
                    $j=igk_getv($b, "clIndex");
                    if($i < $j)
                        return -1;
                    else if($i > $j)
                        return 1;
                    break;
                    case "clcontroller":default:
                    return strcmp(igk_getv($a, $m), igk_getv($b, $m));
                }
            }
        }
        return strcmp(igk_getv($a, IGK_FD_NAME), igk_getv($b, IGK_FD_NAME));
    }
    ///<summary></summary>
    ///<param name="saveconfig" default="true"></param>
    /**
    * 
    * @param mixed $saveconfig the default value is true
    */
    private function storeDBConfigsSettingMenu($saveconfig=true){
        if($saveconfig){
            if($this->__saveConfigMenu()){
                $this->_ReLoadMenu();
                igk_notifyctrl()->addMsgr("msg.globalmenuupdated");
                igk_debug_wln("notice:save and reloaded");
            }
            else{
                igk_debug_wln("error:not saved menu");
            }
        }
    }
    ///<summary></summary>
    ///<param name="pageName"></param>
    /**
    * 
    * @param mixed $pageName
    */
    public function unregisterPage($pageName){
        $pages=$this->getParam("pages", array());
        unset($pages[$pageName]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->TargetNode;
        if(!$this->getIsVisible()){
            if(!$this->ConfigCtrl->IsConfiguring){
                $this->selectGlobalMenu(strtolower($this->m_CurrentPage), $this->m_CurrentPageIndex);
            }
            igk_html_rm($t);
            $t->ClearChilds();
        }
        else{
            if(igk_sys_ischanged(self::MENU_CHANGE_KEY, $this->m_menuChangedState)){
                $this->_LoadMenu();
            }
            igk_html_add($t, $this->ConfigNode);
            $t->ClearChilds();
            $box=$t->addPanelBox();
            $box->addSectionTitle(4)->Content=__("Menu");
            $this->MenuConfig($box->addDiv());
            $v_mdiv=$box->addDiv();
            $v_mdiv["class"]="dispib alignt marg4";
            $this->_m_otherMenuView($v_mdiv);
        }
        $this->_onViewComplete();
    }
}
///<summary>represent global meta  document configuration controller</summary>
/**
* represent global meta document configuration controller
*/
class IGKMetaController extends IGKConfigCtrlBase {
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "metactrl";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function meta_update(){
        igk_app()->Configs->meta_description=igk_getr("clDesc");
        igk_app()->Configs->meta_copyright=igk_getr("clCopyright");
        igk_app()->Configs->meta_keysword=igk_getr("clKeysWords");
        igk_app()->Configs->meta_enctype=igk_getr("clEncType");
        igk_app()->Configs->meta_title=igk_getr("clDefaultTitle");
        igk_save_config();
        $this->__reset_value();
        $this->View();
        igk_notifyctrl()->addMsgr("Msg.metaUpdated");
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $c=$this->TargetNode;
        if(!$this->getIsVisible()){
            igk_html_rm($c);
            return;
        }
        IGKHtmlUtils::AddItem($c, $this->ConfigNode);
        $c=$c->ClearChilds()->addPanelBox();
        igk_html_add_title($c, "title.MetaController");
      
        igk_html_article($this, "metaconfig", $c->addPanel()); 
        $frm=$c->addForm();
        $frm["action"]=$this->getUri("meta_update");
        $app=igk_app();
        // $ul=$frm->add("ul");
        $frm->addFields(
            [
                "clDesc"=>["type"=>"text", "attribs"=>["value"=>$app->Configs->meta_description]],
                "clCopyright"=>["type"=>"text", "attribs"=>["value"=>$app->Configs->meta_copyright]],
                "clKeysWords"=>["type"=>"text", "attribs"=>["value"=>$app->App->Configs->meta_keysword]],
                "clEncType"=>["type"=>"text", "attribs"=>["value"=>$app->Configs->meta_enctype]],
                "clDefaultTitle"=>["type"=>"text", "attribs"=>["value"=>$app->Configs->meta_title]]
            ]
        );


        // $ul->addLi()->addSLabelInput("clDesc", "text", $app->Configs->meta_description);
        // $ul->addLi()->addSLabelInput("clCopyright", "text", $app->Configs->meta_copyright);
        // $ul->addLi()->addSLabelInput("clKeysWords", "text", $app->App->Configs->meta_keysword);
        // $ul->addLi()->addSLabelInput("clEncType", "text", $app->Configs->meta_enctype);
        // $ul->addLi()->addSLabelInput("clDefaultTitle", "text", $app->Configs->meta_title);
        $bar = $frm->addActionBar();
        $bar->addBtn("btn_save", __("btn.save"));
    }
}
///<summary>Represente class: IGKPICRESCtrl</summary>
/**
* Represente IGKPICRESCtrl class
*/
final class IGKPICRESCtrl extends IGKConfigCtrlBase {
    const DATAFILE="Data/upload.csv";
    const KEY_FILES="sys://ctrl/allpics";
    const PICRES_FLAG=1;
    const PICRES_KEY="PicResChanged";
    const TARGETDIR=IGK_RES_FOLDER."/Img";
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    ///<param name="div"></param>
    /**
    * 
    * @param mixed $div
    */
    private function _addLoadPicForm($div){
        $frm=$div->addForm();
        $frm["action"]=$this->getUri("loadfile");
        $frm["method"]="POST";
        $frm["enctype"]=IGK_HTML_ENCTYPE; // file encoding
        $frm->addSLabelInput("name", "text", null, null, true);
        $frm->addBr();
        $frm->addSLabelInput("pics", "file", null, array("multiple"=>false, "accept"=>"image/*"), true);
        $frm->addBr();
        $frm->addSLabelInput("dir", "text", $this->m_selectedir);
        $frm->addBr();
        $frm->addInput()->setAttributes(array("type"=>"hidden", "name"=>"MAXFILESIZE", "value"=>5000));
        $frm->addHSep();
        $frm->addBtn("upload", __("btn.upload"));
        return $frm;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _getexts(){
        $r=igk_get_env("sys://ctrl/picres/allowedextension", function(){
            $tab=explode(";", strtolower(IGK_ALLOWED_EXTENSIONS));
            $extensions=array();
            foreach($tab as $k){
                $extensions[strtolower($k)
                ]=$k;
            }
            return $extensions;
        });
        return $r;
    }
    ///init default resources
    /**
    */
    private function _initDefaultPictureRes(& $tab=null){
        $dir=IGK_LIB_DIR."/Default/R/Img";
        $this->initPicturesRes($dir, $tab);
    }
    ///<summary></summary>
    ///<param name="tab" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $tab the default value is null
    */
    function _loadData(& $tab=null){
        $f=igk_io_syspath(self::DATAFILE);
        $txt=IGKIO::ReadAllText($f);
        $lines=explode(IGK_LF, $txt);
        $this->_initDefaultPictureRes($tab);
        $this->initPicturesRes(igk_io_currentrelativepath(IGK_RES_FOLDER."/Img"), $tab);
        $g=array();
        foreach($lines as $l){
            if(empty($l))
                continue;
            $e=explode(igk_csv_sep(), $l);
            $g [$e[0]]=igk_html_uri($e[1]);
        }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _showdefault(){
        $div=$this->TargetNode->clearChilds()->addPanelBox();
        igk_html_add_title($div, "title.PictureResourcesManager");
        
        igk_html_article($this, "pictures.res", $div->addDiv());
        

        $div->addNotifyHost("picres");
        $c=igk_realpath(igk_io_currentrelativepath(self::TARGETDIR));
        $tab=igk_io_dirs($c);
        if($tab && (count($tab) > 0)){
            $ul=$div->add("ul");
            foreach($tab as $k){
                $li=$ul->addLi();
                $li->add("label", array("class"=>"-cllabel cell_minsize dispib"))->add("a", array(
                    "href"=>$this->getUri("setdir&d=".base64_encode(urldecode($k))),
                    "class"=>"config-fileviewdir"
                ))->Content=basename($k);
                if((count(igk_io_dirs($k)) == 0) && (count(igk_io_getfiles($k)) == 0)){
                    IGKHtmlUtils::AddImgLnk($li, $this->getUri("dropdir&d=".base64_encode(urldecode($k))), "drop_16x16");
                }
            }
        } 
        $frm=$div->addForm();
        $bx=$frm->addActionBar();
        IGKHtmlUtils::AddBtnLnk($frm, "btn.showallpics", $this->getUri("showentries"));
        IGKHtmlUtils::AddBtnLnk($frm, "btn.rmAll", $this->getUri("deleteall"), array("onclick"=>igk_js_lnk_confirm(__(IGK_MSG_ALLPICS_QUESTION))));
        $frm->addAJXButton($this->getUri("uploadpic_ajx"))->Content="uploadpics";
        $frm->addInput("confirm", "hidden", 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _storeData(){
        $out=IGK_STR_EMPTY;
        $g=$this->getAllPics();
        foreach($g as $k=>$v){
            $out .= $k.igk_csv_sep().$v.IGK_LF;
        }
        if(igk_io_save_file_as_utf8($path=igk_io_syspath(self::DATAFILE), $out, true)){
            $e=["file"=>$path];
            igk_sys_regchange(self::PICRES_KEY, $e);
            return true;
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="ext"></param>
    /**
    * 
    * @param mixed $ext
    */
    private function _support($ext){
        $ext=$this->_getexts();
        return isset($ext[strtolower($ext)]);
    }
    ///<summary></summary>
    ///<param name="g"></param>
    /**
    * 
    * @param mixed $g
    */
    private function _updateRes($g){
        igk_set_env(self::KEY_FILES, $g);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $uri
    */
    public function add_res($name, $uri){
        $g=$this->getAllPics();
        $g[$name]=$uri;
        if(!isset($g[$name])){
            $g[$name]=$uri;
            return true;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function deleteall(){
        if(igk_qr_confirm()){
            $dir=igk_io_baserelativepath(self::TARGETDIR);
            if(!(is_dir($dir) && !IGKIO::RmDir(igk_io_baserelativepath(self::TARGETDIR)))){
                foreach($this->m_fileres as  $v){
                    $f=igk_io_currentrelativepath($v);
                    if(file_exists($f))
                        unlink($f);
                }
                $this->m_fileres=array();
                $this->_storeData();
                $this->View();
                igk_notifyctrl("picres")->addSuccess(__("Update fire resources"));
            }
        }
        else{
            // igk_wln("not confirm");
            $frame=igk_frame_add_confirm($this, "delete_all_pics_frame");
            $frame->Form["action"]=$this->getUri("deleteall");
            $frame->Form->Div->Content=__(IGK_MSG_ALLPICS_QUESTION);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function delfile(){
        $id=igk_getr("name");
        if(($id == null) || !isset($this->m_fileres[$id]))
            return;
        $f=igk_io_currentrelativepath($this->m_fileres[$id]);
        if(file_exists($f)){
            if(unlink($f)){
                unset($this->m_fileres[$id]);
                $this->_storeData();
            }
            else
                $this->msbox->addError("unabled to delete file");
        }
        else{
            unset($this->m_fileres[$id]);
            $this->_storeData();
        }
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function dropdir(){
        $dir=basename(base64_decode(igk_getr("d", null)));
        $dir=igk_io_basedir(self::TARGETDIR. "/".$dir);
        if(is_dir($dir)){
            if(IGKIO::RmDir($dir))
                igk_notifyctrl()->addMsgr("msg.directorydrop");
            else
                igk_notifyctrl()->addErrorr("msg.directorynotdrop");
            $this->View();
        }
        igk_navtocurrent();
    }
    ///<summary>get all pictures resources entries</summary>
    /**
    * get all pictures resources entries
    */
    public function getAllPics(){
        return igk_get_env_init("sys://ctrl/allpics", function(){
            $g=array();
            $this->_loadData($g);
            return $g;
        });
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "pictureresconfig";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentPage(){
        return $this->getFlag("currentPage");
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="check" default="false"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $check the default value is false
    */
    public function getImgUri($name, $check=false){
        $res=$this->getPicRes() ?? (function(){
            $t=array();
            $this->_initDefaultPictureRes($t);
            $this->setPicRes($t);
            return $t;
        })();
        $b=igk_getv($res, $name, IGK_STR_EMPTY);
        if($check && empty($b)){
            return $b;
        }
        $s=igk_realpath($b);
        if($s){
            return (new IGKHtmlRelativeUriValueAttribute($s))->getValue();
        }
        return igk_html_resolv_img_uri(igk_io_basedir($b));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_PIC_RES_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getPicRes(){
        return $this->getEnvParam("@PictureRes");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getResFiles(){
        return igk_get_env("sys://resourcefiles", function(){
            $t=array();
            return $t;
        });
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSearchKey(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gotodefaultview(){
        $this->setCurrentPage(null);
        $this->View();
    }
    ///<summary></summary>
    ///<param name="dir"></param>
    ///<param name="tab" default="null" ref="true"></param>
    /**
    * 
    * @param mixed $dir
    * @param mixed * $tab the default value is null
    */
    public function initPicturesRes($dir, & $tab=null){
        if(!is_dir($dir))
            return;
        $r=IGKIO::GetPictureFile($dir);
        $g=$tab ?? $this->getAllPics();
        foreach($r as $k){
            $n=igk_io_basenamewithoutext($k);
            if(!isset($g[$n]))
                $g[$n]=$k;
        }
        $this->_updateRes($g);
        $tab=$g;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        return igk_createnode("div", array("class"=>strtolower($this->Name)));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function loadfile(){
        $notify="picres";
        $id=igk_getr("name");
        $dir=igk_getr("dir");
        $res=[];
        $target=IGK_STR_EMPTY;
        $dest=IGK_STR_EMPTY;
        if(($id == null) || isset($res[$id])){
            igk_notifyctrl()->addError(__("ERR.FILEISNULLORALREADYREGISTERED"));
            igk_navtocurrent();
            return;
        }
        if($dir)
            $target=igk_io_currentrelativepath(self::TARGETDIR."/".$dir);
        else
            $target=igk_io_currentrelativepath(self::TARGETDIR);
        $f=$_FILES["pics"]["tmp_name"];
        $name=$_FILES["pics"]["name"];
        $ext=IGKIO::GetFileExt($name);
        if(!$this->_support(".".$ext)){
            igk_notifyctrl()->addError(igk_const("IGK_ERR_FILE_NOT_SUPPORTED"));
            return;
        }
        if(IGKIO::CreateDir($target)){
            $dest=igk_io_dir($target."/".$id.".". $ext);
            if(!move_uploaded_file($f, $dest)){
                igk_notifyctrl($notify)->addError("Unable to move uploaded file to ".$dest);
            }
            else{
                $res[$id]=igk_io_basepath($dest);
                if(!$this->_storeData()){
                    igk_notifyctrl($notify)->addError(__("err.cannotstorefile_1", $id));
                    unlink($dest);
                    unset($res[$id]);
                }
                else{
                    igk_notifyctrl($notify)->addMsg(__("MSG.FileUploaded"));
                }
            }
        }
        else{
            $this->msbox->addError(__("err.cannotmoveuploadedfile_1", $dest));
        }
        $this->View();
    }
    ///<summary></summary>
    ///<param name="tempfile"></param>
    ///<param name="name"></param>
    ///<param name="id"></param>
    ///<param name="dir"></param>
    /**
    * 
    * @param mixed $tempfile
    * @param mixed $name
    * @param mixed $id
    * @param mixed $dir
    */
    public function loadtempfile($tempfile, $name, $id, $dir){
        $f=$tempfile;
        $ext=IGKIO::GetFileExt($name);
        if(!$this->_support(".".$ext)){
            igk_notifyctrl()->addError(igk_const("IGK_ERR_FILE_NOT_SUPPORTED"));
            return;
        }
        if(IGKIO::CreateDir($dir)){
            $dest=igk_io_dir($dir."/".$id.".". $ext);
            if(!move_uploaded_file($f, $dest)){
                igk_notifyctrl()->addError("Unable to move uploaded file to ".$dest);
            }
            else{
                $this->m_fileres[$id]=igk_io_basepath($dest);
                if(!$this->_storeData()){
                    igk_notifyctrl()->addError("Can't store data  to file \"".$id."\"");
                    unlink($dest);
                    unset($this->m_fileres[$id]);
                }
                else{
                    igk_notifyctrl()->addMsg(__("MSG.FileUploaded"));
                }
            }
        }
    }
    ///<summary></summary>
    ///<param name="$c" default="null"></param>
    ///<param name="t" default="null"></param>
    /**
    * 
    * @param mixed $c the default value is null
    * @param mixed $t the default value is null
    */
    public function notify($c=null, $t=null){
        $this->_loadData();
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function onHandleSystemEvent($msg){
        switch($msg){
            case IGK_ENV_SETTING_CHANGED:
            $this->onPicResChanged(func_get_args(1));
            break;
            case IGK_FORCEVIEW_EVENT:
            $this->notify();
            break;
        }
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    private function onPicResChanged($ctrl){
        if($ctrl->isChanged(self::PICRES_KEY, $this->m_changeState)){
            $this->_loadData();
        }
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="link"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $link
    */
    public function regPicture($name, $link){
        $g=$this->getAllPics();
        if($link){
            $g[$name]=$link;
        }
        $this->_updateRes($g);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function remove_broken_file(){
        $v_ttab=array_keys($this->m_fileres);
        sort($v_ttab);
        $r=false;
        $i=0;
        foreach($v_ttab as $k){
            $v=$this->m_fileres[$k];
            $file=igk_io_currentrelativepath($v);
            if(!file_exists($file)){
                unset($this->m_fileres[$k]);
                $r=true;
                $i++;
            }
        }
        if($r){
            $this->_storeData();
            igk_notifyctrl()->addMsgr("msg.brokenfilesremoved_1", $i);
        }
        else{
            igk_notifyctrl()->addInfor("msg.nobrokenfilesremoved");
        }
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function searchentry(){
        $this->m_searchentry=strtolower(igk_getr("q"));
        $this->View();
    }
    ///<summary></summary>
    ///<param name="page"></param>
    /**
    * 
    * @param mixed $page
    */
    private function setCurrentPage($page){
        $this->setFlag("currentPage", $page);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function setdir(){
        $this->m_selectedir=basename(base64_decode(igk_getr("d", null)));
        $this->View();
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    protected function setPicRes($t){
        $this->setEnvParam("@PictureRes", $t);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function show_loadfile_frame(){
        $frame=igk_html_frame($this, "load_pic_frame");
        $frame->Title=__("title.loadpictureres");
        $d=$frame->BoxContent;
        $d->ClearChilds();
        $frm=$this->_addLoadPicForm($d);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function showentries(){
        if(igk_app()->CurrentPageFolder != IGK_CONFIG_MODE){
            return;}
        $this->setCurrentPage("showentries");
        $div=$this->TargetNode;
        $div=$div->ClearChilds()->addPanelBox();
        igk_html_add_title($div, "title.images"); 
        $div->add(new IGKHtmlSearchItem($this->getUri("searchentry"), $this->m_searchentry)); 

        $frm=$div->addForm();
        $frm["method"]="POST";
        $frm["action"]=$this->getUri();
        $v_div=$frm->addDiv();
        IGKHtmlUtils::AddBtnLnk($v_div, "btn.Return", $this->getUri("gotodefaultview"));
        IGKHtmlUtils::AddBtnLnk($v_div, "btn.loadfile", $this->getUri("show_loadfile_frame"));
        IGKHtmlUtils::AddBtnLnk($v_div, __("btn.RemoveBrokenfiles"), $this->getUri("remove_broken_file"));
      
        $info=$frm->addDiv();
        $tab=$frm->addTable();
        $tr=$tab->addTr();
        IGKHtmlUtils::AddToggleAllCheckboxTh($tr);
        $tr->add("th")->Content=__(IGK_FD_NAME);
        $tr->add("th")->Content=__("clLink");
        $tr->add("th")->Content=__("clSize");
        $tr->add("th")->Content=IGK_HTML_WHITESPACE;
        $res=$this->getResFiles();
        $v_ttab=array_keys($res);
        $search=$this->getSearchKey();
        sort($v_ttab);
        $v_count=0;
        foreach($v_ttab as $k){
            $v=$res[$k];
            if(empty($v) || !empty($search) && !strstr(strtolower($k), strtolower($search)) && !strstr(strtolower($v), strtolower($search)))
                continue;
            $tr=$tab->add("tr", array("class"=>"fitw"));
            $tr->addTd()->addInput(IGK_STR_EMPTY, "checkbox");
            $tr->addTd()->Content=$k;
            $tr->addTd()->add("a", array("href"=>igk_js_post_frame($this->getUri("viewpic_ajx&name=".$k))))->Content=igk_io_dir($v);
            $file=igk_io_currentrelativepath($v);
            if(file_exists($file)){
                $size=@filesize($file);
                if($size === false){
                    $tr->addtd()->Content="?";
                }
                else
                    $tr->addtd()->Content=IGKIO::GetFileSize($size);
            }
            else
                $tr->addTd()->Content="broken";
            $tr->add("td", array("class"=>"igk-table-img-action_16x16"))->add("a", array("href"=>$this->getUri("delfile&name=".$k)))->add("img", array("src"=>R::GetImgUri("drop_16x16")));
            $v_count++;
        }
        $info->Content=$v_count;
        $div=$frm->add("div", null, 1000);
        IGKHtmlUtils::AddBtnLnk($div, "btn.Return", $this->getUri("gotodefaultview"));
        IGKHtmlUtils::AddBtnLnk($div, "btn.loadfile", $this->getUri("show_loadfile_frame"));
        IGKHtmlUtils::AddBtnLnk($div, __("btn.RemoveBrokenfiles"), $this->getUri("remove_broken_file"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function uploadpic_ajx(){
        $div=igk_createnode("div");
        $rd=$div->addRow();
        $cl=$rd->addCol()->addDiv();
        // $frm=$this->_addLoadPicForm($cl);
        // $frm->addConfirm();
        igk_ajx_panel_dialog("Upload Pictures", $div);
        // igk_wln_e(__METHOD__ . " Not implement");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $div=$this->TargetNode;
        $div->ClearChilds();
        if($this->getIsVisible()){
            IGKHtmlUtils::AddItem($div, $this->ConfigNode);
            $cpage=$this->getCurrentPage();
            switch($cpage){
                case "showentries":
                $this->showentries();
                break;default: $this->_showdefault();
                break;
            }
        }
        else{
            igk_html_rm($div);
        }
    }
    ///<summary></summary>
    ///<param name="name" default="null"></param>
    /**
    * 
    * @param mixed $name the default value is null
    */
    public function viewpic($name=null){
        $n=($name == null) ? igk_getr("name", $name): $name;
        $f=igk_io_currentrelativepath(igk_getv($this->m_fileres, $n, IGK_STR_EMPTY));
        header("Content-type: image/png");
        if(file_exists($f)){
            igk_wl(IGKIO::ReadAllText($f));
        }
        else{
            igk_wl(IGKIO::ReadAllText(igk_io_currentrelativepath(igk_getv($this->m_fileres, "none"))));
        }
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function viewpic_ajx(){
        $frame=igk_html_frame($this, "viewpic_frame");
        $frame->Title=__("title.picture_1", igk_getr("name"));
        $c=$frame->BoxContent;
        $c->ClearChilds();
        $c->addDiv(array("class"=>"alignc"))->add("img", array("src"=>$this->getUri("viewpic&name=".igk_getr("name"))));
        $c->addDiv()->Content="image definition";
        $frame->RenderAJX();
    }
}
///isset($this->m_frames[$id]);
/**
*/
final class IGKPageManagerCtrl extends IGKConfigCtrlBase {

    ///<summary></summary>
    /**
    * 
    */
    private function _showPage(){
        $page=igk_getctrl(IGK_MENU_CTRL)->CurrentPage;
        $t=$this->TargetNode;
        $t->ClearChilds();
        $dir=$this->getPageFolderFullPath();
        $file=igk_io_dir($dir."/".$page.".".R::GetCurrentLang().".".IGK_DEFAULT_VIEW_EXT);
        if(igk_app()->CurrentPageFolder == IGK_CONFIG_MODE){
            return;}
        igk_html_add($this->TargetNode, igk_app()->Doc->body, -500);
        igk_app()->Doc->body["class"]="-".$this->m_oldpage;
        $this->m_oldpage=$page;
        igk_app()->Doc->body["class"]="+".$this->m_oldpage;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _viewConfig(){
        if($this->ConfigCtrl->getSelectedConfigCtrl() !== $this)
            return;
		$t = $this->getTargetNode();
        $node= $t->clearChilds();
		$this->viewConfig($node, "title.PageManagerEditor", ".help/page.description.desc");
        // $node->addSectionTitle(4)->Content= __("title.PageManagerEditor");
        // $node->addHSep();
        // igk_html_article($this, "page.description", $node->addDiv());
        // $node->addHSep();
        $node->addDiv()->addLabel()->Content="CurrentLang : ". R::GetCurrentLang();
        $frm=$node->addForm();
        $p=igk_getctrl(IGK_MENU_CTRL)->getPageList();
        $tab=$frm->addTable();
        $tab["class"]="igk-table igk-table-hover";
        $tr=$tab->addTr();
        $tr->add("th", array("style"=>"min-width:200px"))->Content=__(IGK_FD_NAME);
        $tr->add("th")->Content=IGK_HTML_SPACE;
        $tr->add("th")->Content=IGK_HTML_SPACE;
        foreach($p as $k){
            $tr=$tab->addTr();
            $tr->addTd()->add("a", array("href"=>$this->getUri("getfile&n=".$k)))->Content=$k;
            IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("editPageFrame&name=".$k), "edit_16x16", "16px", "16px", "editpage");
            IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("editPageFrameWTiny&name=".$k), "tiny_16x16", "16px", "16px", "editpage");
        }
    }
    ///<summary></summary>
    ///<param name="wtiny" default="false"></param>
    /**
    * 
    * @param mixed $wtiny the default value is false
    */
    public function editPageFrame($wtiny=false){
        $n=igk_getr("name");
        $frm=igk_getctrl(IGK_FRAME_CTRL)->createFrame("page_editframe", $this);
        IGKHtmlUtils::AddItem($frm, igk_app()->Doc->body);
        $frm->Title=__("title.editpage_1", $n);
        $d=$frm->Box;
        $frm->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("savePage");
        $frm->addLi()->addLabel()->Content=IGK_STR_EMPTY;
        $frm->addInput("name", "hidden", $n);
        $file=$this->getPageFile($n);
        $area=$frm->addLi()->addTextArea("clContent", file_exists($file) ? IGKIO::ReadAllText($file): null);
        if($wtiny)
            igk_js_enable_tinymce($frm, "clContent");
        $frm->addBtn("btn_save", __("Update"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function editPageFrameWTiny(){
        $this->editPageFrame(true);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function get_file(){
        $n=igk_getr("n");
        $file=$this->getPageFile($n);
        if(file_exists($file)){
            igk_download_file(basename($file), $file);
        }
        else{
            igk_notifyctrl()->addError("impossible d'obtenir le fichier ".basename($file));
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "pageconfig";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConfigPageAvailable(){
        return !igk_environment()->is("production");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_PAGE_CONF_CTRL;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function getPageFile($n){
        $dir=$this->getPageFolderFullPath();
        $file=igk_io_dir($dir."/".$n.".".R::GetCurrentLang().".".IGK_DEFAULT_VIEW_EXT);
        return $file;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function getPageFolderFullPath(){
        return igk_io_basepath(IGK_PAGE_FOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $t=igk_createnode("div");
        $t["class"]="igk-web-pageinfo";
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function savePage(){
        $n=igk_getr("name");
        $content=igk_getr("clContent");
        $dir=$this->getPageFolderFullPath();
        IGKIO::CreateRDir($dir);
        $file=igk_io_dir($dir."/".$n.".".R::GetCurrentLang().".".IGK_DEFAULT_VIEW_EXT);
        $out=igk_html_unscape($content);
        igk_io_save_file_as_utf8($file, $out, true);
        igk_frame_close("page_editframe");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if($this->getIsVisible()){
            switch($this->CurrentPageFolder){
                case IGK_CONFIG_PAGEFOLDER:
					igk_app()->Doc->body["class"]="-".$this->m_oldpage;
					$this->_viewConfig();
                break;
				default:
					$this->_showPage();
                break;
            }
        }
        else{
            igk_html_rm($this->TargetNode);
        }
    }
}
///<summary>publings controller manager</summary>
/**
* publings controller manager
*/
final class IGKPluginCtrl extends IGKConfigCtrlBase {
    ///create a new pluginc
    /**
    */
    public function createPlugins($name, $files, $author=IGK_AUTHOR_CONTACT){
        $f=igk_io_currentrelativepath(IGK_PLUGINS_FOLDER)."/$name".IGK_PLUGIN_ZP_FILE_EXTENSIONS;
        if(file_exists($f) || (count($files) == 0)){
            return false;
        }
        $df=igk_createnode("plugin");
        $df["version"]="1.0";
        $df["author"]=$author;
        $df["name"]=$name;
        $df["file"]=igk_io_basepath(IGK_PLUGINS_FOLDER)."/".basename($f);
        $zip=new ZipArchive();
        $zip->open($f, ZIPARCHIVE::CREATE);
        $dfi=$df->add("files");
        foreach($files as $v){
            $zip->addFile($v);
            $dfi->add("file")->Content=$v;
        }
        $zip->addFromString($name.IGK_PLUGIN_FILE_EXTENSIONS, $df->Render(null));
        $zip->close();
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "plugins";
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getInstalledPlugins($options=null){
        $r=igk_createnode("response");
        $tab=igk_io_getfiles(igk_io_currentrelativepath(IGK_PLUGINS_FOLDER), "/\\.pbal/i");
        $r["version"]="1.0";
        $r["number"]=igk_count($tab);
        $r->addComment()->Content="installed plugins list";
        foreach($tab as  $v){
            $b=igk_getv(IGKHtmlReader::LoadFile($v)->Childs, 0);
            if($b != null){
                $r->add("plugin")->setAttribute("file", igk_io_basepath($v))->setAttribute("name", igk_io_basenamewithoutext($v))->setAttribute("version", $b["version"])->setAttribute("author", $b["author"])->setAttribute("description", $b["description"]);;
            }
            else{
                $r->add("error")->Content="/.!\\ not define";
            }
        }
        switch($options){
            case "xml":
            $d=new IGKHtmlXmlViewerItem();
            $d->Load($r->Render(null));
            $d->RenderXML();
            break;default: $r->RenderXML();
            break;
        }
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function getPlugBody(){
        static $sm_b=null;
        if($sm_b == null){
            $sm_b=igk_createnode("div");
        }
        return $sm_b;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getPlugins($name){
        $p=igk_db_table_select_row("tbigk_plugins", array(IGK_FD_NAME=>$name));
        if($p){
            $f=igk_io_currentrelativepath(IGK_PLUGINS_FOLDER."/".$p->clName.IGK_PLUGIN_ZP_FILE_EXTENSIONS);
            if(file_exists($f)){
                igk_wl(IGKIO::ReadAllText($f));
            }
        }
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="type" default="html"></param>
    /**
    * 
    * @param mixed $type the default value is "html"
    */
    public function getPluginsList($type="html"){
        igk_wln("get plugins list ...");
        igk_exit();
        $r=igk_createnode("response");
        $r["responseType"]=$type;
        if(strtolower(IGK_ROOT_SERVER) == strtolower(igk_io_baseuri())){
            $tab=igk_db_table_select_where("tbigk_plugins");
            $r["count"]=$tab->RowCount;
            $r->addDataEntry()->LoadData($tab);
        }
        else{
            $re=igk_curl_post_uri(IGK_ROOT_SERVER."/".$this->getUri("getPluginsList/".$type));
            if(empty($re)){
                $r["status"]="error";
                $r->add("message")->Content=__("msg.cangetpluginslistform.server");
            }
            else{
                $r->Load($re);
            }
        }
        switch($type){
            case "xml":
            $r->RenderXML();
            break;
            case "xmlview":
            $d=new IGKHtmlXmlViewerItem();
            $d->Load($r->Render(null));
            $d->RenderXML();
            break;default: $r->RenderAJX();
            break;
        }
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function initConfigMenu(){
        return array(
            new IGKPluginConfigMenuItem($this,
            $this->getUri("showConfig"))
        );
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function installPlugins($name){
        $f=igk_io_basedir(IGK_PLUGINS_FOLDER)."/$name".IGK_PLUGIN_ZP_FILE_EXTENSIONS;
        if(!file_exists($f)){
            return false;
        }
        $hzip=zip_open($f);
        $outdir=igk_io_basedir();
        $def=$name.IGK_PLUGIN_FILE_EXTENSIONS;
        $defnode=null;
        if(is_resource($hzip)){
            while(($e=zip_read($hzip))){
                $n=zip_entry_name($e);
                if($n == $def){
                    $defnode=IGKHtmlReader::Load(zip_entry_read($e, zip_entry_filesize($e)), null);
                }
                else{
                    if(igk_zip_isdirentry($e)){
                        igk_zip_create_dir($outdir, $n);
                    }
                    else{
                        if(!(strpos($n, "/") === FALSE)){
                            igk_zip_extract($outdir, $hzip, $e);
                        }
                        else{
                            if(IGKIO::CreateDir($outdir)){
                                igk_zip_extract($outdir, $hzip, $e);
                            }
                        }
                    }
                }
            }
            zip_close($hzip);
            igk_notifyctrl()->addMsgr("msg.pluginsinstalled");
            igk_io_save_file_as_utf8_wbom(igk_io_currentrelativepath(IGK_PLUGINS_FOLDER)."/$name".IGK_PLUGIN_FILE_EXTENSIONS, $defnode->Render());
        }
        return true;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function IsFunctionExposed($name){
        return true;
    }
    ///<summary>get installed plugin on server</summary>
    /**
    * get installed plugin on server
    */
    public function nop_i(){
        if(strtolower(IGK_ROOT_SERVER) == strtolower(igk_io_baseuri())){
            $tab=igk_db_table_select_where("tbigk_plugins");
            if($tab){
                igk_wl($tab->RowCount);
            }
        }
        else
            igk_wl(IGK_HTML_CHAR_ZERO);
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="page" default="installed"></param>
    /**
    * 
    * @param mixed $page the default value is "installed"
    */
    public function plugins($page="installed"){
        $m=__FUNCTION__."_".$page;
        $pages=array("plugins_installed"=>"getInstalledPlugins");
        if(!($plg=$this->getPlugBody())){
            return;}
        $plg->ClearChilds();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function uninstallPlugins($name){
        $fs=igk_io_currentrelativepath(IGK_PLUGINS_FOLDER)."/$name".IGK_PLUGIN_FILE_EXTENSIONS;
        if(file_exists($fs) == false)
            return false;
        $defnode=IGKHtmlReader::LoadFile($fs);
        foreach($defnode->getElementsByTagName("file") as $k){
            $f=igk_io_currentrelativepath(trim($k->innerHTML));
            if(file_exists($f)){
                unlink($f);
                $dir=dirname($f);
                while(IGKIO::RmDir($dir, false)){
                    $dir=dirname($dir);
                    if(igk_io_basepath($dir) == "")
                        break;
                }
            }
        }
        unlink($fs);
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $this->TargetNode->ClearChilds();
        $t=$this->TargetNode->addPanelBox();
        igk_html_add_title($t->addDiv(), "title.PluginsManager");
        $t->addHSep();
        $d=$t->addDiv();
        $menu=$d->addHMenu();
        $menu->addItem("Installed", $this->getUri("plugins&t=installed"), __("menu.plugins.installed"));
        $menu->addItem("Plugins", $this->getUri("plugins&t=search"), __("menu.plugins.get"));
        $d->add($this->getPlugBody());
        $this->plugins();
    }
}
///<summary> Represent a references controller</summary>
/**
*  Represent a references controller
*/
final class IGKReferenceCtrl extends IGKConfigCtrlBase {
    ///<summary></summary>
    ///<param name="f"></param>
    ///<param name="pc"></param>
    ///<param name="pt"></param>
    ///<param name="n"></param>
    ///<param name="fc_addcallback"></param>
    /**
    * 
    * @param mixed $f
    * @param mixed $pc
    * @param mixed $pt
    * @param mixed $n
    * @param mixed $fc_addcallback
    */
    private function __storeParamfile($f, $pc, $pt, $n, $fc_addcallback){
        if(IGKServerInfo::IsLocal() && !file_exists($f) && ($pc > 0)){
            $g=igk_createxmlnode($n);
            $g["parent"]="";
            foreach($pt as  $v){
                $s=$g->add("attr");
                $fc_addcallback($s, $v);
            }
            igk_io_w2file($f, igk_xml_header()."\n".$g->Render());
            unset($g);
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function _init_search($node){
        $v_sh="";
        $node->add(new IGKHtmlSearchItem($this->getUri("searchgfunc"), $v_sh, "q", 1, "#cr-c"));
        $div=$node->addDiv();
        $div->setId("cr-c");
        $this->setParam("sys://searchresult", $div);
        return $div;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $s
    */
    private function _init_v_title($n, $s){
        $d=igk_html_add_title($n, $s);
        $d->setClass("sub-t");
    }
    ///<summary> load paremeter info </summary>
    /**
    *  load paremeter info
    */
    private function _loadComponentParameterInfo($def_attr, $tab, & $li, $lang=null, $type='f'){
        $lang=$lang ?? R::getCurrentLang();
        $row=$tab->addTr();
        $row->add("th")->Content=__("Parameters");
        $row->add("th")->Content=__("Type");
        $row->add("th")->setClass("fitw alignl")->Content=__("Description");
        foreach($def_attr as  $v){
            $c=(object)array("desc"=>"", "def-v"=>0, "require"=>0, "type"=>"");
            igk_conf_load($c, $v);
            
            $tr=$tab->addTr();
            $td=$tr->addTd();
            $td->Content=$c->name;
            if(igk_getv($c, 'require')){
                $td->setClass("require");
            }
            $li[$c->name]=array($v, $tr);
            $g=$c->{"def-v"};
            $td=$tr->addTd();
            if ($m = igk_getv($c, "type")){
                $td->content= $m;
            }else {
                $td->content= "mixed";
            }
            $td=$tr->addTd();
            $td->Content=igk_getv($c, $lang, $c->desc);
            if(!empty($g)){
                $td->add("ul")->add("li")->Content=__("t.defaultv_1", $g);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _storeNamesTab(){
        $names=igk_get_env(IGK_ENV_COMPONENT_DISPLAY_NAMES_KEY);
        $date=igk_date_now();
        $o="<?php".IGK_LF;
        $o .= "/*";
        $o .= "* DESC: Generated Display Name of Component functions ".IGK_LF;
        $o .= "* file : names.pinc ".IGK_LF;
        $o .= "* date : {$date} ".IGK_LF;
        $o .= "*/".IGK_LF;
        igk_array_sortkey($names);
        foreach($names as $k=>$v){
            $o .= "\$htab[\"{$k}\"]=\"{$v}\";".IGK_LF;
        }
        igk_io_w2file(IGK_COMPONENT_NAMESFILE, $o, true);
    }
    ///<summary></summary>
    ///<param name="node"></param>
    ///<param name="name" default="null"></param>
    /**
    * 
    * @param mixed $node
    * @param mixed $name the default value is null
    */
    private function getClassInfo($node, $name=null){
        $n=($name == null) ? igk_getr("n"): $name;
        if(!class_exists($n)){
            $node->addDiv()->Content="class does't exits";
            return;
        }
        $node->add("h2")->Content="Class : ".$n;
        $d=new ReflectionClass($n);
        $fn=$d->getFileName();
        $info=$node->addDiv();
        $ul=$info->add("ul");
        $ul->addLi()->Content="FileName  : ". ((empty($fn)) ? "unknow": $fn);
        $ul->addLi()->Content="Parent : ". get_parent_class($n);
        $imps=class_implements($n);
        if(count($imps) > 0){
            $timp=$info->addDiv();
            $timp->add("h2")->Content="implements : ";
            $tul=$timp->add("ul");
            foreach($imps as $k=>$v){
                $tul->addLi()->add("a", array("href"=>$this->getUri("showinterfaceinfo")))->Content=$k;
            }
        }
        $node->addHSep();
        $info=$node->addDiv();
        $info->add("h2")->Content="Description";
        if(file_exists($fn)){
            $this->loadClassDescription($n, $node);
        }
        $node->addHSep();
        $info=$node->addDiv();
        $info->add("h2")->Content="Properties";
        igk_app()->Doc->Theme[".w200px"]="width:200px; ";
        $t=get_class_vars($n);
        if(count($t) > 0){
            foreach($t as $k=>$v){
                $info->add("span", array("class"=>"floatl dispb w200px "))->Content=$k;
            }
        }
        else{
            $info->addDiv()->Content="No Properties";
        }
        $t=get_class_methods($n);
        $node->add("div", array("class"=>"clearb"));
        $node->addHSep();
        $info=$node->addDiv();
        $info->add("h2")->Content="Methods";
        if(count($t) > 0){
            sort($t);
            foreach($t as $k=>$v){
                $info->add("span", array("class"=>"floatl dipsb w200px"))->Content=$v;
            }
        }
        else{
            $info->addDiv()->Content="No Public methods";
        }
    }
    ///<summary> get component description</summary>
    /**
    *  get component description
    */
    public function getComponentDesription($n, $target){
        $target->addDiv()->addSectionTitle(4)->Content=$this->getComponentDisplayName($n);
        $cl="IGKHtml".$n."Item";
        $fname=strtolower($n);
        $v=class_exists($cl);
        $lang=R::getCurrentLang();
        $fc_addcallback=function($s, $v){
            $s["name"]=$v->getName();
            $s["desc"]="";
            $optional=$v->isOptional();
            $s["require"]=!$optional;
            if($optional && $v->isDefaultValueAvailable()){
                $s["def-v"]=$v->getDefaultValue();
            }
            if($v->hasType()){
                if ($p = $v->getType()){ 
                    $s["type"]=$p->getName();
                }
            }
        };
        if(!$v){
            $fc=IGK_FUNC_NODE_PREFIX.$n;
            if(function_exists($fc)){
                $v_out=array("type"=>"function", "name"=>$fc);
                $d=$target->addDiv();
                $quote=$d->addPanel()->addQuote();
                $quote->addDiv()->Content=$fc;
                $rf=new ReflectionFunction($fc);
                $v_fcdeclare_filename=($rf)->getFileName();
                $dir=igk_sys_get_referencedir($v_fcdeclare_filename);
                $quote->addWebMasterNode()->addDiv()->Content=$v_fcdeclare_filename;
                $target->addDiv()->addArticle($this, "ref.function.only");
                $mdesc=IGK_FUNC_NODE_DESC_PREFIX.$n;
                $target->addSectionTitle(5)->Content=__("Reference");
                if(function_exists($mdesc)){
                    $mdesc($target);
                }
                else{
                    $descfn="";
                    if($dir){
                        $descfn=igk_io_dir($dir."/Components/functions/{$fname}");
                    }
                    else
                        $descfn=igk_io_dir(IGK_LIB_DIR."/Data/References/Components/functions/{$fname}");
                    $target->addDiv()->setClass("igk-balafon-ref")->addArticle($this, $descfn);
                }
                if(!$dir && strstr(igk_html_uri($v_fcdeclare_filename), IGK_LIB_DIR)){
                    $dir=$this->getDataDir()."/References/Components";
                }
                $dir=$dir."/FuncArgs";
                if(!IGKIO::CreateDir($dir)){
                    return null;
                }
                $f=igk_io_dir($dir."/".$fname.".xml");
                $pc=$rf->getNumberOfParameters();
                $rg=$rf->getNumberOfRequiredParameters();
                $pt=$rf->getParameters();
                $this->__storeParamfile($f, $pc, $pt, $n, $fc_addcallback);
                if(file_exists($f) &&  ($d=IGKHtmlReader::LoadXMLFile($f))){                    
                    $def_attr=$d->getElementsByTagName("attr");
                    $li=array();
                    $target->addWebMasterNode()->addDiv()->Content="file:  ".igk_realpath(igk_io_dir($f));
                    $tab["class"]="paramlist igk-table-hover igk-table-striped func";
                    $tab=$target->addDiv()->setClass("overflow-x-a")->addTable();
                    $this->_loadComponentParameterInfo($def_attr, $tab, $li, $lang, 'f');
                    if(igk_count($def_attr) != $pc){
                        $tn=$d->getElementsByTagName($fname)[0];
                        foreach($pt as $v){
                            if(isset($li[$v->getName()]))
                                unset($li[$v->getName()]);
                            else{
                                $n=$tn->add("attr");
                                $fc_addcallback($n, $v);
                                $li[$v->getName()]=$n;
                            }
                        }
                        foreach($li as $v){
                            igk_html_rm($v[0]);
                            igk_html_rm($v[1]);
                        }
                        igk_io_w2file($f, igk_xml_header()."\n".$d->Render());
                    }
                    unset($li);
                }
                return $v_out;
            }
            return null;
        }
        $_out=array("type"=>"class", "name"=>$cl);
        $target->addDiv()->Content=$cl;
        $g=igk_reflection_getdeclared_filename($cl);
        $dir=$this->getDataDir()."/References/Components";
        if($g != __FILE__){
            $dir=igk_io_dir(dirname($g)."/Data/References/Components");
        }
        if(!IGKIO::CreateDir($dir)){
            return $_out;
        }
        $d=$target->addDiv();
        $d->addSectionTitle(5)->Content=__("Class Description");
        $d->addDiv()->addWebMasterNode()->setContent("filename : ".$g);
        $this->loadClassDescription($cl, $d->addDiv(), ($g == __FILE__) ? null: igk_io_dir(dirname($g)."/Data/References/"));
        $f=null;
        $dir=$dir."/Values";
        if(!IGKIO::CreateDir($dir)){
            return $_out;
        }
        $f=$dir."/".$fname.".xml";
        if(IGKServerInfo::IsLocal() && !file_exists($f)){
            igk_io_w2file($f, igk_xml_header()."\n<$n parent=\"\" />");
        }
        $b=new ReflectionClass($cl);
        $ctr=$b->getConstructor();
        $params=$ctr->getParameters();
        $this->__storeParamfile($f, igk_count($params), $params, $n, $fc_addcallback);
        if(file_exists($f) && (igk_count($params) > 0)){
            $d=IGKHtmlReader::LoadXMLFile($f);
            $def_attr=$d->getElementsByTagName("attr");
            $dv=$target->addDiv();
            $dv->addSectionTitle(5)->Content=__("Reference");
            $target->addWebMasterNode()->addDiv()->Content="ReferenceFile : ".igk_io_dir($dir."/".$fname);
            igk_html_article($this, $dir."/".$fname, $target->addDiv());
            $li=array();
            $target->addWebMasterNode()->addDiv()->Content="Value file : ".igk_io_dir($f);
            $tab["class"]="paramlist igk-table-hover igk-table-striped class";
            $tab=$target->addDiv()->setClass("overflow-x-a")->addTable();
            $li=array();
            $this->_loadComponentParameterInfo($def_attr, $tab, $li, $lang, 'c');
        }
        return $_out;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    private function getComponentDisplayName($n){
        $tab=igk_get_env(IGK_ENV_COMPONENT_DISPLAY_NAMES_KEY);
        if($n !== null)
            return igk_getv($tab, $n, $n);
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "referencectrl";
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function getDeclaredClass($node){
        $this->_init_v_title($node, "title.globalclass");
        $div=$this->_init_search($node);
        $tab=get_declared_classes();
        sort($tab);
        $v_sh=$this->getSearchKey();
        foreach($tab as $v){
            if($v_sh && !strstr(strtolower($v), strtolower($v_sh)))
                continue;
            $div->add("li", array(
                "class"=>"dispib floatl no-overflow",
                "style"=>"width:230px"
            ))->addAJXA($this->getUri("showclassinfo&n=".$v))->Content=$v;
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function getDeclaredInterface($node){
        $this->_init_v_title($node, "title.globalinterface");
        $div=$this->_init_search($node);
        $v_sh=$this->getSearchKey();
        $tab=get_declared_interfaces();
        sort($tab);
        foreach($tab as $v){
            if($v_sh && !strstr(strtolower($v), strtolower($v_sh)))
                continue;
            $div->add("li", array(
                "class"=>"dispib floatl no-overflow",
                "style"=>"width:230px"
            ))->add("a", array("href"=>$this->getUri("showinterfaceinfo&n=".$v)))->Content=$v;
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function getGlobalConst($node){
        $this->_init_v_title($node, "title.globalconst");
        $div=$this->_init_search($node);
        $v_sh=0;
        $tab=get_defined_constants();
        $v_sh=$this->getSearchKey();
		$k_s = array_keys($tab);
		sort($k_s);
        foreach($k_s as  $v){
            if($v_sh && !strstr(strtolower($v), strtolower($v_sh)))
                continue;
            $div->add("li", array(
                "class"=>"dispib floatl no-overflow",
                "style"=>"width:430px"
            ))->Content=$v. "=<code style=\"display:inline-block; width:auto; vertical-align:middle;\">".htmlspecialchars($tab[$v]). "</code>";
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function getGlobalFunctions($node){
        $v_sh=$this->getSearchKey();
        $this->_init_v_title($node, "title.globalfunctions");
        $div=$this->_init_search($node);
        $div=$div->addDiv(array("class"=>"cl_functionslist"));
        foreach(get_defined_functions() as $k){
            sort($k, SORT_STRING);
            foreach($k as $v){
                if($v_sh && !strstr(strtolower($v), strtolower($v_sh)))
                    continue;
                $s=new ReflectionFunction($v);
                $href=IGK_STR_EMPTY;
                if($s->getFileName()){
                    $href=$this->getUri("ref_funcdef&n=".$v);
                }
                else{
                    $href="http://php.net/manual/".R::GetCurrentLang()."/function.".str_replace("_", "-", $v).".php";
                }
                $div->add("li", array(
                    "class"=>"dispib floatl no-overflow",
                    "style"=>"width:230px"
                ))->add("a", array("class"=>IGK_STR_EMPTY, "href"=>$href))->Content=$v;
            }
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    private function getGlobalVars($node){
        $this->_init_v_title($node, "title.globalvars");
        $div=$this->_init_search($node);
        extract($this->getSystemVars());
        $tab=get_defined_vars();
        $v_sh=$this->getSearchKey();
        foreach($tab as $k=>$v){
            if($v_sh && !strstr(strtolower($k), strtolower($v_sh)))
                continue;
            $div->add("li", array(
                "class"=>"dispib floatl no-overflow",
                "style"=>"width:230px"
            ))->Content=$k;
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="g"></param>
    //@unlink($f);
    /**
    * 
    * @param mixed $n
    * @param mixed $g
    */
    public function getHtmlComponentInfo($n, $g){
        $f=null;
        $dir=$this->getDataDir()."/References/Components/Values";
        if($g == __FILE__){
            $f=$dir."/".$n.".xml";
        }
        else{
            $f=igk_io_dir(dirname($g)."/Data/References/".strtolower($n.".xml"));
        }
        if(IGKServerInfo::IsLocal() && !file_exists($f)){
            IGKIO::WriteToFileAsUTF8WBOM($f, igk_xml_header()."\n<{$n} parent=\"\" />");
        }
        if(file_exists($f)){
            $d=IGKHtmlReader::LoadFile($f);
            $tab=array();
            foreach($d->getElementsByTagName("attr") as  $v){
                $tab[$v["name"]]=$v;
            }
            return $tab;
        }
    }
    ///<summary>get html components</summary>
    /**
    * get html components
    */
    public function getHtmlComponents(){
        $b=array();
        foreach(get_declared_classes() as $t=>$v){
            if(igk_sys_class_is_component($v)){
                $b[]=(object)array(
                    'class'=>$v,
                    'name'=>igk_preg_match(IGK_HTML_NODE_REGEX,
                    $v,
                    'name')
                );
            }
        }
        usort($b, function($a, $b){
            return strcmp(strtolower($a->name), strtolower($b->name));
        });
        return $b;
    }
    ///<summary>get html elements </summary>
    /**
    * get html elements
    */
    public function getHtmlElements(){
        $key = "sys://htmlitems";
        if(!IGKViewMode::IsWebMaster()){
            // $d=igk_get_cached($key);
            $d=$this->getEnvParam($key);
            if($d != null)
                return $d;
        }
        $b=array();
        foreach(get_declared_classes() as $t=>$v){
            if(igk_sys_class_is_html_element($v)){
                $n=igk_preg_match(IGK_HTML_NODE_REGEX, $v, 'name');
                igk_array_push_keyvalue($b, strtolower($n), (object)array('class'=>$v, 'name'=>$n), false);
            }
        }
        $c=get_defined_functions();
        $utab=igk_getv($c, "user");
        $v_regex="/^".IGK_FUNC_NODE_PREFIX."(?P<name>(.)+)/i";
        $names=igk_get_env(IGK_ENV_COMPONENT_DISPLAY_NAMES_KEY);
        $new=0;
        foreach($utab as $v){
            if(preg_match($v_regex, $v)){
                $n=igk_preg_match($v_regex, $v, 'name');
                if(isset($b[$n])){
                    $b[$n]->{'function'}=$v;
                }
                else{
                    if(!isset($names[$n])){
                        $names[$n]=$n;
                        $new=1;
                    }
                    igk_array_push_keyvalue($b, $n, (object)array('function'=>$v, 'name'=>igk_getv($names, $n)), false);
                }
            }
        }
        if($new){
            $this->_storeNamesTab();
        }
        $keys=array_keys($b);
        igk_array_sortbykey($b);
        // igk_set_cached($key, $b);
        $this->setEnvParam($key, $b);
        return $b;
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    public function getHtmlExpresionTab($node){
        $v=get_class($node);
        if(preg_match(IGK_HTML_NODE_REGEX, $v)){
            $n=igk_preg_match(IGK_HTML_NODE_REGEX, $v, 'name');
            if($this->m_htmlExpresion == null){
                $this->m_htmlExpresion=array();
            }
            if(isset($this->m_htmlExpresion[$n]))
                return $this->m_htmlExpresion[$n];
            $c=$this->getHtmlComponentInfo($n, igk_reflection_getdeclared_filename($node));
            $this->m_htmlExpresion[$n]=$c;
            return $c;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="div"></param>
    /**
    * 
    * @param mixed $div
    */
    public function getInterfaceDefinition($div){
        $name=igk_getr("n");
        $div->add("h2")->Content="Interface : ".$name;
        $div->add("p")->Content="Properties";
        $t=get_class_vars($name);
        if(count($t) == 0){
            $div->addDiv()->Content="no vars defined";
        }
        else{
            $div->add("pre")->Content=count($t);
            foreach($t as $k=>$v){
                $div->add("span", array("style"=>'display:block; float:left; width:200px; overflow:hidden'))->Content="var ".$v."();";
            }
        }
        $div->addBr()->setClass("clearb");
        $div->add("h3")->Content="Methods";
        $t=get_class_methods($name);
        if(count($t) == 0){
            $div->addLabel()->Content="no methods";
        }
        else{
            foreach($t as $k){
                $div->add("span", array("style"=>'display:block; float:left; width:200px; overflow:hidden'))->Content="function ".$k."();";
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_REFERENCE_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function getSearchKey(){
        return $this->getParam("searchkey", "");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSelectedMenu(){
        return $this->getFlag("selectedmenu");
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="default" default="null"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $default the default value is null
    */
    public function getUnsetParam($key, $default=null){
        $n=$this->getParam($key, $default);
        if($n){
            $this->unsetParam($key);
        }
        return $n;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="target"></param>
    ///<param name="dir" default="null"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $target
    * @param mixed $dir the default value is null
    */
    public function loadClassDescription($n, $target, $dir=null){
        $s=igk_io_dir($this->getDataDir()."/References");
        $k="";
        if(($dir == null) && IGKIO::CreateDir($s)){
            $k=$s."/class.$n";
        }
        else{
            $k=$dir."/class.$n";
        }
        igk_html_article($this, $k, $target->addDiv());
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s the default value is 0
    */
    public function loadContent_ajx($s=0){
        $d=igk_createnode("div");
        $div=$d->addDiv(array("id"=>"div_ref_output"))->setClass("igk-row no-padding no-margin");

        if(!$sm=$this->getSelectedMenu())
            $sm="funcdoc";
        switch(strtolower($sm)){
            case "funcdoc":
            $p=$this->getParam("sys://menu/params");
            call_user_func_array(array($this, 'ref_getfuncdef'), array($div, igk_getv($p, "n")));
            break;
            case "const":
            $pmenu="const";
            $this->getGlobalConst($div);
            break;
            // case "vars":
            // $pmenu="vars";
            // $this->getGlobalVars($div);
            // break;
            case "class":
            $pmenu="class";
            $this->getDeclaredClass($div);
            break;
            case "interface":
            $pmenu="interface";
            $this->getDeclaredInterface($div);
            break;
            case "interfaceinfo":
            $pmenu="interface";
            $this->getInterfaceDefinition($div);
            break;
            case "classinfo":
            $pmenu="class";
            $this->getClassInfo($div);
            break;
            case "functions":default:
            $pmenu="functions";
            $this->getGlobalFunctions($div);
            break;
        }
        if(!$s)
            $d->RenderAJX();
    }
    ///<summary>get function definition</summary>
    /**
    * get function definition
    */
    public function ref_funcdef(){
        $this->m_selectedMenu="funcdoc";
        $this->View();
    }
    ///<summary>get present reference function definition</summary>
    /**
    * get present reference function definition
    */
    public function ref_getfuncdef($div, $n=null){
        $n=$n == null ? igk_getr("n"): $n;
        $div->add("h1")->Content="Function :". $n;
        $t=$div->addDiv();
        $t->addA($this->getUri("select_menu&n=functions&b=1"))->Content="Back";
        $t=$div->addDiv();
        if(function_exists($n)){
            $s=new ReflectionFunction($n);
            $ul=$t->add("ul");
            $ul->addLi()->Content="FileName : ".igk_io_basepath($s->getFileName());
            $ul->addLi()->Content="StartLine : ".$s->getStartLine();
            $ul->addLi()->Content="EndLine : ".$s->getEndLine();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function searchgfunc(){
        $this->setSearchKey(igk_getr("q"));
        $this->View();
        if(igk_is_ajx_demand()){
            $this->loadContent_ajx(1);
            $m=$this->getUnsetParam("sys://searchresult");
            if($m)
                $m->RenderAJX();
            igk_exit();
        }
        else{
            igk_navtocurrent();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function select_menu(){
        $i=igk_getr("n");
        $b=igk_getr("b");
        $m=$this->getSelectedMenu();
        if($m != $i){
            $this->setSelectedMenu($i);
        }
        if(!$b){
            $v_sh=null;
        }
        $this->setSearchKey(null);
        $this->loadContent_ajx(0);
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    private function setSearchKey($n){
        $this->setParam("searchkey", $n);
    }
    ///<summary></summary>
    ///<param name="m"></param>
    /**
    * 
    * @param mixed $m
    */
    public function setSelectedMenu($m){
        $this->setFlag("selectedmenu", $m);
        return $this;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function showclassinfo(){
        $n=igk_getr("n");
        $this->m_selectedMenu="classinfo";
        igk_reg_template_bindingattributes("*igkRowBinding", function($reader, $node, $value){
            igk_wln_e("bind expression ");
        });
        $t=igk_createnode("div");
        $clinfo=new ReflectionClass($n);
        $t->setClass("class-info");
        $t->addArticle($this, "reference.class.info.template", ["name"=>$n, "methods"=>$clinfo->getMethods(), "properties"=>$clinfo->getProperties()]);
        $t->renderAJX();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function showinterfaceinfo(){
        $name=igk_getr("n");
        if(!interface_exists($name)){
            igk_debug_wln("warning:". $name." not a valid interface");
            return;
        }
        $this->m_selectedMenu="interfaceinfo";
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        extract($this->getSystemVars());
        $c=$this->TargetNode;
        if(!$this->getIsVisible()){
            igk_html_rm($c);
            return;
        }
        IGKHtmlUtils::AddItem($c, $this->ConfigNode);
        $c=$c->ClearChilds()->addPanelBox();
        $c->addSectionTitle(4)->Content=__("title.ConfigReferences");
        $c->addHSep();
        $menut=array( "const", "functions", "class", "interface");
        $v_opts=array();
        $tabcontrol=$c->addComponent($this, "AJXTabControl", __METHOD__, 1);
        if(empty($v_slmenu=$this->getSelectedMenu())){
            $v_slmenu=$menut[0];
        }
        foreach($menut as $k){
            $tabcontrol->addTabPage(__("cl".$k), $this->getUri("select_menu&n=".$k), $k == $v_slmenu);
            $v_opts[$k]=$this->getUri("select_menu&n=".$k);
        }
        unset($t);
    }
}
///<summary>Represente class: IGKSessionManagerCtrl</summary>
/**
* Represente IGKSessionManagerCtrl class
*/
final class IGKSessionManagerCtrl extends IGKConfigCtrlBase{
    const SESS_NOTIFY="sys://notify/sessionmanager";
    ///<summary></summary>
    /**
    * 
    */
    public function clearall(){
        session_destroy();
        session_write_close();
		foreach(igk_get_all_session_files() as  $f){
			unlink($f);
		}
        $sc=igk_createnode("script");
        $sc->Content="window.location = '".igk_io_baseuri()."';";
        $sc->renderAJX();
        igk_exit();
    }
    ///<summary>drop all session file</summary>
    /**
    * drop all session file
    */
    public function drop(){
        $i=igk_getr("i");
        $d=ini_get("session.save_path");
        $dt=null;
        $ssid=session_id();
        $v_capp=igk_app();
        session_write_close();
        $sess_key=IGK_APP_SESSION_KEY;
        $_SESSION[$sess_key]=null;
        $file="";
        if(is_dir($d)){
			$prefix = igk_get_session_prefix();
            if(file_exists($file=$d."/".$prefix.$i)){
                @unlink($file);
            }
        }
        igk_ajx_replace_ctrl_view($this, 1);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "session";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->TargetNode->clearChilds()->addPanelBox();
        $t->addSectionTitle(4)->Content=__("Session Manager");
 
        $dv=$t->addDiv();
        $dv->addAJXUriLoader($this->getUri("sessionlist"));       
    }
    public function sessionlist(){
        if (!igk_is_ajx_demand())
            return;
        if (!igk_is_conf_connected()){
            return;
        }
        $dv = igk_createnode("div");
        $b = igk_get_all_session_file_infos(10);
        if($b){
            $frm=$dv->addDiv();
            $frm->addDiv()->Content=__("Total:").igk_count($b);
            $table=$frm->addDiv()->setClass("igk-table-host overflow-x-a")->add("table");
            $table["class"]="+igk-table-striped ssession-list";
            igk_html_db_build_table_header($table->add("tr"), ["", "Name", "Size", "Time", ""]);
            $maxItem=10;
            $c=0;
            $paginate=count($b) > $maxItem;

            foreach($b as $k=>$o){
				$f = $o->file;
                $tr=$table->add("tr");
                if($k  == session_id()){
                    $tr["class"]="igk-active";
                }
                $tr->add("td")->addCheckbox("f", $k);
                $tr->add("td")->setAssertAttributes(!$c, ["style"=>"width: 100%;"])->Content=$k;
                $size=filesize($f);
                $tr->add("td")->Content= $o->size;
                $tr->add("td")->Content= $o->createtime; // IGKIO::GetFileSize($size);
                $tr->add("td")->addAJXAButton($this->getUri("drop&i=".$k))->Content=igk_svg_use("drop");
                $c++;
                if($c>=$maxItem){
                    break;
                }
            }
            $bar=$dv->addActionBar();
            $bar->addAJXAButton($this->getUri("clearall"))->Content=__("Clear All");
        }
        else{
            $dv->add("div")->Content=__("No sessions found");
        }
        $dv->renderAJX();

    }
}
///<summary>represent a subdomain controller</summary>
/**
* represent a subdomain controller
*/
final class IGKSubDomainCtrl extends IGKConfigCtrlBase{
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return parent::getIsVisible();
    }
    private function __init_domain(){
        if(igk_is_cmd() || defined('IGK_NO_WEB') || defined('IGK_FRAMEWORK_ATOMIC') || !igk_db_table_exists($this))
            return; 
        $r=igk_db_select_all($this);
        if(($r != null) && $r->Success){
            foreach($r->Rows as  $v){
                $n=igk_getctrl($v->clCtrl, false);
                if($n != null){
                    igk_reg_subdomain($v->clName, $n, $v);
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function dom_add_db_domain_ajx(){
        if(igk_qr_confirm() && igk_server()->method("POST") && igk_valid_cref(1)){
            igk_ilog("storing db domain_ajx");
            $obj=igk_get_robj();
			igk_getctrl(IGK_CONF_CTRL)->setSelectedConfigCtrl($this);
            $info = ["type"=>"igk-success", "msg"=>__("updated")];
            $r = 0;
            
            igk_environment()->bindquery = 1;
            if(($r=igk_db_insert_if_not_exists($this, $this->getDataTableName(), $obj)) > 0){
                igk_notifyctrl(__FUNCTION__)->addSuccessr(__("mgs.dataupdated") );
                $this->__init_domain();
            }
            else{
                igk_notifyctrl(__FUNCTION__)->addErrorr("err.error_append_1", igk_debuggerview()->getMessage(). " code:".$r);
                $info["type"]="danger";
                $info["msg"]=__("failed to add subdomain");
       
            }

    
			if(igk_is_ajx_demand())
                 igk_ajx_toast($info["msg"], $info["type"]);
			$s = $this->getConfigNode();
            $this->View();
			igk_html_add($this->getTargetNode(), $s);
            igk_ajx_replace_node($s, "#igk-cnf-content");
            igk_ajx_replace_uri(igk_io_baseuri()."/Configs/#!p=".$this->getConfigPage());
            igk_ajx_panel_dialog_close();
            igk_resetr();
        }
        igk_ilog(igk_ob_get($_REQUEST));
        igk_ilog("not storing db domain_ajx:: confirm ".igk_qr_confirm() . " method " .igk_server()->method("POST") );
        $dv=igk_createnode();
        $frm=$dv->addForm();
        $frm["action"]=$this->getUri(__FUNCTION__);
        $frm["igk-ajx-form"]=1;
        igk_include_view($this, $frm, "subdomain.add.form", array("func"=>__FUNCTION__));
        $frm->addConfirm(1);
        igk_html_form_initfield($frm);
        igk_ajx_panel_dialog(__("Add domain"), $dv);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function dom_add_db_edit_domain_ajx(){
        if(igk_qr_confirm()){
            $obj=igk_get_robj();
            $app=igk_app();
            if(!empty($obj->clName) && igk_is_domain_name($obj->clName)){
                $app->Configs->website_domain=$obj->clName;
                $app->Session->Domain=$obj->clName;
                IGKSubDomainManager::StoreBaseDomain($this, $obj->clName);
            }
            $this->View();
            igk_ajx_replace_ctrl_view($this);
            igk_ajx_panel_dialog_close();
            igk_flush_data();
            igk_exit();
        }
        $dv=igk_createnode();
        $frm=$dv->addForm();
        $frm["action"]=$this->getUri(__FUNCTION__);
        $frm["igk-ajx-form"]=1;
        igk_include_view($this, $frm, "subdomain.editbasedomain.form");
        $frm->addConfirm(1);
        igk_ajx_panel_dialog(__("Edit Domain"), $dv);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function dom_drop_db_s_domain_ajx(){
        if(igk_qr_confirm()){
            $items=$this->getParam("domain/deleteitems"); 
            if($items){
                $ad=igk_get_data_adapter($this);
                $ok=true;
                if($ad->connect()){
                    foreach($items as $v){
                        $ok=$ok& igk_db_delete($this, $this->DataTableName, array(IGK_FD_ID=>$v));
                    }
                    $ad->close();
                }
                if($ok){
                    igk_notifyctrl()->addSuccessr("msg.items.deleted");
                    igk_notification_push_event("sys://domain/changed", $this);
                }
                else
                    igk_notifyctrl()->addErrorr("e.items.notdeleted");
                $this->View();
            }
            $this->setParam("domain/deleteitems", null);
            igk_navtocurrent();
        }
        else{
            $ti=igk_getr("item");
            if($ti && (igk_count($ti) > 0)){
                $frame=igk_frame_add_confirm($this, __FUNCTION__, $this->getUri(__FUNCTION__));
                $frame->Form->Div->Content=__("confirm.deletes");
                $this->setParam("domain/deleteitems", $ti);
                $frame->Form->addHidden("i", igk_getr("i"));
                $frame->RenderAJX();
            }
        }
    }
	private function _updateview(){

		igk_getctrl(IGK_CONF_CTRL)->setSelectedConfigCtrl($this);
		$s = $this->getConfigNode();
		igk_html_add($this->getTargetNode(), $s);
		$this->View();
		igk_ajx_replace_node($s, "#igk-cnf-content");
	}
    ///<summary></summary>
    /**
    * 
    */
    public function dom_drop_domain_ajx(){
        if(igk_qr_confirm()){

			$msg  = __("Domain dropped");
			$type = "igk-success";
            if(igk_db_delete($this, $this->DataTableName, array(IGK_FD_ID=>igk_getr("i")))){
                igk_notification_push_event("sys://domain/changed", $this);
                IGKSubDomainManager::getInstance()->Clear();
                $this->__init_domain();
            }
            else{
                $type="danger";
				$msg  = __("Failed to drop domain");
            }
			$this->_updateview();
            igk_ajx_replace_uri(igk_io_baseuri()."/Configs/#!p=".$this->getConfigPage());
            igk_ajx_toast($msg, $type);
			igk_notifyctrl()->bind($msg, $type);
            igk_exit();
        }
        $frame=igk_frame_add_confirm($this, __FUNCTION__, $this->getUri(__FUNCTION__));
        $frame->Form->Div->Content=__("confirm.delete");
        $frame->Form->addHidden("i", igk_getr("i"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function dom_drop_domaintable(){
        if(!igk_is_conf_connected())
            return;
        $ad=igk_get_data_adapter($this);
        $t="success";
        $msg["success"]=__("Table clear");
        $msg["danger"] =__("Table not found");
        $e=0;
        if($ad->connect()){
            if(!($e=$ad->clearTable($this->getDataTableName()))){
                $t="danger";
            }
            $ad->close();
        }
        if(igk_is_ajx_demand()){
            igk_ajx_toast($msg[$t], $t);
        }
        else{
            $_not=igk_notifyctrl();
            if($e){
                $_not->addSuccess($msg["success"]);
            }
            else{
                $_not->addError($msg["danger"]);
            }
        }
    }
    ///<summary> edit domain ajx </summary>
    /**
    *  edit domain ajx
    */
    public function dom_edit_domain_ajx(){
        if(igk_qr_confirm()){
            $obj=igk_get_robj();
            if(igk_db_update($this, $this->getDataTableName(), $obj)){
                igk_notifyctrl("domain/dbz")->addSuccessr("mgs.dataupdated");
                igk_hook("sys://domain/changed", $this);
                IGKSubDomainManager::getInstance()->Clear();
                $this->__init_domain();
            }
            else{
                igk_notifyctrl("domain/dbz")->addErrorr("err.error_append_1", igk_debuggerview()->getMessage());
            }
            igk_wln("is visible : ".$this->getIsVisible());
            $this->View();
            igk_ajx_replace_ctrl_view($this);
            igk_ajx_panel_dialog_close();
            igk_flush_data();
            igk_exit();
        }
        else{
            $data=igk_db_table_select_where($this->getDataTableName(), array(IGK_FD_ID=>igk_getr('i')), $this)->getRowAtIndex(0);
            if($data == null){
                return;}
            $dv=igk_createnode();
            $frm=$dv->addForm();
            $frm["action"]=$this->getUri(__FUNCTION__);
            $frm["igk-ajx-form"]=1;
            igk_include_view($this, $frm, "subdomain.edit.form", array("data"=>$data), true);
            $frm->addConfirm(1);
            igk_ajx_panel_dialog(__("title.editDomain"), $dv);
        }
        igk_flush_data();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "domain";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_SUBDOMAINS);
    }
    ///get the controller that contain domain from setting. for the first usage
    /**
    */
    public function getDomainCtrl($n, & $row){
        $g=igk_db_select_wherec($this, array(IGK_FD_NAME=>$n));
        if($g && ($g->RowCount == 1)){
            $row=$g->getRowAtIndex(0);
            $c=igk_template_create_ctrl($row->clCtrl);
            return $c;
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SUBDOMAINNAME_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        if(!defined('IGK_APP_PLUGIN'))
            $this->__init_domain();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->TargetNode;
        if(!$this->IsVisible){
            igk_html_rm($t);
        }
        else{
            $box=$t->clearChilds()->addPanelBox()->addDiv();
             igk_include_view($this, $box, "subdomain.config");
        }
    }
}
///<summary>system uri actions provider used with igk_redirection.php to provide web redirection according to given url</summary>
/**
* system uri actions provider used with igk_redirection.php to provide web redirection according to given url
*/
final class IGKSystemUriActionCtrl extends IGKConfigCtrlBase implements IIGKUriActionListener {
    const ROUTES = IGK_CUSTOM_CTRL_PARAM + 0x1;
	//+ action routes
    private static $sm_actions;
	private static $sm_routes;
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function contains($key){
        $tab=$this->getRoutes();
        if(is_array($tab))
            return array_key_exists($key, $tab);
        return false;
    }
    ///<summary>invoke this method with curl service to dispathc message to controller</summary>
    /**
    * invoke this method with curl service to dispathc message to controller
    */
    public function dispatchMessage(){
        if(!igk_is_srv_request()){
            if(!igk_sys_env_production()){
                igk_ajx_toast("Can't dispatch message : not a local server request");
            }
            igk_exit();
        }
        $ctrl=igk_getctrl(igk_getr("ctrl"));
        $uri=igk_getr("uri");
        $param=igk_getr("param");
        $src=igk_getr("source");
        session_write_close();
        if($ctrl !== $this){
            $e=igk_sys_ac_create_pattern($ctrl, $uri);
            $cp=$e->getQueryParams();
            $bck=$_REQUEST;
            $_REQUEST=$param;
            $fc=igk_getv($cp, "function");
            $p=igk_getv($cp, "params");
            if($p && !is_array($p)){
                $p=array($p);
                $cp["params"]=$p;
            }
            igk_set_env("sys://no_render", 1);
            igk_set_env("sys://ajx_demand", 1);
            igk_set_env("sys://action/dispatchmessage", array("ctrl"=>1, "uri"=>$uri));
            if(method_exists($ctrl, $fc)){
                call_user_func_array(array($ctrl, $fc), is_array($p) ? $p: array($p));
            }
            else{
                $g=0;
                if(method_exists($ctrl, "OnMessage")){
                    call_user_func_array(array($ctrl, "OnMessage"), array($src, is_array($cp) ? $cp: array($cp)));
                    $g=1;
                }
                if(!$g){
                    igk_ajx_toast("Can't dispatch message : {$uri}");
                }
            }
            igk_set_env("sys://action/dispatchmessage", 0);
        }
        igk_exit();
    }
    ///<summary>get action list</summary>
    /**
    * get action list
    */
    public function getActions(){
        return $this->getRoutes();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanAddChild(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "systemuri";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_SYSTEMURI);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getmailto(){
        igk_navto("mailto:bondje.doue@igkdev.com");
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SYSACTION_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getPatternInfo(){
        return igk_get_env(IGK_ENV_URI_PATTERN_KEY);
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getRoutes(){
		if (self::$sm_routes == null){
			self::$sm_routes = array();
		}
		return self::$sm_routes;

        // $route=& $this->getParam(self::ROUTES, array(), 1);
        // return $route;
    }
    ///<summary></summary>
    ///<param name="key" default="null"></param>
    /**
    * 
    * @param mixed $key the default value is null
    */
    public function getSystemUri($key=null){
        $tab=$this->getRoutes();
        if(isset($tab[$key]))
            return $tab[$key];
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gotoconfig(){
        igk_navtocurrent("Configs");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function init_wakeup(){}
    ///<summary></summary>
    ///<param name="ctrl" default="null"></param>
    /**
    * 
    * @param mixed $ctrl the default value is null
    */
    private static function InitActionList($ctrl){
        self::$sm_actions=array();
        self::$sm_actions["^/config(.php)?$"]=$ctrl->getUri("gotoconfig");
        $conf_ctrl=igk_getconfigwebpagectrl();
        if($conf_ctrl){
            self::$sm_actions["^/Configs!Settings$"]=$conf_ctrl->getUri("configure_settings");
            $t=igk_get_env("sys://configs/options");
            if($t){
                foreach($t as $k=>$v){
                    self::$sm_actions["^/Configs!{$k}$"]=$conf_ctrl->getUri("configure&v=".$v);
                }
            }
            self::$sm_actions["^/reconnect$"]=$conf_ctrl->getUri("reconnect");
        }
		// igk_wln_e("bascic ", array_keys(self::$sm_actions));

        self::$sm_actions["/@!(.)+"]=$ctrl->getUri("invoke_action");
        self::$sm_actions["/clr$"]="?c=".IGK_SESSION_CTRL."&f=ClearS";
        self::$sm_actions["/run-cron$"]="?c=".IGK_SESSION_CTRL."&f=RunCron";
        self::$sm_actions["^/initsdb$"]="?c=".IGK_MYSQL_DB_CTRL."&f=pinitSDb";
        self::$sm_actions["^/getmailto$"]=$ctrl->getUri("getmailto");
        if($uctrl=igk_getctrl(IGK_USER_CTRL)){
            self::$sm_actions["^/connect$"]=$uctrl->getUri("connectpage");
            self::$sm_actions["^/signup$"]=$uctrl->getUri("signup");
            self::$sm_actions["^/users/begin_reset_pwd$"]=$uctrl->getUri("begin_pwd_reset");
            self::$sm_actions["^/users/logout$"]=$uctrl->getUri("logout_lnk");
        }
        if($sys_c=igk_getctrl(IGK_SYS_CTRL, false)){
            self::$sm_actions["^/sys_api/check_mod_rewrite$"]=$sys_c->getUri("mod_rewrite");
        }
        $route = & $ctrl->getRoutes();
		foreach(self::$sm_actions as $k=>$v){
			$route[$k] = $v;
		}
        $e=$ctrl->getDbEntries();
        if($e && ($e->RowCount > 0)){
            foreach($e->Rows as $k=>$v){
                if(is_object($v)){
                    $route[$v->clName]=$v->clUri;
                }
                else{
                    igk_wln("uri : object not register from db");
                    igk_wln($v);
                }
            }
        }
        return self::$sm_actions;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        self::InitActionList($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invoke_action(){
        $u=igk_getv($_SERVER, "REQUEST_URI");
        $c=preg_match_all("/^\/@!(?P<name>([^\/]+))(\/(?P<param>(.)+))?$/i", $u, $tab);
        if($c){
            $n=strtolower(igk_getv($tab, "name")[0]);
            $p=explode("/", igk_getv($tab, "param")[0]);
            switch($n){
                case "actions":
                $ke="sys://actions/scripts/".$p[0];
                $s=igk_get_env($ke);
                if($s && igk_is_callable($s)){
                    call_user_func_array($s, array_slice($p, 1));
                }
                break;default:
                $ke="sys://".$n."/scripts/".$p[0];
                $s=igk_get_env($ke);
                if($s && igk_is_callable($s)){
                    call_user_func_array($s, array_slice($p, 1));
                }
                break;
            }
        }
        else{
            igk_ilog("expression not valid ".$u);
        }
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="pattern"></param>
    ///<param name="render" default="1"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $pattern
    * @param mixed $render the default value is 1
    */
    public function invokeCtrlUriPattern($ctrl, $pattern, $render=1){
        if(igk_get_env("sys://call/".__METHOD__) == 1){
            igk_debug_wln("Invoke Ctrl Uri Pattern is not allowed");
        }
        igk_set_env("sys://call/".__METHOD__, 1);
        $this->setEnvParam("targetctrl", $ctrl);
        igk_set_env(IGK_ENV_URI_PATTERN_KEY, $pattern);
        igk_app()->getControllerManager()->InvokePattern($pattern);
        $this->setEnvParam("targetctrl", null);
        if($render){
            igk_render_doc();
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="type"></param>
    ///<param name="ctrl"></param>
    ///<param name="func"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $type
    * @param mixed $ctrl
    * @param mixed $func
    * @param mixed $args
    */
    public function invokePageAction($type, $ctrl, $func, $args){
        switch($type){
            case "sys":
            $ctrl=igk_getctrl($ctrl);
            if($ctrl){
                $e=igk_sys_ac_create_pattern($ctrl, "/".$func."/".$args);
                $cp=$e->getQueryParams();
                $f=igk_getv($cp, "function");
                $args=igk_getv($cp, "params");
                if($ctrl->IsFunctionExposed($f)){
                    try {
                        call_user_func_array(array($ctrl, $f), is_array($args) ? $args: array($args));
                    }
                    catch(Exception $ex){
                        igk_show_exception($ex);
                        igk_exit();
                    }
                }
                igk_navto(igk_io_baseuri());
                igk_exit();
            }
            break;
            case "res":
                $uri = igk_server()->REQUEST_URI;
                $uri = substr($uri, 7);
                $q = parse_url($uri);
                // igk_wln(__FILE__.":".__LINE__, $uri, $q);
                $f = igk_io_basedir($q["path"]);
                // igk_wln("file : ".$f, file_exists($f));
                if (file_exists($f)){
                    igk_header_content_file($f);
                    //igk_set_header_contentfile($f);
                    include($f);
                } else {
                    igk_ilog("resource file not present: ".$f);
                    igk_set_header(404);
                }
                igk_exit();
            break;
        }
        // igk_wln("invokePageAction failed: ", $type);
        // igk_wln(__METHOD__, igk_io_baseuri());
        // igk_trace();
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function invokeUri($key){
        igk_app()->getControllerManager()->InvokeUri($this->getSystemUri($key));
        igk_render_doc();
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="pattern"></param>
    ///<param name="render" default="1"></param>
    /**
    * 
    * @param mixed $pattern
    * @param mixed $render the default value is 1
    */
    public function invokeUriPattern($pattern, $render=1){
        $r=$this->getRoutes();
        $v_uri=$r ? igk_getv($r, $pattern->action): null;
        $app=igk_app();
        $app->Session->PageFolder=IGK_HOME_PAGEFOLDER;
        igk_set_env(IGK_ENV_URI_PATTERN_KEY, $pattern);
		$app->getControllerManager()->InvokeUri($v_uri);
        igk_set_env(IGK_ENV_URI_PATTERN_KEY, null);
        if($render){
            igk_render_doc();
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="k"></param>
    /**
    * 
    * @param mixed $k
    */
    public function IsFunctionExposed($k){
        return true;
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function matche($uri){
        $error="";
        $v_routes=  $this->getRoutes();
        if($v_routes){
			krsort($v_routes);
            foreach($v_routes as $k=>$v){
                $pattern=igk_pattern_matcher_get_pattern($k);
                if(preg_match_all($pattern, $uri)){

                    return new IGKSystemUriActionPatternInfo(array(
                        "action"=>$k,
                        "ctrl"=> null,
                        "value"=>$v,
                        "pattern"=>$pattern,
                        "uri"=>$uri,
                        "keys"=>igk_str_get_pattern_keys($k)
                    ));
                }
            }
        }
        return null;
    }
    ///<summary> use to match global registrated uri</summary>
    /**
    *  use to match global registrated uri
    */
    public function matche_global($uri){
        $v_routes=$this->getRoutes();
        if($v_routes){
            foreach($v_routes as $k=>$v){
                $pattern=igk_pattern_matcher_get_pattern($k);
                if(preg_match($pattern, $uri)){
                    return new IGKSystemUriActionPatternInfo(array(
                        "action"=>$k,
                        "ctrl"=>null,
                        "value"=>$v,
                        "pattern"=>$pattern,
                        "uri"=>$uri,
                        "keys"=>igk_str_get_pattern_keys($k)
                    ));
                }
            }
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="routes"></param>
    /**
    * 
    * @param mixed $routes
    */
    protected function setRoutes($routes){
        $this->setParam(self::ROUTES, $routes);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function sys_ac_navigateto(){
        $p=igk_getr('p');
        if(isset($p)){
            igk_navto(igk_io_baseuri()."/".$p);
        }
        $k=igk_sys_ac_getpatterninfo();
        $tab=$k->getQueryParams();
        $l=igk_getv($tab, "lang");
        $s="?p=".igk_getv($tab, "page");
        if($l){
            $s .= "&l=".$l;
        }
        igk_app()->getControllerManager()->InvokeUri($s);
    }
    ///<summary></summary>
    ///<param name="p"></param>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $p
    * @param mixed $uri
    */
    public function sys_ac_register($p, $uri){
        $v_tab=& $this->getRoutes();
        if(isset($v_tab[$p])){
            // igk_ilog("Action name ".$p." already register <br />"."old: ".$v_tab[$p]."<br />"."new: ".$uri."<br />");
            return;
        }
        $v_tab[$p]=$uri;
    }
    ///<summary></summary>
    ///<param name="uripattern"></param>
    /**
    * 
    * @param mixed $uripattern
    */
    public function sys_ac_unregister($uripattern){
        $tab=& $this->getRoutes();
        if(isset($tab[$uripattern])){
            unset($tab[$uripattern]);
            $this->setRoutes($tab);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }
        $c=$this->TargetNode;
        igk_html_add($c, $this->ConfigNode);
        $c=$c->ClearChilds()->addPanelBox();
        igk_html_add_title($c, "title.SystemUriView");
        $c->addHSep();
        igk_html_article($this, "systemuri", $c->addDiv());
        $c->addHSep();
        $div=$c->addDiv();
        $ul=$div->add("ul");
        $v_routes=$this->getRoutes();
        foreach($v_routes as $k=>$v){
            $li=$ul->addLi()->setClass("clearb");
            $li->add("span", array("class"=>"igk-col-4-2 no-overflow igk-text-ellipis"))->Content=$k;
            $li->add("span", array("class"=>"igk-col-4-2"))->Content=$v;
        }
    }
}
///<summary>represent css template controlller</summary>
/**
* represent css template controlller
*/
final class IGKTemplateCtrl extends IGKConfigCtrlBase {
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    private function __installTemplate($file){
        if(!file_exists($file))
            return;
        $hzip=zip_open($file);
        $outdir=igk_io_basedir();
        if(is_resource($hzip)){
            while(($e=zip_read($hzip))){
                $n=zip_entry_name($e);
                if($n == "__template.def"){
                    $this->__loadEnvironment(zip_entry_read($e, zip_entry_filesize($e)));
                }
                else{
                    if(igk_zip_isdirentry($e)){
                        igk_zip_create_dir($outdir, $n);
                    }
                    else{
                        if(!(strpos($n, "/") === FALSE))
                            igk_zip_extract($outdir, $hzip, $e);
                    }
                }
            }
            zip_close($hzip);
            igk_notifyctrl()->addMsgr("msg.templateloaded");
            igk_getconfigwebpagectrl()->reconnect();
            igk_exit();
        }
        else{
            igk_notifyctrl()->addErrorr("e.templatefilenotvalid");
        }
    }
    ///<summary></summary>
    ///<param name="env"></param>
    /**
    * 
    * @param mixed $env
    */
    private function __loadEnvironment($env){
        $e=igk_createnode("env");
        $e->Load($env);
        $n=IGK_STR_EMPTY;
        $v=IGK_STR_EMPTY;
        $t=igk_getv($e->getElementsByTagName("Template"), 0);
        igk_app()->Configs->templateLoad=true;
        igk_app()->Configs->templateName=$t["name"];
        igk_app()->Configs->templateVersion=$t["version"];
        $t=igk_getv($e->getElementsByTagName("TemplateInfo"), 0);
        foreach($t->Childs as $k=>$v){
            switch(strtolower($v->TagName)){
                case "defaultctrl":
                igk_app()->Configs->default_controller=trim($v->innerHTML);
                break;
            }
        }
        igk_save_config();
        $cls=igk_getv($e->getElementsByTagName("Colors"), 0);
        foreach($cls->Childs as $k){
            igk_app()->Doc->Theme->cl[$n]=$v;
        }
        $cls=igk_getv($e->getElementsByTagName("Styles"), 0);
        foreach($cls->Childs as $k){
            igk_app()->Doc->Theme[$n]=$v;
        }
        igk_getctrl(IGK_THEME_CTRL)->saveTheme();
        $cls=igk_getv($e->getElementsByTagName("Menus"), 0);
        $ctrl=igk_getctrl(IGK_MENU_CTRL);
        $ctrl->__ClearConfigMenu(false);
        foreach($cls->Childs as $k){
            $t=$ctrl->getDefaultEntry();
            foreach($k->Attributes as $s=>$r){
                $t[$s]=$r;
            }
            $ctrl->reg_menu($t, false);
        }
        $ctrl->__saveConfigMenu();
        $cls=igk_getv($e->getElementsByTagName("UserVariables"), 0);
        $ctrl=igk_getctrl(IGK_USERVARS_CTRL);
        $ctrl->vc_Clearvars(false);
        foreach($cls->Childs as $k){
            $ctrl->regVars($k["name"], $k["value"], $k["description"]);
        }
        $ctrl->__storeVars();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "template";
    }
    ///<summary></summary>
    ///<param name="name" default="null"></param>
    ///<param name="desc" default="null"></param>
    ///<param name="cat" default="null"></param>
    ///<param name="image" default="null"></param>
    /**
    * 
    * @param mixed $name the default value is null
    * @param mixed $desc the default value is null
    * @param mixed $cat the default value is null
    * @param mixed $image the default value is null
    */
    public function getCurrentTemplateDefinition($name=null, $desc=null, $cat=null, $image=null){
        $e=igk_createnode("Template");
        $e["name"]=$name;
        $e["version"]=IGK_VERSION;
        $e["description"]=$desc;
        $e["category"]=$cat;
        $e["created"]=igk_date_now();
        $v_ti=$e->add("TemplateInfo");
        $v_ti->add("DefaultCtrl")->Content=igk_getv(igk_app()->Configs, "default_controller");
        $v_ti->add("Image")->Content=$image;
        $menu=$e->add("Menus");
        foreach(igk_getctrl(IGK_MENU_CTRL)->UserMenu as $k){
            $m=$menu->add("menu");
            foreach($k as $s=>$sv){
                $m[$s]=trim($sv);
            }
        }
        $ctrls=$e->add("Controllers");
        foreach(igk_app()->getControllerManager()->getUserControllers() as $k){
            $ctrls->add("Ctrl", array(IGK_FD_NAME=>$k->Name, ));
        }
        $ctrls=$e->add("UserVariables");
        foreach(igk_getctrl(IGK_USERVARS_CTRL)->getVars() as $k=>$v){
            $obj=(object)$v;
            $ctrls->add("var", array(
                "name"=>$k,
                "value"=>$obj->value,
                "comment"=>$obj->comment
            ));
        }
        $theme=$e->add("Themes");
        $clt=$theme->add("Colors");
        foreach(igk_app()->Doc->Theme->cl->Attributes as $k=>$v){
            if(empty($v))
                continue;
            $clt->add("Color", array("name"=>$k, "value"=>$v));
        }
        $clt=$theme->add("Styles");
        foreach(igk_app()->Doc->Theme->def->Attributes as $k=>$v){
            if(empty($v))
                continue;
            $clt->add("css", array("name"=>$k, "value"=>$v));
        }
        $option=(object)array("Indent"=>true);
        return igk_ansi2utf8(utf8_encode($e->Render($option)));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConfigPageAvailable(){
        return !igk_environment()->is("production");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gettemplateFolder(){
        return igk_io_basedir(IGK_TEMPLATES_FOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTemplateImg(){
        $n=igk_getr("n");
        $v_file=$this->templateFolder."/".$n.".template";
        header("Content-type: image/png");
        $f=false;
        if(is_file($v_file)){
            $hzip=zip_open($v_file);
            if(is_resource($hzip)){
                while(($e=zip_read($hzip))){
                    $n=zip_entry_name($e);
                    if($n == "__image.png"){
                        igk_wl(zip_entry_read($e, zip_entry_filesize($e)));
                        $f=true;
                        break;
                    }
                }
                zip_close($hzip);
            }
        }
        if(!$f){
            igk_wl(IGKIO::ReadAllText(igk_io_basedir(IGK_RES_FOLDER."/notemplatepic.png")));
        }
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="tempfile" default="null"></param>
    /**
    * 
    * @param mixed $tempfile the default value is null
    */
    public function loadTemplate($tempfile=null){
        $f=igk_getv($_FILES, "clTemplateFile");
        if($f && isset($f["tmp_name"]) && ($f["error"] === 0)){
            $this->__installTemplate($f["tmp_name"]);
            $this->ConfigCtrl->reconnect();
            igk_exit();
        }
        else
            igk_notifyctrl()->addError("Msg.TemplateLoadTemplateError");
    }
    ///<summary></summary>
    ///<param name="tempfile" default="null"></param>
    /**
    * 
    * @param mixed $tempfile the default value is null
    */
    public function loadTemplateFrame_ajx($tempfile=null){
        $frame=igk_html_frame($this, "new_template_frame");
        $frame->Title=__("title.loadtemplate");
        $d=$frame->BoxContent;
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("loadTemplate");
        $frm->addInput("clTemplateFile", "file");
        $frm->addHSep();
        $frm->addInput("btn_savetemplate", "submit", __("btn.loadtemplate"));
        igk_wl($frame->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function saveTemplate(){
        $tname=igk_getr("clTemplateName");
        $inc=igk_getr("clTemplateAllowInc");
        $desc=igk_getr("clTemplateDesc");
        $img=igk_getv($_FILES, "clTemplateImage");
        $e=igk_createnode("error");
        $val="IGKValidator";
        IGKValidator::Init();
        if(IGKValidator::IsStringNullOrEmpty($tname)){
            IGKValidator::Error()->addLi()->Content="string is null or empty";
        }
        if(($img == null) || !igk_io_fileispicture($img["type"])){
            IGKValidator::Error()->addLi()->Content="image not specified";
        }
        if(!IGKIO::CreateDir($this->templateFolder)){
            igk_notifyctrl()->addError(__("Msg.TemplateFolderCantBeCreated"));
            igk_frame_close("new_template_frame");
            return;
        }
        if(IGKValidator::Error()->HasChilds){
            igk_notifyctrl()->addWarning(__("Msg.ErrorWhenTemplate"));
            return;
        }
        $file=igk_io_dir($this->gettemplateFolder()."/".$tname.".template");
        $zip=new ZipArchive();
        if($zip->open($file, ZIPARCHIVE::CREATE)){
            $zip->addFromString("__template.def", $this->getCurrentTemplateDefinition($tname, $desc, igk_getr("clTemplateCat")));
            $zip->addFromString("__image.png", IGKIO::ReadAllText($img["tmp_name"]));
            $dir=igk_io_basedir(IGK_MODS_FOLDER);
            igk_zip_dir($dir, $zip, "Mods");
            igk_zip_dir(igk_io_basedir(IGK_RES_FOLDER), $zip, "R", "/\.(gkds)$/i");
            if($inc){
                igk_zip_dir(igk_io_basedir(IGK_INC_FOLDER), $zip, "Inc");
            }
            $zip->close();
            igk_frame_close("new_template_frame");
            igk_notifyctrl()->addMsgr("Msg.TemplateSaved");
        }
        else{
            igk_notifyctrl()->addError(__("Msg.TemplateNotSaved"));
        }
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function saveTemplateFrame_ajx(){
        $frame=igk_html_frame($this, "new_template_frame");
        $frame->Title=__("title.newtemplate");
        $d=$frame->BoxContent;
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("saveTemplate");
        $frm->addDiv(array("class"=>"hide"))->Content=IGK_HTML_SPACE;
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput("clTemplateName", "text", null, null, true);
        $ul->addLi()->addSLabelInput("clTemplateAllowInc", "checkbox");
        $ul->addLi()->addSLabelInput("clTemplateCat", "text", null, null, true);
        $ul->addLi()->addSLabelInput("clTemplateDesc");
        $ul->addLi()->addSLabelInput("clTemplateImage", "file", null, null, true);
        $frm->addHSep();
        $frm->addInput("btn_savetemplate", "submit", __("btn.save"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    ///<param name="uri" default="null"></param>
    /**
    * 
    * @param mixed $uri the default value is null
    */
    public function tm_gettemplates_ajx($uri=null){
        $ul=igk_createnode("ul");
        $ul["class"]="igk_templates_list";
        $v_tfiles=IGKIO::GetFiles($this->templateFolder, "/\.template$/i", false);
        if($v_tfiles){
            foreach($v_tfiles as $f){
                $li=$ul->addLi();
                $li["class"]="dispib floatl";
                $div=$li->addDiv();
                $n=igk_io_basenamewithoutext($f);
                $div->addDiv(array("class"=>"title"))->Content=$n;
                $cdiv=$div->addDiv();
                $cdiv->setClass("floatl");
                $cdiv->add("img", array(
                    "src"=>igk_io_baseuri().$this->getUri("getTemplateImg&n=".$n),
                    "width"=>"100%"
                ));
                $cdiv=$div->addDiv();
                IGKHtmlUtils::AddBtnLnk($cdiv, "btn.installTemplate", $this->getUri("tm_installTemplate&n=".$n));
                IGKHtmlUtils::AddBtnLnk($cdiv, "btn.uninstallTemplate", $this->getUri("tm_uninstallTemplate&n=".$n));
            }
        }
        else
            $ul->addLi()->Content=__("tip.notemplates");
        igk_wl($ul->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function tm_installTemplate(){
        $n=igk_getr("n");
        if($n){
            $this->__installTemplate($this->templateFolder. "/". $n.".template");
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function tm_uninstallTemplate(){
        $n=igk_getr("n");
        if($n){
            $v_f=$this->templateFolder. "/". $n.".template";
            if(file_exists($v_f)){
                @unlink($v_f);
            }
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }
        $t=$this->TargetNode;
        $t->ClearChilds();
        $box=$t->addPanelBox();
        $box->addH1()->setClass("igk-title")->Content =  __("Templates");
        
        igk_html_article($this, "template", $box->addDiv());
         
        $frm=$box->addForm()->setClass("dispib");
        $frm["action"]=$this->getUri("loadTemplate");
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.loadTemplate"), igk_js_post_frame($this->getUri("loadTemplateFrame_ajx")));
        $frm=$box->addForm()->setClass("dispib");
        $frm["action"]=$this->getUri("saveTemplate");
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.saveTemplate"), igk_js_post_frame($this->getUri("saveTemplateFrame_ajx")));
      

        $frm=$box->addForm();
        igk_html_add_title($frm, "title.templates");
        $frm->addDiv()->addScript()->Content="(function(q){window.igk.ajx.post('".$this->getUri("tm_gettemplates_ajx")."',null,function(xhr){if (this.isReady()){ this.setResponseTo(q); }}); })(window.igk.getParentScript());";
    }
}
///- THEME CONTROLLER
///<summary>represent a controller that will manage the theme on administration page</summary>
/**
* represent a controller that will manage the theme on administration page
*/
final class IGKThemeCtrl extends IGKConfigCtrlBase {
    const SEARCHKEY_KEY=self::SEARCH_KEY + 1;
    const SEARCH_KEY=0xa0;
    ///<summary></summary>
    ///<param name="frm"></param>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $frm
    * @param mixed $ctrl
    */
    private function __add_cl_cnf_btn($frm, $ctrl){
        $frm->addHSep();
        $bar=$frm->addActionBar();
        IGKHtmlUtils::AddBtnLnk($bar, __("btn.add"), $ctrl->getUri("addnewcolorframe#colorman"));
        IGKHtmlUtils::AddBtnLnk($bar, __("btn.importcolorfile"), $ctrl->getUri("th_importcolorfileframe#colorman"));
        IGKHtmlUtils::AddBtnLnk($bar, __("btn.downloadcolor"), $ctrl->getUri("th_downloadcolorfile#colorman"));
        IGKHtmlUtils::AddBtnLnk($bar, __("btn.Clearthemecolor"), $ctrl->getUri("th_Clearthemecolor#colorman"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
        $this->m_search=null;
        $this->m_rendering=false;
        $this->m_cssFileTable=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __getfontform(){
        $frm=igk_createnode("form");
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.addNewFont"), igk_js_post_frame($this->getUri("ft_add_font_frame_ajx")));
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.installFontFrame"), igk_js_post_frame($this->getUri("ft_install_font_frame_ajx")));
        igk_notifyctrl()->setNotifyHost($frm->addDiv());
        $table=$frm->add("table", array("class"=>"fitw"));
        $ul=$frm->add("ul", array("id"=>"font_list", "class"=>"font_list"));
        $this->theme_buildFontTable($table, $ul);
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.addNewFont"), igk_js_post_frame($this->getUri("ft_add_font_frame_ajx")));
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.installFontFrame"), igk_js_post_frame($this->getUri("ft_install_font_frame_ajx")));
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.rmAll"), igk_js_post_frame($this->getUri("Clear_all_font_ajx")));
        $frm->addInput("confirm", "hidden", 0);
        return $frm;
    }
    ///<summary></summary>
    ///<param name="frm"></param>
    /**
    * 
    * @param mixed $frm
    */
    function _adddel_action($frm){
        $frm->addInput("btn_delaction", "button", __("btn.rmSelection"), array("onclick"=>"javascript:this.form.btn_action.value = 1; this.form.submit()"));
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initTheme(){
        $this->loadTheme();
        $this->themeLoadCssFiles();
    }
    ///<summary></summary>
    ///<param name="cl"></param>
    ///<param name="attribs" default="null"></param>
    ///<param name="width" default="16"></param>
    ///<param name="height" default="16"></param>
    /**
    * 
    * @param mixed $cl
    * @param mixed $attribs the default value is null
    * @param mixed $width the default value is 16
    * @param mixed $height the default value is 16
    */
    private function _newColorBox($cl, $attribs=null, $width=16, $height=16){
        $box=igk_createnode("a")->AppendAttributes(array(
            "class"=>"color_view nodecoration dispib",
            "style"=>"width:".$width."px; height:".$height."px; background-color:".$cl.";"
        ));
        $box->AppendAttributes($attribs);
        $box->Content=" ";
        return $box;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _showColor(){
        $d=$this->TargetNode;
        $t=igk_html_add_title($d, __("title.ColorManager"));
        $t->setId("colorman");
        $d->addHSep();
        igk_html_article($this, "themes.colormanager.description", $d);
        $d->addHSep();
        $d->add(new IGKHtmlSearchItem($this->getUri("searchcolor"), $this->m_searchColor, "qcl"));
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("changecl");
        igk_notify_sethost($frm->addDiv());
        $frm->addLineWaiter();
        $u=$this->getUri("colorList_ajx");
        $frm->addScript()->Content=<<<EOF
(function(){
	var q  = \$igk(igk.getParentScript());

	igk.ready(function(){
		igk.ajx.post('$u', null, function(xhr){
			if (this.isReady()){
				q.setHtml(xhr.responseText);
				igk.ajx.fn.initnode(q.o);
			}
		});
	});
})();
EOF;
        $this->__add_cl_cnf_btn($frm, $this);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _showFont(){
        $d=$this->TargetNode;
        igk_html_add_title($d, __("title.FontManager"));
        $d->addSeparator();
        igk_html_article($this, "themes.fontmanager.description", $d);
        $d->add(new IGKHtmlSearchItem($this->getUri("searchfont"), $this->m_searchfont, "qft"));
        $d->addHSep();
        $frm=$this->__getfontform();
        $d->add($frm);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _showRes(){
        $d=$this->TargetNode;
        igk_html_add_title($d, __("title.resManager"));
        $d->addSeparator();
        $d->add(new IGKHtmlSearchItem($this->getUri("searchres"), $this->m_searchRes, "qres"));
        $frm=$d->addForm();
    }
    ///<summary>show theme files</summary>
    /**
    * show theme files
    */
    private function _showSystemTheme(){
        $node=$this->TargetNode;
        igk_html_add_title($node, __("title.SystemThemeManager"));
        $node->addHSep();
        $frm=$node->addForm();
        $frm["action"]=$this->getUri("restore_theme");
        $dir=igk_io_currentrelativepath(IGK_DEFAULT_THEME_FOLDER);
        $tab=igk_io_getfiles($dir, "/\.phtml$/i");
        if($tab && (count($tab) > 0)){
            $frm->add("label", array("for"=>IGK_FD_NAME))->Content=__(IGK_FD_NAME);
            $sl=$frm->add("select");
            $sl->setId(IGK_FD_NAME);
            $sl->setClass("igk-form-control");
            foreach($tab as $k){
                $opt=$sl->add("option");
                $s=igk_io_remove_ext(basename($k));
                $opt["value"]=base64_encode($s);
                $opt->Content=$s;
            }
        }
        else{
            $frm->addDiv()->Content="no theme found: ". $dir;
        }
        $frm->addHSep();
        $frm->addBtn("btn_validate", __("btn.restore"));
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _showThemes(){}
    ///<summary></summary>
    /**
    * 
    */
    private function _th_showPalette(){
        $node=$this->TargetNode;
        igk_html_add_title($node, __("title.paletteManager"));
        $node->addSeparator();
        igk_html_article($this, "themes.palette.description", $node);
        $frm=$node->addForm();
        $div=$frm->add("div", array("style"=>"height: auto; line-height: 16px; max-width : 300px;"));
        $optiondiv=$div->addDiv();
        $w=16;
        $h=16;
        $p=IGK_STR_EMPTY;
        $cl="#000";
        $li=$optiondiv->addLi();
        $li->addLabel("currentPaletteName");
        $sel=$li->add("select");
        $sel["id"]=
        $sel["name"]="clCurrentPaletteName";
        $sel["onchange"]="javascript:window.igk.ajx.post('".$this->getUri('palette_UpdateCurrentPaletteName_ajx&')."'+this.id+'='+this.value, null, null);";
        $currentPal=igk_getv(igk_app()->Configs, "CurrentPaletteName", null);
        $v_check=true;
        $sel->add("option", array("value"=>IGK_STR_EMPTY));
        foreach(igk_getctrl(IGK_PALETTE_CTRL)->Palettes as $k=>$v){
            $cdiv=$div->addDiv();
            $v_t=$cdiv->addDiv();
            $v_t->Content=$k;
            IGKHtmlUtils::AddImgLnk($v_t, igk_js_post_frame($this->getUri("theme_dropPalette_ajx&id=".$k)), "drop_16x16");
            $v_option=$sel->add("option", array("value"=>$k));
            if($k == $currentPal){
                $v_option["selected"]="true";
                $v_check=false;
            }
            $v_option->Content=$k;
            foreach($v as $m=>$n){
                $p=$n;
                $f=$cdiv->add("a", ["style"=>"display: inline-block; width:".$w."px;
height:".$h."px; margin: 1px; background-color:".$p.";"]);
                $f->Content=IGK_HTML_SPACE;
                $f["href"]="#";
            }
        }
        if(!$v_check){
            igk_app()->Configs->CurrentPaletteName=null;
        }
        IGKHtmlUtils::AddBtnLnk($frm, __("btn.AddPalette"), igk_js_post_frame($this->getUri("theme_addPalette_ajx")));
    }
    ///<summary></summary>
    ///<param name="frm"></param>
    /**
    * 
    * @param mixed $frm
    */
    private function _themeFormControl($frm){
        IGKHtmlUtils::AddBtnLnk($frm, "btn.Add", igk_js_post_frame($this->getUri("theme_addKeyFrame_ajx")));
        IGKHtmlUtils::AddBtnLnk($frm, "btn.deleteallempty", igk_js_post_frame($this->getUri("theme_deleteall_emptyclass_ajx")));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function add_font(){
        $f=igk_getv($_FILES, "clfile");
        $n=igk_getr(IGK_FD_NAME);
        if(($f["error"] == 0) && igk_qr_confirm()){
            if(IGKIO::CreateDir($this->FontDir)){
                $destination=igk_io_dir($this->FontDir."/".$f["name"]);
                if(!file_exists($destination)){
                    if(!igk_io_move_uploaded_file($f["tmp_name"], $destination)){
                        igk_notifyctrl()->addError("move upload file failed");
                    }
                    else{
                        $d=igk_html_uri(igk_io_basepath($destination));
                        igk_notifyctrl()->addMsg("Font added : ".$d);
                        igk_app()->Doc->Theme->addFont($n, $d);
                    }
                }
                else{
                    igk_notifyctrl()->addError("failed file already exists");
                    $d=igk_io_basepath($destination);
                    igk_app()->Doc->Theme->addFont($n, $d);
                }
            }
            else{
                igk_notifyctrl()->addError("can't create a directory");
            }
        }
        else{
            igk_notifyctrl()->addError("can't add font ". $f["error"]);
        }
        $this->View();
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function addColorThemeKey(){
        $cl=igk_getr(IGK_FD_NAME);
        $cv=igk_getr("clColor");
        if(!empty($cl)){
            igk_app()->Doc->Theme->addColor($cl, $cv);
            igk_notifyctrl()->addMsg("Color modifier ".$cl." = ".$cv);
            if(igk_getr("clEdit")){
                $this->View();
                igk_frame_close("theme_addcolor");
            }
        }
        $this->View();
    }
    ///<summary></summary>
    ///<param name="name" default="null"></param>
    ///<param name="color" default="null"></param>
    /**
    * 
    * @param mixed $name the default value is null
    * @param mixed $color the default value is null
    */
    public function addnewcolorframe($name=null, $color=null){
        $frame=igk_html_frame($this, "theme_addcolor", "#colorman", igk_app()->Doc->body);
        $edit=$name != null;
        if(!$edit)
            $frame->Title=__("title.addColorTheme");
        else
            $frame->Title=__("title.editColorTheme");
        $frame->ClearChilds();
        $d=$frame->BoxContent;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("addColorThemeKey#colorman");
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput(IGK_FD_NAME, "text", $name);
        $ul->addLi()->addSLabelInput("clColor", "text", $color);
        if($edit)
            $ul->addLi()->addInput("clEdit", "hidden", true);
        $frm->addBtn("btn_add", $edit ? __("btn.Edit"): __("btn.Add"));
        return $frame;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear_all_font_ajx(){
        if(igk_qr_confirm()){
            igk_app()->Doc->Theme->ClearFont();
            $this->View();
            igk_navtocurrent();
        }
        else{
            $frame=igk_frame_add_confirm($this, "Clearallfont_confirm_frame", $this->getUri("Clear_all_font_ajx"));
            $frame->Form->Div->Content=__(IGK_MSG_DELETEALLFONT_QUESTION);
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    ///<param name="frm" default="null"></param>
    ///<param name="render" default="1"></param>
    /**
    * 
    * @param mixed $frm the default value is null
    * @param mixed $render the default value is 1
    */
    public function colorList_ajx($frm=null, $render=1){
        $colors=igk_app()->Doc->Theme->cl;
        if($frm == null)
            $frm=igk_createnode();
        $tab=$frm->addTable()->setClass("fitw");
        if(igk_sys_getconfig("BootStrap.Enabled"))
            $tab["class"]="table table-striped";
        $ctab=$colors;
        $stab=array_keys($ctab);
        igk_usort($stab, "igk_key_sort");
        $tr=$tab->addTr();
        IGKHtmlUtils::AddToggleAllCheckboxTh($tr);
        $tr->add("th", array("class"=>"fitw-2"))->Content=__(IGK_FD_NAME);
        $tr->add("th", array("class"=>"fitw-2"))->Content=__("clValue");
        $tr->add("th")->Content=IGK_HTML_SPACE;
        $tr->add("th")->Content=IGK_HTML_SPACE;
        foreach($stab as $k){
            if(($this->m_searchColor) && !strstr($k, $this->m_searchColor))
                continue;
            $v=IGKHtmlUtils::GetValue($ctab[$k]);
            $tr=$tab->addTr();
            $tr->addTd()->add("input", array("type"=>"checkbox"));
            $tr->addTd()->Content=$k;
            $tr->addTd()->Content=$v;
            $tr->addTd()->add($this->_newColorBox(igk_css_treatcolor($colors, $v, true), array("href"=>igk_js_post_frame($this->getUri("editColor&n=".$k."&cl=".urlencode($v))))));
            IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("dropcolor&n=".$k), "drop_16x16");
        }
        $frm->addBr();
        $this->__add_cl_cnf_btn($frm, $this);
        igk_html_toggle_class($tab);
        if(igk_app()->Session->URI_AJX_CONTEXT){
            $frm->RenderAJX();
        }
        return $frm;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function delete_selection(){
        $tab=igk_getr("keytab");
        igk_debug_wln("notice: ".__METHOD__);
        $x=igk_getr("ccount", 0);
        for($i=0; $i < $x; $i++){
            $t=igk_getr("css_i_".$i);
            if($t){
                igk_app()->Doc->Theme->def->Attributes[$tab[$i]]=null;
            }
        }
        igk_getctrl(IGK_THEME_CTRL)->saveTheme();
        $this->search();
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function drop_font(){
        $v=base64_decode(igk_getr("n"));
        igk_app()->Doc->Theme->removeFont($v);
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function drop_font_ajx(){
        if(igk_qr_confirm()){
            $this->drop_font();
            $this->View();
            igk_navtocurrent();
        }
        else{
            $n=igk_getr("n");
            $frame=igk_frame_add_confirm($this, "drop_font_frame", $this->getUri("drop_font_ajx"));
            $frame->Form->Div->Content=__("q.delete_font_1", base64_decode($n));
            $frame->Form->addInput("n", "hidden", $n);
            $frame->RenderAJX();
        }
    }
    
    ///<summary></summary>
    /**
    * 
    */
    public function dropcolor(){
        $cl=igk_getr("n");
        igk_app()->Doc->Theme->removeColor($cl);
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function edit_font_ajx(){
        if(igk_qr_confirm()){
            $c=$this;
            igk_io_save_posted_file("clfile", $this->FontDir, function($n, $d) use ($c){$c->App->Doc->Theme->addFont($n, $d);
            });
            igk_frame_close("edit_font_frame");
            $this->View();
            igk_navtocurrent("#font_list");
            igk_exit();
        }
        else{
            $n=base64_decode(igk_getr("n"));
            $frame=igk_html_frame($this, "edit_font_frame", "?#font_list");
            $frame->Title=__("title.editfont");
            $d=$frame->BoxContent;
            $d->ClearChilds();
            $frm=$d->addForm();
            $frm["action"]=$this->getUri(__FUNCTION__);
            $ul=$frm->add("ul");
            $t=$ul->addLi()->addSLabelInput(IGK_FD_NAME);
            $t->input["readonly"]=1;
            $t->input["value"]=$n;
            $ul->addLi()->addSLabelInput("clfile", "file");
            $frm->addInput("confirm", "hidden", 1);
            $frm->addHSep();
            $frm->addInput("btn_confirm", "submit", __("btn.confirm"));
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function editColor(){
        $n=urldecode(igk_getr("n"));
        $cl=igk_getr("cl");
        $frm=$this->addnewcolorframe($n, $cl);
        $frm->RenderAJX();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ft_add_font_frame_ajx(){
        $frame=igk_html_frame($this, "add_font_frame", "?#font_list");
        $frame->Title=__("title.addfont");
        $d=$frame->BoxContent;
        $d->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("add_font");
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput(IGK_FD_NAME);
        $ul->addLi()->addSLabelInput("clfile", "file");
        $frm->addInput("confirm", "hidden", 1);
        $frm->addHSep();
        $frm->addInput("btn_confirm", "submit", __("btn.addfont"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ft_install_font_frame_ajx(){
        $frame=igk_html_frame($this, "ft_install_font_frame");
        $frame->setTitle(__("title.install_fontframe_dialog"));
        $ctrl=igk_get_regctrl("sys");
        if($ctrl){
            $ctrl->viewInstallFontForm($frame->BoxContent->addDiv(), $this);
        }
        else{
            $frame->BoxContent->addNotifyBox("danger")->Content="/!\ No system controller found";
        }
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "themectrlconfig";
    }
    ///<summary></summary>
    /**
    * 
    */
    private function getCssDataFile(){
        return igk_io_currentrelativepath(IGK_DATA_FOLDER."/StylesData.xml");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFontDir(){
        return igk_io_syspath(IGK_RES_FONTS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getfontfile(){
        $v=base64_decode(igk_getr("n"));
        igk_getctrl(IGK_FILE_MAN_CTRL)->getfile(igk_io_currentrelativepath($v));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_THEME_CTRL;
    }

    public function getIsConfigPageAvailable(){
        return !igk_environment()->is("production");
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetRegClass(){
        return IGKHtmlClassValueAttribute::GetRegClass();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSearch(){
        return $this->getParam(self::SEARCH_KEY);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSearchKey(){
        return $this->getParam(self::SEARCHKEY_KEY);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        $this->_initTheme();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $t=igk_createnode("div")->AppendAttributes(array("class"=>strtolower($this->getName())));
        return $t;
    }
    ///<summary>load theme by name</summary>
    /**
    * load theme by name
    */
    public function loadTheme(){
        $b=igk_app();
        $doc = igk_app()->getDoc();
        if($doc && !empty($n = $doc->Theme->Name)){
            $f=igk_io_syspath(IGK_RES_FOLDER."/Themes/".$n.".".IGK_DEFAULT_VIEW_EXT);
            if(file_exists($f)){
                $doc->Theme->LoadThemeFromFile($f);
                return 1;
            }
        }
        return 0;
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function onHandleSystemEvent($msg){
        if(!$this->IsVisible){
            return;}
        switch($msg){
            case IGKApp::$REG_CSS_CLASS_EVT:
            break;
        }
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function onThemeChangedProc($ctrl){
        $n=igk_app()->Doc->Theme->RegChangedKey;
        if($ctrl->isChanged($n, $this->m_lastThemeChanged)){
            $this->loadTheme();
            if($this->getIsVisible())
                $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function palette_UpdateCurrentPaletteName_ajx(){
        $r=igk_getr("clCurrentPaletteName");
        igk_app()->Configs->CurrentPaletteName=$r;
        igk_save_config();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function ReloadView(){
        if($this->m_rendering)
            return;
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function removeTheme(){
        $f=igk_io_syspath(IGK_RES_FOLDER."/Themes/".igk_app()->Doc->Theme->Name.".".IGK_DEFAULT_VIEW_EXT);
        if(file_exists($f)){
            @unlink(igk_io_currentrelativepath($f));
            igk_notifyctrl()->addMsgr("msg.theme.updated");
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ResetTheme(){
        igk_app()->Doc->Theme->def->Attributes->Clear();
        $this->saveTheme();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function restore_theme(){
        $n=base64_decode(igk_getr(IGK_FD_NAME));
        if(!empty($n)){
            igk_app()->Doc->Theme->Name=$n;
            $this->loadTheme();
            $this->View();
        }
        igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function saveTheme(){
        return igk_app()->Doc->Theme->save();
    }
    ///<summary></summary>
    ///<param name="searchkey" default="null"></param>
    /**
    * 
    * @param mixed $searchkey the default value is null
    */
    public function search($searchkey=null){
        $q=igk_getr("q", $searchkey);
        if(empty($q)){
            $this->m_search=null;
            $v_sh=null;
            $this->View();
            return;
        }
        $tab=igk_app()->Doc->Theme->def->Attributes->ToArray();
        $out=array();
        foreach($tab as $k=>$v){
            if(strstr($k, $q)){
                $out[$k]=$v;
            }
        }
        $this->m_search=$out;
        $v_sh=$q;
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function searchcolor(){
        $this->m_searchColor=igk_getr("qcl");
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function searchres(){
        $this->m_searchRes=igk_getr("qres");
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function select_menu(){
        $this->m_selectedMenu=igk_getr("n", IGK_DEFAULT_VIEW);
        $this->View();
        if(igk_is_ajx_demand()){
            $t=$this->getTargetNode();
            $d=igk_createnode("div");
            $this->TargetNode=$d;
            $this->view_page();
            $d->RenderAJX();
            $this->TargetNode=$t;
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function th_Clearthemecolor(){
        igk_app()->Doc->Theme->cl->Attributes->Clear();
        igk_notifyctrl()->addMsgr("msg.colorupdated");
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function th_downloadcolorfile(){
        $v_div=igk_createnode("Colors");
        foreach(igk_app()->Doc->Theme->cl->Attributes as $k=>$v){
            $v_div->add("color", array("name"=>$k, "value"=>$v));
        }
        $s=igk_xml_header()."\n".$v_div->Render((object)array("Indent"=>true));
        igk_download_content("colortheme.xml", strlen($s), $s);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function th_importcolorfile(){
        $v_f=igk_getv($_FILES, "clColorFile");
        $text=IGKIO::ReadAllText($v_f["tmp_name"]);
        $v_t=igk_createnode("div");
        $v_t->Load($text);
        $v_clt=igk_getv($v_t->getElementsByTagName("Colors"), 0);
        if($v_clt !== null){
            foreach($v_clt->Childs as $v){
                if($v->TagName == "color"){
                    igk_app()->Doc->Theme->addColor($v["name"], $v["value"]);
                }
            }
            $this->View();
        }
        igk_notifyctrl()->addMsgr("Msg.ColorUpdated");
        igk_frame_close("theme_importcolorfile");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function th_importcolorfileframe(){
        $frm=igk_html_frame($this, "theme_importcolorfile", "#colorman", igk_app()->Doc->body);
        $frm->Title=__("title.importcolorfile");
        $frm->ClearChilds();
        $d=$frm->Box;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("th_importcolorfile#colorman");
        $ul=$frm->add("ul");
        $ul->addLi()->addSLabelInput("clColorFile", "file", null);
        $frm->addHSep();
        $frm->addBtn("btn_import", __("btn.import"));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function th_save_as_default(){
        $n=igk_getr(IGK_FD_NAME, "default");
        $f=igk_io_syspath(IGK_DEFAULT_THEME_FOLDER."/".$n.".themes");
        if(!IGKIO::CreateDir(dirname($f)) || !igk_app()->Doc->Theme->save($f)){
            igk_notifyctrl()->addErrorr("e.cantsavefile");
            return false;
        }
        else{
            igk_notifyctrl()->addMsgr("msg.filesaved_1", basename($f));
        }
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function th_save_as_default_frame(){
        $frame_name="save_as_default_frame";
        if(igk_qr_confirm()){
            $n=igk_getr(IGK_FD_NAME, "default");
            $f=igk_io_syspath(IGK_DEFAULT_THEME_FOLDER."/".$n.".themes");
            if(!IGKIO::CreateDir(dirname($f)) || !igk_app()->Doc->Theme->save($f)){
                igk_notifyctrl()->addError(__("ERR.CANTSAVEFILE"));
            }
            else{
                igk_notifyctrl()->addMsg(__("MSG.FileSaved", basename($f)));
            }
            igk_frame_close($frame_name);
            igk_navtocurrent();
        }
        else{
            $frame=igk_html_frame($this, $frame_name);
            $d=$frame->BoxContent;
            $d->ClearChilds();
            $frame->Title=__("title.SAVEDefaultTheme");
            $frm=$d->addForm();
            $frm["action"]=$this->getUri("th_save_as_default_frame");
            $frm->addSLabelInput(IGK_FD_NAME, "text", "default", true);
            $frm->addHSep();
            $frm->addInput("confirm", "hidden", 1);
            $frm->addBtn("btn_save", __("btn.Save"), "submit");
        }
    }
    ///<summary></summary>
    ///<param name="navigate" default="true"></param>
    /**
    * 
    * @param mixed $navigate the default value is true
    */
    public function theme_addKey($navigate=true){
        $n=trim(igk_getr(IGK_FD_NAME));
        $v=igk_getr("clValue");
        if($n){
            igk_app()->Doc->Theme[$n]=$v;
        }
        igk_getctrl(IGK_THEME_CTRL)->saveTheme();
        $this->search();
        $this->View();
        $t=igk_getr("clUpdated", false);
        if($t){
            igk_frame_close("theme_addkey");
        }
        if($navigate)
            igk_navtocurrent();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_addKeyFrame_ajx(){
        $frame=igk_html_frame($this, "theme_addkey", "#class_editor");
        $frame->Title=__("title.AddClass");
        $d=$frame->BoxContent;
        $frame->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("theme_addKey");
        $frm->addLi()->addSLabelInput(IGK_FD_NAME);
        $frm->addLi()->addSLabelInput("clValue");
        $frm->addHSep();
        $frm->addBtn("btn_add", __("btn.Add"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_addPalette(){
        $v_c=igk_getv($_FILES, "clFile");
        if($v_c){
            $v_fname=igk_getctrl(IGK_PALETTE_CTRL)->getPaletteDir()."/".igk_getr(IGK_FD_NAME).".gkpal";
            igk_io_move_uploaded_file($v_c["tmp_name"], $v_fname);
            igk_notifyctrl()->addMsgr("msg.paletteAdded");
            igk_getctrl(IGK_PALETTE_CTRL)->loadFile($v_fname);
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_addPalette_ajx(){
        $frame=igk_getctrl(IGK_FRAME_CTRL)->createFrame("theme_addPalette", $this, "#palette_form");
        IGKHtmlUtils::AddItem($frame, igk_app()->Doc->body);
        $frame->Title=__("title.AddPalette");
        $d=$frame->BoxContent;
        $frame->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("theme_addPalette");
        $frm->addLi()->addSLabelInput(IGK_FD_NAME, "lb.Name");
        $li=$frm->addLi();
        $li->add("label", array("for"=>"clFile"))->Content=__("lb.palette");
        $li->addInput("clFile", "file", "file");
        $frm->addHSep();
        $frm->addBtn("btn_add", __("btn.Add"));
        $frame->RenderAJX();
    }
    ///<summary></summary>
    ///<param name="table"></param>
    ///<param name="presentation" default="null"></param>
    /**
    * 
    * @param mixed $table
    * @param mixed $presentation the default value is null
    */
    public function theme_buildFontTable($table, $presentation=null){
        $tr=$table->addTr();
        IGKHtmlUtils::AddToggleAllCheckboxTh($tr);
        $tr->add("th")->setClass("fitw")->Content=__(IGK_FD_NAME);
        $tr->add("th")->Content=__("clPath");
        $tr->add("th", array("style"=>"width:24px;"))->Content=IGK_HTML_SPACE;
        $tr->add("th", array("style"=>"width:24px;"))->Content=IGK_HTML_SPACE;
        $dir=igk_io_currentrelativepath(IGK_RES_FONTS);
        $ft=igk_app()->Doc->Theme->getFont();
        $ajx=igk_is_ajx_demand() ? "&ajx=1": "";
        if($ft){
            foreach($ft->Attributes as $k=>$v){
                $tr=$table->addTr();
                $tr->add("td", array("style"=>"width:16px; "))->addInput("fontnames[]", "checkbox", $k)->setStyle("width:auto;");
                $tr->addTd()->Content=$k;
                $f="";
                if(is_string($v))
                    $f=$v;
                else
                    $f=igk_getv($v, 'File');
                if($f && file_exists(igk_io_currentrelativepath($f))){
                    $tr->addTd()->add("a", array("href"=>$this->getUri("getfontfile&n=".base64_encode($v))))->Content=$v;
                    IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"width:16px;")), igk_js_post_frame($this->getUri("edit_font_ajx&n=".base64_encode($k))), "edit_16x16");
                }
                else if(is_object($v)){
                    $tr->addTd()->Content="[Font Package]";
                    $tr->addTd()->addSpace();
                }
                else{
                    $td=$tr->addTd();
                    $td->addObData($v);
                }
                IGKHtmlUtils::AddImgLnk($tr->add("td", array("style"=>"width:16px;")), igk_js_post_frame($this->getUri("drop_font_ajx&n=".base64_encode($k))), "drop_16x16");
                if($presentation){
                    $presentation->add("li", array(
                        "igk-font-tool-tip"=>$k,
                        "igk-font-drop-font"=>$this->getUri("drop_font{$ajx}&n=".base64_encode($k)),
                        "igk-font-drop-font-uri"=>R::GetImgUri("drop_16x16")
                    ))->setClass("dispib")->addDiv(array("style"=>"height:48px; font-family: '".$k."';"))->Content="igK";
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_deleteall_emptyclass_ajx(){
        if(igk_qr_confirm()){
            $tab=igk_app()->Doc->Theme->def->Attributes->ToArray();
            $out=array();
            foreach($tab as $k=>$v){
                if(empty($v)){
                    igk_app()->Doc->Theme[$k]=null;
                    IGKThemeCtrl::UnRegClass($k);
                    continue;
                }
                $out[$k]=$v;
            }
            igk_app()->Doc->Theme->def->Attributes->Clear();
            igk_app()->Doc->Theme->setAttributes($out);
            igk_getctrl(IGK_THEME_CTRL)->saveTheme();
            $this->View();
        }
        else{
            $frame=igk_frame_add_confirm($this, __FUNCTION__, $this->getUri(__FUNCTION__));
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_dropPalette(){
        if(igk_qr_confirm()){
            $id=igk_getr(IGK_FD_ID);
            igk_getctrl(IGK_PALETTE_CTRL)->RemovePalette($id);
            $this->View();
            $this->TargetNode->RenderAJX();
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_dropPalette_ajx(){
        $id=igk_getr("id");
        $frame=igk_frame_add_confirm($this, "theme_droppalette_confirm_frame", $this->getUri("theme_dropPalette"));
        $frame->Form->Div->Content=__("msg.confirmsuppression");
        $frame->Form->Div->addInput(IGK_FD_ID, "hidden", $id);
        $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_editkey(){
        $n=base64_decode(igk_getr("id"));
        $frm=igk_getctrl(IGK_FRAME_CTRL)->createFrame("theme_addkey", $this, "#class_editor");
        IGKHtmlUtils::AddItem($frm, igk_app()->Doc->body);
        $frm->Title=__("title.editclassentry");
        $d=$frm->Box;
        $frm->ClearChilds();
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("theme_addKey");
        $frm->addLi()->addLabel()->Content=$n;
        $frm->addLi()->Content=IGK_HTML_SPACE;
        $frm->addLi()->addSLabelInput("clValue", "text", igk_app()->Doc->Theme[$n]);
        $frm->addInput(IGK_FD_NAME, "hidden", $n);
        $frm->addInput("clUpdated", "hidden", $n);
        $frm->addHSep();
        $frm->addBtn("btn_update", __("Update"));
    }
    ///<summary>used in configuration mode to edit controller style in configuration mode. when article is added</summary>
    /**
    * used in configuration mode to edit controller style in configuration mode. when article is added
    */
    public function theme_editStyle_ajx($render=true){
        $n=igk_getr("n");
        $ctrl=igk_getctrl($n);
        $frame=igk_html_frame($this, "edit_frame_ajx");
        $n=strtolower($ctrl->Name);
        $frame->Title=__("title.editclassentry");
        $frame->Width="700px";
        $frame->Height="400px";
        $frame->ClearChilds();
        $d=$frame->BoxContent;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("theme_editStyle_validateajx");
        $frm->setId("editstyle-ajx-form");
        $frm["class"]="editstyle-ajx-form";
        $frm->addLi()->add("label", array("for"=>"clValue"))->Content=$n;
        $area=$frm->addLi()->add("textarea");
        $area["class"]="cltextarea +theme_stylearea";
        $area->setId("clValue");
        $area->Content=igk_app()->Doc->Theme[$n];
        $frm->addInput(IGK_FD_NAME, "hidden", $n);
        $frm->addInput("clUpdated", "hidden", $n);
        $frm->addInput("clCibling", "hidden", igk_getr("cibling"));
        $frm->addHSep();
        $frm->addBtn("btn_update", __("Update"));
        if($render)
            $frame->RenderAJX();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_editStyle_validateajx(){
        $t=igk_get_robj();
        igk_app()->Doc->Theme[$t->clName]=$t->clValue;
        igk_getctrl(IGK_THEME_CTRL)->saveTheme();
        igk_notifyctrl()->addMsgr("msg.themestyle.updated");
        igk_resetr();
        $_REQUEST["n"]=$t->clName;
        $this->theme_editStyle_ajx(false);
        igk_navto(igk_io_baseuri()."/#".$t->clName);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_findkey_ajx(){
        $t=igk_getr("t");
        if($t == null){
            return;}
        $tab=igk_app()->Doc->Theme->def->Attributes->ToArray();
        $out=array();
        $rep=igk_createnode("response");
        $keys=array_keys($tab);
        sort($keys);
        foreach($keys as $k){
            $v=$tab[$k];
            if(strstr($k, $t)){
                $rep->add("item", array("name"=>$k))->Content=$v;
            }
        }
        $rep->RenderAJX();
    }
    ///<summary></summary>
    ///<param name="key" default="null"></param>
    /**
    * 
    * @param mixed $key the default value is null
    */
    public function theme_rmkey($key=null){
        $key=($key == null) ? base64_decode(igk_getr("id")): $key;
        if(!empty($key)){
            igk_app()->Doc->Theme[$key]=null;
            IGKThemeCtrl::UnRegClass($key);
            igk_getctrl(IGK_THEME_CTRL)->saveTheme();
            $this->search();
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function theme_updatekeys(){
        if(igk_getr("btn_action") == 1){
            $this->delete_selection();
            return;
        }
        $keytab=igk_getr("keytab");
        $hv=igk_getr("ccount");
        $n=igk_getr("theme_name");
        for($i=0; $i < $hv; $i++){
            igk_app()->Doc->Theme[$keytab[$i]]=igk_getr("key_".$i);
        }
        igk_getctrl(IGK_THEME_CTRL)->saveTheme();
        $this->search();
        $this->View();
        try {
            igk_notifyctrl()->addMsgr("msg.themeupdated");
            igk_navtocurrent();
        }
        catch(Exception $ex){
            igk_show_exception($ex);
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="file"></param>
    ///<param name="device" default="ie"></param>
    ///<param name="block" default="false"></param>
    /**
    * 
    * @param mixed $file
    * @param mixed $device the default value is "ie"
    * @param mixed $block the default value is false
    */
    private function themeAddCss($file, $device="ie", $block=false){
        if(!isset($this->m_cssFileTable[$file])){
            $v_cssObj=new StdClass;
            $v_cssObj->Uri=$file;
            $v_cssObj->Target=$device;
            $v_cssObj->Block=$block;
            $this->m_cssFileTable[$file]=$v_cssObj;
            return true;
        }
        return false;
    }
    ///add css file to system
    /**
    */
    public function themeAddCssFile($file, $device="ie"){
        if($this->themeAddCss(igk_html_uri($file), $device)){
            $this->themeSaveCssData();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeAddCssFileFunc(){
        $n=igk_getr(IGK_FD_NAME, null);
        if($n && preg_match("/([a-zA-Z_][a-zA-Z0-9_]+)/i", $n)){
            $f=igk_io_currentrelativepath("Styles/".$n.".css");
            igk_io_save_file_as_utf8($f, IGK_START_COMMENT." ".$n." ".IGK_END_COMMENT, true);
            igk_frame_close("frame_themeAddNewCssFile");
            $this->themeAddCssFile(igk_html_uri(igk_io_basepath($f)), igk_getr("clFor", "ie"));
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeAddNewCssFile_ajx(){
        $frame=igk_html_frame($this, "frame_themeAddNewCssFile");
        $frame->ClearChilds();
        $frame->Title=__("title.addCssFile");
        $d=$frame->BoxContent;
        $frm=$d->addForm();
        $frm["action"]=$this->getUri("themeAddCssFileFunc");
        $ul=$frm->add("ul");
        $ul->addLi()->addInput(IGK_FD_NAME, "text", "newfile");
        $sl=$ul->addLi()->add("select");
        $sl["id"]=
        $sl["name"]="clFor";
        $sl->add("option")->Content="ie";
        $sl->add("option")->Content="mod";
        $frm->addHSep();
        $frm->addBtn("btn_update", __("btn.add"));
        if(igk_is_ajx_demand()){
            $frame->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeBlockCssFile(){
        $n=base64_decode(igk_getr("n"));
        if(!isset($this->m_cssFileTable[$n])){
            return;}
        $this->m_cssFileTable[$n]->Block=!$this->m_cssFileTable[$n]->Block;
        $this->themeSaveCssData();
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeCurrentMedia(){
        if(IGKUserAgent::IsIE())
            return "ie";
        if(IGKUserAgent::IsMod())
            return "mod";
        if(IGKUserAgent::IsChrome())
            return "chr";
        if(IGKUserAgent::IsSafari())
            return "saf";
        if(IGKUserAgent::IsAndroid())
            return "android";
        if(IGKUserAgent::IsIOS())
            return "ios";
        return "ie";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeDropFile(){
        $n=base64_decode(igk_getr("n"));
        if(isset($this->m_cssFileTable[$n])){
            @unlink(igk_io_currentrelativepath($n));
            unset($this->m_cssFileTable[$n]);
            $this->themeSaveCssData();
            $this->View();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeEditFile_ajx(){
        $n=base64_decode(igk_getr("n"));
        if(!isset($this->m_cssFileTable[$n])){
            igk_wl("ERROR: no file to edit");
            return;
        }
        $p=$this->m_cssFileTable[$n];
        $f=igk_io_currentrelativepath($p->Uri);
        if(file_exists($f)){
            $frame=igk_html_frame($this, "frame_themeEditFile");
            $frame->ClearChilds();
            $frame->Title=__("title.editCssFile", basename($n));
            $str=IGKIO::ReadAllText($f);
            $d=$frame->BoxContent;
            $frm=$d->addForm();
            $frm["action"]=$this->getUri("themeUpdateCssFile");
            $ul=$frm->add("ul");
            $txt=$ul->addLi()->addTextArea("clContent", $str);
            $txt["class"]="frame_textarea";
            $frm->addInput("clfile", "hidden", base64_encode($n));
            $frm->addInput("clframe", "hidden", $frame["id"]);
            $frm->addBtn("btn_update", __("Update"));
            if(igk_is_ajx_demand()){
                $frame->RenderAJX();
            }
        }
        else{
            igk_wl("ERROR: FILE NOT EXISTS");
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeGetCss(){
        $t=IGK_STR_EMPTY;
        foreach($this->m_cssFileTable as $k=>$v){
            if(!$v->Block && $this->themeIsSupportMedia($v->Target)){
                $t .= IGK_START_COMMENT." ". $k. IGK_END_COMMENT.IGK_LF;
                $t .= IGKIO::ReadAllText(igk_io_currentrelativepath($k)).IGK_LF;
            }
        }
        return $t;
    }
    ///<summary></summary>
    ///<param name="target"></param>
    /**
    * 
    * @param mixed $target
    */
    public function themeIsSupportMedia($target){
        if($target == "*")
            return true;
        if(strstr($target, $this->themeCurrentMedia()))
            return true;
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function themeLoadCssFiles(){
        $this->m_cssFileTable=array();
        $t=IGKHtmlItem::LoadNode(IGKIO::ReadAllText($this->getCssDataFile()));
        if(($t != null) && ($t->HasChilds)){
            foreach($t->Childs as $k=>$v){
                $k=igk_html_uri($v["file"]);
                if($this->themeAddCss($k, $v["target"], $v["block"])){
                    if(!igk_is_debuging()){
                        $this->app->Doc->addStyle($k);
                    }
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    function themeSaveCssData(){
        $o=igk_createnode("cssData");
        foreach($this->m_cssFileTable as  $v){
            $o->add("css")->setAttributes(
            ["file"=>$v->Uri,
            "target"=>$v->Target,
            "block"=>$v->Block]);
        }
        igk_io_save_file_as_utf8($this->getCssDataFile(), $o->Render());
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeShowCssFiles(){
        $t=igk_createnode("table");
        $t["class"]="fitw";
        $b=array("style"=>"width:16px;");
        $tr=$t->addTr();
        $tr->add("th", $b)->addSpace();
        $tr->add("th");
        $tr->add("th");
        $tr->add("th", $b)->addSpace();
        $tr->add("th", $b)->addSpace();
        $tr->add("th", $b)->addSpace();
        foreach($this->m_cssFileTable as $k=>$v){
            $tr=$t->addTr();
            $tr->add("td", $b)->addSpace();
            $tr->addTd()->add("a", array("href"=>$this->getUri("themeDownloadCssFile&n=".base64_encode($k))))->Content=$v->Uri;
            $tr->addTd()->Content=$v->Target;
            IGKHtmlUtils::AddImgLnk($tr->addTd(), igk_js_post_frame($this->getUri("themeEditFile_ajx&n=".base64_encode($k))), "edit_16x16", "16px", "16px", "dropCSS File");
            IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("themeBlockCssFile&n=".base64_encode($k)), $v->Block ? "block": "unblock", "16px", "16px", "dropCSS File");
            IGKHtmlUtils::AddImgLnk($tr->addTd(), $this->getUri("themeDropFile&n=".base64_encode($k)), "drop_16x16", "16px", "16px", "dropCSS File");
        }
        $this->TargetNode->add($t);
        $t=igk_createnode("div");
        IGKHtmlUtils::AddBtnLnk($t, "btn.addCssFile", igk_js_post_frame($this->getUri("themeAddNewCssFile_ajx")));
        $this->TargetNode->add($t);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeUpdateCssFile(){
        $n=base64_decode(igk_getr("clfile"));
        if(!isset($this->m_cssFileTable[$n])){
            return;}
        igk_io_savecontentfromtextarea(igk_io_currentrelativepath($n), igk_getr("clContent"), true);
        igk_frame_close("frame_themeEditFile");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function themeViewPrimaryConfig_ajx(){
        $c=igk_createnode("div");
        $div=$c;
        igk_html_add_title($div, __("title.CSSClass"));
        $div->addHSep();
        igk_setr("q", igk_getr("q",null));
        $div->add(new IGKHtmlSearchItem($this->getUri("search")));
        $div->addBr();
        $frm=$div->addForm();
        $frm["action"]=$this->getUri("theme_updatekeys");
        $tab=null;
        $ttab=null;
        $v_index=0;
        $systheme=igk_app()->Doc->SysTheme;
        if($this->m_search === null){
            $ttab=$systheme->def->getAttributes();
        }
        else{
            $ttab=$this->m_search;
        }
        if(count($ttab) > 0){
            $ctab=array_keys($ttab);
            igk_usort($ctab, "igk_key_sort");
            $this->_adddel_action($frm);
            $frm->addSpace();
            $this->_themeFormControl($frm);
            $tcount=$frm->addDiv();
            $ul=$frm->addTable();
            $tr=$ul->addTr();
            IGKHtmlUtils::AddToggleAllCheckboxTh($tr);
            $tr->add("th")->Content=__(IGK_FD_NAME);
            $tr->add("th", array("class"=>"fitw"))->Content=__("clValue");
            $tr->add("th", array("class"=>"box_16x16"))->Content=IGK_HTML_SPACE;
            $tr->add("th", array("class"=>"box_16x16"))->Content=IGK_HTML_SPACE;
            foreach($ctab as $k){
                $kk=$systheme->def[$k];
                if(!empty($kk) || empty($k))
                    continue;
                $v=$ttab[$k];
                $li=$ul->addTr();
                $chbox=$li->addTd()->add("input", array("type"=>"checkbox"));
                $chbox["name"]="css_i_".$v_index;
                $li->add("td", array("class"=>"no-wrap"))->add("span", array(
                    "for"=>"key_".$v_index,
                    "class"=>"-cllabel dispb no-wrap"
                ))->Content=$k;
                $li->addTd()->addInput("key_".$v_index, "text", $v);
                $v_id=htmlentities($k);
                $li->add("td", array("class"=>"box_16x16"))->add("a", array("href"=>$this->getUri("theme_editkey&id=".base64_encode($v_id))))->add("img", array("src"=>R::GetImgUri("edit_16x16")));
                $li->add("td", array("class"=>"box_16x16"))->add("a", array("href"=>$this->getUri("theme_rmkey&id=".base64_encode($v_id))))->add("img", array("src"=>R::GetImgUri("drop_16x16")));
                $v_index++;
                $li->addInput("keytab[]", "hidden", $v_id);
            }
            igk_html_toggle_class($ul, "tr");
            $tcount->Content=$v_index;
        }
        $frm->addInput("ccount", "hidden", $v_index);
        $frm->addInput("btn_action", "hidden", "0");
        $frm->addBtn("btn_update", __("Update"));
        $frm->addSpace();
        $this->_adddel_action($frm);
        $this->_themeFormControl($frm);
        igk_wln($c->innerHTML);
        return;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public static function UnRegClass($key){
        return IGKHtmlClassValueAttribute::UnRegClass($key);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_name(){
        $n=igk_getr("theme_name", "default");
        igk_app()->Doc->Theme->Name=$n;
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->getTargetNode();
        if(!$this->getIsVisible()){
            igk_html_rm($t);
            return;
        }
        $t->clearChilds();
        $box=$t->addPanelBox();
        $box->addSectionTitle(4)->Content=__("Theme And Styles");
        $bar=$box->addActionBar();
        $bar->addABtn("#")->Content=igk_svg_use("add");
        $bar->addABtn("#")->setClass("igk-pull-right")->Content=igk_svg_use("search");
        $bar->addABtn("#")->setClass("igk-pull-right")->Content=igk_svg_use("grid");
        $dv=$box->addDiv();
        $tab=$dv->addComponent($this, "AJXTabControl", "tab:".__METHOD__, 0);
        $tab->clearChilds();
        $tab->addTabPage("Theme", $this->getUri("select_menu&n=theme"));
        $tab->addTabPage("Colors", $this->getUri("select_menu&n=colors"));
        $tab->addTabPage("CssFiles", $this->getUri("select_menu&n=cssfiles"));
        $tab->addTabPage("Palette", $this->getUri("select_menu&n=palette"));
        $tab->addTabPage("Font", $this->getUri("select_menu&n=font"));
        return;
		//$this->m_rendering=true;
		//foreach(IGKThemeCtrl::GetRegClass() as $k){
		//    if(!isset(igk_app()->Doc->Theme[$k]))
		//        igk_app()->Doc->Theme[$k]=IGK_STR_EMPTY;
		//}
		//IGKHtmlUtils::AddItem($t, $this->ConfigNode);
		//$node=$t;
		//$node->ClearChilds();
		//igk_html_add_title($node, __("title.themeManager"));
		//$node->addSeparator();
		//$this->m_selectedMenu=$this->m_selectedMenu ? $this->m_selectedMenu: "themes";
		//$div=$node->addDiv();
		//igk_html_article($this, "themes.description", $div);
		//$node->addHSep();
		//$menut=array(
		//    "themes",
		//    "cssFiles",
		//    "palette",
		//    "color",
		//    "font",
		//    "system_theme"
		//);
		//$t=array();
		//foreach($menut as $k){
		//    $t[$k]=$this->getUri("select_menu&n=".$k);
		//}
		//$node->add(igk_html_node_configsubmenu($t, $this->m_selectedMenu));
		//unset($t);
		//$node->addHSep();
		//switch(strtolower($this->m_selectedMenu)){
		//    case "palette":
		//    $this->_th_showPalette();
		//    break;
		//    case "cssfiles":
		//    $this->themeShowCssFiles();
		//    break;
		//    case "font":
		//    $this->_showFont();
		//    break;
		//    case "color":
		//    $this->_showColor();
		//    $this->m_rendering=false;
		//    return;
		//    break;
		//    case "system_theme":
		//    $this->_showSystemTheme();
		//    break;default:
		//    $frm=$this->TargetNode->addForm();
		//    $frm["action"]=$this->getUri("update_name");
		//    $frm["id"]="class_editor";
		//    $frm->addBr();
		//    $frm->addSLabelInput("theme_name", "text", igk_app()->Doc->Theme->Name);
		//    $bar=$frm->addActionBar();
		//    IGKHtmlUtils::AddBtnLnk($bar, __("btn.save"), $this->getUri("th_save_as_default_frame"));
		//    $node->addHSep();
		//    $this->_showThemes();
		//    break;
		//}
		//$this->TargetNode->addHSep();
		//$this->m_rendering=false;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function view_page(){
        switch(strtolower($this->m_selectedMenu)){
            case "palette":
            $this->_th_showPalette();
            break;
            case "cssfiles":
            $this->themeShowCssFiles();
            break;
            case "font":
            $this->_showFont();
            break;
            case "colors":
            $this->_showColor();
            $this->m_rendering=false;
            return;
            case "system_theme":
            $this->_showSystemTheme();
            break;default:
            $frm=$this->TargetNode->addForm();
            $frm["action"]=$this->getUri("update_name");
            $frm["id"]="class_editor";
            $frm->addBr();
            $frm->addSLabelInput("theme_name", "text", igk_app()->Doc->Theme->Name);
            $bar=$frm->addActionBar();
            IGKHtmlUtils::AddBtnLnk($bar, __("btn.save"), $this->getUri("th_save_as_default_frame"));
            $this->_showThemes();
            break;
        }
    }
}
///<summary>Represente class: IGKToolsCtrl</summary>
/**
* Represente IGKToolsCtrl class
*/
final class IGKToolsCtrl extends IGKConfigCtrlBase {

    ///<summary></summary>
    /**
    * 
    */
    public function getConfigPage(){
        return "toolctrl";
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function getm_tools(){
        static $_toolhost=null;
        if($_toolhost === null){// & (($_toolhost=$this->getParam("tools")) === null)){
            // CREATE Session setting Storage
			$tab = [];
			// if ($g = igk_app()->settings->{IGK_TOOLS}){
				// $tab = & $g;
			// }

			// $fv = IGKFv::Create(__CLASS__.":tools", $tab, function(& $g){
				// if (empty($g)){
					// igk_app()->settings->{IGK_TOOLS} = null;
				// }else {
					// igk_app()->settings->{IGK_TOOLS} = $g;
				// }
			// });
			$fv = new IGKFv($tab);// __CLASS__.":tools", $tab);
			$_toolhost=new IGKToolHost($fv);
            // $this->setParam("tools", $_toolhost);
        }
        return $_toolhost;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function RegisterTool($ctrl){
        $tools=  $this->getm_tools();
        $tools->register($ctrl);
        $this->regChildController($ctrl);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        if(!$this->getIsVisible()){
            igk_html_rm($this->TargetNode);
            return;
        }
        $t=$this->TargetNode;
        $t->ClearChilds();
        igk_html_add($t, $this->ConfigNode);
        $box=$t->addPanelBox();
        $box->addH1()->Content = __("Tools");

        $box->addNotifyHost(); 

        $s=$box->addSearch()->setClass("fitw");
        $s->Uri=$this->getUri("view_tools_ajx");
        $s->TargetId="#igktoolsctrl";
        $s->loadingComplete();
        $d["class"]="igk-tool-option table";
        
        $q=strtolower(igk_getr("q"));
        $v_t=$this->getm_tools()->getTools();
        $box->addDiv()->Content=__("Tools : {0} ", igk_count($v_t));
        $d=$box->addDiv();
        foreach($v_t as  $v){
            if(!$v->getIsAvailable() || ($q && !strstr(strtolower($v->Name), $q) && !strstr(strtolower(__("tool.".$this->Name)), $q)))
                continue;
            $v->showTool($d->addDiv()->setAttribute("class", "dispib floatl marg4"));
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function view_tools_ajx(){
        $this->View();
        igk_wl($this->TargetNode->getinnerHtml());
    }
}

///<summary>cookie warning requirement</summary>
/**
* cookie warning requirement
*/
final class IGKCookieWarningController extends BaseController{
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        if(igk_get_env(IGK_ENV_NO_COOKIE_KEY) == 1){
            return 0;
        }
        $d=igk_get_cookie("_igk_CONSENT");
        return 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegisterToViewMecanism(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        igk_set_cookie("_igk_CONSENT", "no", 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $t=igk_createnode("div");
        $t->setClass("igk-cookie-warning");
        $t->addAJXUriLoader($this->getUri('warndoc'));
        return $t;
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $msg
    * @param mixed $args
    */
    public function onHandleSystemEvent($msg, $args){
        if($msg == IGK_ENV_NEW_DOC_CREATED){
            // TODO : Cookie warning


            // $n=igk_html_node_clonenode($this->TargetNode);
            // $n->setCallBack("getIsVisible", array($this, "getIsVisible"));
            // $g=array_slice(func_get_args(), 1);
            // $doc=igk_getv($g, 1);
            // if($doc){
            //     igk_html_add($n, $doc->body);
            // }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        igk_html_add($this->TargetNode, igk_app()->Body);
    }
    ///<summary>represent a warning document</summary>
    /**
    * represent a warning document
    */
    public function warnDoc(){
        $n=igk_createnode("div");
        $n->Content="This site require your acknowledge to use cookies";
        $n->RenderAJX();
        igk_exit();
    }
}
///<summary>use to get list of countries</summary>
/**
* use to get list of countries
*/
class IGKCountryCtrl extends BaseController {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
        $this->_loadData();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _loadData(){
        $r=IGKCSVDataAdapter::LoadData(igk_io_syspath("Data/tbcountries.csv"));
        if($r){
            $t=array();
            foreach($r as $l){
                $t[$l[0]]=$l[0];
            }
            return $t;
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCountries(){
        return igk_get_env_init(igk_ctrl_env_param_key($this)."/countries", function(){
            $t=$this->_loadData();
            return $t;
        });
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataAdapterName(){
        return IGK_CSV_DATAADAPTER;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return "%prefix%countries";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return false;
    }
}
///<summary>Represent controller type</summary>
///<remark>
///controller type is the base class of all personnalisable atomic controller. if you want to create a multiple
///inheritance controller . use IGKCtrlNonAtomicTypeBase that extends IGKCtrlTypeBase
///</remark>
/**
* Represent controller type
*/
abstract class IGKCtrlTypeBase extends BaseController {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAdditionalConfigInfo(){
        return null;
    }
    ///<summary>get de default string content</summary>
    /**
    * get de default string content
    */
    public static function GetAdditionalDefaultViewContent(){
        static $viewcomment=null;
        if($viewcomment === null)
            $viewcomment=implode("\n* ", explode("\n", trim(igk_ob_get_func(function() use (& $viewcomment){
            include(IGK_LIB_DIR."/Inc/default.view.comment.inc");
        }))))."\n*/"; 
        $r = "<?php\n/**\n* ".igk_html_eval_article("{$viewcomment}\n\$t->clearChilds();\nigk_html_article(\$this , \"default\", \$t);\n", ["author"=>igk_sys_getconfig("developer", IGK_AUTHOR), "date"=>date("Y-m-d H:i:s"), "version"=>1.0 ]);
        return $r;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetCtrlCategory(){
        return "DEFAULT";
    }
    ///<summary></summary>
    ///<param name="t" ref="true"></param>
    /**
    * 
    * @param mixed * $t
    */
    public static function SetAdditionalConfigInfo(& $t){
        return 1;
    }
}
///<summary>used for multiple instance</summary>
/**
* used for multiple instance
*/
abstract class IGKCtrlNonAtomicTypeBase extends IGKCtrlTypeBase {}
///<summary>Represente class: IGKPageControllerBase</summary>
/**
* Represente IGKPageControllerBase class
*/
abstract class IGKPageControllerBase extends IGKCtrlTypeBase{
    const PAGE_CONSTANT=IGKSession::BASE_SESS_PARAM + 0xA0;
    const PAGE_TEMPLATE=self::PAGE_CONSTANT + 2;
    const PAGE_USER=self::PAGE_CONSTANT + 1;
    ///initilize the view
    /**
    */
    protected function _initView(){
        $this->register_autoload();
		if (!igk_app()->getBaseCurrentCtrl()){
			igk_app()->setBaseCurrentCtrl($this);
		}
        parent::_initView();
    }
	public function getTableConst($n){
		$cl = get_class($this)."DbConstants";
		if (class_exists($cl, false)){
			$consts = (new ReflectionClass($cl))->getConstants();
			return igk_getv($consts,$n, $n);
		}
		return $n;
	}
    ///<summary> autoload binding class </summary>
    /**
    *  autoload binding class
    */
    protected function auto_load_class($n, $tg=null){
        $file="";
        $entryNS=$this->getEntryNameSpace() ?? "";
        $classdir = $this->getClassesDir(); 
        if (defined('IGK_TEST_INIT')){
            $classdir = [
                $classdir, $this->getTestClassesDir()
            ];
        } 
        return igk_auto_load_class($n, $entryNS, $classdir);
    }
    // ///<summary>check init and init user to this apps </summary>
    // /**
    // * check init and init user to this apps
    // */
    // public function checkUser($nav=true, $uri=null){
    //     $r=true;
    //     $u=igk_app()->Session->User;
    //     $ku=$this->User;       
        
    //     if($ku == null){
    //         if($u != null){
    //             $this->User=$this->initUserFromSysUser($u);
    //         }
    //         else
    //             $r=false;
    //     }
    //     if($nav && !$r){
    //         $m=igk_io_base_request_uri();
    //         $s="";
    //         $u=($uri == null ? $this->getAppUri(""): $uri);
    //         if(!empty($m)){
    //             $s="q=".base64_encode($m);
    //             $u .= ((strpos($u, "?") === false) ? "?": "&").$s;
    //         }
    //         igk_navto($u);
    //     }
    //     return $r;
    // }
    
    ///<summary></summary>
    /**
    * 
    */
    public function get_output(){
        $s=$this->getEnvParam("_output");
        return $s;
    }
   
    protected function getClassesDir(){ 
        return implode("/", [$this->getDeclaredDir(), IGK_LIB_FOLDER, IGK_CLASSES_FOLDER]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUser(){
        return $this->getEnvParam(self::PAGE_USER);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getUserDir(){
        if($u=$this->User)
            return $this->getDataDir()."/users/".$u->clLogin;
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getUserSettingFile(){
        if($u=$this->User){
            return $this->getUserDir()."/.settings.xml";
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getUserSettings(){
        $settings=$this->getEnvParam(self::ENV_PARAM_USER_SETTINGS);
        if($settings)
            return $settings;
        $udir=$this->getUserDir();
        if(file_exists($file=$this->getUserSettingFile()) && ($g=igk_conf_load_file($file, IGK_CNF_TAG))){
            $settings=igk_createObjStorage((array)$g);
        }
        else
            $settings=igk_createObjStorage();
        $this->setEnvParam(self::ENV_PARAM_USER_SETTINGS, $settings);
        return $settings;
    }
    ///<summary></summary>
    ///<param name="u"></param>
    ///<param name="forcehandle" default="1"></param>
    /**
    * 
    * @param mixed $u
    * @param mixed $forcehandle the default value is 1
    */
    public function handle_redirection_uri($u, $forcehandle=1){
        return false;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="view"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $view
    */
    public static function HandlePage($ctrl, $view){
        return $ctrl->handleView($view);
    }
    ///<summary>override this to handle page</summary>
    /**
    * override this to handle page
    */
    protected function handleView($view){
        $f=$this->getViewFile($view);
        if(file_exists($f) && method_exists($this, "__viewDoc")){
            $this->__viewDoc($view, null, true);
            igk_exit();
            return 1;
        }
        return 0;
    }
    ///<summary>init app's. override this method to initialize user app's environment</summary>
    ///<remark>in general you must load app environment setting and store it in $user->EnvParam["app:://Name/setting"]</remark>
    /**
    * init app's. override this method to initialize user app's environment
    */
    protected function initUserFromSysUser($u){
        return $u;
    }
     
   
    ///<summary></summary>
    /**
    * 
    */
    public function navtohome(){
        $this->resetCurrentView();
        $c=$this->getAppUri();
        igk_navto($c);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected final function register_autoload(){
        $k="sys://autoloading/".igk_base_uri_name($this->getDeclaredDir());
        if(igk_get_env($k)){
            return;
        }
        igk_set_env($k, 1);
        igk_register_autoload_class(function(){
            return call_user_func_array(array($this, "auto_load_class"), func_get_args());
        });
    }
   
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function set_output($v){
        $s=$this->getEnvParam("_output");
        if(!$s){
            $s=$v;
        }
        else{
            $s=$v;
        }
        $this->setEnvParam("_output", $s);
    }
    ///<summary></summary>
    ///<param name="user"></param>
    /**
    * 
    * @param mixed $user
    */
    protected function setUser($user){ 
        $this->setEnvParam(self::PAGE_USER, $user);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function storeUserSettings(){
        $settings=$this->getUserSettings();
        if($settings && ($file=$this->getUserSettingFile())){
            igk_io_store_conf($file, $settings, IGK_CNF_TAG);
            return 1;
        }
        return 0;
    }
    ///<summary>update the current data base</summary>
    /**
    * update the current data base
    */
    public final function updateDb(){
        $s=igk_is_conf_connected() || igk_user()->auth($this->Name.":".__FUNCTION__);
        if(!$s){
            igk_ilog("// not authorize to updateDb of " + $this->getName());
            igk_navto($this->getAppUri());
        }
        igk_db_update_ctrl_db($this);
        $uri=$this->getAppUri();
        igk_navto($uri);
        igk_exit();
    }
}
///<summary>Represente class: IGKDefaultPageController</summary>
/**
* Represente IGKDefaultPageController class
*/
abstract class IGKDefaultPageController extends IGKPageControllerBase implements IIGKUriActionRegistrableController, IIGKWebPageController {
    // private $m_func_handler;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
        // $this->m_func_handler=array();
    }
    ///<summary>include current view</summary>
    /**
    * include current view
    */
    protected function _renderViewFile($view=null){
        extract($this->getSystemVars());
        $view = $view ? $view : $this->getCurrentView();
        if(file_exists($view)){
            $f=$view;
        }
        else
            $f=$this->getViewFile($view);
        if(file_exists($f)){
            ob_start();
            $this->_include_file_on_context($f);
            $g=ob_get_contents();
            ob_end_clean();
            if(!empty($g)){
                $t->addNoTagNode()->Content=$g;
            }
        }
        else{
            igk_debug_wln("Current view file does't exists : ".$f);
        }
    }
    ///default handle uri global uri
    /**
    */
    public static function CheckBeforeAddControllerInfo($request){
        $g=igk_getv($request, "clDefaultPage");
        if(empty($g))
            return false;
        return 1;
    }
    ///<summary>used to evaluatue query expression</summary>
    ///<param name="xml">show error as xml if not handled</param>
    ///<param name="nav">demand to render or not the current document</param>
    /**
    * used to evaluatue query expression
    * @param mixed $xmlshow error as xml if not handled
    * @param mixed $nav demand to render or not the current document
    */
    public final function evaluateUri($patterninfo=null, $xml=true, $nav=null){
        $this->setEnvParam("from", __FUNCTION__);
        $t=$this->TargetNode;
        igk_html_rm($t);
        $inf=$patterninfo ? $patterninfo: igk_sys_ac_getpatterninfo();
        $nav=$nav ?? !igk_get_env("sys://no_render");
        if(!$inf || !is_object($inf)){
            igk_ilog_assert(igk_is_debug(), "pattern info not found or info not an object", __METHOD__);
            return;
        }
        $v_tp=$inf->getQueryParams();
        $c=igk_getv($v_tp, "function");
        $p=igk_getv($v_tp, "params");
        $q=igk_getv($v_tp, "query");
        include(IGK_LIB_DIR."/Inc/igk_sitemap.pinc");
        $do_rendering=function($t, $doc, $nav){
            if(igk_is_ajx_demand()){
                igk_ajx_replace_node($t);
            }
            else{
                igk_render_node($t, $doc, $nav);
            }
            if($nav){
                igk_exit();
            }
        };
        $doc=$this->Doc;
        $doc->TempTheme->resetAll();
        if(empty($c)){
            $this->View();
        }
        else{
            $priority=igk_get_env("sys://viewpriority", 1);
            switch($priority){
                case 1:
                igk_io_locate_view_file($this, $c, $p);
                if($p == null)
                    $p=array();
                else if(is_array($p) == false)
                    $p=array($p);
                if(method_exists($this, $c) && $this->IsFuncUriAvailable($c)){
                    call_user_func_array(array($this, $c), $p);
                }
                else{
                    if(file_exists($f=$this->getViewFile($c))){
                        $g=substr($f, strlen($this->getViewDir()) + 1);
                        if(!preg_match("#^". $c."#", $g) || ((($ext=igk_io_path_ext($c)) != $c) && !preg_match("/phtml$/", $ext))){
                            array_unshift($p, $c);
                        }
                        $this->getView($f, false, $p, $q);
                        $v_c=1;
                    }
                    else{
                        igk_wln_e("view file not present . 404");
                    }
                }
                $do_rendering($t, $doc, $nav);
                return;
                case 2:
                break;
            }
            $v_c=0;
            if(preg_match("/(\.(".IGK_VIEW_FILE_EXT_REGEX."))?$/i", $c)){
                $f=$this->getViewFile($c);
                if(file_exists($f)){
                    $this->getView($c, false, $p, $q);
                    $v_c=1;
                }
            }
            if($v_c == 0){
                if($this->IsFuncUriAvailable($c)){
                    if($p == null)
                        $p=array();
                    else if(is_array($p) == false)
                        $p=array($p);
                    call_user_func_array(array($this, $c), $p);
                }
                else{
                    if($xml){
                        ob_clean();
                        igk_html_output(404);
                        header("HTTP/1.0 404 Not Found");
                        $r=new IGKXmlNode("result_evaluation_uri");
                        $r->add("error")->Content="IGK_ERR_FUNCNOTAVAILABLE";
                        $r->add("msg")->Content="Function not available ";
                        $r->add("function")->Content=$c;
                        if(IGKViewMode::IsWebMaster()){
                            $c=$r->add("info");
                            $c->add("icode")->Content=igk_getv($_REQUEST, "code");
                            $c->add("ctrl")->Content=$this->Name;
                        }
                        if(!igk_sys_env_production()){
                            $data=igk_createnode("ObData", null, array(function(){
                                        igk_show_serverinfo();
                                    }));
                            $r->add($data);
                        }
                        $r->RenderAJX();
                        igk_exit();
                    }
                    $f=$this->getDeclaredDir()."/Contents/404.php";
                    if(file_exists($f)){
                        include($f);
                        igk_exit();
                    }
                    igk_io_check_request_file($inf->uri);
                    if(igk_is_ajx_demand()){
                        igk_wl("<response><message>method not found [".$c."]</message></response>");
                    }
                    else{
                        $m="method not exists ".$c. " ".IGK_EVALUATE_URI_FUNC." ".$inf->uri;
                        igk_notifyctrl()->addError($m);
                        igk_navto($this->getAppUri());
                    }
                    if($nav)
                        igk_exit();
                    return true;
                }
            }
        }
        $do_rendering($t, $doc, $nav);
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAdditionalConfigInfo(){
        return array("clDefaultPage"=>igk_createadditionalconfiginfo(array("clRequire"=>1, "clDefaultValue"=>"default")));
    }
    ///get the name of the page that control this controller
    /**
    */
    public function getBasicUriPattern(){
        return igk_getv($this->Configs, "clBasicUriPattern");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getExtraTitle(){
        if(igk_web_defaultpage() != $this->CurrentPage)
            return " - ".__("title.".$this->CurrentPage.".webpage");
        return IGK_STR_EMPTY;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        if(igk_sys_is_subdomain() && igk_sys_domain_control($this)){
            return true;
        }
        $cp=$this->CurrentPageFolder;
        $cnf=igk_app()->Configs;
        $v=($cp != IGK_CONFIG_MODE) && (strtolower($cnf->default_controller) == strtolower($this->Name));
        return $v;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegInvokeUri(){
        return $this->getUri(IGK_EVALUATE_URI_FUNC);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegisterToViewMecanism(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegUriAction(){
        $primary=$this->getBasicUriPattern();
        if(empty($primary))
            return null;
        return "".$primary.IGK_REG_ACTION_METH;
    }
    ///<summary>handle evaluation uri</summary>
    ///<return>true if handle uri or false</return>
    /**
    * handle evaluation uri
    */
    public function handle_redirection_uri($uri, $forcehandleuri=1){
        igk_sys_handle_uri();
        $k=IGK_REG_ROUTE_PATTERN;
        $pattern=igk_pattern_matcher_get_pattern($k);
        $p=igk_pattern_get_matches($pattern, $uri, array("function"));
        $c=igk_getv($p, "function");
        if(!preg_match($pattern, $uri))
            return false;
        // if(isset($this->m_func_handler[$c])){
            // $e=$this->m_func_handler[$c];
            // $e->value=$uri;
        // }
        // else{
            $e=new IGKSystemUriActionPatternInfo(array(
                "action"=>$k,
                "value"=>$this->getRegInvokeUri(),
                "pattern"=>$pattern,
                "uri"=>$uri,
                "ctrl"=>$this,
                "keys"=>igk_str_get_pattern_keys($k)
            ));
        // }
        $this->evaluateUri($e);
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        igk_app()->Session->addUserChangedEvent($this, "View");
    }
    ///<summary></summary>
    ///<param name="doc"></param>
    /**
    * 
    * @param mixed $doc
    */
    protected function initDocument($doc){
        $f=$this->getDataDir()."/".IGK_RES_FOLDER."/Img/favicon.ico";
        if(file_exists($f)){
            $p=igk_io_basepath($f);
            $doc->Favicon=new IGKHtmlRelativeUriValueAttribute($p);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $t=parent::initTargetNode();
        $k=IGK_CSS_DEFAULT_STYLE_FUNC_KEY;
        $t->setCallback($k, "return 'igk-page';");

        $t->setClass("+".$t->$k());
        return $t;
    }
    ///<summary></summary>
    ///<param name="uri" default="null"></param>
    /**
    * 
    * @param mixed $uri the default value is null
    */
    public function is_handle_uri($uri=null){
        if(igk_const('IGK_REDIRECTION') == 1){
            if(preg_match("#^/!@#", igk_io_request_uri()))
                return false;
        }
        if(!defined("IGK_REDIRECTION") && !igk_get_env("sys://io_invoke_uri")){
            return false;
        }
        $uri=$uri == null ? igk_io_base_request_uri(): $uri;
        $k=IGK_REG_ROUTE_PATTERN;
        $pattern=igk_pattern_matcher_get_pattern($k);
        $p=igk_pattern_get_matches($pattern, $uri, igk_str_get_pattern_keys($k));
        $c=igk_getv($p, "function");

		// igk_wln_e(__FILE__.":".__LINE__, "check if handler : ".$c);
        return false; // isset($this->m_func_handler[$c]);
    }
    ///<summary> get if a function is avaible for uri invocation</summary>
    /**
    *  get if a function is avaible for uri invocation
    */
    public function IsFuncUriAvailable(& $m){
        $k=$m;
        if(!method_exists($this, $k)){
            $k="uri_".$k;
            if(!method_exists($this, $k))
                $k=null;
        }
        if($k !== null){
            $m=$k;
            return true;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function LoadTemplate(){
        $tempfile=igk_getr("tempfile");
        $this->saveCtrl();
        $this->View();
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public function loadWebTheme($file){}
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function manageErrorUriRequest($uri){}
    ///<summary></summary>
    /**
    * 
    */
    protected function OnMenuPageChanged(){
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function pageFolderChanged(){
        if($this->IsVisible)
            $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function restoreCtrl(){
        $f=$this->getDeclaredDir()."/.".$this->Name.".bck.zip";
        if(file_exists($f)){
            igk_zip_unzip($f, $this->getDeclaredDir());
            $this->View();
            unlink($f);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function saveCtrl(){
        igk_zip_create_file($this->getDeclaredDir()."/.".$this->Name.".bck.zip", $this->getDeclaredDir());
    }
    ///<summary></summary>
    ///<param name="t" ref="true"></param>
    /**
    * 
    * @param mixed * $t
    */
    public static function SetAdditionalConfigInfo(& $t){
        $t["clDefaultPage"]=igk_getr("clDefaultPage");
        return 1;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setPageName($value){
        $this->m_pageview=$value;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->TargetNode;
        $doc=igk_app()->Doc;
        $menu_ctrl=igk_getctrl(IGK_MENU_CTRL);
        if(!$menu_ctrl || !$this->getIsVisible()){
            igk_html_rm($t);
            return;
        }
        else if($this->getEnvParam("from") == null){
            igk_html_add($t, $doc->body->addBodyBox()->ClearChilds());
        }

        $menu_ctrl->setParentView($this->menu_content);
        $this->doc->Title=$this->m_Title ? $this->m_Title: igk_app()->Configs->website_title. $this->getExtraTitle();
        $this->initDocument($this->doc);
        $this->_initView();
        $c=strtolower(igk_getr("c", null));
        $view=$this->getCurrentView();
        if($c == strtolower($this->Name)){
            $view=igk_getr("v", $view);
        }
        $this->m_init=true;
        $this->_renderViewFile($view);
        if(!$this->ShowChildFlag){
            $this->_showChild(null);
        }
        $this->_onViewComplete();
    }
}
///<summary>respresent de fault View controller type </summary>
/**
* respresent de fault View controller type
*/
abstract class IGKViewCtrl extends IGKCtrlTypeBase {
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAdditionalConfigInfo(){
        return null;
    }
    ///<summary></summary>
    ///<param name="t" ref="true"></param>
    /**
    * 
    * @param mixed * $t
    */
    public static function SetAdditionalConfigInfo(& $t){
        return 1;
    }
}
///<summary>used to initialize data adapter list</summary>
/**
* used to initialize data adapter list
*/
final class IGKDataAdapterCtrl extends BaseController {
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_DATA_ADAPTER_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        IGKDataAdapter::Load();
    }
}
///<summary>Represent the debugger used to pass message . </summary>
///<obsolete />
/**
* Represent the debugger used to pass message .
*/
final class IGKDebugCtrl extends BaseController {
    ///<summary></summary>
    ///<param name="div"></param>
    /**
    * 
    * @param mixed $div
    */
    public function addMessage($div){
        $this->m_topdiv->add($div);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearDebug(){
        $this->m_topdiv->ClearChilds();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDebuggerView(){
        static $debug=null;
        /// TODO : DEBUGGER

        if($debug === null){
            $debug=new IGKDebuggerNode();
        }
        return $debug;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return IGKServerInfo::IsLocal();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $node=parent::initTargetNode();
        $cl=strtolower($this->getName());
        $node["class"]=$cl." loc_t loc_l zback posr";
        $node->add("h2")->Content=__("title.debugger");
        $this->m_topdiv=$node->add("div", array("class"=>$cl."_content"));
        $this->m_optionsdiv=$node->add("div", array("class"=>$cl."_options posr loc_b loc_l"));
        IGKHtmlUtils::AddBtnLnk($this->m_optionsdiv, "btn.ClearDebug", $this->getUri("ClearDebug"));
        return $node;
    }
    ///------------------------
    ///------------------------
    /**
    */
    public function View(){
        if($this->getIsVisible()){
            $body=igk_sys_debugzone_ctrl();
            if($body != null){
                igk_html_add($this->getTargetNode(), $body->getTargetNode());
            }
        }
        else
            igk_html_rm($this->getTargetNode());
    }
}
///<summary>Represente class: IGKMsBoxController</summary>
/**
* Represente IGKMsBoxController class
*/
final class IGKMsBoxController extends BaseController implements IIGKFrameController {
   
    ///<summary></summary>
    /**
    * 
    */
    function _freeError(){}
    ///<summary></summary>
    /**
    * 
    */
    private function _register(){}
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addDebug($msg){
        $this->m_isvisible=true;
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addError($msg){}
    ///<summary></summary>
    ///<param name="msg_code"></param>
    /**
    * 
    * @param mixed $msg_code
    */
    public function addErrori($msg_code){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function addErrorr($key){}
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addInfo($msg){}
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){}
    ///<summary></summary>
    /**
    * 
    */
    public function close(){}
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="frame"></param>
    ///<param name="remove" default="true"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $frame
    * @param mixed $remove the default value is true
    */
    public function ContainFrame($id, $frame, $remove=true){
        igk_wln_e("check id : ".$id);
        return "igk-msbox-dialogframe" == $id;
    }
    ///<summary></summary>
    ///<param name="errori"></param>
    /**
    * 
    * @param mixed $errori
    */
    public function copyChilds($errori){}
    ///<summary></summary>
    /**
    * 
    */
    public function getBoxBloc(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getContent(){
        return $this->m_frame->BoxContent;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDebugMsg(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getErrorMsg(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFrame(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_MSBOX_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNode(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTitle(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getWarningMsg(){
        return $this->getParam("frame");
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
    }     
    public function getCanInitDb(){
        return false;
    } 
}
///<summary>Represente class: IGKNonVisibleControllerBase</summary>
/**
* Represente IGKNonVisibleControllerBase class
*/
abstract class IGKNonVisibleControllerBase extends BaseController {
    public function getDataTableName(){ 
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanAddChild(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getcanDelete(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getcanModify(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){}

    public function IsFunctionExposed($func){        
        return igk_is_conf_connected();
    }
}
///<summary>base api</summary>
/**
* base api
*/
final class IGKApi extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SYS_API_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invokeUri(){
        IGKApp::$DEBUG=igk_getr("DEBUG", false);
    }
}
///<summary>used to store and manage global authorisation</summary>
/**
* used to store and manage global authorisation
*/
final class IGKAuthorisationsCtrl extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_AUTHORISATIONS);
    }

    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){
        igk_reg_hook(IGKEvents::HOOK_DB_DATA_ENTRY, function($hook){
            $db=$hook->args[0];
            $n=$hook->args[1];
            if($n == $this->getDataTableName()){
                $db->insert($n, array(IGK_FD_NAME=>"mod_articles"));
                $db->insert($n, array(IGK_FD_NAME=>"mod_view"));
                $db->insert($n, array(IGK_FD_NAME=>"mod_post"));
            }
        });
    }
}
///<summary>represent csv controller manager</summary>
/**
* represent csv controller manager
*/
final class IGKCSVLanguageManagerCtrl extends IGKNonVisibleControllerBase {
    const DATAFILE="Data/languages.csv";
    const LANG_PARAM=IGK_CTRL_LANG;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _loadData(){
        $r=IGKCSVDataAdapter::LoadData(igk_io_syspath(self::DATAFILE));
        if($r){
            $t=array();
            foreach($r as $l){
                $t[$l[0]]=$l[0];
            }
            $p=array();
            if($s=$this->getEnvParam(self::LANG_PARAM, null)){
                $p=array_filter(explode("|", $s));
            }
            $p=array_merge($p, array_keys($t));
            $this->setEnvParam(self::LANG_PARAM, implode("|", $p));
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function addLang($n){
        $g=array();
        if(!empty($n) && !isset($g[$n])){
            $g[$n]=$n;
            $out=IGK_STR_EMPTY;
            foreach($g as  $v){
                $out .= $v.IGK_LF;
            }
            igk_io_save_file_as_utf8(igk_io_syspath(self::DATAFILE), $out, true);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataAdapterName(){
        return IGK_CSV_DATAADAPTER;
    }
    ///<summary>return the installed language expression</summary>
    /**
    * return the installed language expression
    */
    public function getLangRegex(){
        $t=explode("|", $this->getLanguages());
        if(!$t){
            igk_die("Language list not found: ".$t);
        }
        $o="(";
        $i=0;
        foreach($t as $k){
            if($i == 1)
                $o .= "|";
            $o .= $k;
            $i=1;
        }
        $o .= ")";
        return $o;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLanguages(){
        return $this->getEnvParam(self::LANG_PARAM);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_CSVLANGUAGE_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        $this->_loadData();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected static function initDb(){
        $d = igk_getctrl(__CLASS__);
        $content=<<<EOF
fr,
en,
nl
EOF;
        $r = igk_io_w2file(igk_io_syspath(self::DATAFILE), $content, true);
        $d->_loadData();
        return $r;
    }
    ///<summary></summary>
    ///<param name="lang"></param>
    /**
    * 
    * @param mixed $lang
    */
    public function support($lang){
        return preg_match($this->getLangRegex(), $lang);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){}
}
///<summary>controller used to cache page on server</summary>
/**
* controller used to cache page on server
*/
final class IGKCacheCtrl extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "cachectrl";
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getCacheFile($name){
        return igk_io_cachedir().DIRECTORY_SEPARATOR.$name;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return "cachectrl";
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="ctrl" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $ctrl the default value is null
    */
    public function loadCache($name, $ctrl=null){
        $t=igk_getdv(igk_app()->Configs->cache_file_time, 3600);
        $expire=time() - $t;
        $f=$this->getCacheFile($name);
        if(file_exists($f) && (filemtime($f) > $expire)){
            readfile($f);
            return true;
        }
        else{
            if(($ctrl != null)){
                ob_start();
                $ctrl->View();
                $o=$ctrl->TargetNode->Render();
                igk_wl($o);
                ob_end_clean();
                igk_io_save_file_as_utf8($f, utf8_decode($o));
                igk_wl($o);
            }
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="out"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $out
    */
    public function storeCache($name, $out){
        $f=$this->getCacheFile($name);
        ob_start();
        igk_wl($out);
        ob_end_clean();
        igk_io_save_file_as_utf8($f, utf8_decode($out));
        igk_wl($out);
    }
}
// ///<summary>component manager controller</summary>
// /**
// * component manager controller
// */
final class IGKComponentManagerCtrl extends IGKNonVisibleControllerBase{

    ///<summary> Dispose all component</summary>
    /**
    *  Dispose all component
    */
    public function DisposeAll(){
        if($ob=$this->getComponents()){
            foreach($ob as  $v){
                $v->Dispose();
            }
        }
        igk_app()->settings->appInfo->components = null;
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    /**
    * 
    * @param mixed $obj
    */
    public function Exists($obj){
        $setting=& $this->getSettings();
        return igk_array_value_exist($setting->objs, $obj);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function getComponentById($id){
        return igk_getv($this->m_ids, $id);
    }
    ///<summary></summary>
    ///<param name="host"></param>
    /**
    * 
    * @param mixed $host
    */
    public function getComponentId($host){
        return $host->getParam(IGK_COMPONENT_ID_PARAM);
    }
    ///<summary> get components registrated </summary>
    /**
    *  get components registrated
    */
    public function getComponents(){
        return $this->getm_objs();
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    /**
    * 
    * @param mixed $obj
    */
    public function getId($obj){
        if($obj === null)
            return null;
		if (get_class($obj) === stdClass::class){
			igk_die("stdlass resolv ::: -" );
		}

        $r=$obj->getParam(__CLASS__.":id");
        if($r)
            return $r;
        foreach($this->m_ids as $k=>$v){
            if($v === $obj)
                return $k;
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getm_ids(){
        return $this->settings->ids;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getm_objs(){
        return $this->settings->objs;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getm_srcs(){
        return $this->settings->srcs;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getm_uris(){
        return $this->settings->uris;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_COMPONENT_MANAGER_CTRL;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getSettings(){
        static $setting;
        if($setting === null){
            $setting = igk_app()->settings->appInfo->components;
            if(!$setting){
                $setting= igk_prepare_components_storage();
                igk_app()->settings->appInfo = $setting;
            }
        }
        return $setting;
    }
    ///<summary></summary>
    ///<param name="f" default="null"></param>
    ///<param name="obj" default="null"></param>
    /**
    * 
    * @param mixed $f the default value is null
    * @param mixed $obj the default value is null
    */
    public function getUri($f=null, $obj=null){
        if($obj == null)
            return parent::getUri($f);
        $id=$this->getId($obj);
        $u=parent::getUri("inv&q=".base64_encode("f=".$f."&id=".$id));
        $this->getsettings()->uris[$id]=get_class($obj);
        return $u;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        igk_notification_reg_event(IGK_NODE_DISPOSED_EVENT, array($this, "nodeDisposed"));
    }
    ///<summary>invoke</summary>
    /**
    * invoke
    */
    public function inv(){
        $f=base64_decode(igk_getr("q"));
        if(empty($f))
            return;
        $tab=igk_getquery_args($f);
        $k=$tab["id"];
        $obj=igk_getv($this->m_ids, $k);
        if($obj){
            if(get_class($obj) == __PHP_Incomplete_Class::class){
                igk_wln("try to used an incomplete class ");
                igk_exit();
            }
            $m=igk_sys_meth_info(igk_getv(explode("&", $tab["f"]), 0));
            $g=$m->Name;
            if(method_exists(get_class($obj), $g)){
                if(igk_count($m->Args) == 0){
                    $obj->$g();
                }
                else{
                    call_user_func_array(array($obj, $g), $m->Args);
                }
            }
            else{
                call_user_func_array(array($obj, $g), $m->Args);
            }
            igk_exit();
        }
        else{
            igk_header_no_cache();
            igk_html_output(404, "Error Component");
            igk_notification_push_event(IGK_COMP_NOT_FOUND_EVENT, $this, $k);
            if(igk_is_ajx_demand()){
                igk_wln("<div style=\"color:#FFDF72\" >/!\\ Component {{$k}} not found  </div>");
            }
            else{
                $doc= igk_get_document($this, true);
                $doc->Title= __("Component Error") . " - ".igk_web_get_config('website_title');
                $dv=$doc->body->addBodyBox()->div();
                $dv->div()->setContent("<div>component object not found.[ $k ]</div><i>/!\\ session destroyed or component cleared</i>");
                $doc->RenderAJX();
                $doc->Dispose();
            }
            igk_exit();
        }
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    public function nodeDisposed($e){
		$node = $e->args[0];
        $this->Unregister($node);
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="componentInterface" default="true"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $componentInterface the default value is true
    */
    public function Register($obj, $componentInterface=true){
		return;
		///TODO : register component
        // if(($obj == null) || $this->Exists($obj) || ($componentInterface && !igk_reflection_class_implement($obj, "IIGKHtmlComponent")))
        //     return false;
        // $setting=$this->getSettings();
        // $setting->objs[]=$obj;
        // $s=igk_new_id();
        // $setting->ids[$s]=$obj;
        // $setting->srcs[$s]=igk_reflection_getdeclared_filename($obj);
        // $obj->setParam(IGK_COMPONENT_ID_PARAM, $s);
        // return true;
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    /**
    * 
    * @param mixed $obj
    */
    public function Unregister($obj){
		return;
		///TODO : unregister component
        // if(($obj == null) || (igk_count($this->m_objs) == 0)){
        //     return;}
        // $r=$this->getId($obj);
        // if(empty($r))
        //     return;
        // $t=array();
        // $rf=0;
        // $setting=$this->getSettings();
        // foreach($setting->objs as $k=>$v){
        //     if($obj === $v){
        //         $rf=1;
        //         continue;
        //     }
        //     $t[]=$v;
        // }
        // if($rf == 1){
        //     $clname=get_class($obj);
        //     if($clname != IGKHtmlMemoryUsageInfoNodeItem::class){
        //         $gr=igk_get_env("info:dispose", 1);
        //         $gr++;
        //         igk_set_env("info:dispose", $gr);
        //     }
        //     $setting->objs=$t;
        //     unset($setting->ids[$r]);
        //     unset($setting->uris[$r]);
        //     $obj->unsetParam(__CLASS__.":id");
        // }
    }
}
///<summary>used to store global configurations</summary>
/**
* used to store global configurations
*/
final class IGKConfigurationCtrl extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="default" default="null"></param>
    ///<param name="comment" default="null"></param>
    ///<param name="init"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $default the default value is null
    * @param mixed $comment the default value is null
    * @param mixed $init the default value is 0
    */
    public function getConfigv($n, $default=null, $comment=null, $init=0){
        $a=igk_get_data_adapter($this);
        if($a->connect()){
            $tb= $this->getDataTableName();
            igk_db_no_exception(1);
            $v=$a->select($tb, array(IGK_FD_NAME=>$n));
            igk_db_no_exception(0);
            $r=$v ? $v->getRowAtIndex(0): null;
            if($r){
                if($init){
                    $r->clValue=$default;
                    $a->update($tb, $r, $r->clId);
                }
                $a->close();
                return $r->clValue;
            }
            $a->insert($tb, array(IGK_FD_NAME=>$n, "clValue"=>$default));
            $a->close();
        }
        return $default;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){  
        return igk_db_get_table_name(IGK_TB_CONFIGS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_BDCONFIGS_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getUseDataSchema(){
        return false;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $value
    */
    public function setConfigv($n, $value, $default=null){
        $a=igk_get_data_adapter($this);
        if($a->connect()){
            $tb= $this->getDataTableName();
            $v=$a->select($tb, array(IGK_FD_NAME=>$n));
            $r=$v ? $v->getRowAtIndex(0): null;
            if($r){
                $r->clValue=$value;
                $a->update($tb, $r, $r->clId);
            }
            else{
                $a->insert($tb, array(IGK_FD_NAME=>$n, "clValue"=>$default));
            }
            $a->close();
            return 1;
        }
        return 0;
    }
}
///<summary>Controller used to manage controllers</summary>
/**
* Controller used to manage controllers
*/
final class IGKSystemManagerController extends IGKNonVisibleControllerBase {
    ///<summary>add a controller from request</summary>
    /**
    * add a controller from request
    */
    public function addControllerRequest($name=null, $webpagecontent=false, $webparent=null){
        $n=str_replace(" ", "_", trim($name ?? igk_getr(IGK_FD_NAME, null)));
        $ctrl_typename=igk_getr("clCtrlType", null);
        $ctrl_ns=igk_getr("clCtrlNameSpace", "igk");
        $response=false;
        $code=0;
        $notf=igk_notifyctrl(igk_getr("notification"));
        $type=null;
        if(empty($ctrl_typename)){
            $code |= 16;
            $notf->addWarningr("msg.typenotdefined_1", $n);
        }
        if(!igk_is_identifier($n)){
            $notf->addWarningr("msg.identifiernotvalid_1", $n);
            $code |= 1;
        }
        if(igk_ctrl_is_reservedname($n)){
            $notf->addWarningr("msg.addctrl.nameisreserverd_1", "[".$n."]");
            $code |= 2;
        }
        if(class_exists($n)){
            $notf->addWarningr("msg.classalreadyexists");
            $code |= 4;
        }
        if(($info=igk_ctrl_get_ctrl_info($ctrl_typename)) && !$info->CanAddNew){
            $notf->addWarningr("msg.ctrl.notallowingchild_1", $info->Created);
            $code |= 8;
        }
        if($code == 0){
            $type=igk_getv(IGKCtrlTypeManager::GetControllerTypes(), $ctrl_typename);
            if($type != null){
                $meth="CheckBeforeAddControllerInfo";
                if(method_exists($type, $meth) && !call_user_func_array(array($type, $meth), array($_REQUEST))){
                    $code |= 0x100;
                    $notf->addError(__("err.addctrl.meth.checkbeforeaddcontrollerinfo.failed_3", $type, $n, $code));
                    igk_wln("ceck befor exists ".$code);
                    return $response;
                }
            }
        }
        if($code != 0){
            $code |= 0x100;
            return $response;
        }
        if($n && ($n != ".") && ($n != "..") && (igk_getctrl($n, false) == null) && ($type != null)){
            $clcontent=self::GetDefaultClassContent($n, $type, $webparent);
            $p="";
            if(($ctrl_ns != "igk") && preg_match(IGK_NAME_SPACE_REGEX, $ctrl_ns)){
                $m=explode(".", $ctrl_ns);
                foreach($m as $k=>$v){
                    if(empty($v))
                        continue;
                    $p .= $v."/";
                }
            }
            $odir=igk_getr("clOutFolder");
            if(!empty($odir)){
                $p="/".$odir."/".$p;
            }
            $folder=igk_io_projectdir()."/".$p.$n;
            $file_name=$folder."/class.".$n.".php";
            if(file_exists($file_name)){
                $code |= 0x200;
                return false;
            }
            $grantaccess="allow from all";
            $denyaccess="deny from all";
            igk_init_controller(new IGKCtrlInitListener($folder, 'system'));
            $t=igk_sys_getdefaultctrlconf();
            $t["clDataAdapterName"]=igk_getr("clDataAdapterName", igk_sys_getconfig("default_dataadapter"));
            $t["clDisplayName"]=igk_getr("clDisplayName", null);
            $t["clRegisterName"]=igk_getr("clRegisterName", igk_web_prefix().".".$n);
            $t["clParentCtrl"]=$webparent == null ? $webparent: igk_getr("clParentCtrl");
            $t["clTargetNodeIndex"]=igk_getr("clTargetNodeIndex");
            $t["clVisiblePages"]=igk_getr("clVisiblePages");
            $t["clDescription"]=igk_getr("clDescription");
            $t["clDataSchema"]=igk_getr("clDataSchema");
            $o=call_user_func_array(array($type, "SetAdditionalConfigInfo"), array(& $t));
            if($type == IGKDefaultPageController::class){
                igk_io_save_file_as_utf8($folder."/".IGK_SCRIPT_FOLDER."/default.js", self::GetDefaultScript($n));
            }
            $file_name=$folder."/class.".$n.".php";
            igk_io_save_file_as_utf8($file_name, $clcontent);
            igk_io_save_file_as_utf8($folder."/".IGK_VIEW_FOLDER."/".IGK_DEFAULT_VIEW_FILE, call_user_func(array($type, "GetAdditionalDefaultViewContent")));
            include($file_name);
            $conf=igk_createnode("config");
            foreach($t as $k=>$v){
                $conf->add($k)->Content=$v;
            }
            $cl=new $n();
            $f=$cl->getConfigFile();
            IGKIO::CreateDir(dirname($f));
            igk_io_w2file($f, $conf->Render());
            $fn=IGK_INITENV_FUNC;
            if(method_exists($cl, $fn)){
                $e=call_user_func_array(array($n, $fn), array($cl));
                if(!$e){
                    igk_ilog("InitEnvironment failed for ".$cl, __METHOD__);
                }
            }
            IGKControllerManagerObject::getInstance()->initCtrl($cl, 1);
            unset($cl);
            $ctrl=igk_getctrl($n);
            $nodefaultarticle=igk_getr("nodefaultarticle", 0);
            if($ctrl && !$nodefaultarticle){
                igk_io_save_file_as_utf8($ctrl->getArticle(IGK_DEFAULT), __("default.articlev_1", $n));
            }

			if ($t["clDataSchema"]){
				igk_io_w2file($folder."/".IGK_DATA_FOLDER."/".IGK_SCHEMA_FILENAME, "<".IGK_SCHEMA_TAGNAME." />");
			}
            igk_sys_cache_lib_files();
            igk_invoke_session_event("sys://event/controlleradded", array($this, $ctrl));
            $response=true;
        }
        else{
            igk_notifyctrl()->addErrorr("err.cannotaddnewctrl_2", $type, $n);
        }
        return $response;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="extends"></param>
    ///<param name="webparent" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $extends
    * @param mixed $webparent the default value is null
    */
    public static function GetDefaultClassContent($name, $extends, $webparent=null){
        if(igk_ctrl_is_reservedname($name))
            return null;
        $cnf=igk_app()->getConfigs();
        $param=array();
        $param["extend"]=$extends;
        $param["summary"]="";
        $param["desc"]="";
        $param["create"]=igk_date_now();
        $param["copyright"]=igk_getv($cnf, 'copyright', IGK_COPYRIGHT);
        $param["author"]=igk_getv($cnf, 'default_author', IGK_AUTHOR);
        $s=IGK_STR_EMPTY;
        $s .= !$webparent || (igk_getctrl($webparent) == null) ? null: <<<EOF
igk_getctrl("{$webparent}")->regChildController(\$this);
EOF;
        $out=<<<EOF
<?php
//***
//author:{$param["author"]}
//description:{$param["desc"]}
//created:{$param["create"]}
//copyright: {$param["copyright"]}
//type: controller
//***

//
//controller code class declaration
//file is a part of the controller tab list
//

///<summary>{$param["summary"]}</summary>
class $name extends {$param["extend"]} {
	public function getName(){return get_class(\$this);}
	protected function InitComplete(){
		parent::InitComplete();
		//please enter your controller declaration complete here

	}
	///<summary> init target node </summary>
	protected function initTargetNode(){
		\$node =  parent::initTargetNode();
		return \$node;
	}
	//----------------------------------------
	//Please Enter your code declaration here
	//----------------------------------------

	///<summary>override to handle your custom view mecanism</summary>
	//public function View(){
	//	parent::View();
	//}
}
EOF;
        return $out;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    private static function GetDefaultScript($n){
        $conf="constant";
        $o=<<<OEF
{$conf('IGK_START_COMMENT')}
default script for {$n}
{$conf('IGK_END_COMMENT')}
OEF;
        return $o;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_CTRL_MANAGER;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function IsFunctionExposed($name){
        return true;
    }
    ///<summary></summary>
    ///<param name="n" default="null"></param>
    /**
    * 
    * @param mixed $n the default value is null
    */
    public function removeCtrl($n=null){
        $n=($n == null) ? igk_getr("n"): $n;
        $r=false;
        if($n){
            $ctrl=igk_getctrl($n);
            if($ctrl){
                $cl=get_class($ctrl);
                if($cl){
                    IGKControllerManagerObject::ClearCache();
                    $i=IGKControllerManagerObject::getInstance();
                    $r=is_string($n) ? $i->dropControllerByName($n): $i->dropController($n);
                    if($r){
                        $i->reloadModules(array($cl=>$n), false, 0);
                    }
                }
            }
            return $r;
        }
        return false;
    }
}
///<summary>used to manage data type</summary>
/**
* used to manage data type
*/
final class IGKDataTypesCtrl extends IGKNonVisibleControllerBase{
   
    ///<summary> handle database changed</summary>
    /**
    *  handle database changed
    */
    private function _dbChange($e){
        if (igk_environment()->mysql_query_filter){
            return;
        }
        igk_ilog("db:changed");
    }
    ///<summary> callback for table created </summary>
    /**
    *  callback for table created
    */
    private function _tbCreated($o, $table){ 
        if (igk_environment()->mysql_query_filter)
            return;
        static $entries = null;
        $e=$table;
        $n= igk_db_get_table_name($this->getDataTableName(), $this);

        if ($entries){
            $entries = [];
            if ($table!=$n){
                if($ad->tableExists($n)){
                    $r=0;
                }
                else{
                    igk_push_env($key, $e);
                }
            }
        }
            
       
        $key="sys://created/tables_flag";
        $ad=igk_get_data_adapter($this);
        if($n !== $e){
            if($ad->tableExists($n)){
                $r=0;
               //  $r=igk_db_insert_if_not_exists($this, $n, array(IGK_FD_NAME=>$e, IGK_FD_DESC=>'datatable'), array(IGK_FD_NAME=>$e));
            }
            else{
                igk_push_env($key, $e);
            }
        }
        else{
            $this->initDataEntry($ad, $n);
            if($tb=igk_get_env($key)){
                foreach($tb as $tn){
                    if ( !($g = $ad->select($n, [IGK_FD_NAME=>$n])) || !($g->getRowCount()>0)){
                        $ad->insert($n , [IGK_FD_NAME=>$tn,IGK_FD_DESC=>'datatable']);
                    }
                 }
                igk_set_env($key, null);
            }
        }
    }
    ///<summary> handle system database table dropped</summary>
    /**
    *  handle system database table dropped
    */
    private function _tbDropped($o, $e){

        $n=$this->getDataTableName();
		$ad=igk_get_data_adapter($this);
        if (is_array($e)){
            foreach($e as $t){
                if($n !== $t)
                    $ad->delete($n, [IGK_FD_NAME=>$t]);
            }
        }else {
            $ad->delete($n, [IGK_FD_NAME=>$e]);
        }
	 
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function getData($i){
        $r=igk_db_table_select_row($this->DataTableName, $i, $this);
        return $r;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_DATATYPES);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function getInfo($n){
        $r=igk_db_table_select_where($this->DataTableName, array(IGK_FD_NAME=>$n), $this)->getRowAtIndex(0);
        return $r;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_DATA_TYPE_CTRL;
    }
    ///<summary></summary>
    ///<param name="db"></param>
    ///<param name="tbname" default="null"></param>
    /**
    * 
    * @param mixed $db
    * @param mixed $tbname the default value is null
    */
    protected function initDataEntry($db, $tbname=null){
        $n = igk_db_get_table_name($this->getDataTableName(), $this); 
        $db->insert($n, array(IGK_FD_NAME=>"email", IGK_FD_DESC=>"email"));
        $db->insert($n, array(IGK_FD_NAME=>"fax", IGK_FD_DESC=>"fax data"));
        $db->insert($n, array(IGK_FD_NAME=>"uri", IGK_FD_DESC=>"uri"));
        $db->insert($n, array(IGK_FD_NAME=>"gsm", IGK_FD_DESC=>"gsm number"));
        $db->insert($n, array(IGK_FD_NAME=>"tel", IGK_FD_DESC=>"phone number"));
        $db->insert($n, array(IGK_FD_NAME=>"string", IGK_FD_DESC=>"string data"));
        $db->insert($n, array(IGK_FD_NAME=>"number", IGK_FD_DESC=>"integer"));
        $db->insert($n, array(IGK_FD_NAME=>"float", IGK_FD_DESC=>"float number"));
        $db->insert($n, array(IGK_FD_NAME=>"json", IGK_FD_DESC=>"json data"));
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){
        igk_reg_hook(IGK_HOOK_DB_CHANGED, function($hook){
             call_user_func_array(array($this, '_dbChange'), igk_get_call_args($hook->args));
        });
        igk_reg_hook(IGK_HOOK_DB_TABLECREATED, function($hook){
            call_user_func_array(array($this, '_tbCreated'), igk_get_call_args($hook->args));
        });
        igk_reg_hook(IGK_NOTIFICATION_DB_TABLEDROPPED, function($hook){
            call_user_func_array(array($this, '_tbDropped'), igk_get_call_args($hook->args));
        });
    }
}
///<summary>represent a frame controller</summary>
/**
* represent a frame controller
*/
final class IGKFrameDialogCtrl extends IGKNonVisibleControllerBase implements IIGKFrameController {
    const FRAME_KEYS="FRAMES";
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function close_frame_ajx(){
        $href=base64_decode(igk_getr("href"));
        $tag=igk_getquery_args($href);
        $this->closeFrame(igk_getv($tag, "id"));
        igk_wl(igk_app()->Doc->body->Render());
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function closeAllFrame(){
        $frame=$this->getFrames();
        $c=array_keys($frame);
        $i=0;
        foreach($c as  $v){
            igk_frame_close($v);
            $i++;
        }
        igk_navtocurrent();
    }
    ///<summary>Close frame</summary>
    ///<param name="id" default='null'>id of frame to close on server side</param>
    ///<param name="navigate" default='null'>navigation uri</param>
    /**
    * Close frame
    * @param mixed $id id of frame to close on server side
    * @param mixed $navigate navigation uri
    */
    public function closeFrame($id=null, $navigate=null){
        $v_id=($id != null) ? $id: igk_getr("id", 0);
        $closeuri=null;
        $navigate=$navigate === null ? igk_getr("navigate", false): $navigate;
        $frames=$this->getFrames();
		if ($frames){
			if(isset($frames[$v_id]) && ($frame=$frames[$v_id])){
				$args=igk_getquery_args($frame->closeUri);
				if(($closeuri=urldecode(igk_getr("closeuri"))) == null)
					$closeuri=urldecode(igk_getv($args, "closeuri"));
				igk_html_rm($frame);
				if(method_exists(get_class($frame->Owner), "frameClosed")){
					$frame->Owner->frameClosed();
				}
				$frame->closeMethod();
				$frame->Dispose();
				unset($frames[$v_id]);
				unset($frame);
				$this->setParam(self::FRAME_KEYS, (count($frames) > 0) ? $frames: null);
			}
			else{
				igk_wln("Frame not found [".$v_id."] - ".count($frames));
				return;
			}
		}
        if(!igk_is_ajx_demand()){
            if($closeuri){
                igk_navtocurrent($closeuri);
                igk_exit();
            }
            else if($navigate){
                igk_navtocurrent();
                igk_exit();
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function closeFrame_ajx(){
        $id=igk_getr("id");
        igk_frame_close($id);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="frame"></param>
    ///<param name="remove" default="true"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $frame
    * @param mixed $remove the default value is true
    */
    public function ContainFrame($id, $frame, $remove=true){
        $frames=$this->getFrames();
        if(isset($frames[$id])){
            if($frame !== $frames[$id]){
                if($remove){
                    unset($frames[$id]);
                    $this->setParam(self::FRAME_KEYS, $frames);
                    return true;
                }
                return false;
            }
            return true;
        }
        else{}
        return false;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="owner"></param>
    ///<param name="closeuri" default="null"></param>
    ///<param name="reloadcallback" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $owner
    * @param mixed $closeuri the default value is null
    * @param mixed $reloadcallback the default value is null
    */
    public function createFrame($id, $owner, $closeuri=null, $reloadcallback=null){
        if(($id == null) || !is_string($id))
            return null;
        $frames=$this->getFrames();
        if(!$frames == null){
            $frames=array();
        }
        if(isset($frames[$id])){
            $v_dial=$frames[$id];
            $b=$v_dial->getOwner();;
            if($b === $owner)
                return $v_dial;
        }
        $v_dial=new IGKMsDialogFrame($this, $id, $owner, $reloadcallback);
        $v_dial->ClearChilds();
        $cluri=null;
        if($closeuri){
            $cluri="&closeuri=".urlencode($closeuri);
        }
        else{
            $cluri="&navigate=1";
        }
        $v_dial->setCloseUri($this->getUri("closeFrame&id=".$id.$cluri));
        $v_dial["id"]=$id;
        $frames[$id]=$v_dial;
        $this->setParam(self::FRAME_KEYS, $frames);
        return $v_dial;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function getFrame($id){
        $frames=$this->getFrames();
        if(isset($frames[$id])){
            return $frames[$id];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFrameIds(){
        if($frames=$this->getFrames()){
            return array_keys($frames);
        }
        return array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFrames(){
        return $this->getParam(self::FRAME_KEYS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_FRAME_CTRL;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function IsFrameAvailable($id){
        return $this->getFrame($id) != null;
    }
}
///<summary>Represente class: IGKHumanCtrl</summary>
/**
* Represente IGKHumanCtrl class
*/
final class IGKHumanCtrl extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_HUMAN);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_HUMAN_CTRL;
    }
}
///<summary>used to configure layout controller list</summary>
/**
* used to configure layout controller list
*/
final class IGKLayoutCtrl extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function getCurrentLayout(){
        return $this->getParam("currentLayout");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataAdapterName(){
        return IGK_CSV_DATAADAPTER;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_LAYOUT_CTRL;
    }
    ///<summary></summary>
    ///<param name="funcname"></param>
    /**
    * 
    * @param mixed $funcname
    */
    public function IsFunctionExposed($funcname){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function loadLayout(){
        IGKIO::CreateDir(IGK_LAYOUT_FOLDER);
        $n=igk_getr(IGK_FD_NAME);
        $f=igk_io_currentrelativepath("Layouts/".$n.".xml");
        $t=igk_getv($_FILES, "clFile");
        if(igk_io_move_uploaded_file($t["tmp_name"], $f)){}
    }
    ///<summary></summary>
    /**
    * 
    */
    public function removeLayout(){
        $n=igk_getr("n");
        $f=igk_io_currentrelativepath("Layouts/".$n.".xml");
        if(file_exists($f)){
            unlink($f);
        }
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setCurrentLayout($value){
        $this->setParam("currentLayout", $value);
    }
}
///<summary>log controller</summary>
/**
* log controller
*/
final class IGKLogController extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function ClearLog(){
        IGKLog::getInstance()->ClearLog();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanInitDb(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_LOG_CTRL;
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function write($msg){
        IGKLog::getInstance()->write_i("IGKLog", $msg);
    }
    ///<summary></summary>
    ///<param name="tag"></param>
    ///<param name="message"></param>
    /**
    * 
    * @param mixed $tag
    * @param mixed $message
    */
    public function write_i($tag, $message){
        IGKLog::getInstance()->write_i($tag, $message, 0);
    }
    ///<summary></summary>
    ///<param name="tag"></param>
    ///<param name="message"></param>
    /**
    * 
    * @param mixed $tag
    * @param mixed $message
    */
    public function write_i_data($tag, $message){
        IGKLog::getInstance()->write_i($tag, $message, 1);
    }
}
///<summary>Represente class: IGKOtherMenuCtrl</summary>
/**
* Represente IGKOtherMenuCtrl class
*/
final class IGKOtherMenuCtrl extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function getMenus(){
        return $this->getParam("OtherMenu");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_OTHER_MENU_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
    }
}
///<summary>Represente class: IGKPageCtrl</summary>
/**
* Represente IGKPageCtrl class
*/
final class IGKPageCtrl extends IGKNonVisibleControllerBase {
    const GOTOPREVIOUS=-1;
    const NAVIGATE=1;
    const REFRESHING=5;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _igk_initCalled(){
        if(defined("IGK_FORCSS")){
            return;}
        $this->OnPageLoad();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function _igk_session_update(){
        $this->_igk_initCalled();
        $this->m_currentUri=igk_io_request_uri();
        if($this->State == self::REFRESHING)
            $this->View();
    }
    ///add a new page to system
    /**
    */
    public function add(){
        $n= igk_getr("n", null);
        if($n){
            $dir=IGKIO::GetBaseDir($n);
            mkdir($dir);
            $text=<<<EOF
<?php
include_once(IGK_LIB_DIR."/../index.php");
igk_wl( igk_app()->Doc->Render());
?>
EOF;
            igk_io_save_file_as_utf8($dir."/index.php", $text, false);
            igk_navtobase();
            igk_exit();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function checkState(){
        $v_rUri=igk_io_request_uri();
        if($this->m_newPage != $v_rUri){
            if($v_rUri == $this->m_oldPage){
                $this->m_oldPage=$this->m_newPage;
                $this->m_newPage=$v_rUri;
                $this->setState(self::GOTOPREVIOUS);
            }
            else{
                $this->m_oldPage=$this->m_newPage;
                $this->m_newPage=$v_rUri;
                $this->setState(self::NAVIGATE);
            }
        }
        else{
            if(igk_server()->HTTP_CACHE_CONTROL == "max-age=0"){
                $this->setState(self::REFRESHING);
            }
            else
                $this->setState(0);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getisRefreshing(){
        return ($this->State == self::REFRESHING);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SYS_PAGE_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getState(){
        return $this->m_state;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    ///<param name="m"></param>
    /**
    * 
    * @param mixed $msg
    * @param mixed $m
    */
    public function onHandleSessionEvent($msg, $m){
        switch($msg){
            case IGK_ENV_APP_INIT:
            $this->_igk_initCalled();
            break;
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function OnPageLoad(){
        igk_hook("PageLoad", $this);
    }
    ///<summary></summary>
    ///<param name="state"></param>
    /**
    * 
    * @param mixed $state
    */
    private function setState($state){
        if($this->m_state != $state){
            $this->m_state=$state;
        }
    }
}
///<summary>represent picture controller service. expose only one action: view_alls</summary>
/**
* represent picture controller service. expose only one action: view_alls
*/
final class IGKPics extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    ///<param name="f"></param>
    /**
    * 
    * @param mixed $f
    */
    public function IsFunctionExposed($f){
        return $f == 'view_alls';
    }
    ///<summary></summary>
    /**
    * 
    */
    public function view_alls(){
        $doc= new IGKHtmlDoc();
        $t=$doc->addBodyBox()->addDiv();
        $pics=igk_getctrl(IGK_PIC_RES_CTRL)->getAllPics();
        $t->ClearChilds();
        $out="igk.ready(function(){var v =null;";
        foreach($pics as $k=>$v){
            $out .= "v = document.createElement('img'); v.src='".R::GetImgUri($k)."'; document.body.AppendChild(v);".IGK_LF;
        }
        $t->addScript()->Content=$out. "});";
        $doc->RenderAJX();
    }
}
///<summary> used for referencing global value data</summary>
/**
*  used for referencing global value data
*/
final class IGKReferenceModelCtrl extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="model" default="null"></param>
    ///<param name="base" default="36"></param>
    ///<param name="ref" default="6"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $model the default value is null
    * @param mixed $base the default value is 36
    * @param mixed $ref the default value is 6
    */
    public function get_ref($ctrl, $model=null, $base=36, $ref=6){
        return \IGK\Models\ReferenceModels::get_ref($ctrl, $model, $base, $ref);

        $obj=(object)array();
        $q=$this;
        $obj->update=function() use ($q, $obj){
            $tb= igk_db_get_table_name($q->getDataTableName(), $q);
            $s=igk_db_create_row($tb, $obj);
            if($obj->newValue){
                igk_db_insert($q, $tb, $s);
            }
            else{
                igk_db_update($q, $tb, $s);
            }
        };
        $v_tmodel=$model == null ? (method_exists($ctrl, "getRefModel") ? $ctrl->getRefModel(): "MDL"): $model;
        $r=igk_db_table_select_where($this->getDataTableName(), array("clModel"=>$v_tmodel));
        $model=$r->RowCount == 0 ? 0: $r->getRowAtIndex(0);
        $c=$model ? $model->clNextValue: null;
        $c++;
        $out=$v_tmodel."".IGKNumber::ToBase($c, $base, $ref);
        igk_obj_append($obj, array(
            "out"=>$out,
            "newValue"=>$r->RowCount == 0,
            "ctrl"=>$ctrl,
            "clModel"=>$v_tmodel,
            "clNextValue"=>$c,
            IGK_FD_ID=>$model ? $model->clId: null
        ));
        return $obj;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_REF_MODELS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_CB_REF_CTRL;
    }
    ///<summary></summary>
    ///<param name="t"></param>
    ///<param name="productTypeTable"></param>
    ///<param name="prefix" default="null"></param>
    /**
    * 
    * @param mixed $t
    * @param mixed $productTypeTable
    * @param mixed $prefix the default value is null
    */
    public function getnewproduct_ref($t, $productTypeTable, $prefix=null){
        $r=igk_db_table_select_where($productTypeTable, array(IGK_FD_ID=>$t->clProductType_Id));
        $row=$r->getRowAtIndex(0);
        if($row == null){
            return null;
        }
        $n=igk_getv($row, IGK_FD_NAME);
        $v_tmodel=($prefix ? $prefix: igk_app()->Configs->Prefix).$row->clPrefix;
        $r=igk_db_table_select_where($this->getDataTableName(), array("clModel"=>$v_tmodel));
        $model=$r->RowCount == 0 ? 0: $r->getRowAtIndex(0);
        $c=$model ? $model->clNextValue: null;
        $c++;
        $out=$v_tmodel."".IGKNumber::ToBase($c, 36, 6);
        return IGKRefoutModel::Init(array(
            "out"=>$out,
            "ctrl"=>$this,
            "clModel"=>$v_tmodel,
            "clNextValue"=>$c,
            IGK_FD_ID=>$model ? $model->clId: null
        ));
    }
}
///<summary>Represente class: IGKSystemController</summary>
/**
* Represente IGKSystemController class
*/
final class IGKSystemController extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    ///<param name="frm"></param>
    /**
    * 
    * @param mixed $frm
    */
    private function _buildForm($frm){
        $this->m_fontList=$this->_getFontList();
        igk_notifyctrl()->setNotifyHost($frm->addDiv());
        $frm->addDiv()->Content="Font list ";
        $frm->ClearChilds();
        $frm["action"]=$this->getUri("installfont_ajx");
        $div=$frm->addDiv();
        $div["style"]="min-height: 300px;max-height: 400px; min-width: 400px; overflow-x:none; overflow-y:auto;";
        $i=0;
        if($this->m_fontList != null){
            foreach($this->m_fontList->fonts as $k=>$v){
                $f=igk_io_dir($this->getFontDir()."/".basename($v));
                $uri=$this->getUri("installfont_ajx");
                $cdiv=$div->addDiv(array(
                    "style"=>"font-family: '".$k."';",
                    "class"=>"igk-list-item",
                    "igk-js-click"=>IGK_STR_EMPTY,
                    "id"=>"font_".$i,
                    "igk-font-name"=>base64_encode($k),
                    "onclick"=>"javascript:window.igk.system.fonts.installFont(this, '{$uri}'); return false;"
                ));
                if(file_exists($f))
                    $cdiv["style"] .= "color:#9A9A9A;";
                else
                    $cdiv["style"] .= "color:#3A3A3A;";
                $cdiv->setContent($k);
                $i++;
            }
        }
        else{
            $div->addNotifyBox("danger")->Content="/!\ No fonts definition found";
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _getFontList(){
        $file=igk_sys_cgi_folder()."/cscgi/fontlist.cgi";
        if(file_exists($file)){
            $count=0;
            $resolver=IGKResourceUriResolver::getInstance();
            $resolver->fulluri=1;
            $uri=$resolver->resolve($file);
            $source=igk_curl_post_uri($uri, null, array("CONNECTTIMEOUT"=>10, "TIMEOUT"=>10));
            if(igk_curl_status() != 200){
                return null;
            }
            $node=IGKHtmlReader::Load($source, null);
            if($node){
                $tab=array();
                foreach($node->getElementsByTagName("item") as $k){
                    $tab[$k["name"]]=$k->getinnerHtml();
                }
                return (object)array("fonts"=>$tab, "count"=>count($tab));
            }
            else{
                igk_notifyctrl("sys://Config")->addWarning("<div style=\"color:#feaacc;\">Error : ".$source. " uri: ".$uri. " can't load cgi </div>");
            }
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="lang" default="null"></param>
    /**
    * 
    * @param mixed $lang the default value is null
    */
    public function changeLang_ajx($lang=null){
        $doc=igk_get_last_rendered_document();
        if($doc !== null){
            if(igk_is_ajx_demand()){
                igk_set_env(IGK_ENV_NO_AJX_TEST, 1);
            }
            R::ChangeLang($lang);

            $u=igk_sys_srv_referer();
            if($u){
                $u=igk_getv(explode("?", $u), 0);
                if(!igk_io_invoke_uri($u, 0)){
                    igk_ilog_assert(!igk_sys_env_production(), "Failed to invoke uri - ".$u);
                }
            }

            $doc->renderAJX();
        }
        else{
            igk_ilog("last rendered is null". igk_app()->settings->CurrentDocumentIndex);
            igk_navto(igk_io_baseuri());
        }
        igk_exit();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function changeTheme($name){
        $s=igk_sys_srv_referer();
        if(empty($s)){
            igk_navto(igk_io_baseuri());
        }
        igk_app()->Configs->globaltheme=$name;
        igk_save_config();
        igk_app()->bindCtrlStyle();
        $doc=igk_get_last_rendered_document();
        igk_css_render_balafon_style();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFontDir(){
        return igk_io_syspath(IGK_RES_FONTS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFontList(){
        static $fontlist=null;
        if($fontlist === null){
            if(igk_getconfigwebpagectrl()->getIsConnected()){
                $fontlist=$this->_getFontList();
            }
            else
                $fontlist=null;
        }
        return $fontlist;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SYS_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        igk_app()->getControllerManager()->register("sys", $this);
    }
    ///<summary></summary>
    ///<param name="name" default="null"></param>
    /**
    * 
    * @param mixed $name the default value is null
    */
    public function installfont($name=null){
        $n=($name == null) ? base64_decode(igk_getr("n")): $name;
        if($this->m_fontList && isset($this->m_fontList->fonts[$n])){
            $file=$this->m_fontList->fonts[$n];
            $target=igk_io_currentrelativepath(IGK_RES_FOLDER."/Fonts/".basename($file));
            copy($file, $target);
            igk_app()->Doc->Theme->addFont($n, igk_io_dir(igk_io_basepath($target)));
            igk_notifyctrl()->addMsgr("msg.fontinstalled");
            return true;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function installfont_ajx(){
        if(igk_parsebool($this->installfont())){
            $node=$this->getParam("sys:viewnode");
            $item=$this->getParam("sys:binding");
            $frm=$item["form"];
            $ctrl=$item["ctrl"];
            if($ctrl){
                $ctrl->View();
                igk_js_ajx_view_ctrl($ctrl);
            }
            $this->_buildForm($frm);
            $frm->RenderAJX();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function mod_rewrite(){
        if(igk_getv($_SERVER, 'IGK_REWRITE_MOD') || (igk_server()->REDIRECT_URL && (igk_getr('rwc') > 0))){
            igk_wl(1);
            igk_exit();
        }
        igk_wl(0);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update(){}
    ///<summary></summary>
    /**
    * 
    */
    public function upload(){
        igk_wln_e("upload file ");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function viewFontList(){
        $r=$this->_getFontList();
        igk_wl($r);
    }
    ///<summary></summary>
    ///<param name="node"></param>
    ///<param name="ctrl" default="null"></param>
    /**
    * 
    * @param mixed $node
    * @param mixed $ctrl the default value is null
    */
    public function viewInstallFontForm($node, $ctrl=null){
        $frm=$node->addForm();
        $this->setParam("sys:binding", array("form"=>$frm, "ctrl"=>$ctrl));
        $this->_buildForm($frm);
    }
}
///<summary>Represente class: IGKSysDbController</summary>
/**
* Represente IGKSysDbController class
*/
final class IGKSysDbController extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    /**
    * 
    */
    public function getDbConstantFile(){
        return igk_sys_db_constant_cache();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="cardinality"></param>
    ///<param name="type" default="1"></param>
    ///<param name="expression" default="(.)+"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $cardinality the default value is 0
    * @param mixed $type the default value is 1
    * @param mixed $expression the default value is "(.)+"
    */
    public function getInfoDataEntry($name, $cardinality=0, $type=1, $expression="(.)+"){
        $utypeinfo=$this->getParam("m_userTypeInfo", array());
        return isset($utypeinfo[$name]) ? $this->m_userTypeInfo[$name]: array(
            IGK_FD_NAME=>$name,
            "clCardinality"=>$cardinality,
            "clType"=>$type,
            "clDataType"=>$expression
        );
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getm_userTypeInfo(){
        $r=$this->getParam("usertypeinfo");
        return $r;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SYSDB_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getUseDataSchema(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        $this->RegValueTypeArray("USERTOKENID", null, 1, 1);
    }
    protected function getEntryNamespace(){
        return rtrim(IGK::class, "\\");
    }
    ///<summary></summary>
    /**
    * 
    */
    protected static function initDb(){ 
        if ($c = igk_getctrl(static::class, false)){ 
            igk_set_env(IGK_ENV_DB_INIT_CTRL, $c);
            $c->initDbFromSchemas();
            $c->initDbConstantFiles(); 
            static::InitDataBaseModel();  
            igk_set_env(IGK_ENV_DB_INIT_CTRL, null);
            return 1;
        }
        return false;
    }
     
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="datatype" default="null"></param>
    ///<param name="cardinality"></param>
    ///<param name="nodb"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $datatype the default value is null
    * @param mixed $cardinality the default value is 0
    * @param mixed $nodb the default value is 0
    */
    private function RegValueTypeArray($name, $datatype=null, $cardinality=0, $nodb=0){
        $tab=array(
            IGK_FD_NAME=>$name,
            "clDataType"=>$datatype,
            "clCardinality"=>$cardinality,
            "clType"=>$nodb
        );
        $utypeinfo=$this->getParam("m_userTypeInfo", array());
        $utypeinfo[$name]=$tab;
        $this->setUserTypeInfo($utypeinfo);
    }
   
   /**
    * drop all database
    */
    protected static function dropDb(){ 
        $c = igk_getctrl(__CLASS__,false); 
        if ($c->getDataAdapterName() == IGK_MYSQL_DATAADAPTER){
            $sql = new IGKMySQLDataCtrl(); 
            $sql->drop_all_tables();  
        } 
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function setUserTypeInfo($t){
        $this->setParam("usertypeinfo", $t);
    }
    public function IsFunctionExposed($func){        
        return igk_is_conf_connected();
    }
}
///<summary>used to store and manage global  user's group </summary>
/**
* used to store and manage global user's group
*/
final class IGKUserGroupController extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){ 
        return igk_db_get_table_name(IGK_TB_USERGROUPS);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){
        $tb=$this->getDataTableName();
        igk_reg_hook(IGKEvents::HOOK_DB_DATA_ENTRY, function($hook)use($tb){            
            if($hook->args[1] == $tb){
                $db=$hook->args[0];
                $db->insert($tb, array(IGK_FD_USER_ID=>1, IGK_FD_GROUP_ID=>2));
            }
        });
    }
}
///<summary> used for referencing global user's value data</summary>
/**
*  used for referencing global user's value data
*/
final class IGKUserReferenceModelCtrl extends IGKNonVisibleControllerBase{
    ///<summary></summary>
    /**
    * 
    */
    public function cancel_last_ref_number(){
        $m=$this->getEnvParam("lastModel");
        if($m){
            $r=igk_db_table_select_where($this->DataTableName, $m)->getRowAtIndex(0);
            $r->clNextValue--;
            igk_db_update($this, $this->DataTableName, $r);
            $this->setEnvParam("lastModel", null);
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function delete_key($key){
        return igk_db_delete($this, $this->DataTableName, array("clModel"=>$key));
    }
    ///<summary></summary>
    ///<param name="uid"></param>
    ///<param name="model"></param>
    /**
    * 
    * @param mixed $uid
    * @param mixed $model
    */
    public function get_ref_nextnumber($uid, $model){
        $db=array(IGK_FD_USER_ID=>$uid, "clModel"=>$model);
        $r=igk_db_table_select_where($this->DataTableName, $db, $this)->getRowAtIndex(0);
        if($r){
            return max($r->clNextValue, 1);
        }
        else{
            $db["clNextValue"]=1;
            igk_db_insert($this, $this->DataTableName, $db);
        }
        return 1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableName(){
        return igk_db_get_table_name(IGK_TB_USER_REF_MODELS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_UCB_REF_CTRL;
    }
    ///<summary></summary>
    ///<param name="uid"></param>
    ///<param name="model"></param>
    /**
    * 
    * @param mixed $uid
    * @param mixed $model
    */
    public function update_ref_nextnumber($uid, $model){
        $tb=array(IGK_FD_USER_ID=>$uid, "clModel"=>$model);
        $r=igk_db_table_select_where($this->DataTableName, $tb)->getRowAtIndex(0);
        if($r){
            $r->clNextValue++;
            igk_db_update($this, $this->DataTableName, $r);
        }
        else{
            $tb["clNextValue"]=1;
            igk_db_insert($this, $this->DataTableName, $tb);
        }
        $this->setEnvParam("lastModel", $tb);
        return 1;
    }
}
///<summary>who used API in the world</summary>
/**
* who used API in the world
*/
final class IGKWhoUseCtrl extends IGKNonVisibleControllerBase {
    ///<summary></summary>
    /**
    * 
    */
    public function clear_registrated_list(){
        if(igk_server_is_local()){
            igk_db_clear_table($this, igk_db_get_table_name(IGK_TB_WHO_USES));
        }
        else{
            $r=igk_createnode("response");
            $r->add("error")->Content= igk_const("IGK_ERROR_OP_NOT_ALLOWED");
            $r->add("message")->Content="Operation not allowed";
            igk_wl($r->RenderXML());
        }
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function get_registrated_list_xml(){
        $v=igk_db_get_entries($this, igk_db_get_table_name(IGK_TB_WHO_USES));
        $uri = igk_register_temp_uri(__CLASS__)."/viewpage";
        $selected = $this->getTempFlag("tabselected", 1);
        igk_wl(igk_db_view_result_node($v, $uri, $selected));
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataTableInfo(){
        ///REMARK: igk_default own this data
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        if(!IGKServerInfo::IsLocal()){
            $srv=igk_io_server_name();
            if(!IGKValidator::IsIpAddress($srv)){
                $domain=igk_get_domain_name($srv);
                $uri="http://www.".$domain;
                $d=IGK_ROOT_SERVER."/".$this->getUri("register_site&uri=".base64_encode($uri)."&ip=".igk_server()->SERVER_ADDR);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function register_site(){
        $uri=base64_decode(igk_getr("uri"));
        $rep=igk_createnode("reponse");
        $v_r=1;
        if($uri == null){
            $rep->add("error")->Content="uri is null";
            igk_wl($rep->RenderXML());
            $v_r=0;
        }
        if(!igk_server_request_from_balafon()){
            igk_wl(igk_render_xml_error(igk_const("IGK_ERROR_REQUEST_NOT_FROM_BALAFON_SERVER"), "Request not send from a [".IGK_PLATEFORM_NAME."] server")->RenderXML());
            $v_r=0;
        }
        if($v_r){
            $table = igk_db_get_table_name(IGK_TB_WHO_USES);
            $tab=array("clWebSite"=>$uri);
            $r=igk_db_table_select_row($table, $tab, $this);
            if($r === null){
                $tab["clIP"]=igk_getr("ip");
                $tab["clDateTime"]=igk_mysql_datetime_now();
                $h=igk_db_insert($this, $table, $tab);
                $msg=igk_createnode("div");
                $tn=$msg->addDiv()->setStyle("display:table-row");
                $tn->addDiv()->setStyle("display:table-cell")->Content="WebSite";
                $tn->addDiv()->setStyle("display:table-cell; width:100%;")->Content=$uri;
                $tn=$msg->addDiv()->setStyle("display:table-row");
                $tn->addDiv()->setStyle("display:table-cell")->Content="IPAddress";
                $tn->addDiv()->setStyle("display:table-cell; width:100%;")->Content=$tab["clIP"];
                $tn=$msg->addDiv()->setStyle("display:table-row");
                $tn->addDiv()->setStyle("display:table-cell")->Content="Date";
                $tn->addDiv()->setStyle("display:table-cell;width:100%;")->Content=$tab["clDateTime"];
                $dv=$msg->addDiv();
                $dv->addDiv()->Content="Response : OK";
                $dv->addObData($h);
                igk_mail_sendmail(IGK_AUTHOR_CONTACT, "no-reply-balafon@igkdev.com", "A Web Site registrated to balafon - [ ".$uri." ] ", $msg->Render());
                $rep->add("status")->Content=1;
                $rep->add("message")->setContent("Site added : ".$uri);
                $rep->RenderAJX();
            }
            else{
                $rep->add("error")->setContent("-1")->RenderAJX();
            }
        }
        igk_session_destroy();
        igk_exit();
    }
    ///<summary>register site for test</summary>
    /**
     * register site for test
    */
    public function register_site_test(){
        if(!IGKServerInfo::IsLocal()){
            $n=igk_createxmlnode("response");
            $n->add("message")->Content="Can't execute this at non local server";
            $n->RenderXML();
            igk_exit();
        }
        $_REQUEST["uri"] = base64_encode(IGK_WEB_SITE);
        $d=IGK_ROOT_SERVER."/".$this->getUri("register_site&uri=".$_REQUEST["uri"]."&ip=".igk_server()->SERVER_ADDR);
        $rep=igk_curl_post_uri($d);
        igk_exit();
    }
}
///<summary>represent the notification storage</summary>
/**
 * represent the notification storage
 */
class IGKNotifyStorage{
    private $tab;
    var $autohide;
    private $m_name;
    /**
     * return the name of this storage
     */
    public function getName(){
        return $this->m_name;
    }
    public function & __get($n){
        if ($n=="tab"){  
            return $this->tab;
        }
    }
    private function __construct(){
    }

    public function setAutohide($hide){
        $this->autohide = $hide;
    }
    ///<summary> set response</summary>
    /**
     * set notify response
     */
    public function setResponse(array $data){
        $this->tab = [$data];
    }
    public function addSuccessr($msg){
        $this->tab[] = ["type"=>"igk-success","msg"=>__($msg)];
    }
    public function addSuccess($msg){
        $this->tab[] = ["type"=>"igk-success","msg"=>$msg]; 
    }
    public static function Create(& $tab, $name){
        if ($tab === null){
            return null;
        }
        $cl = __CLASS__;
        $o = new $cl();
        $o->tab = & $tab; 
        $o->m_name = $name; 
        $o->autohide = true;
        return $o;
    }
    public function addMsg($msg){
        $this->tab[] = ["type"=>"default","msg"=>$msg];
    }
    public function addMsgr($msg){
        $this->addMsg(__($msg));
    }
    public function addError($msg){
        $this->tab[] = ["type"=>"danger","msg"=>$msg];
    }
    public function addErrorr($msg){
        $this->addError(__($msg));
    }
    public function clear(){
       array_splice($this->tab, 0);  
    }
    public function renderAJX(& $options=null){
        igk_die( __METHOD__ . " Not implement"); 
    }
    public function addWarning($msg){
        $this->tab[] = ["type"=>"warning","msg"=>$msg]; 
    }
    public function addWarningr($msg){
        $this->tab[] = ["type"=>"error","msg"=>__($msg)];
    }
    public function __call($name, $args){
        if (method_exists($this, $fc = "add".$name)){
     
            return $this->$fc(...$args);
        }
    }
}

///<summary>Notification controller. used to inform user of some modification</summary>
///<note>according to the notification type message targetnode expose class
///igk-notify_w for warning
///igk-notify-success for good message
///igk-notify_i for information
///igk-notify-danger for bad message
///</note>
///<obsolete />
/**
* Notification controller. used to inform user of some modification
*/
final class IGKNotificationCtrl extends BaseController implements IIGKNotifyMessage, ArrayAccess {
    private static $NotifyType = ["success"=>"addSuccess", "danger"=>'addError'];
    public function getGlobalStorage(){
        static $storage=null ;
        if ($storage === null){
            $storage = $this->getNotification("::global");
        }
        return $storage;
    }
	public function bind ($msg, $t='success'){		
		$fc = igk_getv(self::$NotifyType, $t, "addMsg");
		call_user_func_array([$this, $fc], [$msg]);
	}
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addError($msg){
        $this->TargetNode->add("div", array("class"=>"igk-notify igk-notify-danger"))->Content=$msg;
    }
    ///<summary></summary>
    ///<param name="msgcode"></param>
    /**
    * 
    * @param mixed $msgcode
    */
    public function addErrori($msgcode){
        $c=igk_error($msgcode);
        if($c){
            $li=igk_createnode("div", array("class"=>"alignl"));
            $li->addLabel()->Content="Message : ";
            $li->addspan()->Content=__($c["Msg"]);
            $this->addError($li->Render(null));
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function addErrorr($key){
        $this->addError(__($key, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addInfo($msg){
        $this->TargetNode->add("div", array("class"=>"igk-notify igk-notify-info"))->Content=$msg;
        $this->m_hasmsg=true;
    }
    ///<summary></summary>
    ///<param name="msgKeys"></param>
    /**
    * 
    * @param mixed $msgKeys
    */
    public function addInfor($msgKeys){
        $this->addInfo(__($msgKeys, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addMsg($msg){
       $mg = $this->getGlobalStorage();
       $mg->addMsg($msg);
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addMsgr($msg){
        $this->addMsg(__($msg, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    function addSuccess($msg){
        $mg = $this->getGlobalStorage();
        $mg->addSuccess($msg);        
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $message key
    */
    function addSuccessr($msg){
        $mg = $this->getGlobalStorage();
        $mg->addSuccessr($msg);
        // $this->TargetNode->addSuccessr($key);
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addWarning($msg){
        $mg = $this->getGlobalStorage();
        $mg->addWarning($msg);
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function addWarningr($msg){
        $this->addWarning(__($msg, array_slice(func_get_args(), 1)));
    }
    ///<summary>get auto hided</summary>
    /**
    * get auto hided
    */
    public function getAutoHided(){
        return $this->getGlobalStorage()->getAutoHided();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasMsg(){
        $mg = $this->getGlobalStorage();        
        return $mg->tab && count($mg->tab)>0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMsError(){
        return $this->m_hasmsg;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_NOTIFICATION_CTRL;
    }
    ///<summary>get notification item array storage</summary>
    /**
    * get notification item
    */
    public function getNotification($name="::global"){
        static $storage;

        if (empty($name)){  
            igk_die("notification name is empty"); 
        } 
        if ($storage === null){
            $storage = [];
        }
        if (isset($storage[$name])){
            return $storage[$name];
        } 
        $notify= & igk_app()->session->getReference("notifications"); 
        $c=null;
        if($notify == null){ 
            $notify = array($name=>[]);
        }
        else {
            if (!isset($notify[$name])){
                $notify[$name] = [];
            }
        }

        $tab = & igk_app()->Session->getData();
        $tab["notifications"] = & $notify;
        $tab =  & $notify[$name];
        if ($c = IGKNotifyStorage::Create($tab, $name)){

            $storage[$name]=$c;
            return $c;
        }
        return;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getNotificationEvent($name){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNotifyHost(){
        if($this->m_notifyhost === null)
            $this->m_notifyhost = $this->app->Doc->body;
        return $this->m_notifyhost;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $v = new IGKHtmlNotificationItemNode($this, "global");
        return $v;
    }
    ///<summary></summary>
    ///<param name="tagid"></param>
    /**
    * 
    * @param mixed $tagid
    */
    public function mark($tagid){
        if($this->m_marks == null)
            $this->m_marks=array();
        $this->m_marks[$tagid ]=1;
    }
    ///<summary>Render Noticiation node</summary>
    ///<param name="n"></param>
    ///<param name="name"></param>
    /**
    * Render Noticiation node
    * @param mixed $n
    * @param mixed $name
    */
    public function NotificationIsVisible($target, $host, $name){
        $c = null;
        if (empty($name)){
            $c = $this->getNotification("::global", true);
        }
        else
            $c = igk_notifyctrl($name);
 
        if ($c){ 
            $tab = $c->tab; 
            if (is_array($tab) && (count($tab)>0)){
                foreach($tab as $inf){
                    if (isset($inf["type"]) && isset($inf["msg"])){
                        $host->add("div")->setClass("igk-panel ".$inf["type"])->Content = $inf["msg"];                      
                    }
                }
                $c->clear(); 
                return true;
            }
        }   
        return false; 
    }
    ///<summary></summary>
    /**
    * 
    */
    public function notify_ajx(){
        $view=igk_getr("rv");
        $render=false;
        if(igk_is_ajx_demand()){
            if($this->HasMsg){
                if($this->getParam("ajx:renderincontext") !== true){
                    $this->setParam("ajx:renderincontext", true);
                    $d=igk_createnode("div")->addScript();
                    $uri=$this->getUri("notify_ajx&rv=1");
                    $d->Content=<<<EOF
(function(){ ns_igk.ajx.post('${uri}',null, ns_igk.ajx.fn.prepend_to_body); })();
EOF;
                    $d->RenderAJX();
                }
                else if($view){
                    $render=true;
                }
            }
        }
        else{
            $render=$this->HasMsg;
        }
        if($render){
            $this->TargetNode->RenderAJX();
            $this->m_hasmsg=false;
            $this->setParam("ajx:context", null);
            $this->setParam("ajx:renderincontext", null);
        }
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetExists($i){
        return false;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetGet($i){}
    ///<summary></summary>
    ///<param name="i"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $i
    * @param mixed $v
    */
    public function offsetSet($i, $v){
        $this->addMsg($v);
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetUnset($i){}
    ///<summary></summary>
    ///<param name="sender" default="null"></param>
    ///<param name="args" default="null"></param>
    /**
    * 
    * @param mixed $sender the default value is null
    * @param mixed $args the default value is null
    */
    public function pageFolderChanged($sender=null, $args=null){
        if($this->HasMsg){
            $this->TargetNode->ClearChilds();
            $this->View();
        }
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function registerNotification($name, $callable){
        igk_die(__METHOD__." registerNotification ");
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function resetNotification($name){}
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setAutohide($v){
        $this->TargetNode->setAutohide($v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setMsError($v){
        $this->m_hasmsg=$v;
    }
    ///<summary></summary>
    ///<param name="notifyhost"></param>
    ///<param name="name" default="null"></param>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $notifyhost
    * @param mixed $name the default value is null
    * @param mixed $options the default value is null
    */
    public function setNotifyHost($notifyhost, $name="::global", $options=null){

        if($notifyhost){
            $n=$this->getNotification($name);
            if ($n){
                $m = igk_createnotagnode();
                $s=new IGKHtmlSingleNodeViewer($m);
                $tab = igk_create_node_callback([$this, "NotificationIsVisible"], [$notifyhost, $name]);
                $notifyhost->setCallback("getIsVisible", $tab);
                $s->setCallback("getIsVisible", $tab);
                $notifyhost->add($s);
            }
        }
        return $this;
    }
    ///<summary>unregister notification</summary>
    ///<remark>if obj is null will clear the notification event list</remark>
    /**
    * unregister notification
    */
    public function unregisterNotification($name, $obj=null, $method=null){
        if(($obj == null) && ($method == null)){
            $this->resetNotification($name);
            return 1;
        }
        else{
            $e=igk_getv($this->m_notifyevents, $name);
            if($e){
                if($name == IGK_GLOBAL_EVENT && is_object($obj)){
                    return $e->removeObject($obj);
                }
                return $e->remove($obj, $method);
            }
        }
        return 0;
    }
    ///<summary>free notification item</summary>
    /**
    * free notification item
    */
    public function unsetNotication($name){
        if(isset($this->m_notificationChilds[$name])){
            unset($this->m_notificationChilds[$name]);
        }
    }
    ///<summary>Render notification controller</summary>
    /**
    * Render notification controller
    */
    public function View(){
        if(!$this->HasMsg){
            igk_html_rm($this->TargetNode);
        }
        else{
            $this->TargetNode->setIndex(-10000);
            $host=$this->NotifyHost;
            if($host !== null){
                igk_html_add($this->TargetNode, $host);
            }
        }
    }

    public function __call($name, $c){
        if (method_exists($this, $fc = "add".$name)){
            return $this->$fc(...$c);
        }
        return parent::__call($name, $c);
    }
}
///<summary>return script data</summary>
/**
* return script data
*/
final class IGKScriptController extends BaseController{
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SCRIPT_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getScript(){
        $tab=igk_app()->Doc->ScriptManager->getMergedContent();
        header('Content-type: Application/javascript;  charset=\"utf-8\";');
        igk_wl(igk_zip_output($tab->data));
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function initTargetNode(){
        return null;
    }
}
///<summary>Session controller. used to manage administraive session info.</summary>
/**
* Session controller. used to manage administraive session info.
*/
final class IGKSessionController extends BaseController {
    ///<summary></summary>
    /**
    * 
    */
    private function _viewTarget(){
        $this->getTargetNode()->ClearChilds();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function changeviewmode(){
        if(!igk_is_conf_connected()){
            return;}
        igk_set_env(IGK_ENV_NO_AJX_TEST, 1);
        $app=igk_app();
        $m=igk_getr("mode", 1);
        $app->setViewMode($m);
        igk_set_env(IGK_ENV_PAGEFOLDER_CHANGED_KEY, 1);
        $this->View();
        $app->Session->setRedirectTask("modview", 1);
        session_write_close();
        igk_navto_referer();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearAllS(){
        igk_kill_all_sessions();
        $l=igk_sys_srv_referer();
        if(empty($l))
            $l=igk_io_baseuri();
        igk_navto($l);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function clearAllSession(){
        if(igk_is_conf_connected()|| igk_server_is_local()){
            $tab=igk_sys_get_all_openedsessionid();
            $cid=session_id();
            $c=0;
            foreach($tab as $k=>$v){
                if($k == $cid)
                continue;
                unlink($v["file"]);
                $c++;
            }
            if($c > 0)
                igk_notifyctrl()->addMsg("Some session destroyed : ".$c);
        }
        igk_navtobaseuri();
    }
    ///<summary></summary>
    //@exposed
    /**
    * 
    */
    public function clearcache(){
        if(IGKServerInfo::IsLocal() || igk_is_conf_connected() || !igk_sys_env_production()){
            igk_clear_cache();
        } 
        igk_navto_referer();
    }
    ///<summary> clear session and navigate</summary>
    /**
    *  clear session and navigate
    */
    public function ClearS($navigate=true){ 
        $id = session_id();
        if ($id){
            igk_session_destroy();  
            $_SESSION=array();
        }
        $_rcu=explode("?", igk_io_request_uri())[0];
        if($navigate){
            $buri=0;
            $s=$_rcu;
            if($s && IGKString::EndWith($s, "/clr")){
                $s=igk_str_rm_last($s, "/clr");
                $_rcu=empty($s) ? "/": $s;
                $buri=1;
            }
            $m=igk_getr("r");
            if($m){
                $m=base64_decode($m);
                igk_navto($m);
            }
            $u=igk_sys_srv_referer();
            if(!empty($u)){
                igk_navto_referer();
            }
            else{
                if($buri){
                    igk_navto($_rcu);
                }
            }
            igk_navto(igk_io_baseuri());
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function configPropertyChanged(){
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ConfUserChanged(){
        $this->View();
    }
    ///<summary>call system force view on session controller</summary>
    /**
    * call system force view on session controller
    */
    public function forceview(){
        $doc=igk_app()->Doc;
        if(!$doc)
            return;
        igk_set_env(IGK_KEY_FORCEVIEW, 1);
        $doc->setup_document();
        igk_app()->ViewControllers(1);
        igk_notification_push_event(IGK_FORCEVIEW_EVENT, $this);
        igk_set_env(IGK_KEY_VIEW_FORCED, 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        if(igk_get_env("sys://error"))
            return 0;
        return !defined('IGK_NO_WEB') && !igk_const_defined('IGK_NO_SESSION_BUTTON') && (IGKServerInfo::IsLocal() || (!IGKUserAgent::isMobileDevice() && igk_is_conf_connected() && igk_getv(igk_app()->Configs, "allow_debugging", false)));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SESSION_CTRL;
    }
    ///<summary>determine if this controller need to register to view mecanism</summary>
    /**
    * determine if this controller need to register to view mecanism
    */
    public function getRegisterToViewMecanism(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        if(igk_is_atomic() || defined("IGK_INIT_SYSTEM"))
            return;
        $app=igk_app();
        $n=igk_get_cookie_name(igk_sys_domain_name()."/uid");
        $rs=igk_getv($_COOKIE, $n);
        if(!empty($rs)){ 
            try{

                $uid=igk_getv(explode(':', $rs), 0);
                $v=igk_user_info(IGK_UINFO_TOKENID, $uid);
                $d=substr($rs, strlen($uid) + 1);
                if($v && ($v->clValue == $d)){
                    $r=igk_get_user($uid);
                    if($r){
                        igk_getctrl(IGK_USER_CTRL)->setUser($r);
                        igk_user_store_tokenid($r);
                    }
                }
            } catch(Exception $db){
                igk_ilog("possible db connection failed");
                igk_clear_cookie($n);
            } 
        }
        IGKOwnViewCtrl::RegViewCtrl($this, 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        return new IGKHtmlSessionBlockNode();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function invmodule(){
        if(igk_get_env(__METHOD__))
            igk_die("Can't invoke module twice");
        igk_set_env(__METHOD__, 1);
        $q=igk_getr("q");
        $g=array();
        parse_str(igk_getv(parse_url("?".base64_decode($q)), 'query'), $g);
        $modn=$g["n"];
        $mod=igk_init_module(str_replace(".", "/", $modn));
        $access=$g["q"];
        $listener=igk_getctrl($g["ctrl"]);
        if($mod){
            $mod->Listener=$listener;
            $tab=igk_str_array_rm_empty(explode('/', $access));
            call_user_func_array(array($mod, $tab[0]), array_slice($tab, 1));
        }
        else{
            igk_ilog("/!\\ module {$modn} not found : ".igk_io_request_uri());
            igk_ilog($g);
        }
        igk_set_env(__METHOD__, null);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function notify_forceview(){
        R::LoadLang();
        $this->View();
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function onHandleSystemEvent($msg){
        switch($msg){
            case IGK_ENV_NEW_DOC_CREATED:
            $args=array_slice(func_get_args(), 1);
            $this->onSessionNewDocCreated($args[0], $args[1]);
            break;
        }
    }
    ///<summary></summary>
    ///<param name="o">object that initiate</param>
    ///<param name="e">document</param>
    /**
    * 
    * @param mixed $o
    * @param mixed $e
    */
    private function onSessionNewDocCreated($o, $e){
        if($e && !igk_const_defined('IGK_NO_SESSION_BUTTON')){
            $this->_viewTarget();
            $n= igk_html_node_clonenode($this->TargetNode);
            $n->setIndex(1000);
            $n->setCallBack("getIsVisible", array($this, "getIsVisible"));
            igk_html_add($n, $e->body);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function PageChanged(){
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function RunCron(){
        $c=igk_getr("ctrl");
        if($c){
            $c=igk_getctrl($c);
            BaseController::RunCrons($c);
            igk_exit();
        }
        $tab=array();
        $server= "BALAFON";//igk_server()->HTTP_USER_AGENT;
        $sessid=igk_getv($_COOKIE, 'PHPSESSID', session_id());
        $strCookie='PHPSESSID='.$sessid.'; path='.igk_get_cookie_path();
        $f=igk_data_get_cron_file();
        if(file_exists($f))
            $tab=igk_json_parse(igk_io_read_allfile($f));
        else
            $tab[]=igk_io_baseuri().$this->getUri("RunCron&ctrl=baobabtv");
        $doc=igk_get_document(__METHOD__);
        session_write_close();
        IGKOb::Start();
        foreach($tab as $v){
            if(!IGKValidator::IsUri($v) || ($v[0] == "?")){
                $v=igk_io_baseuri().$v;
            }
            $r=curl_init();
            if($r){
                curl_setopt($r, CURLOPT_URL, $v);
                curl_setopt($r, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($r, CURLOPT_SSL_VERIFYHOST, false);
                curl_setopt($r, CURLOPT_USERAGENT, $server);
                curl_setopt($r, CURLOPT_COOKIE, $strCookie);
                $data=curl_exec($r);
                curl_close($r);
            }
        }
        $d=IGKOb::Content();
        IGKOb::Clear();
        $doc->body->addBodyBox()->addDiv()->Content=$d;
        $doc->RenderAJX();
        $doc->Dispose();
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function update_setting(){
        $this->View();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){
        $t=$this->TargetNode;
        if($t){
            if($t && $this->IsVisible){
                igk_html_add($t, $this->doc->body);
                $this->_viewTarget();
            }
            else{
                igk_html_rm($t);
            }
        }
    }
}
///<summary>Controller used to shared content between all created document</summary>
/**
* Controller used to shared content between all created document
*/
final class IGKSharedContentHtmlItemCtrl extends BaseController {
    const notifybox="notifybox";
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getEntities(){
        return $this->m_entity;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function getEntity($n){
        $g=igk_getv($this->m_entity, $n);
        if(($g == null) && ($n == self::notifybox)){
            $g= new IGKHtmlSharedNotifyDialog();
            $this->regEntity("notifybox", $g);
        }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getm_entity(){
        return $this->getEnvParam("entities");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return IGK_SHARED_CONTENT_CTRL;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initTargetNode(){
        $c=new IGKHtmlSharedContentNode($this);
        return $c;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $node
    */
    public function regEntity($name, $node){
        $this->m_entity[$name]=$node;
    }
}
///represent a base class for a tool
/**
*/
abstract class IGKToolCtrlBase extends BaseController {
    ///<summary></summary>
    /**
    * 
    */
    public function doAction(){}
    ///<summary></summary>
    /**
    * 
    */
    public function getCanInitDb(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getImageUri(){
        return IGK_STR_EMPTY;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsAvailable(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsSystemController(){
        return true;
    }
    ///<summary></summary>
    ///<param name="ownernode"></param>
    /**
    * 
    * @param mixed $ownernode
    */
    public function hideTool($ownernode){
        igk_html_rm($this->TargetNode);
        $t=$this->TargetNode;
        $t->ClearChilds();
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function InitComplete(){
        parent::InitComplete();
        if($this->getIsAvailable()){
            igk_getctrl(IGKToolsCtrl::class)->RegisterTool($this);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function refreshToolView(){
        igk_getctrl(IGKToolsCtrl::class)->View();
    }
    ///<summary></summary>
    ///<param name="ownernode"></param>
    /**
    * 
    * @param mixed $ownernode
    */
    public function showTool($ownernode){
        igk_html_add($this->TargetNode, $ownernode);
        $t=$this->TargetNode;
        $t["class"]="dispib alignc alignt";
        $t["style"]="min-width: 96px; min-height:72px;";
        $t->ClearChilds();
        $d=$t->addDiv();
        $a=$d->add("a", array(
            "class"=>"alignc dispib",
            "href"=>$this->getUri("doAction")
        ));
        $resolver=IGKResourceUriResolver::getInstance();
        $c=$this->getImageUri();
        $m=$a->add("img", array("style"=>"width: 48px; height:48px;display:inline-block;"));
        if($c){
            $m->setSrc($c);
        }
        $a->addDiv()->Content=__("tool.".$this->Name);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function View(){}
}
///<summary> System Controllers Managers. store list of different controller table. </summary>
///<note></note>
/**
*  System Controllers Managers. store list of different controller table.
*/
final class IGKControllerManagerObject extends IGKObject {
    private $m_classReg;
    private $m_initEvent;
    private $m_register;
    private $m_registeredCtrl;
    private $m_tbcontrollers;
    private $m_tbviewcontrollers;
    private static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->m_tbcontrollers=array();
        $this->m_registeredCtrl=array();
        $this->m_tbviewcontrollers=array();
        $this->m_initEvent=0;
    }
    public function getControllerInstance($classname){
        $g = igk_getv($this->m_classReg, $classname);
        if ($g)
            return $g;
        foreach($this->m_tbcontrollers as $c){
            if (get_class($c) === $classname){
                $this->m_classReg[$classname] = $c;
                return $c;               
            }
        }
        $n  = $classname; 
        if (class_exists($n) && is_subclass_of($n, BaseController::class)){
            $o=new $n();
            $this->Register($n, $o);
            return $o;
        } else {
            igk_trace();
            igk_ilog("failed to initialize class instance : $classname");
            igk_exit();
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function __get($key){
        $key=strtolower($key);
        $c=igk_getv($this->m_tbcontrollers, $key);
        if($c){
            if(igk_is_class_incomplete($c)){
                unset($this->m_tbcontrollers[$key]);
                return null;
            }
            return $c;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function __set($key, $value){
        $key=strtolower($key);
        if($value === null){
            if(isset($this->m_tbcontrollers[$key]))
                unset($this->m_tbcontrollers[$key]);
            return;
        }
        else{
            if(is_object($value) && igk_reflection_class_extends(get_class($value), IGK_CTRLBASECLASS)){
            
                $this->m_tbcontrollers[$key]=$value;
            }
        }
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "Controllers [#".count($this->m_tbcontrollers)."]";
    }
    ///<summary></summary>
    ///<param name="s"></param>
    ///<param name="tab"></param>
    ///<param name="fname"></param>
    ///<param name="fsize"></param>
    ///<param name="x"></param>
    ///<param name="y"></param>
    ///<param name="cl"></param>
    /**
    * 
    * @param mixed $s
    * @param mixed $tab
    * @param mixed $fname
    * @param mixed $fsize
    * @param mixed $x
    * @param mixed $y
    * @param mixed $cl
    */
    private function _cm_measure($s, $tab, $fname, $fsize, $x, $y, $cl){
        $rc=(object)array("x"=>0, "y"=>0, "width"=>0, "height"=>0);
        if(is_array($tab)){
            foreach($tab as $v){
                if($v->WebParentCtrl == null){
                    $t=$this->_cm_measure($s, $v, $fname, $fsize, $x, $y, $cl);
                    $rc->height += $t->height;
                    $rc->width=max($rc->width, $t->x + $t->width);
                }
            }
        }
        else{
            return $this->renderController($s, $tab, $fname, $fsize, $x, $y, $cl);
        }
        return $rc;
    }
    ///generate
    /**
    */
    private function _initController($ctrl){
        $this->_registerCtrl($ctrl);
        BaseController::RegisterInitComplete($ctrl);
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initviewMecanism(){
        $this->m_tbviewcontrollers=array();
        $c=igk_get_defaultwebpagectrl();
        $tab=array_keys($this->m_tbcontrollers);
        foreach($tab as $k){
            $v=$this->m_tbcontrollers[$k];
            if($v){
                if(igk_is_class_incomplete($v)){
                    unset($this->m_tbcontrollers[$k]);
                    continue;
                }
                $this->registerToViewMecanism($v);
            }
        }
        if($c)
            $this->registerToViewMecanism($c);
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="regname" default="null"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $regname the default value is null
    */
    private function _registerCtrl($ctrl, $regname=null){
        $n=$ctrl->getName();
        $this->$n=$ctrl;
        if(!self::IsSystemController($ctrl)){
            $s=$regname ?? $ctrl->Configs->clRegisterName;
            if(!empty($s)){
                $rg=$this->getRegisters();
                if(isset($this->Registers->$s) && ($this->Registers->$s != null))
                    igk_die("you already register a controller with the name {$s} - please check configuration");
                $this->m_register->$s=$ctrl;
                return 1;
            }
        }
        return 0;
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    private function _sort_byConfigNodeIndex($a, $b){
        if($a->Configs->clTargetNodeIndex && $b->Configs->clTargetNodeIndex){
            $i=$a->Configs->clTargetNodeIndex;
            $j=$b->Configs->clTargetNodeIndex;
            return ($i == $j) ? 0: (($i < $j) ? -1: 1);
        }
        return strcmp($a->Name, $b->Name);
    }
    ///JUST: store to controller
    ///<summary>clear cache for base dir</summary>
    /**
    * clear cache for base dir
    */
    public static function ClearCache($bdir=null){
        $t=null;
        if($bdir == null)
            $bdir=igk_io_cachedir();
        // + | Clear assets folder
        if (is_dir($assets = igk_io_basedir()."/".IGK_RES_FOLDER)){
            IGKIO::RmDir($assets);
        }
        if (is_dir($bdir)){
            IGKIO::RmDir($bdir);           
            igk_io_w2file($bdir."/.htaccess", "deny from all", false);
            igk_raise_event("sys://cache/clear");
        }
        
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearCtrlCache(){
        $fc=self::FileCtrlCache();
        if(file_exists($fc)){
            unlink($fc);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function cm_controllerschema(){
        if(!defined("IGK_GD_SUPPORT")){
            igk_exit();
        }
        $y=14;
        $x=0;
        $fname=igk_io_currentrelativepath(igk_get_uvar("CONFIG_SCHEMA_FONT"));
        if(!file_exists($fname)){
            igk_exit();
        }
        $fsize=14;
        $cl=IGKColor::FromFloat(1.0);
        $tb=$this->getUserControllers();
        $s=IGKGD::Create(32, 32);
        $rect=$this->_cm_measure($s, $tb, $fname, $fsize, $x, $y, $cl);
        $s->Dispose();
        if(($rect->width<=0) || ($rect->height<=0))
            igk_exit();
        $x=40;
        $y=28;
        $s=IGKGD::Create($rect->width + 300 + (2 * $x), $rect->height + ($y));
        $s->Clear($cl);
        if(file_exists($fname)){
            foreach($tb as  $v){
                if($v->WebParentCtrl == null){
                    $t=$this->renderController($s, $v, $fname, $fsize, $x, $y, IGKColor::Black(), $rect->width + 150);
                    $y += $t->height;
                }
            }
        }
        header("Content-type: image/png");
        $s->Render();
        $s->Dispose();
        unset($s);
        igk_exit();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Count(){
        return count($this->m_tbcontrollers);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function defaultpagechanged(){
        $this->_initviewMecanism();
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function dropController($ctrl){
        if(!$ctrl)
            return false;
        $k=strtolower($ctrl->Name);
        $d=dirname($ctrl->getDeclaredFileName());
        $ctrl->dropController();
        $r=false;
        if(is_dir($d)){
            $r=IGKIO::RmDir($d, true);
        }
        unset($this->m_tbcontrollers[$k]);
        BaseController::UnRegisterInitComplete($ctrl);
        igk_notification_push_event(IGK_DROP_CTRL_EVENT, array($ctrl));
        return true;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    //@remove controller by name
    /**
    * 
    * @param mixed $name
    */
    public function dropControllerByName($name){
        $k=strtolower($name);
        if(isset($this->m_tbcontrollers[$k])){
            $ctrl=$this->m_tbcontrollers[$k];
            return $this->dropController($ctrl);
        }
        return false;
    }
    ///<summary>get file ctrl cache</summary>
    /**
    * get file ctrl cache
    */
    private static function FileCtrlCache(){
        return igk_io_syspath(IGK_FILE_CTRL_CACHE);
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    /**
    * 
    * @param mixed $classname
    */
    public function getControllerFromClass($classname){
        if($this->m_classReg == null)
            $this->m_classReg=array();
        if(isset($this->m_classReg[$classname]))
            return $this->m_classReg[$classname];
        foreach($this->m_tbcontrollers as  $v){
            if(get_class($v) == $classname){
                $this->m_classReg[$classname]=$v;
                return $v;
            }
        }
        return null;
    }
    ///<summary>Return the array of controller</summary>
    ///<return refout="true"></return>
    /**
    * Return the array of controller
    * @return *
    */
    public function & getControllers(){
        return $this->m_tbcontrollers;
    }
    ///<summary>get the current instance manager</summary>
    /**
    * get the current instance manager
    */
    public static function getInstance($callback=null){
        if(self::$sm_instance === null){
			$tab=array();
			self::$sm_instance = new IGKControllerManagerObject($tab);
			self::$sm_instance->InitControllers(igk_app(), $callback);
             
        }
        return self::$sm_instance;
    }
    ///<summary>get registerd global controller for specific fonctionnality</summary>
    /**
    * get registerd global controller for specific fonctionnality
    */
    public function getRegCtrl($name){
       
        if(($this->m_registeredCtrl != null) && isset($this->m_registeredCtrl[$name]))
            return $this->m_registeredCtrl[$name];
        return null;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getRegisters(){
        if($this->m_register == null)
            $this->m_register=igk_createobj();
        return $this->m_register;
    }
    ///return the user controller list.
    ///there is 2 controller type . framework controller and user controllers
    /**
    */
    public function getUserControllers($callbackfilter=null){
        $tab=$this->getControllers();
        $out=array();
        if(igk_count($tab) > 0){
            $tab_k=array_keys($tab);
            igk_usort($tab_k, "igk_key_sort");
            foreach($tab_k as $k){
                $v=$tab[$k];
                if(get_class($v) === __PHP_Incomplete_Class::class){
                    unset($tab[$k]);
                    continue;
                }
                if(IGKControllerManagerObject::IsSystemController($v) || IGKControllerManagerObject::IsIncludedController($v) || !$v->canModify)
                    continue;
                if($callbackfilter && !$callbackfilter($v))
                    continue;
                $out[]=$v;
            }
        }
        return $out;
    }
    ///<summary>init all controller</summary>
    /**
    * init all controller
    */
    private function InitControllers($apps, $init_app_callback=null){
        $_init_callback=function() use ($init_app_callback){
            if($init_app_callback)
                $init_app_callback();
            $this->onInitComplete();
        };
        if(igk_is_singlecore_app()){
            $this->_initController(new IGKSystemUriActionCtrl());
            $c=igk_sys_getconfig("default_controller");
            if(empty($c) || !class_exists($c, false)){
                igk_die("no controller found to be a single application");
            }
            $v_ctrl=new $c();
            $this->_registerCtrl($v_ctrl, null); // empty($rn) ? null: $rn);
            BaseController::RegisterInitComplete($v_ctrl);
            $_init_callback();
            return;
        }
        $no_cache=defined("IGK_NO_CACHE_LIB");
        $sysload=false;
        $fc=self::FileCtrlCache();
        if(!$no_cache){
            if(file_exists($fc)){
                foreach(explode(IGK_LF, igk_io_read_allfile($fc)) as $k){
            
                    $g=trim($k);
                    if(empty($g))
                        continue;
                    list($n, $rn) = explode("|", $g);
                    if(class_exists($n, false)){
                        $v_ctrl=new $n();
                        $this->_registerCtrl($v_ctrl, empty($rn) ? null: $rn);
                        BaseController::RegisterInitComplete($v_ctrl);                        
                        //igk_wln("load : ".$n);
                    } else {
                        igk_wln("failed to load : ".$n);
                    }
                } 
                $sysload=true;
            }
        }
        if(!$sysload){
            $sfc="GetCanCreateFrameworkInstance";
            $tempty=array();
            $m="";
            foreach(get_declared_classes() as $k=>$v){
                if(igk_reflection_class_extends($v, IGK_CTRLNONATOMICTYPEBASECLASS)){
                    continue;
                } 
                if(igk_reflection_class_extends($v, IGK_CTRLBASECLASS) && igk_ctrl_isactive($v)){
                    $v_rc=new ReflectionClass($v);
                    if($v_rc->isAbstract() || (method_exists($v, $sfc) && !call_user_func_array(array($v, $sfc), $tempty)))
                        continue;
                    $t=new $v();
                    $this->_registerCtrl($t);
                    BaseController::RegisterInitComplete($t);
                    $m .= $v."|".igk_getv($t->getConfigs(), "clRegisterName").IGK_LF;
                }
            }
            if(!$no_cache){
                igk_io_w2file($fc, $m, true);
                IGKSysCache::Init_CachedHook();
            }
        }
        if($init_app_callback)
            $init_app_callback();
        $this->onInitComplete();
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="new" default="false"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $new the default value is false
    */
    public function initCtrl($ctrl, $new=false){
        $n=strtolower($ctrl->Name);
        if(!isset($this->m_tbcontrollers[$n])){
            $this->$n=$ctrl;
            BaseController::RegisterInitComplete($ctrl);
        }
        $this->onInitComplete();
        if($new)
            $this->storeControllerLibCache();
    }
    ///used to invoke function and return response. main used in igk_api
    /**
    */
    public function InvokeFunctionUri($uri=null){
        $c=null;
        $f=null;
        if($uri == null){
            $c=igk_getru("c", null);
            $f=igk_getru("f", null);
        }
        else{
            $args=igk_getquery_args($uri);
            $c=str_replace("-", "_", igk_getv($args, "c"));
            $f=str_replace("-", "_", igk_getv($args, "f"));
        }
        if($c && $f){
            if($this->$c && $this->$c->IsFunctionExposed($f)){
                $this->$c->App->Session->URI_AJX_CONTEXT=IGKString::EndWith($f, IGK_AJX_METHOD_SUFFIX) || (igk_getr("ajx") == 1);
                return $this->$c->$f();
            }
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function InvokeNavUri($uri){
        $args=igk_getquery_args($uri);
        $c=str_replace("-", "_", igk_getv($args, "c"));
        $f=str_replace("-", "_", igk_getv($args, "f"));
        $p=igk_getv($args, "p");
        $l=igk_getv($args, "l");
        if($p){
            igk_getctrl(IGK_MENU_CTRL)->setPage($p, igk_getv($args, "pageindex", 0));
        }
        if($l){
            R::ChangeLang(igk_getv($args, "l"));
        }
        $bck=$_REQUEST;
        $arg=igk_io_arg_from($f);
        $_REQUEST=array_merge($bck, $args);
        if($c && $f){
            $ctrl=$this->$c;
            if(($ctrl) && method_exists(get_class($ctrl), $f) && $ctrl->IsFunctionExposed($f)){
                if(is_array($arg))
                    call_user_func_array(array($this->$c, $f), $arg);
                else{
                    if($arg)
                        $ctrl->$f($arg);
                    else
                        $ctrl->$f();
                }
            }
        }
        $_REQUEST=$bck;
    }
    ///<summary></summary>
    ///<param name="pattern"></param>
    /**
    * 
    * @param mixed $pattern
    */
    public function InvokePattern($pattern){
        return $this->InvokeUri($pattern->value, 1, $pattern);
    }
    ///<summary>use to invoke system controller method</summary>
    ///<return>the selected uri</return>
    /**
    * use to invoke system controller method
    */
    public function InvokeUri($uri=null, $defaultBehaviour=true, $pattern=null){

		
	   igk_sys_handle_uri();
        $c=null;
        $f=null;
        $args=null;
        $igk=igk_app();
        $igk->Session->URI_AJX_CONTEXT=0;
        if($uri == null){
            if(($p=igk_getr("p", null)) != null){
                if(igk_sys_is_page($p)){
                    $igk->CurrentPage=$p;
                }
            }
            if(igk_getr("l", null) != null){
                R::ChangeLang(igk_getr("l"));
            }
            if(igk_getr("history", 0) == 1){
                igk_debug_wln("notice:form history");
            }
            $c=igk_getru("c", null);
            $f=igk_getru("f", "invokeUri");
        }
        else{
            $args=igk_getquery_args($uri);
            $c=str_replace("-", "_", igk_getv($args, "c"));
            $f=str_replace("-", "_", igk_getv($args, "f"));
            $p=igk_getv($args, "p");
            $l=igk_getv($args, "l");
            if($p){
                igk_getctrl(IGK_MENU_CTRL)->setPage($p, igk_getv($args, "pageindex", 0));
                unset($args["p"]);
            }
            if($l){
                R::ChangeLang(igk_getv($args, "l"));
                unset($args["l"]);
            }
        }
        $arg=igk_io_arg_from($f);
        if($c && $f){ 
            $ctrl=$this->$c ?? ($pattern ? $pattern->ctrl: null) ?? igk_template_create_ctrl($c);
            if(!$ctrl){
                return null;
            }
            if(!method_exists(get_class($ctrl), $f)){
                igk_html_output(404);
                if(!igk_get_contents($ctrl, 404, ["method not found"])){
                    igk_die("method not exists --- > [".get_class($ctrl)."::".$f."] ".$uri);
                }
                igk_exit();
                return false;
            }
            if($f == IGK_EVALUATE_URI_FUNC){
                igk_app()->setBaseCurrentCtrl($ctrl);
            }

            if(($f == IGK_EVALUATE_URI_FUNC) || $ctrl->IsFunctionExposed($f)){
                igk_app()->Session->URI_AJX_CONTEXT=igk_is_ajx_demand() || IGKString::EndWith($f, IGK_AJX_METHOD_SUFFIX) || (igk_getr("ajx") == 1);
                $fd=null;
                // if(($fd=$ctrl->getConstantFile()) && file_exists($fd))
                //     include_once($fd);
                if(($fd=$ctrl->getDbConstantFile()) && file_exists($fd))
                    include_once($fd);
                unset($fd);
                igk_set_env(IGK_ENV_REQUEST_METHOD, strtolower(get_class($ctrl)."::".$f));
                igk_set_env(IGK_ENV_INVOKE_ARGS, $args);
				// igk_wln(__FILE__.":".__LINE__, "invoke : ".$f);
                if(is_array($arg))
                    call_user_func_array(array($ctrl, $f), $arg);
                else{
                    if($arg)
                        $ctrl->$f($arg);
                    else{
                        $ctrl->$f();
                    }
                }
                igk_set_env(IGK_ENV_INVOKE_ARGS, null);
                igk_set_env(IGK_ENV_REQUEST_METHOD, null);
                if($defaultBehaviour && $this->$c->App->Session->URI_AJX_CONTEXT){
                    igk_exit();
                }
            }
        }
        return $c;
    }
    ///<summary></summary>
    ///<param name="controller"></param>
    /**
    * 
    * @param mixed $controller
    */
    public static function IsIncludedController($controller){
        $instance=self::getInstance();
        $dir=null;
        if(is_string($controller)){
            $controller=strtolower($controller);
            $v=$instance->$controller;
            $dir=dirname($v->getDeclaredFileName());
        }
        else if(is_object($controller) && igk_reflection_class_extends(get_class($controller), IGK_CTRLBASECLASS)){
            $dir=dirname($controller->getDeclaredFileName());
        }
        $o=igk_io_basepath(igk_io_currentrelativepath(IGK_INC_FOLDER));
        $dir=igk_io_basepath($dir);
        $i=0;
        while((strlen($dir) > 0) && !preg_match("/^(\.|\/|\\\\)$/", $dir)){
            if($dir === $o){
                return true;
            }
            $dir=dirname($dir);
        }
        return false;
    }
    ///<summary>true if controller is a system controller otherwise false</summary>
    ///<param name="controller">controller name or controller instance </param>
    ///<note>for the plateform SystemController are controller stored in the Global Lib directory or in e </note>
    /**
    * true if controller is a system controller otherwise false
    * @param mixed $controller controller name or controller instance
    */
    public static function IsSystemController($controller){
        $instance=self::getInstance();
        if(is_string($controller)){
            $controller=strtolower($controller);
            $v=$instance->$controller;
            if($v->getDeclaredFileName() == __FILE__)
                return true;
        }
        $cl="";
        if(is_object($controller) && igk_reflection_class_extends($cl=get_class($controller), IGK_CTRLBASECLASS)){
            $v=strstr($controller->getDeclaredFileName(), IGK_LIB_DIR);
            $r=($v) || $controller->getIsSystemController() || BaseController::IsSysController($controller);
            return $r;
        }
        return false;
    }
    ///<summary>raise init complete event</summary>
    /**
    * raise init complete event
    */
    private function onInitComplete(){
        BaseController::InvokeRegisterComplete();
        if(defined('IGK_NO_WEB'))
            return;
        $this->_initviewMecanism();
        if(!$this->m_initEvent){
            $this->m_initEvent=1;
            igk_notification_reg_event("sys://event/defaultpagechanged", array($this, "defaultpagechanged"));
        }
    }
    ///<summary>register controller for specific fonctionnality</summary>
    /**
    * register controller for specific fonctionnality
    */
    public function register($name, $ctrl){
        if(empty($name) || ($ctrl == null))
            return false;
        if(isset($this->m_registeredCtrl[$name])){
            return false;
        }
        $this->m_registeredCtrl[$name]=$ctrl;
    }
    ///<summary>register controller to view mecanism</summary>
    /**
    * register controller to view mecanism
    */
    public function registerToViewMecanism($ctrl){
        if($ctrl && $ctrl->getRegisterToViewMecanism()){
            $this->m_tbviewcontrollers[$ctrl->getName()]=$ctrl;
        }
    }
    ///<summary>reload controller table list</summary>
    /**
    * reload controller table list
    */
    public function reloadModules($tab, $redirect, $initCtrl=1){
        igk_set_env("sys://reloadingCtrl", 1);
        $dir=igk_io_projectdir();
        //$g=$this->m_tbcontrollers;
        if($initCtrl){
            $this->m_tbcontrollers=array();
            $this->m_tbviewcontrollers=array();
        }
        igk_loadcontroller($dir);
        $classes=get_declared_classes();
        foreach($classes as $v){
            if(isset($tab[$v])){
                $n=$tab[$v];
                if(isset($this->m_tbcontrollers[$n])){
                    igk_die($n. " must not exists in controller tab");
                }
                continue;
            }
            if(igk_reflection_class_extends($v, IGK_CTRLNONATOMICTYPEBASECLASS)){
                continue;
            }
            if(is_subclass_of($v, IGK_CTRLBASECLASS) && igk_ctrl_isactive($v)){
                $v_rc=new ReflectionClass($v);
                if($v_rc->isAbstract())
                    continue;
                $t=new $v();
                $n=strtolower($t->Name);
                if(!isset($this->m_tbcontrollers[$n])){
                    igk_ilog_assert(igk_is_debug(), "register create new  : >>>> ".$v." ? ".isset($tab[$v]));
                    $this->$n=$t;
                    BaseController::RegisterInitComplete($t);
                }
                else{
                    unset($t);
                }
            }
        }
        $this->onInitComplete();
        igk_notification_push_event("sys://notify/ctrl/reload", $this);
        igk_set_env("sys://reloadingCtrl", null);
        if($redirect){
            igk_navtocurrent();
        }
    }
    ///<summary></summary>
    ///<param name="s"></param>
    ///<param name="v"></param>
    ///<param name="fname"></param>
    ///<param name="fsize"></param>
    ///<param name="x"></param>
    ///<param name="y"></param>
    ///<param name="cl"></param>
    ///<param name="indexpos"></param>
    /**
    * 
    * @param mixed $s
    * @param mixed $v
    * @param mixed $fname
    * @param mixed $fsize
    * @param mixed $x
    * @param mixed $y
    * @param mixed $cl
    * @param mixed $indexpos the default value is 0
    */
    private function renderController($s, $v, $fname, $fsize, $x, $y, $cl, $indexpos=0){
        $t=$s->DrawString($v->Name, $fname, $fsize, $x, $y, $cl);
        $s->DrawString($v->Configs->clTargetNodeIndex, $fname, $fsize, $indexpos, $y, $cl);
        if($v->Childs){
            $y += $t->height;
            $tab=$v->Childs;
            usort($tab, array($this, "_sort_byConfigNodeIndex"));
            $i=igk_count($tab);
            foreach($tab as  $m){
                $i--;
                $tt=$this->renderController($s, $m, $fname, $fsize, $x + 50, $y, $cl, $indexpos);
                $t->height += $tt->height;
                $t->width=max($tt->width + 50, $t->width);
                $y += $tt->height;
            }
        }
        return $t;
    }
    ///<summary>store system controller library</summary>
    /**
    * store system controller library
    */
    private function storeControllerLibCache(){
        $fc=self::FileCtrlCache();
        if(empty($fc))
            return;
        @unlink($fc);
        $m=" ";
        foreach($this->m_register as $k=>$v){
            $m .= $k."|".igk_getv($v->Configs, "clRegisterName").IGK_LF;
        }
        igk_io_w2file($fc, $m, true);
        IGKSysCache::Init_CachedHook();
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function unregisterToViewMecanism($ctrl){
        $s=$ctrl->Name;
        if(isset($this->m_tbviewcontrollers[$s])){
            unset($this->m_tbviewcontrollers[$s]);
        }
    }
    ///<summary></summary>
    ///<param name="forceview"></param>
    /**
    * 
    * @param mixed $forceview the default value is 0
    */
    public function ViewControllers($forceview=0){
        $u=igk_io_base_request_uri();
        $u = explode("?", $u)[0]; 
 
        if($forceview || (!igk_sys_is_subdomain()) && (preg_match('#^(\/|index.php)?$#', $u))){
            $ctrls=self::getInstance()->m_tbviewcontrollers;
            if($ctrls){
                foreach($ctrls as $k){
                    if(($k->getWebParentCtrl() !== null) || (igk_own_view_ctrl($k))){
                        continue;
                    }
                    $k->View();

                }
            }
        }
    }
}
///<summary>represent the core json string convertor</summary>
/**
* represent the core json string convertor
*/
final class IGKCoreJSon extends IGKObject{
    const ExpressionRegex="\\{(?<expression>(.)+)\\}";
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    private static function json_key($n){
        if(preg_match_all("/^(?P<delimiter>('|\")*)(?P<key>(.)+)\\1$/i", $n, $tab)){
            return $tab["key"][0];
        }
        return $n;
    }
    ///<summary></summary>
    ///<param name="expression"></param>
    /**
    * 
    * @param mixed $expression
    */
    public function ToDictionary($expression){
        $h=igk_json_expression($expression);
        if(is_int($h) && ($h<=0))
            return null;
        return igk_count($h) == 1 && is_object($m=igk_getv($h, 0)) ? $m: $h;
    }
}
///<summary>used to manage compoent global style. and instance of it will be store on session</summary>
/**
* used to manage compoent global style. and instance of it will be store on session
*/
final class IGKCssComponentStyle extends IGKObject{
    private $m_loadedStyles;
    ///.ctr
    /**
    */
    private function __construct(){
        $this->m_loadedStyles=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        $k=igk_get_instance_key(__CLASS__);
        $v=igk_app()->Session->getParam($k);
        if(!$v){
            $v=new IGKCssComponentStyle();
            igk_app()->Session->setParam($k, $v);
        }
        return $v;
    }
    ///<summary>create a register file</summary>
    /**
    * create a register file
    */
    public function regFile($file, $host=null){
        if(!file_exists($file))
            return null;
        if(isset($this->m_loadedStyles[$file])){
            $ct=igk_html_node_clonenode($this->m_loadedStyles[$file]);
            return $ct;
        }
        $c=igk_createnode("style");
        $c["type"]="text/css";
        $c->setCallback("AcceptRender", igk_create_expression_callback(<<<EOF

if (igk_env_count('sys://rendering/'.\$file)>1)
	return false;
\$bind->Content = igk_bind_host_css_style_file(\$file, \$extra[0]->Document ?? igk_get_document(\$host),\$host);
return true;
EOF
        , array("file"=>$file, "host"=>$host)));
        $c->setCallback("attachDispose", igk_create_expression_callback(<<<EOF
igk_ilog("disposall ");
unset(\$tab[\$file]);
EOF
        , array("file"=>$file, "n"=>$c, "tab"=>$this->m_loadedStyles)));
        $this->m_loadedStyles[$file]=$c;
        return $c;
    }
}
///<summary>used to store css properties</summary>
/**
* used to store css properties
*/
final class IGKCssStyle extends IGKObject {
    private $m_properties;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_properties=array();
    }
    ///<summary></summary>
    ///<param name="v"></param>
    ///<param name="level"></param>
    ///<param name="source"></param>
    /**
    * 
    * @param mixed $v
    * @param mixed $level
    * @param mixed $source
    */
    public function Load($v, $level, $source){
        $v=igk_css_treatstyle($v);
        $tab=igk_str_explode(array(":", ";"), $v);
        for($i=0; $i < igk_count($tab)-1; $i += 2){
            $this->m_properties[trim($tab[$i])]=trim($tab[$i + 1]);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function render(){
        $o="";
        foreach($this->m_properties as $k=>$v){
            $o .= $k.":".$v.";";
        }
        return $o;
    }
}
///<summary>Represente class: IGKCtrlInfo</summary>
/**
* Represente IGKCtrlInfo class
*/
final class IGKCtrlInfo extends IGKObject {
    private $m_SupportMultiple;
    private $m_addNew;
    private $m_childs;
    private $m_name;
    private $m_type;
    private $m_typeCreated;
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="type"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $type
    */
    public function __construct($name, $type){
        $this->m_childs=array();
        $this->m_name=$name;
        $this->m_type=$type;
        $this->m_addNew=true;
        $this->_initInfo();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initInfo(){
        foreach(get_declared_classes() as  $v){
            if(igk_reflection_class_extends($v, $this->Type) && !igk_reflection_class_isabstract($v)){
                $this->m_childs[]=$v;
            }
        }
        if(method_exists($this->Type, "SupportMultiple")){
            $this->m_SupportMultiple=call_user_func_array(array($this->Type, "SupportMultiple"), array());
            $this->m_addNew=$this->m_SupportMultiple || (count($this->m_childs) < 1);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanAddNew(){
        return $this->m_addNew;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCreated(){
        return $this->m_typeCreated;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return $this->m_name;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getType(){
        return $this->m_type;
    }
}
///<summary>obj that used the controller folder management</summary>
/**
* obj that used the controller folder management
*/
final class IGKCtrlZone extends IGKObject implements IIGKCtrlDirManagement {
    private $m_filename;
    ///<summary></summary>
    ///<param name="fname"></param>
    /**
    * 
    * @param mixed $fname
    */
    public function __construct($fname){
        $this->m_filename=$fname;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getContentDir(){
        return igk_io_dir($this->getDeclaredDir().DIRECTORY_SEPARATOR.IGK_CONTENT_FOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDataDir(){
        return igk_io_dir($this->getDeclaredDir().DIRECTORY_SEPARATOR.IGK_DATA_FOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDeclaredDir(){
        return dirname($this->m_filename);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return strtolower(__CLASS__."://".$this->m_filename);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getResourcesDir(){
        return $this->getDataDir()."/".IGK_RES_FOLDER;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getScriptDir(){
        return igk_io_dir($this->getDeclaredDir().DIRECTORY_SEPARATOR.IGK_SCRIPT_FOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getStylesDir(){
        return igk_io_dir($this->getDeclaredDir().DIRECTORY_SEPARATOR.IGK_STYLE_FOLDER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getViewDir(){
        return igk_io_dir($this->getDeclaredDir().DIRECTORY_SEPARATOR.IGK_VIEW_FOLDER);
    }
}
///<summary>Represente class: IGKDataBindingScript</summary>
/**
* Represente IGKDataBindingScript class
*/
final class IGKDataBindingScript extends IGKObject{
    private $_args;
    private $_shifparent;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->_args=array();
        $this->_shifparent=0;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __get($n){
        if($n === "args")
            return $this->peek();
        return null;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function __isset($n){
        return ($n === 'args');
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Count(){
        return count($this->_args);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getArgs(){
        return $this->peek();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function peek(){
        if((($c=count($this->_args)) - $this->_shifparent) > 0){
            return $this->_args[$c - (1 + $this->_shifparent)];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function pop(){
        return array_pop($this->_args);
    }
    ///<summary></summary>
    ///<param name="data"></param>
    /**
    * 
    * @param mixed $data
    */
    public function push($data){
        array_push($this->_args, $data);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function resetShift(){
        $this->_shifparent=0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function shiftParent(){
        $this->_shifparent=1;
    }
}
///<summary>represent datetime utility class</summary>
/**
* represent datetime utility class
*/
class IGKDateTime extends IGKObject {
    private $m_day;
    private $m_hour;
    private $m_min;
    private $m_month;
    private $m_sec;
    private $m_year;

    public static function GetAge($birthdate){
        return (new DateTime())->diff(new DateTime($birthdate))->y;
    }

    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKDateTime:[".$this->day."-".$this->month."-".$this->year."]";
    }
    ///<summary></summary>
    ///<param name="date1"></param>
    ///<param name="date2"></param>
    /**
    * 
    * @param mixed $date1
    * @param mixed $date2
    */
    public static function compareDate($date1, $date2){
        if(!$date1 || !$date2)
            return -2;
        $s1=$date1->getDate("Ymd");
        $s2=$date2->getDate("Ymd");
        return strcmp($s1, $s2);
    }
    ///<summary></summary>
    ///<param name="format"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $format
    * @param mixed $value
    */
    public static function CreateFrom($format, $value){
        $tab=(object)date_parse_from_format($format, $value);
        if($tab->error_count == 0){
            $d=new IGKDateTime();
            $d->m_day=$tab->day;
            $d->m_month=$tab->month;
            $d->m_year=$tab->year;
            $d->m_min=$tab->minute;
            $d->m_sec=$tab->second;
            $d->m_hour=$tab->hour;
            return $d;
        }
        else{
            if(IGKApp::$DEBUG)
                igk_show_prev($tab);
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="format"></param>
    /**
    * 
    * @param mixed $format
    */
    public function getDate($format){
        $s=$format;
        $s=str_replace("Y", $this->year, $s);
        $s=str_replace("m", $this->month, $s);
        $s=str_replace("d", $this->day, $s);
        $s=str_replace("H", $this->hour, $s);
        $s=str_replace("i", $this->min, $s);
        $s=str_replace("s", $this->sec, $s);
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getday(){
        return $this->m_day;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gethour(){
        return $this->m_hour;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getmin(){
        return $this->m_min;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getmonth(){
        return $this->m_month;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getsec(){
        return $this->m_sec;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getyear(){
        return $this->m_year;
    }
    ///<summary></summary>
    ///<param name="date1"></param>
    ///<param name="date2"></param>
    /**
    * 
    * @param mixed $date1
    * @param mixed $date2
    */
    public static function isDateEqual($date1, $date2){
        return self::compareDate($date1, $date2) == 0;
    }
    ///<summary></summary>
    ///<param name="date1"></param>
    ///<param name="date2"></param>
    /**
    * 
    * @param mixed $date1
    * @param mixed $date2
    */
    public static function isDateMonthEqual($date1, $date2){
        return (self::IsDateYearEqual($date1, $date2) === true) && ($date1->month == $date2->month);
    }
    ///<summary></summary>
    ///<param name="date1"></param>
    ///<param name="date2"></param>
    /**
    * 
    * @param mixed $date1
    * @param mixed $date2
    */
    public static function isDateYearEqual($date1, $date2){
        if(!$date1 || !$date2)
            return -2;
        return $date1->year == $date2->year;
    }
}
///<summary>Represente class: IGKDbCacheData</summary>
/**
* Represente IGKDbCacheData class
*/
final class IGKDbCacheData extends IGKObject{
    var $Data;
    var $DateTime;
    ///<summary></summary>
    /**
    * 
    */
    public function Expires(){
        if($this->DateTime){
            $s=igk_time_span("Ymd His", $this->DateTime);
            $d=igk_time_span("Ymd His", date('Ymd His'));
            return $d > $s;
        }
        return true;
    }
}
///<summary> represent IGKDbEntiry object </summary>
/**
*  represent IGKDbEntiry object
*/
class IGKDbEntity extends IGKObject {
    private $m_db_origin;
    private $m_table_origin;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $value
    */
    public function __set($name, $value){
        parent::__set($name, $value);
        igk_hook("DBProperyChanged", array($this));
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKDbEntity";
    }
}
///<summary>Represente class: IGKDbEntryToLoad</summary>
/**
* Represente IGKDbEntryToLoad class
*/
final class IGKDbEntryToLoad extends IGKObject{
    var $ctrl;
    var $entries;
    var $tablename;
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="tablename"></param>
    ///<param name="entries"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $tablename
    * @param mixed $entries
    */
    public function __construct($ctrl, $tablename, $entries){
        $this->ctrl=$ctrl;
        $this->tablename=$tablename;
        $this->entries=$entries;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function loadEntries(){
        igk_db_load_entries($this->ctrl, $this->tablename, $this->entries);
    }
}
///<summary>Represente class: IGKDbExpression</summary>
/**
* Represente IGKDbExpression class
*/
class IGKDbExpression extends IGKObject implements IIGKHtmlGetValue{
    protected $m_v;
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function __construct($value=null){
        $this->m_v=$value;
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function getValue($o=null){
        return $this->m_v;
    }
    public static function Create($expression){
        $g = new static($expression);
        $g->m_v = $expression;
        return $g;
    }
}
///<summary>Represente class: IGKDbUserProfile</summary>
/**
* Represente IGKDbUserProfile class
*/
class IGKDbUserProfile extends IGKObject {
    private $m_apps;
    private $m_user;
    ///<summary></summary>
    ///<param name="s"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $s
    * @param mixed $args
    */
    public function __call($s, $args){
        return call_user_func_array(array($this->m_user, $s), $args);
    }
    ///<summary></summary>
    ///<param name="u"></param>
    ///<param name="apps"></param>
    /**
    * 
    * @param mixed $u
    * @param mixed $apps
    */
    public function __construct($u, $apps){
        $this->m_user=$u;
        $this->m_apps=$apps;
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public function __get($s){
        if(method_exists($this, "get".$s)){
            return call_user_func(array($this, "get".$s), null);
        }
        return $this->m_user->$s;
    }
    ///<summary></summary>
    ///<param name="s"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $s
    * @param mixed $v
    */
    public function __set($s, $v){
        if(!$this->_setIn($s, $v))
            $this->m_user->$s=$v;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCtrl(){
        return $this->m_apps;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUser(){
        return $this->m_user;
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public function initiliazeSetting($s){}
}

///<summary>Represente class: IGKDynamicObject</summary>
/**
* Represente IGKDynamicObject class
*/
final class IGKDynamicObject extends IGKObject {
    private $m_properties;
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="arguments"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $arguments
    */
    public function __call($name, $arguments){
        if(isset($this->m_properties[$name])){
            return call_user_func_array($this->m_properties[$name], $arguments);
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_properties=array();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function __get($name){
        if(isset($this->m_properties[$name]))
            return $this->m_properties[$name];
        return parent::__get($name);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $v
    */
    public function __set($name, $v){
        if(!$this->_setIn($name, $v)){
            $this->m_properties[$name]=$v;
        }
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__."#";
    }
    ///<summary></summary>
    ///<param name="data"></param>
    /**
    * 
    * @param mixed $data
    */
    public function initProperties($data){
        if($data) foreach($data as $k=>$v){
            $this->m_properties[$k]=$v;
        }
    }
}
///<summary>represent a event method pointer</summary>
/**
* represent a event method pointer
*/
class IGKEvents extends IGKObject {
    const HOOK_APP_PRESENTATION=0xa01;
    const HOOK_CACHE_RES_CREATED="CacheResourceCreated";
    const HOOK_DB_DATA_ENTRY="db_dataentry";
    const HOOK_DB_INIT_COMPLETE ="db_init_complete";
    const HOOK_DB_INIT_ENTRIES = "db_init_entries";
    const HOOK_HTML_BODY="html_body";
    const HOOK_HTML_FOOTER="html_footer";
    const HOOK_HTML_HEAD="html_head";
    const HOOK_HTML_META="html_meta";
    const HOOK_PAGEFOLDER_CHANGED="sys_pagefolder";
    const HOOK_SCRIPTS="html_load_scripts";
    const HOOK_USER_ADDED="sys_user_added";
    const USER_PWD_CHANGED = "user pwd changed";
    const HOOK_MODEL_INIT = "db_init_model_macros";
    const HOOK_AUTLOAD_CLASS = "sys_autoload_class";
    const VIEWCOMPLETE=0x1;
    private $m_methods;
    private $m_name;
    private $m_owner;
    private $m_singlemethod;
    ///<summary></summary>
    ///<param name="owner"></param>
    ///<param name="name"></param>
    ///<param name="single" default="false"></param>
    /**
    * 
    * @param mixed $owner
    * @param mixed $name
    * @param mixed $single the default value is false
    */
    public function __construct($owner, $name, $single=false){
        $this->m_owner=$owner;
        $this->m_methods=array();
        $this->m_singlemethod=$single;
        $this->m_name=$name;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__."[".$this->m_name.";for[". get_class($this->m_owner)."]]";
    }
    ///<summary>register a class method to this</summary>
    ///<param class="class">mixed class or callable</param>
    ///<param class="method">if class method is a name</param>
    /**
    * register a class method to this
    * @param  mixed $class or callable
    * @param mixed $method if class method is a name
    */
    public function add($class, $method=null){
        if($this->m_singlemethod){
            if($this->Count()>=1){
                $this->Clear();
            }
        }
        $_info=null;
        $_info=IGKAppMethod::Create($class, $method, $this);
        if($_info){
            if(!$_info->IsRegistered($this->m_methods, $this)){
                $this->m_methods[]=$_info;
                $_info->setParentEvent($this);
                return $_info;
            }
            else{
                return null;
            }
        }
        else{
            igk_die("can't add event info is null.[== ".$this->m_name. " ".$method);
        }
        return null;
    }
    ///<summary>invoke resgistrated method</summary>
    /**
    * invoke resgistrated method
    */
    public function Call($sender, $args){
        if($this->m_methods){
            foreach($this->m_methods as $v){
                $v->Invoke($sender, $args);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->m_methods=array();
    }
    ///<summary>enumerate registrated methods</summary>
    /**
    * enumerate registrated methods
    */
    public function enumerateMethod($callback){
        foreach($this->m_methods as $k){
            $callback($k);
        }
    }
    ///get the number of method in this events
    /**
    */
    public function getCount(){
        return count($this->m_methods);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getInfo(){
        return $this->__toString(). " count # ".igk_count($this->m_methods);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsDebugging(){
        return igk_get_env("sys://event/isdebugging/".$this->m_name, 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMethodCount(){
        return igk_count($this->m_methods);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        return $this->m_name;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getOwner(){
        return $this->m_owner;
    }
    ///<summary></summary>
    ///<param name="class"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $class
    * @param mixed $method
    */
    public function remove($class, $method){
        for($i=0; $i < count($this->m_methods); $i++){
            $k=$this->m_methods[$i];
            if($k->match($class, $method)){
                $meth=$this->m_methods[$i];
                unset($this->m_methods[$i]);
                $this->m_methods=array_values($this->m_methods);
                $k->setParentEvent(null);
                return 1;
            }
        }
        return 0;
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="name" default="IGK_FUNC_KEY"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $name the default value is IGK_FUNC_KEY
    */
    public function removeObject($obj, $name=IGK_FUNC_KEY){
        $tab=array();
        $r=0;
        for($i=0; $i < count($this->m_methods); $i++){
            $meth=$this->m_methods[$i];
            if($meth->matchParam($name, $obj)){
                $r=1;
                $meth->setParentEvent(null);
                continue;
            }
            $tab[]=$meth;
        }
        $this->m_methods=$tab;
        return $r;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setIsDebugging($v){}
}
///<summary>format string value</summary>
/**
* format string value
*/
final class IGKFormatGetValueString extends IGKObject implements IIGKHtmlGetValue {
    private $m_member;
    private $m_obj;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKFormatGetValueString::" . $this->getValue();
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="property"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $property
    */
    public static function Create($obj, $property){
        if(!is_object($obj))
            return null;
        $out=new IGKFormatGetValueString();
        $out->m_obj=$obj;
        $out->m_member=$property;
        return $out;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $c=$this->m_member;
        $v=$this->m_obj->$c;
        return IGKHtmlUtils::GetValue($v);
    }
}
///<summary>Represente class: IGKHtmlAHref</summary>
/**
* Represente IGKHtmlAHref class
*/
class IGKHtmlAHref extends IGKObject implements IIGKHtmlGetValue {
    const OWNER=2;
    const URI=1;
    private $_;
    ///<summary></summary>
    ///<param name="a"></param>
    /**
    * 
    * @param mixed $a
    */
    public function __construct($a){
        $this->_=array();
        $this->_[self::OWNER]=$a;
    }
    ///<summary></summary>
    ///<param name="option"></param>
    /**
    * 
    * @param mixed $option
    */
    private function _checkLnk($option){
        $bck=$this->getUri();
        $owner=$this->getOwner();
        if(!is_string($bck)){
            return $bck;
        }
        $m=igk_xml_is_mailoptions($option);
        if(IGKValidator::IsUri($bck)){
            if(igk_xml_is_cachingrequired($option)){
                $s=igk_io_baseuri();
                if(strstr($bck, $s)){
                    return "./".igk_str_rm_start(substr($bck, strlen($s)), '/');
                }
            }
            return $bck;
        }
        $s=preg_replace_callback("/%(?P<name>[^%]+)%/i", function($m){
            switch($m["name"]){
                case "base":
                return igk_io_baseuri();
                case "base_config":
                return igk_io_baseuri()."/Configs/";
            }
            return "";
        }
        , $bck);
        $bck=$s;
        $dx=igk_getv(explode("?", str_replace(igk_io_baseuri(), "", $bck)), 0);
        if(!empty($dx)){
            $dx=igk_io_basedir().$dx;
            if(is_dir($dx) && !preg_match("/\/$/", $dx)){
                $m=igk_getv(explode("?", $bck), 0);
                $r=str_replace($m, igk_io_fullpath2fulluri($dx)."/", $bck);
                return $r;
            }
        }
        $dir=igk_io_basedir().$bck;
        if($owner->domainLink){
            if(preg_match("/^\/[^\/](.)+$/", $bck) && !igk_sys_is_subdomain()){
                $u=igk_io_baseuri().$bck;
                return $u;
            }
        }
        if($owner->domainLink && igk_sys_is_subdomain()){
            $u="";
            if(IGKValidator::IsUri($bck)){
                $u=$bck;
            }
            else{
                $uri=new IGKHtmlUri();
                $u=igk_sys_srv_uri_scheme()."://".igk_sys_domain_name().$uri->getValue($option);
            }
            $dn=igk_get_domain($u);
            if(!empty($dn) && (igk_sys_current_domain_name() != $dn)){
                $u .= (strpos($u, '?') !== false) ? "&": "?";
            }
            return $u;
        }
        if($m){
            $uri=new IGKHtmlUri();
            $uri->setValue($bck);
            return $uri->getValue($option);
        }
        else{
            if(!IGKValidator::IsUri($bck) || preg_match("#\.\/#", $bck)){}
        }
        return $bck;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDesignMode(){
        return igk_is_design_mode();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getOwner(){
        return igk_getv($this->_, self::OWNER);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUri(){
        return igk_getv($this->_, self::URI);
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        return $this->_checkLnk($options);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setUri($v){
        $this->_[self::URI]=$v;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setValue($v){
        $this->setUri($v);
    }
}
///<summary>Represente class: IGKHtmlActiveAttrib</summary>
/**
* Represente IGKHtmlActiveAttrib class
*/
final class IGKHtmlActiveAttrib extends IGKObject {
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        $key='sys://html/active/attribInstance';
        $b=igk_get_env($key);
        if($b)
            return $b;
        $b=new IGKHtmlActiveAttrib();
        igk_set_env($key, $b);
        return $b;
    }
}
///<summary>represent a html attrib collection</summary>
///<note>2 type of attribute. active attribute | default attribute</note>
/**
* represent a html attrib collection
*/
class IGKHtmlAttribs extends IGKObject implements ArrayAccess, Iterator {
    const ACTIVATE=1;
    const ATTRIBS=2;
    const ITERATOR=3;
    const OWNER=4;
    private $_f;
    ///<summary></summary>
    ///<param name="owner"></param>
    /**
    * 
    * @param mixed $owner
    */
    public function __construct($owner){
        if(($owner === null) || !is_object($owner) || (is_object($owner) && !igk_reflection_class_extends(get_class($owner), IGK_HTML_ITEMBASE_CLASS)))
            igk_die("owner must be a HTML Item Base");
        $this->_f=new IGKFv();
        $this->tobj="base";
        $this->_f->setFlag(self::OWNER, $owner);
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKHtmlAttribs [".$this->getcount()."] : ".$this->tobj;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initActivateAttrib(){
        $g=array();
        $this->_f->setFlag(self::ACTIVATE, $g);
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initattribs(){
        $g=array();
        $this->_f->setFlag(self::ATTRIBS, $g);
        return $g;
    }
    ///<summary>used to activate an attributes</summary>
    /**
    * used to activate an attributes
    */
    public function activate($n){
        if(empty($n))
            return;
        $g=$this->getActivateAttribs() ?? $this->_initActivateAttrib();
        $g[$n]=1;
        $this->_f->updateFlag(self::ACTIVATE, $g);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->_f->Clear();
    }
    ///<summary></summary>
    /**
    * 
    */
    function current(){
        $o=$this->_f->getFlag(self::ITERATOR);
        $a=$this->getActivateAttribs();
        $v_out=isset($a[$o->it_key]) ? IGKHtmlActiveAttrib::getInstance(): $o->it_vtab[$o->it_key];
        return $v_out;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public function deactivate($n){
        $g=$this->_f->getFlag(self::ACTIVATE);
        if($g){
            unset($g[$n]);
            $this->_f->updateFlag(self::ACTIVATE, $g);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Dispose(){
        foreach($this->getAttributes() as $v){
            if(is_object($v) && method_exists(get_class($v), __FUNCTION__)){
                $v->Dispose();
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getActivateAttribs(){
        $g=$this->_f->getFlag(self::ACTIVATE);
        if($g)
            return $g;
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAttributes(){
        return $this->_f->getFlag(self::ATTRIBS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCount(){
        $c=0;
        $g=$this->_f->getFlag(self::ACTIVATE);
        $c=igk_count($this->getAttributes()) + ($g ? igk_count($g): 0);
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNS(){
        return $this->_f->getFlag(IGK_DEFINEDNS_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getOwner(){
        return $this->_f->getFlag(self::OWNER);
    }
    ///<summary></summary>
    /**
    * 
    */
    function key(){
        $o=$this->_f->getFlag(self::ITERATOR);
        return $o->it_key;
    }
    ///<summary></summary>
    /**
    * 
    */
    function next(){
        $o=$this->_f->getFlag(self::ITERATOR);
        $o->it_index++;
        if($o->it_index < $o->it_total){
            $o->it_key=$o->it_keys[$o->it_index];
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetExists($key){
        if(is_object($key))
            igk_die("offsetExists ::keys is object ");
        $g=$this->getAttributes();
        return isset($g[$key]);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        $g=$this->getAttributes();
        if($g && isset($g[$key]))
            return $g[$key];
        return null;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    function offsetSet($key, $value){
        $o=$this->getOwner();
        switch(strtolower($key)){
            case "class":{
                $attr=$this->getAttributes();
                if($value === null){
                    unset($attr[$key]);
                }
                else{
                    if(get_class($o) === IGKXmlNode::class){
                        $attr[$key]=$value;
                    }
                    else{
                        $g=igk_getv($attr, $key);
                        if(($g == null) || !is_object($g)){
                            $g=new IGKHtmlClassValueAttribute($this);
                            $attr[$key]=$g;
                        }
                        $g->add($value);
                    }
                }
                $this->_f->updateFlag(self::ATTRIBS, $attr);
            }
            break;
            case "rmclass":
            $tb=explode(" ", $value);
            foreach($tb as  $v){
                $v=trim($v);
                if(empty($v))
                    continue;
                $this->offsetSet("class", "-".$v);
            }
            break;
            default:
            if(IGKString::StartWith($key, 'igk:')){
                $ck=substr($key, 4);
                if($ck == "param"){
                    return;
                }
                if(!$o->setSysAttribute($ck, $value, $o->LoadingContext)){
                    $this->offsetSetExpression($key, $value);
                }
            }
            else{
                $this->offsetSetExpression($key, $value);
            }
            break;
        }
    }
    ///<summary></summary>
    ///<param name="key">the key of expression to set</param>
    ///<param name="value">value to evaluate</param>
	///<remark >every expression key must start with '@igk:expression' name or value will be set to default </summary>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    function offsetSetExpression($key, $value){
        if(preg_match("/^@igk:expression/", $key)){
            if((($g=$this->getAttributes()) !==null) || (($g = $this->_initattribs())!==null))
			{
                if($value === null)
                    unset($g[$key]);
                else
                    $g[$key]=new IGKHtmlExpressionAttribute($value);
				$this->_f->updateFlag(self::ATTRIBS, $g);
            }
            return;
        }
        $this->Set($key, $value);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetUnset($key){
        $g=$this->getAttributes();
        if($g){
            unset($g[$key]);
            $this->_f->freeFlag(self::ATTRIBS);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    function rewind(){
        $attr=$this->getAttributes() ?? array();
        $g=$this->_f->getFlag(self::ACTIVATE) ?? array();
        if($g){
            $attr["@activated"]=$g;
        }
        $o=igk_createobj();
        $o->it_vtab=$attr;
        $o->it_index=0;
        $o->it_total=igk_count($o->it_vtab);
        $o->it_keys=$o->it_vtab ? array_keys($o->it_vtab): null;
        if($o->it_total > 0)
            $o->it_key=$o->it_keys[0];
        else
            $o->it_key=null;
        $this->_f->setFlag(self::ITERATOR, $o);
    }
    ///<summary>set the attribute</summary>
    ///<remark>if value is null then the value will be unset</remark>
    /**
    * set the attribute
    */
    function Set($key, $value){
        if(@preg_match("/^xmlns(:(?P<prefix>(.)+)){0,1}$/", trim($key), $tab)){
            $ns=$this->_f->getFlag(IGK_DEFINEDNS_FLAG) ?? array();
            if($value !== null){
                if(isset($tab["prefix"])){
                    $ns[$tab["prefix"]]=$value;
                }
                else{
                    $ns["@global"]=$value;
                }
            }
            else{
                if(isset($tab["prefix"])){
                    unset($ns[$tab["prefix"]]);
                }
                else
                    unset($ns["@global"]);
            }
            if(igk_count($ns)){
                $this->_f->setFlag(IGK_DEFINEDNS_FLAG, $ns);
            }
            else{
                $this->_f->unsetFlag(IGK_DEFINEDNS_FLAG);
            }
            return;
        }
        $g=$this->getAttributes() ?? $this->_initattribs();
        if($value === null){
            unset($g[$key]);
        }
        else
            $g[$key]=$value;
        $this->_f->updateFlag(self::ATTRIBS, $g);
    }
    ///<summary>transform to array</summary>
    /**
    * transform to array
    */
    public function ToArray(){
        return $this->getAttributes();
    }
    ///<summary>transform key to lower</summary>
    /**
    * transform key to lower
    */
    public function ToArrayi(){
        $d=[];
        foreach($this->getAttributes() as $k=>$v){
            $d[strtolower($k)
            ]=$v;
        }
        return $d;
    }
    ///<summary></summary>
    /**
    * 
    */
    function valid(){
        $o=$this->_f->getFlag(self::ITERATOR);
        $v=(($o->it_index>=0) && ($o->it_index < $o->it_total));
        if(!$v){
            $this->_f->unsetFlag(self::ITERATOR);
        }
        return $v;
    }
}
///<summary>Represente class: IGKHtmlChildElementCollections</summary>
/**
* Represente IGKHtmlChildElementCollections class
*/
class IGKHtmlChildElementCollections extends IGKObject implements ArrayAccess, Iterator {
    const ITERATOR=1;
    private $m_;
    private $m_childs;
    private $m_o;
    ///<summary></summary>
    ///<param name="owner"></param>
    /**
    * 
    * @param mixed $owner
    */
    public function __construct($owner){
        $this->m_o=$owner;
        $this->m_childs=array();
        $this->m_=new IGKFv();
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function __get($key){
        $item=0;
        if(is_numeric($key)){
            $item=$this->m_childs[$key];
        }
        else
            $item=$this->m_o->getElementById($key);
        return $item;
    }
    ///<summary>get Serialize Html Items array keys</summary>
    /**
    * get Serialize Html Items array keys
    */
    public function __sleep(){ 
        $t=igk_reflection_get_member($this);
        if(($this->m_ == null) || $this->m_->isEmpty()){
            unset($t["\0".__CLASS__."\0m_"]);
        }
        if(($c=$this->getCount()) == 0){
            unset($t["\0".__CLASS__."\0m_childs"]);
        }
        if(count($t)==0){
           return array();
        }
        return array_keys($t);
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "HtmlChilds [ ".count($this->m_childs)." ]";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __wakeup(){
        if($this->m_ === null){
            $this->m_=new IGKFv();
        }
        if($this->m_childs === null){
            $this->m_childs=array();
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->m_childs=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    function current(){
        $o=$this->m_->getFlag(self::ITERATOR);
        return $this->m_childs[$o->it_index];
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Dispose(){
        $t=$this->ToArray();
        $ti=0;
        foreach($t as $k){
            if($k){
                $k->Dispose();
            }
            else{
                igk_die("was disposed?");
            }
            $ti++;
        }
        return $ti;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCount(){
        return $this->m_childs ? count($this->m_childs) : 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getKeys(){
        return array_keys($this->m_childs);
    }
    ///<summary></summary>
    /**
    * 
    */
    function key(){
        $o=$this->m_->getFlag(self::ITERATOR);
        return $o->it_index;
    }
    ///<summary></summary>
    /**
    * 
    */
    function next(){
        $o=$this->m_->getFlag(self::ITERATOR);
        $o->it_index++;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetExists($key){
        $v=($key>=0) && ($key < count($this->m_childs)) && isset($this->m_childs[$key]);
        return $v;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        if(isset($this->m_childs[$key]))
            return $this->m_childs[$key];
        return null;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function offsetSet($key, $value){
        if(empty($key)){
            if($value === null){
                igk_die($key." try to set null not allowed. ");
            }
            $this->m_childs[]=$value;
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetUnset($key){
        $tab=$this->m_childs;
        if(count($tab)<=0)
            return;
        $p=igk_getv($tab, $key, null);
        if($p != null){
            unset($tab[$key]);
            if(count($tab) == 0){
                $this->m_childs=array();
            }
            else{
                $this->m_childs=array_values($tab);
            }
            if((count($tab) > 0) && (igk_getv($this->m_childs, 0, null) == null)){
                igk_show_prev(array_keys($this->m_childs));
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    function rewind(){
        $o=igk_createobj();
        $o->it_index=0;
        $this->m_->setFlag(self::ITERATOR, $o);
    }
    ///<summary></summary>
    ///<param name="params"></param>
    /**
    * 
    * @param mixed $params
    */
    public function Sort($params){
        if($this->m_childs != null)
            igk_usort($this->m_childs, $params);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ToArray(){
        if($this->m_childs){
            $t=array_values($this->m_childs);
            return $t;
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    function valid(){
        $o=$this->m_->getFlag(self::ITERATOR);
        $v=($o->it_index>=0) && ($o->it_index < count($this->m_childs)) && isset($this->m_childs[$o->it_index]);
        if(!$v){
            $this->m_->Clear();
        }
        return $v;
    }
}
///<summary>Represente class: IGKXmlChilds</summary>
/**
* Represente IGKXmlChilds class
*/
class IGKXmlChilds extends IGKHtmlChildElementCollections{
    ///<summary></summary>
    ///<param name="owner"></param>
    /**
    * 
    * @param mixed $owner
    */
    public function __construct($owner){
        parent::__construct($owner);
    }
}
///<summary>Represente class: IGKHtmlClassSessionOpt</summary>
/**
* Represente IGKHtmlClassSessionOpt class
*/
final class IGKHtmlClassSessionOpt extends IGKObject implements Serializable{
    private static $sm_instance;
    var $regClass;
    var $regParentClass;
    ///<summary></summary>
    ///<param name="tab" ref="true"></param>
    /**
    * 
    * @param mixed * $tab
    */
    private function __construct(& $tab){
        $this->regClass=& $tab;
        $this->regParentClass=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            $tab = [];
            self::$sm_instance=new IGKHtmlClassSessionOpt($tab);
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        $tab=[];
        if(count($this->regClass) > 0){
            $tab[]=$this->regClass;
        }
        if(count($this->regParentClass) > 0){
            $tab[]=$this->regParentClass;
        }
        return json_encode($tab);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function unserialize($v){}
}
///<summary>Represente class: IGKHtmlDocThemeMediaType</summary>
/**
* Represente IGKHtmlDocThemeMediaType class
*/
final class IGKHtmlDocThemeMediaType extends IGKObject {
    const CTN_LG_MEDIA=self::LG_MEDIA + self::CTN_OFFSET;
    const CTN_OFFSET=10;
    const CTN_SM_MEDIA=self::SM_MEDIA + self::CTN_OFFSET;
    const CTN_XLG_MEDIA=self::XLG_MEDIA + self::CTN_OFFSET;
    const CTN_XSM_MEDIA=self::XSM_MEDIA + self::CTN_OFFSET;
    const CTN_XXLG_MEDIA=self::XXLG_MEDIA + self::CTN_OFFSET;
    const GT_LG_MEDIA=self::GT_OFFSET + 0x3;
    const GT_OFFSET=0xA0;
    const GT_SM_MEDIA=self::GT_OFFSET + 0x2;
    const GT_XLG_MEDIA=self::GT_OFFSET + 0x4;
    const GT_XSM_MEDIA=self::GT_OFFSET + 0x1;
    const LG_MEDIA=2;
    const SM_MEDIA=1;
    const XLG_MEDIA=3;
    const XSM_MEDIA=0;
    const XXLG_MEDIA=4;
}
///<summary>Represente class: IGKHtmlImgEvalSrc</summary>
/**
* Represente IGKHtmlImgEvalSrc class
*/
final class IGKHtmlImgEvalSrc extends IGKObject implements IIGKHtmlGetValue{
    private $m_img;
    private $m_o;
    ///<summary></summary>
    ///<param name="o"></param>
    ///<param name="img"></param>
    /**
    * 
    * @param mixed $o
    * @param mixed $img
    */
    public function __construct($o, $img){
        $this->m_o=$o;
        $this->m_img=$img;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__."#".$this->m_o->getSrc();
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $this->m_img["class"]="-igk-img-not-found";
        $lnk=igk_html_uri($this->m_o->getSrc());
        $m=igk_xml_is_mailoptions($options);
        if($m){
            $uri=new IGKHtmlUri();
            $uri->setValue($lnk);
            $r=new IGKHtmlItem("img");
            $r->setAttributes($this->Attributes);
            if($options && $options->Attachement){
                $d=null;
                if(!empty($this->m_lnk) && file_exists($lnk)){
                    $d=$options->Attachement->attachFile(igk_realpath($lnk), "images/pictures", null);
                }
                else{
                    $q=igk_curl_post_uri($this->m_lnk);
                    if(!empty($q)){
                        $d=$options->Attachement->attachContent($q, "images/pictures", null);
                    }
                }
                if($d)
                    $s="cid:".$d->CID;
            }
            else{
                $s=$uri->getValue($options);
            }
            return $s;
        }
        if(strstr($lnk, "..")){
            $lnk=str_replace("../", IGK_STR_EMPTY, $lnk);
        }
        $s=IGK_STR_EMPTY;
        $rf=null;
        $extra=null;
        $k=$lnk;
        if(!empty($k)){
            if(IGKValidator::IsUri($k) || (preg_match("#^(file://|data:)#i", $k)) || (preg_match("#^\{(.)*\}$#i", $k))){
                $s=$k;
            }
            else{
                $f=igk_getv(explode("?", $lnk), 0);
                if(strpos($f, "#") !== false){
                    list($f, $extra)
                    =explode("#", $f);
                }
                if(file_exists($f)){
                    $rf=igk_realpath($f);
                    $s=IGKResourceUriResolver::getInstance()->resolve($rf, $options);
                    return $s;
                }
                else{
                    $s="";
                    $bf=igk_html_uri(igk_io_currentrelativepath($f));
                    if(!file_exists($bf)){
                        $this->m_img["class"]="+igk-img-not-found";
                    }
                    $s=$bf;
                }
            }
        }
        else
            $s=$k;
        if(!empty($extra)){
            $s .= "#".$extra;
        }
        if(($kc=strpos($lnk, "?")) !== false){
            $s .= "?".substr($lnk, $kc + 1);
        }
        return $s;
    }
}
///<summary>Represente class: IGKHtmlItemAttribute</summary>
/**
* Represente IGKHtmlItemAttribute class
*/
class IGKHtmlItemAttribute extends IGKObject implements IIGKHtmlGetValue{
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function getValue($option=null){}
}
///represent classe used to register platform css class definition
/**
*/
final class IGKHtmlClassValueAttribute extends IGKHtmlItemAttribute implements Serializable {
    private $m_classes;
    private $m_expressions;
    private static $sm_regClass=null;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_classes=array();
        $this->m_expressions=array();
    }

    public function setClasses($expression){
        $tb = array_filter(explode(" ",$expression));
        foreach($tb as $s){
            $this->add($s);
        }
        return $s;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    private function _add($v){
        if(is_array($v)){
            igk_die("is array");
        }
        $v=trim($v);
        if(strlen($v) > 0){
            switch($v[0]){
                case '-':
                $v=substr($v, 1);
                $this->remove($v);
                break;
                case '+':
                $v=substr($v, 1);
                if(!isset($this->m_classes[$v])){
                    $this->m_classes[$v]=$v;
                }
                self::_RegClass(".".$v);
                break;
                case "[":
                case "{":
                $this->m_expressions[]=$v;
                break;default:
                if(!isset($this->m_classes[$v])){
                    $this->m_classes[$v]=$v;
                }
                self::_RegClass(".".$v);
                break;
            }
        }
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    private static function & _GetRegClass(){
        if(self::$sm_regClass === null){
            if(igk_app()->Session->RegClasses !== null){
                self::$sm_regClass=& igk_app()->Session->RegClasses->regClass;
            }
            else{
                self::$sm_regClass=array();
            }
        }
        return self::$sm_regClass;
    }
    ///<summary></summary>
    ///<param name="App"></param>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $App
    * @param mixed $name
    */
    private static function _initThemeDef($App, $name){
        $tab=array();
        $c=preg_match_all("/^\.(?P<type>(bgcl|fcl|res|ft))\-(?P<name>(.)+)$/i", $name, $tab);
        if($c > 0){
            $def=$App->Doc->Theme->def;
            for($i=0; $i < $c; $i++){
                $t=strtolower($tab['type'][$i]);
                $n=strtolower($tab['name'][$i]);
                $def[$name]="[$t:$n]";
            }
        }
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    private static function _RegClass($name){
        if (!IGKApp::IsInit()){
            return;
        }
        $v=& self::_GetRegClass();

        $app=igk_app();
        $doc=$app->getDoc();
        if(($doc == null) || isset($doc->SysTheme->def[$name]) || (isset($doc->Theme->def[$name]))){
            return;}
        if(!isset($v[$name])){
            $v[$name]=$name;
            self::_initThemeDef($app, $name);
            igk_invoke_session_event(IGKApp::$REG_CSS_CLASS_EVT, array($app, $name));
        }
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    private static function _UnRegClass($name){
        $v=& self::_GetRegClass();
        if(isset($v[$name])){
            unset($v[$name]);
            igk_invoke_session_event(IGKApp::$REG_CSS_CLASS_EVT, array(igk_app(), null));
        }
    }
    ///<summary>add css class value</summary>
    ///<param name="class">mixed string expression or array defenition</param>
    /**
    * add css class value
    * @param mixed $class mixed string expression or array defenition
    */
    public function add($class){
        if(empty($class))
            return;
        $tab=null;
        
        if(is_array($class)){
            $cl=[];
            foreach($class as $k=>$v){
                if(is_callable($v)){
                    if($v()){
                        $cl[]=$k;
                    }
                    else{
                        $cl[]="-".$k;
                    }
                }
                else if($v){
                    $cl[]=$k;
                }
                else
                    $cl[]="-".$k;
            }
            $tab=$cl;
            $class=implode(" ", $cl);
        }
        else
            $tab=explode(" ", $class);
        if ($tab){
            if(count($tab) == 1){
                $this->_add($class);
            }
            else{
                foreach($tab as $v){
                    $this->_add($v);
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->m_expression=array();
        $this->m_classes=array();
    }
    ///get if this instance contain classe name
    /**
    */
    public function contain($name){
        return isset($this->m_classes[$name]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function EvalClassStyle(){
        $out=IGK_STR_EMPTY;
        $i=0;
        foreach($this->m_classes as  $v){
            if($i == 0)
                $i=1;
            else
                $out .= " ";
            $out .= igk_css_get_style(".".$v);
        }
        return $out;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getKeys(){
        return array_keys($this->m_classes);
    }
    ///<summary></summary>
    ///<param name="theme"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $theme
    * @param mixed $v
    */
    private static function GetParentClass($theme, $v){
        $s=$theme[$v];
        if(!empty($s)){
            $t=array();
            if(preg_match_all(IGK_CSS_CHILD_EXPRESSION_REGEX, $s, $t)){
                $vv=$t["name"][0];
                if(self::IsCssChild($vv)){
                    return self::GetParentClass($theme, $vv);
                }
                return $vv;
            }
        }
        return $v;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetRegClass(){
        return self::_GetRegClass();
    }
    ///<summary>get html css class presentation value</summary>
    /**
    * get html css class presentation value
    */
    public function getValue($options=null){
        $out=IGK_STR_EMPTY;
        $i=0;        
        foreach($this->m_classes as  $v){ 
            if($i == 0)
                $i=1;
            else
                $out .= " ";
                if(self::IsCssChild($v)){
                    $out .= self::GetParentClass(igk_app()->Doc->Theme, $v);
                }
                else
                $out .= $v;
        } 
        $b=IGKHtmlUtils::GetValue($out);
        return empty($b) ? null: $b;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function IsCssChild($v){
        if (!IGKApp::IsInit()){
            return false;
        }
        $c=igk_app();
        if($c && $c->Doc){
            $s=$c->Doc->Theme[$v];
            if(!empty($s)){
                $r=preg_match(IGK_CSS_CHILD_EXPRESSION_REGEX, trim($s));
                return $r;
            }
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="class"></param>
    /**
    * 
    * @param mixed $class
    */
    public function remove($class){
        if(empty($class))
            return;
        if(isset($this->m_classes[$class])){
            unset($this->m_classes[$class]);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        if(igk_get_env("seri")){
            igk_die(__CLASS__."::loop detected :::".__METHOD__);
            igk_exit();
        }
        igk_set_env("seri", 1);
        $s='v:'.implode(" ", array_keys($this->m_classes)).';';
        igk_set_env("seri", null);
        return $s;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public static function UnRegClass($key){
        self::_UnRegClass($key);
    }
    ///<summary></summary>
    ///<param name="data"></param>
    /**
    * 
    * @param mixed $data
    */
    public function unserialize($data){
        $o=igk_unseri_data($data);
        $tab=explode(" ", $o->v);
        $this->m_classes=array_combine($tab, $tab);
        $r=igk_getv($o, "r");
        if($r){
            $owner=igk_get_env("sys://serialize/owner");
            $v='O:8:"stdClass":1:{s:5:"value";r:1;}';
        }
    }
}
///uri relative value
/**
*/
final class IGKHtmlRelativeUriValueAttribute extends IGKHtmlItemAttribute {
    private $m_lnk;
    ///<summary></summary>
    ///<param name="uri" default="null" type="string"></param>
    /**
    * 
    * @param mixed $string $uri the default value is null
    */
    public function __construct(string $uri=null){
        $this->m_lnk=$uri;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return $this->getValue(null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLnk(){
        return $this->m_lnk;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $lnk=$this->m_lnk;

        if(empty($lnk)){
            $s="";
            if(igk_get_env("sys://error")){
                $s=igk_io_currentbasedomainuri();
            }
            return $s;
        }
        if(defined("IGK_PHAR_CONTEXT")){
            if(IGKPhar::fileExists($lnk)){
                return igk_ajx_link($lnk) ?? igk_html_get_system_uri($lnk);
            }
        }
        if(!($fs=igk_realpath(igk_io_basedir()."/".$this->m_lnk)))
            $fs=$this->m_lnk;
        return IGKResourceUriResolver::getInstance()->resolve($fs, $options);
    }
}
///<summary>style presentation value used only to store additional style for an item</summary>
/**
* style presentation value used only to store additional style for an item
*/
final class IGKHtmlStyleValueAttribute extends IGKHtmlItemAttribute{
    private $m_o;
    private $m_v;
    ///<summary></summary>
    ///<param name="target"></param>
    /**
    * 
    * @param mixed $target
    */
    public function __construct($target){
        $this->m_o=$target;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        if(empty($this->m_v)){
            return array();
        }
        return array("m_v", "m_o");
    }
    ///<summary></summary>
    /**
    * 
    */
    function __wakeup(){}
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $opt=IGK_STR_EMPTY;
        if(igk_xml_is_mailoptions($options)){
            $p=$this->m_o["class"];
            $style=new IGKCssStyle();
            $s=trim($p ? $p->EvalClassStyle(): IGK_STR_EMPTY);
            if(!empty($s))
                $style->Load($s, 1, $p);
            $opt .= igk_css_get_style_from_map($this->m_target, $options, $style);
        }
        if(!empty($opt) && !empty($this->m_v))
            $opt .= " ";
        $opt=$opt.$this->m_v;
        return empty($opt) ? null: $opt;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setValue($value){
        if(($value == null) || is_string($value))
            $this->m_v=$value;
        else{
            igk_die("no value allowed ".$value. " target :".get_class($this->m_target));
        }
    }
}
///<summary>base html item function</summary>
/**
* base html item function
*/
abstract class IGKHtmlItemBase extends IGKObject implements ArrayAccess, IIGKHtmlLoadContent, IIGKParamHostService {
    private $_f;
    static $BasicMethod;
    ///<summary> get if this node accept rendering. and initialeze it  </summary>
    /**
    *  get if this node accept rendering. and initialeze it
    */
    protected function __AcceptRender($opt=null){
        $s=$this->getIsVisible();
        return $s;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="arguments"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $arguments
    */
    public function __call($name, $arguments){
        if($name === "__destruct"){
            return 0;
        }
        if($name == "iscallback"){
            $o=call_user_func_array(array($this, "iscallback"), $arguments);
            return $o;
        }
        $tgname = $this->getTagName();
        $v_is_callb=$this->iscallback($name);
        $o=null;
        if(!$v_is_callb){
            if(IGKString::StartWith($name, IGK_ADD_PREFIX)){
                $k=substr($name, 3);
                if(!empty($k)){
                    if(substr($k, 0, 2) == "NS"){
                        $n=substr($k, 2);
                        if(empty($n)){
                            igk_die("Name not set can't create obj");
                        }
                        if(igk_count($arguments) < 1){
                            igk_die("first argument must be a namespace");
                        }
                        $ns=$arguments[0];
                        $arg=array_merge(array($ns, $n), array_slice($arguments, 1));
                        return call_user_func_array(array($this, "addNS"), $arg);
                    }
                    else{
                        $g=$this->getParam(IGK_NS_PARAM_KEY);
                        if(!empty($g)){
                            $arg=array_merge(array($g, $k), $arguments);
                            return call_user_func_array(array($this, "addNS"), $arg);
                        }
                    }
                    $tab=array(strtolower($k), null, $arguments);
                    return call_user_func_array(array($this, IGK_ADD_PREFIX), $tab);
                }
            }
            if(isset(IGKHtmlItemBase::$BasicMethod[$name])){
                $f=IGKHtmlItemBase::$BasicMethod[$name];
                if(method_exists($this, $f)){
                    return call_user_func_array(array($this, $f), $arguments);
                }
            }
        }
        else{
            if($this->evalCallback($name, $o, $arguments)){
                return $o;
            }
        }
        $c=get_class($this);
        $callable = null;
        if(method_exists($c, $name)){
            $callable = array($this, $name);
        } 
        else {
            //igk_wln_e("the name : ".$this->getTagName());
            if(!($callable = igk_html_get_method($tgname, $name)))
            {
                $callable = igk_html_get_class_callable($tgname, $name);
            }
            if ($callable)
                array_unshift($arguments, $this);
        }
        
        if ($callable)
            return call_user_func_array($callable, $arguments);

        $instance = IGK\System\Html\Dom\Factory::getInstance();
        if ($instance->handle($tgname, $name)){
            igk_html_push_node_parent($this);
            $r = $instance->Invoke($tgname, $name, $arguments );
            igk_html_pop_node_parent();
            return $r;
        }

        // update to fallback on item controller
        $tab=array(strtolower($name), null, $arguments);
        return call_user_func_array(array($this, IGK_ADD_PREFIX), $tab);
        // igk_die("/!\\ function not exists ".$c.":::&gt;&gt;".$name);
        // return null;
    }
    ///<summary></summary>
    ///<param name="tagname" default="null"></param>
    /**
    * 
    * @param mixed $tagname the default value is null
    */
    public function __construct($tagname=null){
        $this->_f=array();
        $this->setFlag(IGK_NODETAG_FLAG, $tagname);
        $this->setFlag(IGK_NODETYPE_FLAG, 'c');
        $this->setFlag(IGK_NODETYPENAME_FLAG, null);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function __get($name){
        if(preg_match("/^get/i", $name)){
            $o=null;
            if($this->evalCallback($name, $o))
                return $o;
        }
        return parent::__get($name);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function __initialize(){}
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function __set($key, $value){
        if(IGKString::StartWith($key, "igk:")){
            $this->setSysAttribute(substr($key, 4), $value, $this->LoadingContext);
            return;
        }
        if(!$this->_setIn($key, $value)){
            $o=null;
            if(!$this->evalCallback("set".$key, $o, array("value"=>$value))){
                $this->$key=$value;
            }
        }
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return get_class($this)."#";
    }
    ///<summary></summary>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $tag
    */
    protected function _p_isClosedTag($tag){
        return false;
    }
    ///<summary></summary>
    ///<param name="tagname"></param>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $tagname
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function addElement($tagname, $attributes=null, $index=null){
        $b=$this->getTempFlag("RootNS");
        if($b !== null){
            $g=$this->add("Element", null, func_get_args(), $index);
            if($g)
                return $g;
        }
        $s=new IGKHtmlItem($tagname);
        if($this->add($s)){
            $this->AppendAttributes($attributes);
            return $s;
        }
        unset($s);
        return null;
    }
    ///<summary></summary>
    ///<param name="tag"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $tag
    * @param mixed $attributes the default value is null
    */
    public function addNode($tag, $attributes=null){
        $t=new IGKHtmlItem($tag);
        if($this->add($t)){
            $t->setAttributes($attributes);
            return $t;
        }
        unset($t);
        return null;
    }
    ///<summary>special function add a node as a callback. if name defined return the name or create and add it with the callback</summary>
    /**
    * special function add a node as a callback. if name defined return the name or create and add it with the callback
    */
    public function addNodeCallback($name, $callback, $host=null){
        if(empty($name)){
            igk_die("name must be set");
        }
        //+ change the node callback behaviour - store the setting in session
        $host=$host ?? $this;
        $c=$host->getParam(IGK_NAMED_NODE_PARAM, array());
        $f = null;
        if(isset($c[$name])){
            // get setting
            $f = $c[$name];
            // igk_html_add($f, $this);
            // return $f;
        }
        $h = $callback($this);
        if($h){
            if (method_exists($h, "getSetting"))
                $c[$name]= $h->getSetting();
            else {
                $c[$name] = (object)[];
            }
            $h->setParam(IGK_NAMED_ID_PARAM, $name);
            $host->setParam(IGK_NAMED_NODE_PARAM, $c);
            return $h;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="tag"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $tag
    * @param mixed $attributes the default value is null
    */
    public function addXmlNode($tag, $attributes=null){
        $t=new IGKXmlNode($tag);
        if($this->add($t)){
            $t->setAttributes($attributes);
            return $t;
        }
        unset($t);
        return null;
    }
    ///<summary> enable ajx replacement on node</summary>
    /**
    *  enable ajx replacement on node
    */
    public function AJXReplaceNode(){
        $this->setParam("sys://replace_node", 1);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected final function callbackKeys(){
        $g=$this->getFlag(IGK_CALLBACK_FLAG);
        return $g ? array_keys($g): null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearChilds(){}
    ///<summary>indicate that the element must be closed with close tag. <i></i> not  if empty</summary>
    /**
    * indicate that the element must be closed with close tag.
    */
    public function closeWithCloseTag($opt, $tag){
        if(($opt == null) || !method_exists($opt, "mustclosetag") || !is_callable([$opt, "mustclosetag"]))
            return igk_html_mustclosetag($tag);
        return $opt->mustclosetag($tag);
    }
    ///<summary>create child web node</summary>
    /**
    * create child web node
    */
    public static function CreateWebNode($name, $attributes=null, $indexOrArgs=null){
        $c=new IGKXmlNode($name);
        if($c && $attributes){
            $c->AppendAttributes($attributes);
        }
        return $c;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="o" ref="true"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed * $o
    */
    protected final function evalCallback($name, & $o){
        $v_nsfc=$this->getFlag(IGK_NSFC_FLAG);
        $g=$this->getFlag(IGK_CALLBACK_FLAG);
        if(!($g && isset($g[$name])) && isset($v_nsfc)){
            $fcname=$v_nsfc."_".$name;
            if(function_exists($fcname)){
                $g=igk_create_invoke_callback($fcname, $this);
                $this->m_callback[$name]=$g;
            }
        }
        if(isset($g[$name])){
            $b=$g[$name];
            if(is_callable($b)){
                if(is_array($b)){
                    if(igk_getv($b, 0) === $this){
                        $o=call_user_func_array($b, igk_getv(func_get_args(), 2, array()));
                        return true;
                    }
                    else{
                        if(count($b) > 2){
                            $cp=array_slice($b, 2);
                            $o=call_user_func_array(array_slice($b, 0, 2), $cp);
                            return true;
                        }
                    }
                }
                if(func_num_args() > 2){
                    $t=array($this);
                    $t=array_merge($t, igk_getv(array_slice(func_get_args(), 2), 0));
                    $o=call_user_func_array($b, $t);
                    return true;
                }
                else{
                    $o=$b($this);
                    return true;
                }
            }
            else if(is_string($b)){
                // if (igk_is_debug())
                //  igk_ilog(__FILE__.":".__LINE__. " evaluate expression: ".$b);
                $param=igk_getv(func_get_args(), 2, array());
                extract($param);
                extract($this->getParam($name."Params", array()));
                $self = $this;
                igk_set_env(IGK_LAST_EVAL_KEY, $b);
                $o=eval($b);
                igk_set_env(IGK_LAST_EVAL_KEY, null);
            }
            else if(is_object($b) && isset($b->clType)){
                $addArgs=igk_getv(array_slice(func_get_args(), 2), 0);
                $sourceParam="source\x01:param";
                $sourceDeepth="source\x01:depth";
                $gc=null;
                if(isset($b->$sourceParam)){
                    $gc=$b->$sourceParam;
                    $b->$sourceDeepth++;
                }
                else{
                    $gc=isset($b->clParam) && $b->clParam ? array_slice($b->clParam, 0): null;
                    $b->$sourceParam=$b->clParam;
                    $b->$sourceDeepth=1;
                }
                $extra=null;
                $fc_args=igk_getv(func_get_args(), 2, null);
                if(($_v_c=igk_count($addArgs)) > 0){
                    if($gc == null){
                        $gc=$addArgs;
                    }
                    else{
                        if(!is_array($gc))
                            $gc=array($gc);
                        if(($_v_c == 1) && (array_keys($addArgs)[0] === 0)){
                            $extra=array($addArgs[0]);
                        }
                        else
                            $gc=array_merge($gc, $addArgs);
                    }
                }
                if($fc_args){
                    $gc["func:args"]=$fc_args;
                }
                $bck=isset($b->clParam) ? $b->clParam: null;
                $b->clParam=$gc;
                $o=igk_invoke_callback_obj($this, $b, $extra);
                $b->clParam=$bck;
                $b->$sourceDeepth--;
                if($b->$sourceDeepth<=0){
                    unset($b->$sourceDeepth);
                    unset($b->$sourceParam);
                }
                return true;
            }
            else{
                return false;
            }
            return true;
        }
        return false;
    }
    ///<summary>free callback node</summary>
    /**
    * free callback node
    */
    public function freeNodeCallback($n=null){
        $c=$this->getParam(IGK_NAMED_NODE_PARAM);
        if($n === null){
            $c=array();
        }
        else{
            unset($c[$n]);
        }
        $this->setParam(IGK_NAMED_NODE_PARAM, $c);
    }
    ///<summary>get auto index . true by default</summary>
    /**
    * get auto index . true by default
    */
    public function getAutoIndex(){
        return igk_getv($this->_f, IGK_AUTODINDEX_FLAG, 1);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getCallbackNode($name){
        $c=$this->getParam(IGK_NAMED_NODE_PARAM);
        return igk_getv($c, $name);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getContent(){
        return $this->getFlag(IGK_NODECONTENT_FLAG);
    }
    ///<summary></summary>
    ///<param name="options" ref="true"></param>
    /**
    * 
    * @param mixed * $options
    */
    protected function getDepthIndent(& $options){
        return igk_html_get_depth_indent($this, $options);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getElementById($name){
        return null;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $name
    * @return *
    */
    public function & getElementsByTagName($name){
        $tab=array();
        return $tab;
    }
    ///aditionnal array of expression attributes
    /**
    */
    public function getExpressionAttributes(){
        $tab=igk_getctrl(IGK_REFERENCE_CTRL)->getHtmlExpresionTab($this);
        if($tab !== null){
            $t=array();
            foreach($tab as $k=>$v){
                $t[$k]=$this->$k;
            }
            return $t;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="flag"></param>
    ///<param name="default" default="null"></param>
    /**
    * 
    * @param mixed $flag
    * @param mixed $default the default value is null
    */
    public function getFlag($flag, $default=null){
        return igk_getv($this->_f, $flag, $default);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function gethasContent(){
        return !empty($this->Content) || $this->getHasChilds();
    }
    ///<summary>get the generated node type</summary>
    /**
    * get the generated node type
    */
    public function getIGKNodeType(){
        return $this->getFlag(IGK_NODETYPE_FLAG);
    }
    ///<summary>get the generated node type Name or parameters</summary>
    /**
    * get the generated node type Name or parameters
    */
    public function getIGKNodeTypeName(){
        return $this->getFlag(IGK_NODETYPENAME_FLAG) ?? get_class($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIndex(){
        return $this->getFlag(IGK_ZINDEX_FLAG);
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getinnerHtml($options=null){
        return $this->innerHTML($options);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsLoading(){
        return $this->getFlag(IGK_ISLOADING_FLAG, 0);
    }
    ///<summary> get this node allow to render tag name</summary>
    /**
    *  get this node allow to render tag name
    */
    abstract public function getIsRenderTagName();
    ///<summary>update: get visible</summary>
    ///<return>true if flag not set. if callable evaluate callable if 1 visibile</return>
    /**
    * update: get visible
    */
    public function getIsVisible(){
        $v=igk_getv($this->_f, IGK_ISVISIBLE_FLAG);
        if(($v != null) && igk_is_callable($v)){
            $g=igk_invoke_callback_obj($this, $v);
            return $g;
        }
        if($v === false)
            return 0;
        $s=0;
        if(!$v || ($v === null))
            $s=1;
        return $s;
    }
    ///<summary>get the component type </summary>
    /**
    * get the component type
    */
    public function getItemType(){
        $exp="/^(IGKHtml)(?P<name>[\w_-]+)Item$/i";
        $v=get_class($this);
        $t=array();
        if(igk_reflection_class_extends($v, __CLASS__) && !igk_reflection_class_isabstract($v) && preg_match($exp, $v)){
            preg_match_all($exp, $v, $t);
            return $t["name"][0];
        }
        return "unknow";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLoadingContext(){
        return $this->getFlag(IGK_LOADINGCONTEXT_FLAG, 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNodeCreationArgs(){
        return $this->getTempFlag("creationargs");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNodeType(){
        return IGKXMLNodeType::ELEMENT;
    }
    ///<summary>html item get param implementation</summary>
    /**
    * html item get param implementation
    */
    public function getParam($key, $default=null){
        $p=$this->getFlag(IGK_PARAMS_FLAG, array());
        $v_in=isset($p[$key]);
        $s=igk_getv($p, $key, $default);
        if(!$v_in && is_callable($default)){
            $p[$key]=$default();
            $this->setFlag(IGK_PARAMS_FLAG, $p);
        }
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getParamKeys(){
        $p=$this->getFlag(IGK_PARAMS_FLAG);
        return $p ? array_keys($p): null;
    }
    ///<summary>get param reference</summary>
    /**
    * get param reference
    */
    public function & getParamR($key){
        igk_die("not implemement ".__METHOD__);
    }
    ///<summary>get the parent document </summary>
    /**
    * get the parent document
    */
    public function getParentDocument(){
        $q=$this;
        while(($p=$q->ParentNode)){
            $cl=get_class($p);
            if($cl == "IGKHtmlDoc"){
                return $p;
            }
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getParentHost(){
        return $this->getFlag(IGK_PARENTHOST_FLAG);
    }
    ///<summary>get ParentNode. attention to referrence model. &amp; is removed to allow setting the value</summary>
    /**
    * get ParentNode. attention to referrence model. &amp; is removed to allow setting the value
    */
    public function getParentNode(){
        return $this->getFlag(IGK_PARENT_FLAG);
    }
    ///<summary> get an array of childs to render</summary>
    /**
    *  get an array of childs to render
    */
    public final function GetRenderingChildren($options=null){
        $o=array();
        if(!$this->evalCallback('GetRenderingChildren', $o, func_get_args())){
            return $this->__getRenderingChildren($options);
        }
        return $o;
    }
    ///<summary> get the root node of this element</summary>
    /**
    *  get the root node of this element
    */
    public function getRootNode(){
        $q=$this;
        while(($p=$q->ParentNode)){
            $s=$p->ParentNode;
            if($s == null)
                break;
            $q=$p;
        }
        return $q;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    ///<param name="options"></param>
    /**
    * 
    * @param mixed $v
    * @param mixed $options
    */
    public static function GetStringAttribute($v, $options){
        if(empty($v) && !is_numeric($v))
            return null;
        $data=null;
        while(is_object($v)){
            $v=IGKHtmlUtils::GetValueObj($v, $options);
        }
        if(empty($v) && !is_numeric($v)){
            return null;
        }
        if(is_string($v)){
            if(IGKString::StartWith($v, "\"")){
                return $v;
            }
            if(IGKString::StartWith($v, "\'"))
                return $v;
        }
        if($options && igk_getv($options, "AttributeEntityEscape")){
            $v=preg_replace_callback("/\&([^;=]+;)?/i", function($m){
                switch($m[0]){
                    case "&":
                    return "&amp;";
                    case "&copy;":
                    return "&#169;";
                }
                return $m[0];
            }
            , $v);
        }
        $v=str_replace("\"", "&quot;", $v);
        if(is_array($v)){
            igk_wln_e(__METHOD__."::attribute is array", igk_show_trace());
        }
        return "\"".$v."\"";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTagName(){
        return $this->getFlag(IGK_NODETAG_FLAG, 'div');
    }
    ///<summary> get temp flag for node</summary>
    /**
    *  get temp flag for node
    */
    public function getTempFlag($n){
        $t=igk_get_env("sys://node/temp/flags");
        $h=spl_object_hash($this);
        if($t && isset($t[$h])){
            return igk_getv($t[$h], $n);
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        return null;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    protected final function iscallback($name){
        $g=$this->getFlag(IGK_CALLBACK_FLAG);
        return $g ? isset($g[$name]): 0;
    }
    ///<summary> get if tag is classe tag</summary>
    /**
    *  get if tag is classe tag
    */
    public function isCloseTag($tag){
        if(IGKString::StartWith($tag, "igk:"))
            $tag=substr($tag, 4);
        if(strtolower($this->tagName) == strtolower($tag))
            return true;
        return $this->_p_isClosedTag($tag);
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    /**
    * 
    * @param mixed $classname
    */
    public static function IsComponent($classname){
        $f=$classname;
        if(class_exists($f) && !igk_reflection_class_isabstract($f) && igk_reflection_class_extends($f, 'IGKHtmlComponentNodeItem') && preg_match(IGK_HTML_NODE_REGEX, $f)){
            return true;
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    /**
    * 
    * @param mixed $classname
    */
    public static function IsElement($classname){
        $f=$classname;
        if(class_exists($f) && !igk_reflection_class_isabstract($f) && igk_reflection_class_extends($f, __CLASS__) && preg_match(IGK_HTML_NODE_REGEX, $f)){
            return true;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function isEmptyTag(){
        return igk_html_emptytag($this->TagName);
    }
    ///<summary></summary>
    ///<param name="content"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $content
    * @param mixed $context the default value is null
    */
    public function LoadExpression($content, $context=null){
        $d=IGKHtmlReader::LoadExpression($content, $context);
        if($d){
            $d->CopyTo($this);
            return true;
        }
        return false;
    }
    ///<summary> load file content .xphtml </summary>
    /**
    *  load file content .xphtml
    */
    public function loadFile($file, $options=null, $args=null){
        if(!file_exists($file))
            return false;
        $options=igk_create_filterobject((object)$options, ["stripComment"=>0]);
        $content=IGKIO::ReadAllText($file);
        if($options->stripComment){
            $content=igk_html_strip_comment($content);
        }
        if(is_array($args))
            $args=(object)$args;
        return $this->Load($content, $args);
    }
    ///<summary>Load html content to this node </summary>
    ///<param name="content">source string to load</param>
    ///<param name="context">context of the loading. mixed string or object</param>
    ///<remark>Data will be evaluated. if you don't what IGK system balafon evaluation used LoadExpression</remark>
    /**
    * Load html content to this node
    * @param mixed $content source string to load
    * @param mixed $context context of the loading. mixed string or object
    */
    public static function LoadInContext($t, $content, $context=null){
      
        $d=IGKHtmlReader::Load($content, $context);
        if($d){
            $d->CopyTo($t);
            return true;
        }
        return false;
    }
    ///<summary>override this method to initialize your component</summary>
    /**
    * override this method to initialize your component
    */
    protected function loadingComplete(){
        if(!igk_reflection_class_extends(get_called_class(), __CLASS__)){
            igk_die(__FUNCTION__." call not allowed");
        }
        if(method_exists($this, "initView"))
            $this->initView();
        $this->unsetFlag(IGK_ISLOADING_FLAG);
        $this->unsetFlag(IGK_LOADINGCONTEXT_FLAG);
    }
    ///Load a single node if found in a text sources
    /**
    */
    public static function LoadNode($text){
        if(empty($text))
            return null;
        $v_dummy=igk_createxmlnode("dummy");
        $v_dummy->Load($text);
        if($v_dummy->HasChilds){
            return $v_dummy->Childs[0];
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="articlename"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $articlename
    */
    public function LoadView($ctrl, $articlename){
        if($ctrl){
            $c=$ctrl->getViewContent($articlename, $this);
            if(!empty($c))
                $this->Load($c);
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetExists($key){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){}
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    function offsetSet($key, $value){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetUnset($key){}
    ///must be overrided
    /**
    */
    abstract public function render($options=null);
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    public function renderAJX(& $options=null){
        if($options === null){
            $options=igk_xml_create_render_option();
        }
        if($this->getParam("sys://replace_node")){
            $this->setParam("sys://replace_node", null);
            $id=($d=$this["id"]) ? "#".$d: null;
            igk_ajx_replace_node($this, $id);
            return;
        }
        $s=igk_html_render_node($this, $options, array($this));
        if($options->Context == "xml")
            $s=str_replace("&", "&amp;", $s);
       
        igk_wl($s);
    }
    ///<summary> call after node is rendering. call after item render</summary>
    /**
    *  call after node is rendering. call after item render
    */
    public function RenderComplete($opt=null){}
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function RenderHtmlEntities($options=null){
        igk_wl(htmlentities($this->Render($options=null)));
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function RenderXML($options=null){
        igk_header_set_contenttype("xml");
        $opt=$options ?? igk_xml_create_render_option();
        $opt->Context="xml";
        if(igk_getv($opt, 'xmldefinition') == 1){
            $xml=igk_createpreprocessor("xml");
            $xml["version"]=igk_getv($opt, "version") ?? "1.0";
            $xml["encoding"]=igk_getv($opt, "encoding") ?? "utf8";
            $xml->renderAJX();
        }
        $this->RenderAJX($opt);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function resetParam(){
        $this->unsetFlag(IGK_PARAMS_FLAG);
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public function SaveToFile($file){
        if(!empty($file))
            igk_io_save_file_as_utf8($file, $this->Render(null), true);
    }
    ///<summary>set attribute directly</summary>
    /**
    * set attribute directly
    */
    public function setAttr($key, $value){
        $this->Attributes->Set($key, $value);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setAutoIndex($v){
        $this->setFlag(IGK_AUTODINDEX_FLAG, $v);
        return $this;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="callable"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $callable
    */
    public function setCallback($n, $callable){
        $g=$this->getFlag(IGK_CALLBACK_FLAG);
        $k = $n."Params";
        if($callable == null){
            unset($g[$n]);
            $this->setParam($k, null);
        }
        else{
            $g[$n]=$callable;
            $tb=array_slice(func_get_args(), 2);
            if((count($tb) > 0) && is_array($tb[0])){
                $this->setParam($k, $tb[0]);
            }
            if(!$g){
                $g=array();
            }
        }

        if(igk_count($g) == 0)
            $this->unsetFlag(IGK_CALLBACK_FLAG);
        else
            $this->setFlag(IGK_CALLBACK_FLAG, $g);
        return $this;
    }
    ///<summary>register a namespace key to resolv function that will be call for the callback</summary>
    /**
    * register a namespace key to resolv function that will be call for the callback
    */
    public function setCallbackNameSpaceKey($key){
        $this->setFlag(IGK_NSFC_FLAG, $key);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $node
    */
    public function setCallbackNode($name, $node){
        $c=$this->getParam(IGK_NAMED_NODE_PARAM, array());
        $c[$name]=$node;
        $this->setParam(IGK_NAMED_NODE_PARAM, $c);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setContent($value){
        if($value === null)
            $this->unsetFlag(IGK_NODECONTENT_FLAG);
        else
            $this->setFlag(IGK_NODECONTENT_FLAG, $value);
        return $this;
    }
    ///<summary></summary>
    ///<param name="flag"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $flag
    * @param mixed $v
    */
    public function setFlag($flag, $v){
        if(!isset($v) && (func_num_args() < 2)){
            igk_die("Argument not found ".func_num_args());
            return;
        }
        if($v == null){
            unset($this->_f[$flag]);
        }
        else
            $this->_f[$flag]=$v;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    ///<param name="autoindex" default="false"></param>
    /**
    * 
    * @param mixed $value
    * @param mixed $autoindex the default value is false
    */
    public function setIndex($value, $autoindex=false){
        $i=$this->getIndex();
        if($i !== $value){
            $i=$value;
            if($i == null){
                $this->unsetFlag(IGK_ZINDEX_FLAG);
            }
            else{
                $this->setFlag(IGK_ZINDEX_FLAG, $i);
            }
        }
        if(!$autoindex){
            $this->setAutoIndex(-1);
        }
    }
    ///<summary>set is visible and maintain chain</summary>
    /**
    * set is visible and maintain chain
    */
    public function setIsVisible($value){
        $value=igk_getbool($value);
        if($value === true){
            $this->setFlag(IGK_ISVISIBLE_FLAG, null);
        }
        else{
            $this->setFlag(IGK_ISVISIBLE_FLAG, true);
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $args
    */
    protected function setNodeCreationArgs($args){
        $this->setTempFlag("creationargs", $args);
    }
    ///<summary></summary>
    ///<param name="t" default="'c'"></param>
    /**
    * 
    * @param mixed $t the default value is 'c'
    */
    public function setNodeType($t='c'){
        $this->setFlag(IGK_NODETYPE_FLAG, $t);
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    public function setNodeTypeName($t){
        $this->setFlag(IGK_NODETYPENAME_FLAG, $t);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function setParam($key, $value){
        $p=$this->getFlag(IGK_PARAMS_FLAG, array());
        if($value == null){
            unset($p[$key]);
        }
        else
            $p[$key]=$value;
        $this->setFlag(IGK_PARAMS_FLAG, $p);
    }
    ///<summary></summary>
    ///<param name="host"></param>
    /**
    * 
    * @param mixed $host
    */
    public function setParentHost($host){
        if(($host == null) || igk_reflection_class_extends($host, __CLASS__)){
            $this->setFlag(IGK_PARENTHOST_FLAG, $host);
        }
    }
    ///<summary></summary>
    ///<param name="value"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $value
    * @param mixed $context the default value is null
    */
    protected function setParentNode($value, $context=null){
        $p=$this->getParentNode();
        if($p !== $value){
            if(($value == null) && $context && (strtolower($context) == "dispose")){
                $this->Dispose();
            }
            if($value == null){
                $this->unsetFlag(IGK_PARENT_FLAG, $value);
                $this->setPreviousCiblingParent(null);
            }
            else{
                $this->setFlag(IGK_PARENT_FLAG, $value);
            }
        }
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    protected function setPreviousCiblingParent($value){
        $this->setFlag(IGK_PREVIOUS_CIBLING_FLAG, $value);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    * @param mixed $context the default value is null
    */
    public function setSysAttribute($key, $value, $context=null){
        if(($context !== null) && ($value !== null) && (is_string($value))){
            $tb=array();
            if(($c=preg_match_all("%\[eval:(?P<value>[^\]]*)]%i", $value, $tb)) > 0){
                $e=igk_str_read_in_brancket($value, "[", "]");
                $script=substr($e[0], strpos($e[0], ":") + 1);
                if(!empty($script))
                    $value=igk_html_eval_value_in_context($script, $context);
            }
        }
        $t=array("style"=>"class");
        $m=igk_getv($t, strtolower($key));
        if($m){
            $this[$m]=strtolower("+igk-".$this->getItemType()."-". $value);
        }
        else{
            $k="set".$key;
            if(method_exists($this, $k)){
                $this->$k($value);
            }
            else{
                // $cond = igk_server_is_local() && (($context !== null) && ($context !== 'Load'));               
                // igk_assert_die($cond, "/!\\ Method not define [". $key. "] :::".$value. " :::".get_class($this). "::::Context[".$context."]");
                return false;
            }
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="attributes"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $attributes
    * @param mixed $context the default value is null
    */
    public function setSysAttributes($attributes, $context=null){
        if(is_array($attributes)){
            foreach($attributes as $k=>$v){
                $this->setAttribute($k, $v);
            }
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function setTempFlag($n, $v){
        $t=igk_get_env("sys://node/temp/flags", array());
        $h=spl_object_hash($this);
        if(!isset($t[$h])){
            $t[$h]=array();
        }
        $t[$h][$n]=$v;
        igk_set_env("sys://node/temp/flags", $t);
    }
    ///<summary></summary>
    ///<param name="className"></param>
    ///<param name="context"></param>
    /**
    * 
    * @param mixed $className
    * @param mixed $context
    */
    function startLoading($className, $context){
        if(!igk_reflection_class_extends(get_called_class(), __CLASS__)){
            igk_die(__FUNCTION__."not allowed");
        }
        $this->setFlag(IGK_LOADINGCONTEXT_FLAG, $context);
        $this->setFlag(IGK_ISLOADING_FLAG, 1);
    }
    ///<summary></summary>
    ///<param name="flag"></param>
    /**
    * 
    * @param mixed $flag
    */
    public function unsetFlag($flag){
        unset($this->_f[$flag]);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function unsetParam($key){
        $p=$this->getFlag(IGK_PARAMS_FLAG);
        unset($p[$key]);
        if(igk_count($p)<=0)
            $this->unsetFlag(IGK_PARAMS_FLAG);
        else{
            $this->setFlag(IGK_PARAMS_FLAG, $p);
        }
    }
}
///<summary>represent a html process item instruction like &lt;%, %&gt; </summary>
/**
* represent a html process item instruction like &lt;%, %&gt;
*/
class IGKHtmlProcessInstruction extends IGKHtmlItemBase {
    private $m_content;
    ///<summary></summary>
    ///<param name="content"></param>
    /**
    * 
    * @param mixed $content
    */
    public function __construct($content){
        parent::__construct();
        $this->m_content=$content;
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        return null;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__."#".$this->Render();
    }
    ///<summary></summary>
    ///<param name="item"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $item
    * @param mixed $index the default value is null
    */
    protected function _AddChild($item, $index=null){
        return false;
    }
    ///<summary></summary>
    ///<param name="item"></param>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $item
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function add($item, $attributes=null, $index=null){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getContent(){
        return $this->m_content;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $out="<?";
        $out .= $this->Content;
        $out .= "?>";
        return $out;
    }
}
///<summary>Represente class: IGKHtmlText</summary>
/**
* Represente IGKHtmlText class
*/
class IGKHtmlText extends IGKHtmlItemBase {
    private $m_text;
    ///<summary></summary>
    ///<param name="content" default="null"></param>
    /**
    * 
    * @param mixed $content the default value is null
    */
    public function __construct($content=null){
        parent::__construct();
        $this->m_text=$content;
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        return null;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__."#".$this->TagName.":".$this->m_text;
    }
    ///<summary></summary>
    ///<param name="item"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $item
    * @param mixed $index the default value is null
    */
    protected function _AddChild($item, $index=null){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function add(){
        return null;
    }
    ///<summary>append text to the current content</summary>
    /**
    * append text to the current content
    */
    public function append($text){
        $this->m_text .= $text;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearChilds(){}
    ///<summary></summary>
    /**
    * 
    */
    public function getContent(){
        return $this->m_text;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNodeType(){
        return IGKXMLNodeType::TEXT;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTagName(){
        return "igk:text";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getType(){
        return "HtmlText";
    }
    ///<summary></summary>
    ///<param name="option" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $option the default value is null
    */
    protected function innerHTML(& $option=null){
        return null;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $m=IGKHtmlUtils::GetValue($this->m_text);
        $s=$m;
        if(strlen($s) == 0)
            return null;
        return $this->getDepthIndent($options).$m;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setContent($v){
        $this->m_text=$v;
        return $this;
    }
}
///<summary>represent the base xml node type</summary>
/**
* represent the base xml node type
*/
class IGKXmlNode extends IGKHtmlItemBase implements ArrayAccess {
    ///<summary></summary>
    ///<param name="tagname"></param>
    /**
    * 
    * @param mixed $tagname
    */
    public function __construct($tagname){
        parent::__construct($tagname);
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        $this->__sortChild();
        $g=$this->getChilds();
        if($g)
            return igk_to_array($g);
        return null;
    }
    ///<summary></summary>
    ///<param name="p"></param>
    ///<param name="params"></param>
    /**
    * 
    * @param mixed $p
    * @param mixed $params
    */
    protected function __init_new_node_func($p, $params){
        igk_html_push_node_parent($this);
        $node=call_user_func_array($p, $params);
        if (is_array($node)){
            $node = $node["node"];
        }else{
            if(!igk_get_env("sys://xml/no_add")){
                if(($node !== null) && ($node !== $this) && igk_is_html($node) && ($node->parentNode !== $this) && !$this->_AddChild($node)){
                    igk_debug_wln("!?> node not added ".$node. " ".get_class($this));
                    $node=null;
                }
            }
            igk_html_pop_node_parent();
            igk_set_env("sys://xml/no_add", null);
        }
        return $node;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    protected function __renderChild($options=null){
        $k=0;
        $out=$this->__renderVisibleChild($this->GetRenderingChildren($options), $options, $k);
        $v_iline=igk_html_indent_line($options);
        $out .= $k ? $v_iline: null;
        return $out;
    }
    ///<summary></summary>
    ///<param name="childs"></param>
    ///<param name="options" default="null"></param>
    ///<param name="tk" ref="true"></param>
    /**
    * 
    * @param mixed $childs
    * @param mixed $options the default value is null
    * @param mixed * $tk the default value is 0
    */
    protected function __renderVisibleChild($childs, $options=null, & $tk=0){
        if(!$childs)
            return null;
        $out=IGK_STR_EMPTY;
        $v_depth=$this->getDepthIndent($options);
        $v_iline=igk_html_indent_line($options);
        $s="";
        foreach($childs as  $v){
            if($v->getIsVisible()){
                $s=$v->Render($options);
                if(is_numeric($s) || !empty($s)){
                    if($tk == 1)
                        $out .= $v_iline.$v_depth;
                    $out .= $s;
                    $tk=1;
                }
            }
        }
        if($tk)
            $out .= $v_iline;
        return $out;
    }
    ///<summary></summary>
    ///<param name="context"></param>
    /**
    * 
    * @param mixed $context
    */
    protected function __rm_childs($context){
        $is_rmc=$context == 'RemoveChilds';
        $fc=function($v, $context){
            $tab=array();
            while($v){
                if($c=$v->Childs){
                    foreach($c as $_v){
                        $_v->setParentNode(null, $context);
                        array_push($tab, $_v);
                    }
                }
                $v=array_pop($tab);
            }
        };
        $fc=$fc->bindTo($this);
        if($this->ChildCount > 0){
            $c=$this->Childs;
            foreach($c as $v){
                if($v === $this){
                    continue;
                }
                else{
                    $v->setParentNode(null, $context);
                    if($is_rmc)
                        $fc($v, $context);
                }
            }
            $c->Clear();
        }
        $this->unsetFlag(IGK_CHILDS_FLAG);
        if($tab=$this->getAttachChilds()){
            foreach($tab as $v){
                $this->add($v);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function __sortChild(){
        if($this->SortRequired){
            $g=$this->Childs;
            if($g)
                igk_usort($g, array("IGKHtmlItem", "SortChild"));
            $this->unsetFlag(IGK_SORTREQUIRED_FLAG);
        }
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return get_class($this)."[ ".$this->TagName." ] ; Attributes : [".(($attr=$this->getAttributes()) ? $attr->getCount(): 0)."] ; Childs : [ ".$this->ChildCount." ]";
    }
    ///<summary></summary>
    ///<param name="child"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $child
    * @param mixed $index the default value is null
    */
    protected function _AddChild($child, $index=null){
        if($this->isEmptyTag() || ($child->ParentNode === $this)){
            igk_debug_wln("/!\\ ".__METHOD__.":  empty tag or parent is this: ".$this->getTagName());
            return false;
        }
        $index=$index ?? $child->getIndex();
        $g=$this->Childs;
        $g[]=$child;
        $this->setupChild($child, $index, __FUNCTION__);
        $this->setFlag(IGK_SORTREQUIRED_FLAG, 1);
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function _initAttributeCollections(){
        $g=$this->createAttributeCollection() ?? igk_die("failed to create attribute collections");
        $this->setFlag(IGK_ATTRS_FLAG, $g);
        return $g;
    }
    ///<summary></summary>
    ///<param name="child"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $child
    * @param mixed $index the default value is null
    */
    protected function _setUpChildIndex($child, $index=null){
        if($index === null){
            $i=$child->Index;
            if(!is_numeric($i) || $child->AutoIndex){
                $child->setIndex($this->ChildCount > 0 ? $this->ChildCount-1: 0, true);
            }
        }
        else if(is_numeric($index)){
            $child->setIndex($index, true);
        }
    }
    ///<summary>add child to this node. </summary>
    ///<param name="nameorchilds">tagname or HtmlItem element</param>
    ///<param>array of attribute</param>
    ///<param>Required index</param>
    /**
    * add child to this node.
    * @param mixed $nameorchilds tagname or HtmlItem element
    * @param mixed $arrayof attribute
    * @param mixed $Required index
    */
    public function add($nameorchilds, $attributes=null, $index=null){
        $node=null;
        if($nameorchilds === null)
            return null;
        if(is_string($nameorchilds)){
            $tab=func_get_args();
            $b=$this->getTempFlag("RootNS");
            if($b != null){
                if(!is_callable($b)){
                    throw new IGKException('callback is not define or illegal to create node ['.$nameorchilds.']');
                }
                $node=$this->__init_new_node_func($b, array($nameorchilds, $index));
                if($node){
                    $node->setTempFlag("RootNS", $b);
                    $node->setTempFlag("RootNSPrefix", $this->getTempFlag("RootNSPrefix"));
                }
            }
            if(($node === null) && ($node=igk_createnode_with_package($tab)) && $this->_AddChild($node))
                return $node;
            $node=$node ?? $this->__init_new_node_func(array(get_class($this), 'CreateWebNode'), $tab);
        }
        else if(is_object($nameorchilds) && igk_reflection_class_extends(get_class($nameorchilds), IGK_HTML_ITEMBASE_CLASS)){
            $b=$nameorchilds->ParentNode;
            if(($b !== $this) && $this->_AddChild($nameorchilds)){
                $node=$nameorchilds;
                if($b !== null){
                    $b->remove($node, 0);
                }
            }
        }
        else{
            igk_die("Exception:::Tag not valid ".$nameorchilds);
        }
        if($node){
            if($attributes){
                $node->AppendAttributes($attributes);
            }
        }
        return $node;
    }
    ///<summary>add items</summary>
    /**
    * add items
    */
    public function addItems($arrayChilds){
        $this->addRange($arrayChilds);
        return $this;
    }
    ///<summary>used to add non declared element by namespace</summary>
    /**
    * used to add non declared element by namespace
    */
    public function addNS($ns, $name){
        $h=igk_get_env(IGK_ENV_HTML_COMPONENTS);
        if($h == null)
            return null;
        $c=igk_getv(igk_getv(igk_getv($h, $ns), strtolower($name)), "callback");
        $p=array_slice(func_get_args(), 2);
        if(igk_is_callable($c)){
            $s=$this->__init_new_node_func($c, $p);
            if($s){
                $s->setParam(IGK_NS_PARAM_KEY, $ns);
                $s["xmlns"]=new IGKNSValue($s, $ns);
            }
            return $s;
        }
            $k="add".$name;
            return call_user_func_array(array($this, $k), $p);

    }
    ///<summary>add range of node</summary>
    /**
    * add range of node
    */
    public function AddRange($arrayChilds){
        if(is_array($arrayChilds)){
            foreach($arrayChilds as $k){
                $this->add($k);
            }
            return true;
        }
        return false;
    }
    ///<summary>add self node to</summary>
    /**
    * add self node to
    */
    public function addTo($target){
        if($target){
            $target->add($this);
        }
    }
    ///add attribute array
    /**
    */
    public function AppendAttributes($attributes=null){
        if(is_array($attributes)){
            foreach($attributes as $k=>$v){
                $this[$k]=$v;
            }
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    public function attachChild($node){
        $g=$this->getFlag(IGK_ATTACHCHILD_FLAG);
        if($g == null){
            $g=array();
        }
        $this->add($node);
        $g[]=$node;
        $this->setFlag(IGK_ATTACHCHILD_FLAG, $g);
        return $this;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->Content=null;
        $c=$this->getAttributes();
        if($c)
            $c->Clear();
        $this->ClearChilds();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearChilds(){
        $this->__rm_childs(__FUNCTION__);
        return $this;
    }
    ///<summary>clear class</summary>
    /**
    * clear class
    */
    public function clearClass(){
        $this["class"]=null;
        return $this;
    }
    ///<summary></summary>
    ///<param name="opt"></param>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $opt
    * @param mixed $tag
    */
    public function closeWithCloseTag($opt, $tag){
        if($opt !== null){
            if(method_exists($opt, "mustclosetag")){
                return $opt->mustclosetag($tag);
            }
            else if(isset($opt->{"mustclosetag"}) && is_callable($g=$opt->{"mustclosetag"})){
                return $g($tag);
            }
        }
        return true;
    }
    ///<summary></summary>
    ///<param name="node"></param>
    ///<param name="erase" default="true"></param>
    /**
    * 
    * @param mixed $node
    * @param mixed $erase the default value is true
    */
    public function copyAttributes($node, $erase=true){
        if($node->HasAttributes){
            foreach($node->m_attributes as $k=>$v){
                if($erase){
                    if(is_object($v)){
                        if(get_class($v) == "IGKHtmlClassValueAttribute"){
                            $this[$k]=$v->getValue();
                            continue;
                        }
                        $this[$k]=IGKHtmlUtils::GetValue($v);
                    }
                    else
                        $this[$k]=$v;
                }
                else{
                    if(igk_getv($this->m_attributes, $k) == null){
                        $this[$k]=$v;
                    }
                }
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function createAttributeCollection(){
        return new IGKHtmlAttribs($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function createChildCollection(){
        return new IGKXmlChilds($this);
    }
    ///<summary></summary>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $node
    */
    public function detachChild($node){
        $tab=$this->getFlag(IGK_ATTACHCHILD_FLAG);
        $i=0;
        while($i < count($tab)){
            if($tab[$i] == $node){
                unset($tab[$i]);
            }
            $i++;
        }
        if(igk_count($tab) == 0){
            $this->unsetFlag(IGK_ATTACHCHILD_FLAG);
        }
        else
            $this->setFlag(IGK_ATTACHCHILD_FLAG, $tab);
        igk_html_rm($node);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Dispose(){
        $q=$this;
        $tab=array();
        array_push($tab, $q);
        while(count($tab) > 0){
            $q=array_pop($tab);
            if(!$q->getIsDisposing()){
                $q->setIsDisposing(true);
                if($q->m_attributes)
                    $q->m_attributes->Dispose();
                if($q->m_childs){
                    $t=$q->m_childs->ToArray();
                    if(count($t) > 0){
                        array_push($tab, $q);
                        foreach($t as $r=>$m){
                            array_push($tab, $m);
                        }
                        continue;
                    }
                }
            }
            $q->unsetDisposing();
            if(($r=$q->getAttachDisposed())){
                call_user_func_array($r, array($q));
                $q->unsetAttachDisposed();
            }
            igk_html_unreg_callback_node($q);
            igk_html_rm($q);
            $q->setParentNode(null, __FUNCTION__);
            $q->resetParam();
            igk_notification_push_event(IGK_NODE_DISPOSED_EVENT, $q);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAttachChilds(){
        return $this->getFlag(IGK_ATTACHCHILD_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getAttachDisposed(){
        return $this->getFlag(IGK_ATTACHDISPOSE_FLAG);
    }
    ///<summary>get attributes collection</summary>
    /**
    * get attributes collection
    */
    public function getAttributes(){
        return $this->getFlag(IGK_ATTRS_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAttributesKeys(){
        $attr=$this->getAttributes();
        if($attr){
            $tab=array();
            foreach($attr as $k=>$v){
                $tab[]=$k;
            }
            return $tab;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getAttributeString($options=null){
        $out=IGK_STR_EMPTY;
        igk_get_defined_ns($this, $out, $options);
        if ($options && ($options->Context =="mail")){
            //for mail rendering attribures
            $attribs = $this->Attributes;
            $g = $attribs["style"];
            $cl = $attribs["class"];
            if (!empty($g)){
                $g = rtrim($g,";")."; ";
            }
            if ($cl){
                foreach($cl->getKeys() as $k){
                    $matcher = [];
                    if (!empty($tagname = $this->tagName)){
                        $matcher[] = $this->tagName.".".$k;
                    }
                    if (!empty($id = $this->Id)){
                        $matcher[] = "#id.$k";
                    }
                    $matcher[] = ".{$k}";
                    foreach($matcher as $m){
                        if ($p = $options->renderTheme[$m]){                         
                            $g .= rtrim($p, ";").";";                            
                        }
                    }
                }
                if ($options->renderTheme){
                    $g = igk_css_treatstyle($g, $options->renderTheme, $options->renderTheme);
                }
            }
            $this->setStyle("{$g}");
        }



        if($this->HasAttributes){
            $attrs=$this->Attributes;
            foreach($attrs as $k=>$v){
                if(($k == "@activated") && is_array($v)){
                    $out .= " ";
                    foreach($v as $ak=>$av){
                        $out .= $ak." ";
                    }
                    continue;
                }
                $v_is_obj=is_object($v);
                if($v_is_obj && igk_reflection_class_extends($v, IGKHtmlActiveAttrib::class)){
                    if(!empty($out))
                        $out .= " ";
                    $out .= $k." ";
                    continue;
                }
                $r=(is_object($v) && igk_reflection_class_extends($v, IGKHtmlExpressionAttribute::class));
                if($r)
                    $c=$v->getValue();
                else{
                    if(is_array($v)){
                        igk_wln_e("/!\\ don't send array as attribute: ", $k, $v);
                    }
                    $c=self::GetStringAttribute($v, $options);
                }
                if(is_numeric($c) || !empty($c)){
                    if(!empty($out))
                        $out .= " ";
                    if($options && !$r && igk_getv($options, "DocumentType") == 'xml'){
                        $c=str_replace('&', '&amp;', $c);
                    }
                    if($r){
                        $out .= $c;
                    }
                    else
                        $out .= $k."=".$c;
                }
            }
        }
        $event=$this->getFlag(IGKHtmlItem::EVENTS);
        if($event){
            $s="";
            foreach($event as $k=>$v){
                $s .= $v->getValue()." ";
            }
            $out .= " ".$s;
        }
		$g=$this->getAttributes();
        return $out;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanAddChild(){
        return true;
    }
    ///<summary></summary>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $index
    */
    public function getChildAtIndex($index){
        $e=igk_getv($this->Childs, $index);
        return $e;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getChildCount(){
        return igk_count($this->Childs);
    }
    ///<summary>get the childs collection</summary>
    /**
    * get the childs collection
    * @return iterable|array|mixed 
    */
    public function getChilds(){
        if(($g=$this->getFlag(IGK_CHILDS_FLAG)) == null){
            $g=$this->createChildCollection();
            $this->setFlag(IGK_CHILDS_FLAG, $g);
        }
        return $g;
    }
    ///<summary></summary>
    ///<param name="out" ref="true"></param>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed * $out
    * @param mixed $options the default value is null
    */
    public function getDefineNS(& $out, $options=null){
        $ns=$this->getFlag(IGK_DEFINEDNS_FLAG);
        if($options && (igk_count($ns) > 0)){
            if(!isset($options->ns))
                $options->ns=array();
        }
        $m=0;
        $ns=$this->getFlag(IGK_DEFINEDNS_FLAG);
        if($ns) foreach($ns as $k=>$v){
            if(isset($options->ns) && (igk_getv($options->ns, $k) == $v))
                continue;
            if($m)
                $out .= " ";
            if($k == "@global"){
                $out .= "xmlns=\"".$v."\"";
            }
            else{
                $out .= "xmlns:{$k}=\"".$v."\"";
            }
            $m=1;
            $options->ns[$k]=$v;
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDesc(){
        return $this->getFlag(IGK_DESC_FLAG);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $value
    */
    public function getElementByAttribute($name, $value){
        if(($c=$this->getChilds()) == null){
            return null;
        }
        $tab=array();
        $s=strtolower($value);
        foreach($c as $k){
            if(strtolower($k[$name]) == $s)
                $tab[]=$k;
            $r=$k->getElementByAttribute($name, $s);
            if(is_array($r))
                $tab=array_merge($tab, $r);
            else if($r)
                $tab[]=$r;
        }
        if(count($tab) == 1)
            return $tab[0];
        return $tab;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function getElementById($id){
        $c=$this->getChilds();
        if($c == null){
            return null;
        }
        $tab=array();
        $s=strtolower($id);
        $q=$this;
        $p=null;
        $itab=array($q);
        while($q=array_pop($itab)){
            if(strtolower($q["id"]) == $s){
                $tab[]=$q;
                continue;
            }
            if($c=$q->Childs){
                foreach($c as $k){
                    array_push($itab, $k);
                }
            }
        }
        if(count($tab) == 1)
            return $tab[0];
        return $tab;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $name
    * @return *
    */
    public function & getElementsByTagName($name){
        $tab=array();
        $s=strtolower($name);
        $c=$this->getChilds();
        if($c){         
            if($name == "*"){
                $tab=array_merge($tab, $c->ToArray());
                foreach($c as $k){
                    $c=$k->getElementsByTagName($s);
                    if(is_array($c) && (count($c) > 0))
                        $tab=array_merge($tab, $c);
                }
            }
            else{
                foreach($c as $k){
                    if(strtolower($k->TagName) == $s){
                        $tab[]=$k;
                    }
                    $c=$k->getElementsByTagName($s);
                    if(is_array($c) && (count($c) > 0))
                        $tab=array_merge($tab, $c);
                }
            }
        }
        return $tab;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasAttachedChild(){
        return igk_count($this->getFlag(IGK_ATTACHCHILD_FLAG)) > 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasAttributes(){
        $attr=$this->getAttributes();
        if(!$attr || $attr->getCount() == 0)
            return false;
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasChilds(){
        return ($this->ChildCount > 0);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function getIsDisposing(){
        return $this->getFlag(IGK_ISDISPOSING_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        if($this->evalCallback(__FUNCTION__, $o)){
            return $o;
        }
        $tn=$this->getFlag(IGK_NODETAG_FLAG);
        if(empty($tn)){
            return false;
        }
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        if($this->evalCallback(__FUNCTION__, $o)){
            return $o;
        }
        return parent::getIsVisible();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSortRequired(){
        return $this->getFlag(IGK_SORTREQUIRED_FLAG, 0);
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        $out=IGK_STR_EMPTY;
        $c=$this->Content;
        $v_iline=igk_html_indent_line($options);
        $v_pdepth=$this->getDepthIndent($options);
        if(is_numeric($c)){
            return $c;
        }
        $t_childs=$this->GetRenderingChildren($option=null);
        $tc_childs=igk_count($t_childs);
        if((empty($c) || is_scalar($c) || is_numeric($c)) && ($tc_childs == 0)){
            return $c;
        }
        else{
            if($options){
                if(isset($options->Depth))
                    $options->Depth++;
                else
                    $options->Depth=1;
            }
            $s=IGKHtmlUtils::GetContentValue($this, $options);
            $ck=0;
            $ch=$this->__renderVisibleChild($t_childs, $options, $ck);
            $v_depth=$this->getDepthIndent($options);
            if($s != null){
                if($s == "0"){
                    $out .= "&#48;";
                }
                else{
                    if(!empty($s)){
                        $out .= empty($ch) ? $s: $s.$v_iline;
                    }
                }
            }
            if(is_numeric($ch) || !empty($ch)){
                $out .= $v_iline.$v_depth.$ch.$v_pdepth;
            }
            if($options){
                $options->Depth--;
            }
        }
        return $out;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function isEmptyTag(){
        return false;
    }
    ///<summary></summary>
    ///<param name="source"></param>
    /**
    * 
    * @param mixed $source
    */
    public function Load($source){
        return self::LoadInContext($this, $source, IGKHtmlContext::XML);
    }
    ///<summary>utility function</summary>
    /**
    * utility function
    */
    public function loadArray($tab, $callback=null){
        if($tab == null){
            return;}
        if($callback){
            foreach($tab as $k=>$v){
                if(!$callback($this, $k, $v)){
                    $this->addNode($k)->Content=$v;
                }
            }
        }
        else{
            foreach($tab as $k=>$v){
                $this->addNode($k)->Content=$v;
            }
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetExists($key){
        $g=$this->Attributes;
        return $g ? $g->offsetExists($key): false;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        $g=$this->Attributes;
        if($g == null){
            return null;
        }
        return $g->offsetGet($key);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    function offsetSet($key, $value){
        $g=$this->Attributes;
        if($value || is_numeric($value)){
            if($g == null)
                $g=$this->_initAttributeCollections();
            $g[$key]=$value;
        }
        else{
            if($g){
                $g[$key]=null;
            }
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $v
    */
    public function offsetSetExpression($n, $v){
        $attr=$this->Attributes;
        if($attr)
            $attr->offsetSetExpression($n, $v);
        else{
            $g=$this->_initAttributeCollections();
            $g->offsetSetExpression($n, $v);
        }
		return $this;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetUnset($key){
        $g=$this->Attributes;
        if($g){
            $g->offsetUnset($key);
            if($g->Count == 0)
                $this->unsetAttributes();
        }
    }
    ///<summary>Self remove or remove child</summary>
    /**
    * Self remove or remove child
    */
    public function remove($child=null, $changeParent=1){
  
        if ($child === null){
            igk_html_rm($this);
            return;
        }
        $v_deleted=false;
        $c=$this->getChilds();
        if(($c == null) || (!isset($child)))
            return $v_deleted;
        for($i=0; $i < igk_count($c); $i++){
            if(isset($c[$i])){
                if(($c[$i] === $child)){
                    unset($c[$i]);
                    if($changeParent)
                        $child->setParentNode(null, __FUNCTION__);
                    $v_deleted=true;
                    $i--;
                    continue;
                }
            }
            else{
                igk_debug_wln(" index ".$i." not found ". $child["id"]);
            }
        }
        return $v_deleted;
    }
    ///<summary></summary>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $index
    */
    public function removeChildAt($index){
        $c=$this->getChilds();
        if($c){
            $p=igk_getv($c, $index, null);
            if($p){
                unset($c[$index]);
                $p->setParentNode(null);
                return true;
            }
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function RemoveChilds(){
        $this->__rm_childs(__FUNCTION__);
        return $this;
    }
    ///<summary></summary>
    /**
    *
    */
    public function render($options=null){
        return igk_html_render_node($this, $options);
    }
    ///<summary></summary>
    ///<param name="nodename"></param>
    /**
    * 
    * @param mixed $nodename
    */
    public function RenderInNode($nodename){
        $n=igk_createnode($nodename);
        $n->setContent($this->Render());
        $n->RenderAJX();
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    protected function setAttachDisposed($v){
        $this->setFlag(IGK_ATTACHDISPOSE_FLAG, $v);
    }
    ///<summary>set node attibute</summary>
    ///<param name="key">attribute name</param>
    ///<param name="value">attribute value</param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function setAttribute($key, $value){
        $this[$key]=$value;        
        return $this;
    }
    ///<summary></summary>
    ///<param name="assert"></param>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $assert
    * @param mixed $key
    * @param mixed $value
    */
    public function setAttribute_assert($assert, $key, $value){
        if($assert){
            $this[$key]=$value;
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="assert"></param>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $assert
    * @param mixed $key
    * @param mixed $value
    */
    public function setAttributeC($assert, $key, $value){
        return $this->setAttribute_assert($assert, $key, $value);
    }
    ///<summary></summary>
    ///<param name="item"></param>
    /**
    * 
    * @param mixed $item
    */
    public function setAttributes($item){
        if(is_array($item) || is_object($item)){
            foreach($item as $k=>$v){
                $this[$k]=IGKHtmlUtils::GetValue($v);
            }
        }
        return $this;
    }
    ///<summary>set the class combination of this item</summary>
    /**
    * set the class combination of this item
    */
    public function setClass($value){
        $this["class"]=$value;
        return $this;
    }
    public function setAssertClass($condition, $value){
        if ($condition){
            $this->setClass($value);
        }
        return $this;
    }
    ///<summary>set internal description</summary>
    /**
    * set internal description
    */
    public function setDesc($desc){
        $this->setFlag(IGK_DESC_FLAG, $desc);
        return $this;
    }
    ///<summary>set the id of this item</summary>
    /**
    * set the id of this item
    */
    public function setId($id){
        $this["id"]=
        $this["name"]=$id;
        return $this;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    protected function setIsDisposing($v){
        $this->setFlag(IGK_ISDISPOSING_FLAG, $v);
    }
    ///<summary></summary>
    ///<param name="child"></param>
    ///<param name="index"></param>
    ///<param name="context"></param>
    /**
    * 
    * @param mixed $child
    * @param mixed $index
    * @param mixed $context
    */
    protected function setupChild($child, $index, $context){
        if(!$child || !is_object($child) || !is_subclass_of(get_class($child), IGK_HTML_ITEMBASE_CLASS))
            return false;
        $child->setParentNode($this, $context);
        $this->_setUpChildIndex($child, $index);
        return true;
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public static function SortChild($a, $b){
        if($a->Index == $b->Index)
            return 0;
        $i1=$a->Index ?? 0;
        $i2=$b->Index ?? 0;
        return ($i1 < $i2) ? -1: 1;
    }
    ///<summary></summary>
    ///<param name="item"></param>
    ///<param name="callback"></param>
    /**
    * 
    * @param mixed $item
    * @param mixed $callback
    */
    public static function SortChildCallBack($item, $callback){
        $g=$item->Childs;
        igk_usort($g, $callback);
        $item->unsetFlag(IGK_SORTREQUIRED_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function unsetAttachDisposed(){
        $this->unsetFlag(IGK_ATTACHDISPOSE_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function unsetAttributes(){
        $this->unsetFlag(IGK_ATTRS_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function unsetDisposing(){
        $this->unsetFlag(IGK_ISDISPOSING_FLAG);
    }
}
///<summary>represent a html item</summary>
/**
* represent a html item
*/
class IGKHtmlItem extends IGKXmlNode implements ArrayAccess {
    const EVENTS=0xa1;
    ///<summary></summary>
    ///<param name="tagname"></param>
    /**
    * 
    * @param mixed $tagname
    */
    public function __construct($tagname){
        parent::__construct($tagname);
    }


    ///<summary> used to activate an attribute</summary>
    /**
    *  used to activate an attribute
    */
    public function activate($attr){
        $attrib=$this->Attributes ?? $this->_initAttributeCollections();
        $attrib->activate($attr);
        return $this;
    }

	public function setAssertAttributes($condition, $values){
		if ($condition){
			$this->setAttributes($values);
		}
		return $this;
	}
    ///<summary></summary>
    ///<param name="style" default="null"></param>
    /**
    * 
    * @param mixed $style the default value is null
    */
    public function addBr($style=null){
        $br=$this->add("br", $style);
        return $br;
    }
    ///<summary></summary>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function addDiv($attributes=null, $index=null){
        return $this->add("div", $attributes, $index);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="multiselect" default="false"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $multiselect the default value is false
    * @param mixed $attributes the default value is null
    */
    public function addFile($id, $multiselect=false, $attributes=null){
        $i=$this->add("input");
        if($i){
            $i["type"]="file";
            $i["id"]=$id;
            $i["name"]=$multiselect ? $id."[]": $id;
            $i["class"]="clfile";
            $i["multiple"]="true";
            $i->AppendAttributes($attributes);
        }
        return $i;
    }
    ///<summary></summary>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function addForm($attributes=null, $index=null){
        if (is_string($attributes)){
            // uri
            if ($index === null)
                $index = "POST";
            $attributes = ["action"=>$attributes, "method"=>$index];
            $index = null;
        }
        return $this->add("form", $attributes, $index);
    }
    ///add horizontal separator
    /**
    */
    public function addHSep(){
        return $this->add(igk_html_node_separator());
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="uri" default="null"></param>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $uri the default value is null
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function addIFrame($id, $uri=null, $attributes=null, $index=null){
        $frm=$this->add("iframe", null, $index);
        if($frm == null)
            return null;
        $frm["id"]=$id;
        $frm["src"]=$uri;
        $frm["class"]="cliframe";
        $frm->AppendAttributes($attributes);
        return $frm;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="type" default="text"></param>
    ///<param name="value" default="null"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $type the default value is "text"
    * @param mixed $value the default value is null
    * @param mixed $attributes the default value is null
    */
    public function addInput($id, $type="text", $value=null, $attributes=null){
        $i=$this->add("input");
        if($i){
            $i["type"]=$type;
            $i["value"]=($value === null) ? igk_getr($id, null): $value;
            $i["id"]=
            $i["name"]=$id;
            $i["class"]="cl".$type;
            switch($type){
                case "button":
                case "submit":
                case "reset":
                $i["class"]="igk-btn";
                break;
            }
            $i->AppendAttributes($attributes);
        }
        return $i;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function addNothing(){
        $c=new IGKHtmlNothingItem();
        $this->add($c);
        return $c;
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $uri
    * @param mixed $attributes the default value is null
    */
    public function addObject($uri, $attributes=null){
        $obj=$this->add("object");
        if($obj == null)
            return null;
        $obj["data"]=$uri;
        $obj->AppendAttributes($attributes);
        return $obj;
    }
    ///<summary></summary>
    ///<param name="itemorarray"></param>
    /**
    * 
    * @param mixed $itemorarray
    */
    public function addPrev($itemorarray){
        $p=$this->add("pre");
        igkOb::Start();
        print_r($itemorarray);
        $c=igkOb::Content();
        igkOb::Clear();
        $p->Content=$c;
        return $p;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="alt" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $alt the default value is null
    */
    public function addResImg($name, $alt=null){
        $img=$this->add("img", array("src"=>R::GetImgUri(trim($name)), "alt"=>$alt));
        return $img;
    }
    ///<summary>add inline script to node</summary>
    /**
    * add inline script to node
    */
    public function addScript($file=null, $tag=null, $canBeMerged=true){
   
        $s=$this->add("script");
        $s["src"]=$file;
        $s->canBeMerged=$canBeMerged;
        $s->tag=$tag;
        return $s;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function addSelect($id, $attributes=null, $index=null){
        $s=$this->add("select", $attributes, $index);
        $s["name"]= $s["id"]=$id;
        $s["class"]="igk-form-control -clselect";
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function addSpace(){
        $this->add(igk_html_node_text("&nbsp;"));
        return $this;
    }
    ///<summary></summary>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function addTable($attributes=null, $index=null){
        return $this->add("table", $attributes, $index)->setClass("igk-table");
    }
    ///<summary></summary>
    ///<param name="itemorarray"></param>
    ///<param name="filter" default="null"></param>
    /**
    * 
    * @param mixed $itemorarray
    * @param mixed $filter the default value is null
    */
    public function addTableBuild($itemorarray, $filter=null){
        $p=$this->addDiv();
        if(is_array($itemorarray) || is_object($itemorarray)){
            $tab=$p->addTable();
            $tr=$tab->addTr();
            $tr->add("th")->Content="Key";
            $tr->add("th")->Content="Value";
            foreach($itemorarray as $k=>$v){
                $tr=$tab->addTr();
                $tr->addTd()->Content=$k;
                $tr->addTd()->Content=$v;
            }
        }
        else{
            $p->Content=$itemorarray;
        }
        return $p;
    }
    ///add vertical separator
    /**
    */
    public function addVSep(){
        return $this->add(igk_html_node_separator('vertical'));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        $this->Content=null;
        $this->ClearChilds();
    }
    ///<summary></summary>
    ///<param name="opt"></param>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $opt
    * @param mixed $tag
    */
    public function closeWithCloseTag($opt, $tag){
        
        if(($opt == null) || !method_exists($opt, "mustclosetag") || !is_callable([$opt, "mustclosetag"]))
            return igk_html_mustclosetag($tag);
        return true;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="param" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $param the default value is null
    */
    public static function CreateElement($name, $param=null){
        if(!empty($name)){
            if(IGKString::StartWith($name, 'igk:')){
                $f=igk_createnode(substr($name, 4), null, $param);
                if($f)
                    return $f;
            }
            $tb=explode(':', $name);
            if(count($tb) == 1){
                return new IGKHtmlItem($name);
            }
        }
        return null;
    }
    ///<summary>create a web node with is value</summary>
    ///<param name="indexOrArgs">mixed. index or array </param>
    ///<param name="attributes">attribute to set to created node</param>
    ///<param name="name">registration name</param>
    /**
    * create a web node with is value
    * @param mixed indexOrArgs mixed. index or array
    * @param mixed $attributes attribute to set to created node
    * @param mixed name registration name
	* @return object|IGKHtmlItem
    */
    public static function CreateWebNode($name, $attributes=null, $indexOrArgs=null){
        $c=null;
        if(!empty($name)){
            switch(strtolower($name)){
                case "table":
                $c=new IGKHtmlTable();
                break;
                case "code":
                $c=igk_html_node_code();
                break;
                case "script":
                $c=new IGKHtmlScript();
                break;
                case "meta":
                $c=new IGKHtmlMeta();
                break; 
                case "igk-html-image":
                case "igk-img":
                case "image":
                $tc=new ReflectionClass(IGKHtmlImgItem::class);
                $c=$tc->newInstanceArgs(array_slice(func_get_args(), 1));
                break;
                case "ul":
                $c=new IGKHtmlUl();
                break;
                case "form":
                    $args = is_array($indexOrArgs) ? $indexOrArgs : []; 
                    $c=new \IGK\System\Html\Dom\HtmlForm(...$args);
                break;
                case "div":
                $c=new IGKHtmlDiv();
                break;
				default:
                return igk_create_html_component($name, $indexOrArgs, function($c, $def) use ($name, $indexOrArgs){
                    if(!igk_is_html($c))
                        return;
                    $fc=igk_getv($def, "name");
                    $fg=$c->getIGKNodeType();
                    if(!isset($fg)){
                        igk_wln("/!\ Created node ins't valid for specification [{$fg}] ..... ".$fc. "== ".get_class($c). " :::");
                    }
                    $c->setNodeType(igk_getv($def, "type"));
                    $c->setNodeTypeName($fc);
                    $c->setNodeCreationArgs($indexOrArgs);
                });
            }
        }
        else
            $c=igk_html_node_text();
        if($c && $attributes){
            $c->AppendAttributes($attributes);
        }
        return $c;
    }
    ///<summary> used to remove an activated attribute</summary>
    /**
    *  used to remove an activated attribute
    */
    public function deactivate($attr){
        $attrib=$this->Attributes ?? $this->_initAttributeCollections();
        $attrib->deactivate($attr);
        return $this;
    }
    ///<summary> with the method the expression will be $node->on["data"]  = 45;</summary>
    ///<param name="eventObj">the event object expression to add to this node</param>
    /**
    *  with the method the expression will be $node->on["data"] = 45;
    * @param mixed $eventObj the event object expression to add to this node
    */
    public final function & geton($eventObj){
        $eventObj=is_array($eventObj) ? "__temp__": $eventObj;
        $e=$this->on($eventObj);
        if($eventObj == '__temp__'){
            $e->{'@__callback'}=function($e, $id=null){unset($e->{'@__callback'});
                $c=$this->getFlag(self::EVENTS);
                unset($c['__temp__']);
                if($id != null){
                    if($p=igk_getv($c, $id))
                        return $p[$id];
                    if($e->getid() == "__temp__"){
                        $e->setid($id);
                    }
                }
                $c[$e->getid()]=$e;
                $this->setFlag(self::EVENTS, $c);
                return $e;
            };
        }
        return $e;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getStyle(){
        return $this->getFlag(IGK_STYLE_FLAG);
    }
    ///<summary></summary>
    ///<param name="fname"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $fname
    * @param mixed $context the default value is null
    */
    public function inflate($fname, $context=null){
        if(!preg_match("/\.pxhtml$/i", $fname))
            $fname .= ".pxhtml";
        if(!file_exists($fname)){
            return;}
        $ctrl=null;
        $ctrl=igk_get_env(IGKEnvKeys::CURRENT_CTRL);
        if($context == null){
            $context=(object)array("ctrl"=>$ctrl);
        }
        else{
            if(!isset($context->ctrl))
                $context->ctrl=$ctrl;
        }
        $this->Load(igk_io_read_allfile($fname), $context);
    }
    ///<summary></summary>
    ///<param name="source"></param>
    ///<param name="contextObj" default="null"></param>
    /**
    * 
    * @param mixed $source
    * @param mixed $contextObj reprensent the loading context. html|xml|object that will represent the loading source.the default value is null
    */
    public function Load($source, $contextObj=null){ 
        return self::LoadInContext($this, $source, $contextObj ?? IGKHtmlContext::Html);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        if($key == "style")
            return $this->m_style;
        
        return parent::offsetGet($key);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    function offsetSet($key, $value){
        if($key == "style"){
            if(empty($value)){
                $this->unsetFlag(IGK_STYLE_FLAG);
                parent::offsetSet($key, null);
            }
            else{
                $g=$this->getStyle();
                if($g == null)
                    $g=new IGKHtmlStyleValueAttribute($this);
                $g->setValue($value);
                $this->setFlag(IGK_STYLE_FLAG, $g);
                parent::offsetSet($key, $g);
            }
        }
        else
            parent::offsetSet($key, $value);
    }
    ///<summary></summary>
    ///<param name="eventObj"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $eventObj
    * @return *
    */
    public function & on($eventObj){
        $c=$this->getFlag(self::EVENTS) ?? array();
        if(isset($c[$eventObj])){
            $b=$c[$eventObj];
            return $b;
        }
        $b=IGKHtmlEventProperty::CreateEventProperty($eventObj);
        $c[$eventObj]=$b;
        $this->setFlag(self::EVENTS, $c);
        if(func_num_args() > 1){
            $b->content=func_get_args()[1];
            return $this;
        }
        return $b;
    }
    ///<summary></summary>
    ///<param name="ft"></param>
    /**
    * 
    * @param mixed $ft
    */
    public function setFont($ft){
        $this->setClass("+ft-".$ft);
        return $this;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setStyle($value){
        if(empty($value))
            return;
        if(IGKString::StartWith($value, '+/')){
            $s=$this["style"];
            $value=substr($value, 2);
        }
        $this["style"]=igk_css_treatstyle($value);
        return $this;
    }
}
///<summary>Represente class: IGKControllerOptionsItem</summary>
/**
* Represente IGKControllerOptionsItem class
*/
final class IGKControllerOptionsItem extends IGKHtmlItem{
    private $m_ctrl;
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        $this->ClearChilds();
        $c=igk_getctrl($this->Ctrl);
        if($c == null)
            return false;
        $v_opts=$this->Ctrl->getControllerConfigOptions();
        $v_opts->Index=-1000;
        $this->add($v_opts);
        return parent::__AcceptRender($o);
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function __construct($ctrl){
        if($ctrl == null)
            igk_die("Argument exception");
        parent::__construct("div");
        $this->m_ctrl=$ctrl;
        $this["class"]="igk-ctrl-options";
        $this["igk-type"]="igk-ctrl-options";
        $this->Index=-1000;
        $t=$ctrl->TargetNode;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCtrl(){
        return igk_getctrl($this->m_ctrl);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        $r=parent::getIsVisible() && $this->m_ctrl->App->IsSupportViewMode(IGKViewMode::WEBMASTER) && $this->Ctrl->CurrentPageFolder != IGK_CONFIG_PAGEFOLDER;
        return $r;
    }
}
///DEBUGING
/**
*/
final class IGKDebuggerNode extends IGKHtmlItem {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("div");
        $this["class"]="igk-debugger";
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function getMessage($o=null){
        if($this->HasChilds){
            $o=parent::Render($o);
            $this->ClearChilds();
            return $o;
        }
        return null;
    }
}
///<summary>Default Balafon Install Page </summary>
/**
* Default Balafon Install Page
*/
final class IGKDefaultMainPage extends IGKHtmlItem{
    static $sm_instance;
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function __AcceptRender($options=null){
        if(!$this->IsVisible){
            return 0;
        }
        igk_set_env("sys://nopowered", 1);
        $this->clearChilds();
        $n=$this->addContainer()->addCol('fitw')->addRow();
        $n->setClass("default-home-page")->addObData(function(){
            $r=R::GetCurrentLang();
            $f=IGK_LIB_DIR."/Articles/startapp/default.homepage.{$r}.phtml";
            if(file_exists($f))
                include($f);
        }
        , null);
        $this->addDiv()->setClass("com-host")->addCommunityLinks([
            "linkedin"=>"https://www.linkedin.com/in/igkdevbondjedoue/", 
            "twitter"=>"https://twitter.com/@IGKDEV", 
            "facebook"=>"https://facebook.com/IGKDEV", 
        ]);
        $doc=$options->Document;
        if($doc){
            igk_google_addfont($doc, "Roboto");
            $doc->Title=igk_sys_getconfig("website_title");
            $doc->Theme->addTempFile(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/default.homepage.pcss");
            $doc->body["class"] = "+google-Roboto";
            $doc->body->AppendContent->addSingleNodeViewer(IGK_HTML_NOTAG_ELEMENT)->targetNode->addIGKCopyRight()
            ->setClass("google-Roboto")
            ->setStyle("position:absolute; bottom:0px;padding:10px; z-index:10;");
        }
        return 1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("div");
        $this["class"]="igk-project-start google-Roboto igk-parent-scroll";
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            self::$sm_instance=new IGKDefaultMainPage();
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        if(igk_get_env("sys://defaultpage/off") == 1){
            return 0;
        }
        return defined("IGK_DESIGN_MAINPAGE") || ((igk_app()->CurrentPageFolder == IGK_HOME) && (igk_get_defaultwebpagectrl() === null));
    }
}
///<summary>used to render global script</summary>
/**
* used to render global script
*/
final class IGKGlobalScriptManagerHost extends IGKHtmlItem{
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct('igk:scripthostnode');
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $v=igk_ob_get_func(function() use ($options){
            igk_app()->Doc->ScriptManager->localScriptRenderCallback($options);
        });
        return $v;
    }
}
///<summary>represent a href link data</summary>
/**
* represent a href link data
*/
class IGKHtmlA extends IGKHtmlItem {
    private $m_href;
    private $m_rdef;
    var $domainLink;
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __AcceptRender($option=null){
        if(!$this->getIsVisible())
            return false;
        if($this["onclick"] == null){
            $bck=$this["href"]->getUri();
            $kr=is_string($bck) ? $bck: IGKHtmlUtils::GetValue($bck);
            if(IGKString::StartWith(trim($kr), "javascript")){
                $this["onclick"]=$kr." return false;";
                $this->m_rdef=1;
            }
        }
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("a");
        $this->m_href=new IGKHtmlAHref($this);
        $this->domainLink=0;
        parent::offsetSet("href", $this->m_href);
    }
    ///<summary></summary>
    ///<param name="k"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $k
    * @param mixed $v
    */
    public function offsetSet($k, $v){
        if($k == "href"){
            if($this->m_href !== $v){
                $this->m_href->setValue($v);
                return;
            }
            else
                igk_die("can't set the href to the same value");
        }
        parent::offsetSet($k, $v);
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function RenderComplete($option=null){
        if($this->m_rdef == 1){
            $this["onclick"]=null;
            $this->m_rdef=0;
        }
    }
}
///<summary>Represente class: IGKHtmlBody</summary>
/**
* Represente IGKHtmlBody class
*/
final class IGKHtmlBody extends IGKHtmlItem {
    private $m_appendContent;
    private $m_bodyDebugHeader;
    private $m_bodyDiv;
    private $m_bodyScripts;
    private $m_script;
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    protected function __AcceptRender($options=null){
        $s=parent::__AcceptRender($options);

        
        if($s){
            $this["class"]=["ie-11-service"=>function(){
                        return !igk_css_var_support();
                    }
            ];
        }
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("body");
        $this->m_bodyDebugHeader=new IGKHtmlBodyDebuggerNode($this);
        $this->m_appendContent=igk_createnotagnode();
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        $t=array();
        $this->_getList(null, $t);
        return $t;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__;
    }
    ///<summary></summary>
    ///<param name="options"></param>
    ///<param name="t" ref="true"></param>
    /**
    * 
    * @param mixed $options
    * @param mixed * $t
    */
    private function _getList($options, & $t){
        $this->__sortChild();
        $c=$this->Childs;
        $c_main=IGKDefaultMainPage::getInstance();
        if($c_main->getIsVisible()){
            $t[]=$c_main;
        }
        $t[]=$this->m_bodyDebugHeader;
        if($c){
            if($v_child=$c->ToArray()){
                $t=array_merge($t, $v_child);
            }
        }
        $_script=igk_createnode("script");
        $_script["class"]="igk-mbody-script";
        $_script->Content=igk_html_initbodymainscript();
        if($shared=$this->SharedContent)
            $t[]=$shared;
        $t[]=$_script;
        if(!(igk_xml_is_mailoptions($options)) && $this->m_bodyScripts){
            $t[]=$this->m_bodyScripts;
        }
        if(!igk_get_env("sys://nopowered")){
            $d=igk_sys_powered_node();
            if($d){
                $t[]=$d;
            }
        }
        $d = igk_environment()->{IGK_SVG_REGNODE_KEY};
        if ($d){
            $t[] = $d;
            igk_environment()->{IGK_SVG_REGNODE_KEY} = null;
        }
        $t[]=$this->m_appendContent;
        $t[]=$this->RenderHook();
        $t=array_values(array_filter($t));
        return $t;
    }
    ///<summary>change the body box behaviour</summary>
    /**
    * change the body box behaviour
    */
    public final function addBodyBox(){
        return $this->getBodyBox();
    }
    ///load addition script content when page request loaded.
    /**
    */
    public function addScriptContent($key, $script){
        if ($this->m_script === null){
            $this->m_script = $this->m_appendContent->addScript();
            $this->m_script->Content = igk_html_initbodymainscript(); // $this->m_appendContent->addScript(); igk_createnode("script");
            $this->m_script->Content->clearChilds();
        }
        $g = $this->m_script->Content;
        return $g->addScript($key, $script);
    }
    ///<summary></summary>
    ///<param name="scriptfile"></param>
    ///<param name="canbeMerged" default="false"></param>
    ///<param name="index"></param>
    /**
    * 
    * @param mixed $scriptfile
    * @param mixed $canbeMerged the default value is false
    * @param mixed $index the default value is 0
    */
    public function appendScript($scriptfile, $canbeMerged=false, $index=0){
        $this->bodyScripts->addScript($scriptfile, $canbeMerged, $index);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function appendScriptNode($id){
        $sc=igk_createnode("script");
        $this->bodyScripts->addScriptNode($id, $sc);
        return $sc;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearChilds(){		
        parent::ClearChilds();
        if($this->m_bodyDiv){
            $this->m_bodyDiv=null;
        }
        return $this;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAppendContent(){
        return $this->m_appendContent;
    }
    ///<summary>get the body box</summary>
    /**
    * get the body box
    */
    public final function getBodyBox(){
        if($this->m_bodyDiv === null){
            $this->m_bodyDiv=igk_html_node_bodybox();
            parent::Add($this->m_bodyDiv);
        }
        return $this->m_bodyDiv;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getbodyScripts(){
        if($this->m_bodyScripts == null){
            $this->m_bodyScripts=new IGKHtmlBodyAppendScript($this);
            $this->m_bodyScripts["class"]="igk-mbody-ascript";
        }
        return $this->m_bodyScripts;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDebuggerHeader(){
        return $this->m_bodyDebugHeader;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSharedContent(){
        if($c=igk_getctrl(IGK_SHARED_CONTENT_CTRL))
            return $c->getTargetNode();
        return null;
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        $t=array();
        $this->_getList($options, $t);
        return igk_html_render_node($this, $options, $t);
    }
    ///<summary></summary>
    ///<param name="scriptfile"></param>
    /**
    * 
    * @param mixed $scriptfile
    */
    public function removeScript($scriptfile){
        $this->bodyScripts->removeScript($scriptfile);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function removeScriptNode($id){
        $this->bodyScripts->removeScriptNode($id);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function RenderHook(){
        static $hook;
        if($hook == null){
            $hook=IGKHtmlCallableNode::Create(function(){
                igk_hook(IGKEvents::HOOK_HTML_FOOTER, array($this));
            });
        }
        return $hook;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function SharedContentHook(){
        static $hook;
        if($hook == null){
            $hook=IGKHtmlCallableNode::Create(function(){
                igk_hook(IGKEvents::HOOK_HTML_FOOTER, array($this));
            });
        }
        return $hook;
    }
}
///<summary>body append script</summary>
/**
* body append script
*/
final class IGKHtmlBodyAppendScript extends IGKHtmlItem {
    private $m_scripts;
    private $m_tscripts;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("igk:bodyscript");
        $this->m_scripts=array();
        $this->m_tscripts=array();
        parent::add($this->m_childv);
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        $tab=array();
        foreach($this->m_scripts as  $v){
            if($v->getIsVisible())
                $tab[]=$v;
        }
        foreach($this->m_tscripts as  $v){
            if($v->getIsVisible())
                $tab[]=$v;
        }
        return $tab;
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public static function __sortScript($a, $b){
        $aa=$a->Index;
        $bb=$b->Index;
        if($aa == $bb)
            return 0;
        return ($aa < $bb) ? -1: 1;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="attributes" default="null"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $attributes the default value is null
    * @param mixed $index the default value is null
    */
    public function add($name, $attributes=null, $index=null){
        return null;
    }
    ///<summary>Append script to body node</summary>
    ///<param name="file" default="null"></param>
    ///<param name="canBeMerged" default="false"></param>
    ///<param name="index"></param>
    /**
    * Append script to body node
    * @param mixed $file the default value is null
    * @param mixed $canBeMerged the default value is false
    * @param mixed $index the default value is 0
    */
    public function addScript($file=null, $canBeMerged=false, $index=0){
  
        $c=new IGKHtmlScript($file);
        if($index != 0){
            $c->Index=$index;
        }
        else{
            $c->Index=0;
        }
        $this->m_scripts[$file]=$c;
        $tab=array_values($this->m_scripts);
        igk_usort($tab, array(get_class($this), "__sortScript"));
        $this->m_scripts=array();
        foreach($tab as $v){
            $this->m_scripts[$v->link]=$v;
        }
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $n
    */
    public function addScriptNode($id, $n){
        if(!isset($this->m_tscripts[$id]))
            $this->m_tscripts[$id]=$n;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        $s=IGK_STR_EMPTY;
        foreach($this->m_scripts as$v){
            $s .= $v->Render($options);
        }
        return $s;
    }
    ///<summary></summary>
    ///<param name="scriptFile"></param>
    /**
    * 
    * @param mixed $scriptFile
    */
    public function removeScript($scriptFile){
        if(isset($this->m_scripts[$scriptFile])){
            unset($this->m_scripts[$scriptFile]);
        }
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function removeScriptNode($id){
        unset($this->m_tscript[$id]);
    }
}
///<summary>represent a body debugger node</summary>
/**
* represent a body debugger node
*/
final class IGKHtmlBodyDebuggerNode extends IGKHtmlItem {
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("div");
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __getRenderingChildren($o=null){
        $c=igk_debuggerview();
        return array($c);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        return array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        $b=parent::getIsVisible();
        $c=igk_debuggerview();
        return $b && $c->HasChilds && (IGKServerInfo::IsLocal() || IGKApp::$DEBUG);
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        return null;
    }
    ///<summary>override.</summary>
    /**
    * override.
    */
    public function RenderComplete($o=null){
        $c=igk_debuggerview();
        $c->getMessage();
        parent::RenderComplete();
    }
}
///<summary>represent a callback node</summary>
/**
* represent a callback node
*/
final class IGKHtmlCallbackNode extends IGKHtmlItem{
    var $callback;
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function __AcceptRender($option=null){
        return 1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct('igk:callbacknode');
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        IGKOb::Start();
        $fc=$this->callback;
        $fc($options);
        $s=IGKOb::Content();
        IGKOb::Clear();
        return $s;
    }
}
///<summary>represent the base component node item</summary>
/**
* represent the base component node item
*/
abstract class IGKHtmlComponentNodeItem extends IGKHtmlItem implements IIGKHtmlComponent {
    const IGK_COMPONENT_CTRL_FLAG=0xc001;
    ///<summary></summary>
    ///<param name="tagname"></param>
    ///<param name="controller" default="null"></param>
    /**
    * 
    * @param mixed $tagname
    * @param mixed $controller the default value is null
    */
    public function __construct($tagname, $controller=null){
        $ctrl=$controller ?? igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, false) ?? new IGKComponentManagerCtrl();
        parent::__construct($tagname);
        if($ctrl){
            $this->setFlag(self::IGK_COMPONENT_CTRL_FLAG, $ctrl);
            $ctrl->Register($this);
        }
        else{
            igk_die("component failed");
        }
    }
    ///<summary>dispose component</summary>
    /**
    * dispose component
    */
    public function Dispose(){
        $c=$this->getController();
        if($c != null){
            $c->Unregister($this);
            $this->setFlag(self::IGK_COMPONENT_CTRL_FLAG, null);
        }
        parent::Dispose();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getComponentId(){
        return $this->getParam(get_class($this->m_controller).":id");
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function getComponentUri($uri){
        return $this->getController()->getUri($uri, $this);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getController(){
        return $this->getFlag(self::IGK_COMPONENT_CTRL_FLAG);
    }
    ///<summary> override this to set component listner</summary>
    /**
    *  override this to set component listner
    */
    public function setComponentListener($listener, $params=null){}
}
///<summary>represent the a igk app document instance</summary>
/**
* represent the a igk app document instance
*/
final class IGKHtmlDoc extends IGKHtmlComponentNodeItem 
implements JsonSerializable
{
    ///TODO: CUSTOM document serialization :
    const IGK_DOC_FAVICON_FLAG=self::IGK_DOC_TYPE_FLAG + 3;
    const IGK_DOC_LINKMANAGER_FLAG=self::IGK_DOC_TYPE_FLAG + 2;
    const IGK_DOC_LOADED_SCRIPT_FLAG=self::IGK_DOC_TYPE_FLAG + 4;
    const IGK_DOC_METAMANAGER_FLAG=self::IGK_DOC_TYPE_FLAG + 5;
    const IGK_DOC_SCRIPTMANAGER_FLAG=self::IGK_DOC_TYPE_FLAG + 6;
    const IGK_DOC_TITLE_FLAG=self::IGK_DOC_TYPE_FLAG + 1;
    const IGK_DOC_TYPE_FLAG=0xB01;
    private $m_body;
    private $m_components;
    private $m_head;
    private $m_private;
    private $m_theme;
    private $m_id = -1;
    private $m_sys_theme;
    private $m_lang;

    static $sm_scriptManager;

    public function getId(){
        return  $this->m_id;
    }
    public function __set($id, $v){
        if (method_exists($this, $fc="set".$id)){
            parent::__set($id, $v);
            return;
        }
        igk_die("set not allowed ".$id);
    }
    // public function __get($id){
    //     igk_die("get not allowed ".$id);
    // }
    public function jsonSerialize (){
        return (object)[
            "lang"=>$this->m_lang,
            "id"=>$this->getId(),
            "title"=>$this->getTitle()
        ];
    }
	public static function CreateDocument($context=null){
        $_index = -1;
        if (igk_app()->settings->appInfo->documents){
            $_index = count(igk_app()->settings->appInfo->documents);	
        } 
		$doc= new IGKHtmlDoc($_index);
		return $doc;

	}
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="file"></param>
    ///<param name="system" default="false"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $file
    * @param mixed $system the default value is false
    */
    protected function __addStyle($n, $file, $system=false){
        $g=$n->getParam("sys://css");
        if($g == null){
            $g=array();
        }
        if(isset($g[$file])){
            return $g[$file];
        }
        $ln=new IGKHtmlCssLink($file, $system);
        $n->add($ln);
        $g[$file]=$ln;
        $n->setParam("sys://css", $g);
        return $ln;
    }
    ///<summary>.ctr initialize a document</summary>
    /**
    * .ctr initialize a document
    * @param mixed $id identifier
    */
    public function __construct($id=-1){ // $parent=null, $context=false, $themeId=IGK_DEFAULT_THEME_ID){
		if(!is_numeric($id)){
			igk_die("id not allowed. expected a numeric value");
		}
        parent::__construct("document");
        $this->m_id = $id;
        $this->_initializedocument();
    }
    private function _initializedocument(){
        $this->m_components=array();
        $h=new IGKHtmlHead();
        $b=new IGKHtmlBody();
        igk_html_add($h, $this);
        igk_html_add($b, $this);
        $this->m_head=$h;
        $this->m_body=$b;
        $this->setFlag(self::IGK_DOC_SCRIPTMANAGER_FLAG, $this->prepareScriptManager());
        $h->add(new IGKGlobalScriptManagerHost());
        $this->m_private= new IGKHtmlDocTheme($this, "css:private");
        $this->m_theme= new IGKHtmlDocTheme($this, "css:public");
        $this->m_lang = R::GetDefaultLang(); 
        igk_css_add_doc_style($this);
         
		igk_invoke_session_event(IGK_ENV_NEW_DOC_CREATED, array(igk_app(), $this));


    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return get_class($this);
    }
    ///<summary> initialize the private theme</summary>
    /**
    *  initialize the private theme
    */
    private function _initThemes(){
        $d = igk_app()->getDoc();
        if($d !== $this){
            return;
        }
        $vsystheme=$this->getSysTheme();
        self::InitSystemTheme($vsystheme);
        $this->m_private->Name="igk_private_theme";
        $this->m_theme->Name="default";
        $this->m_private->resetAll();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function addLink($name){
        $link=$this->getFlag(self::IGK_DOC_LINKMANAGER_FLAG);
        if($link == null){
            $link=new StdClass();
        }
        igk_die("not implement");
    }
    ///<summary>add script file to document</summary>
    /**
    * add script file to document
    * @param string $file fullpath to server script or uri. if null return a script node.
    * @param string $tag : tag identifier
    * @param bool $canbeMerged merge the document 
    */
    public function addScript($file=null, $tag=null, $canbeMerged=true){
         return $this->ScriptManager->addScript($file, $canbeMerged, $tag);
    }
    ///<summary>file : relative path to file according to system base dir</summary>
    /**
    * file : relative path to file according to system base dir
    */
    public function addStyle($file, $system=false){
        return $this->__addStyle($this->m_head, $file, $system);
    }
    ///<summary>load temp extra script file. must be called out of rendering context. /!\\ Before</summary>
    /**
    * load temp extra script file. must be called out of rendering context. /!\\ Before
    */
    public function addTempScript($file, $onlyonce=1){
        if(!IGKValidator::IsUri($file))
            $file=igk_io_dir($file);
        $t=$this->ScriptManager->getTempScripts();
        if(!igk_getv($t, "temp")){
            $t->temp=array();
        }
        if(isset($t->temp[$file])){
            $n=$t->temp[$file];
            $n->setIsTemporary($t);
            $this->m_head->add($n);
            return $n;
        }
        $sc=$this->m_head->addScript($file);
        $t->temp[$file]=$sc;
        $sc->setIsTemporary($t);
        return $sc;
    }
    ///<summary>add tempory file to temp document. must be called out of rendering context.the file will be requested with link in the header.</summary>
    /**
    * add tempory file to temp document. must be called out of rendering context.the file will be requested with link in the header.
    */
    public function addTempStyle($file){
        $v_t=igk_get_env("sys://temp/css");
        if($v_t == null){
            $v_t=new IGKHtmlSingleNodeViewer(igk_html_node_notagnode());
        }
        $ln=$this->__addStyle($v_t->targetNode, $file);
        igk_set_env("sys://temp/css", $v_t);
        igk_html_add($v_t, $this->m_head);
        return $ln;
    }
    ///<summary>clear component list</summary>
    /**
    * clear component list
    */
    public function ClearComponents(){
        $this->m_components=array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearStyle(){
        $v_childs=array();
        foreach($this->m_head->Childs as $k=>$v){
            if(get_class($v) == IGKHtmlCssLink::class){
                $v_childs[]=$v;
            }
        }
        foreach($v_childs as $k){
            $this->m_head->remove($k);
        }
    }

    ///<summary></summary>
    /**
    * 
    */
    public function Dispose(){
        $this->ClearComponents();
        parent::Dispose();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getApp(){
        return igk_app();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getBody(){
        return $this->m_body;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function getComponent($id){
        return igk_getv($this->m_components, $id);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDocType(){
        !($d=$this->getFlag(self::IGK_DOC_TYPE_FLAG)) && ($d=IGK_DOC_TYPE);
        return "<!DOCTYPE ".$d.">";
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getElementById($name){
        $tab=array();
        $r1=$this->m_head->getElementById($name);
        $r2=$this->m_body->getElementById($name);
        if(is_array($r1))
            array_merge($tab, $r1);
        else
            $tab[]=$r1;
        if(is_array($r2))
            $tab=array_merge($tab, $r2);
        else
            $tab[]=$r2;
        if(count($tab) == 1)
            return $tab[0];
        return $tab;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $name
    * @return *
    */
    public function & getElementsByTagName($name){
        $n=strtolower($name);
        $tab=array();
        if($n == "head"){
            $tab []=$this->m_head;
            return $tab;
        }
        if($n == "body"){
            $tab []=$this->m_body;
            return $tab;
        }
        $tab1=$this->m_head->getElementsByTagName($name);
        $tab2=$this->m_body->getElementsByTagName($name);
        $h=array_merge($tab1, $tab2);
        return $h;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getFavicon(){
        return $this->getFlag(self::IGK_DOC_FAVICON_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHead(){
        return $this->m_head;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHtmlOptions(){
        $c=$this->m_params;
        $ns="doc://html";
        if($c)
            return igk_array_to_obj($c, $ns);
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    // public function getLang(){
    //     igk_die(__METHOD__.": not implement");
      // return R::GetLang();
    // }
    ///<summary></summary>
    /**
    * 
    */
    public function getMetas(){
        if(!($g=$this->getTempFlag(self::IGK_DOC_METAMANAGER_FLAG))){
            $this->setTempFlag(self::IGK_DOC_METAMANAGER_FLAG, $g=new IGKHtmlMetaManager());
        }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNameSpace(){
        return IGKConstants::NAMESPACE;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNoDocType(){
        return $this->getTempFlag("NoDocType");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getScriptManager(){
        return $this->getFlag(self::IGK_DOC_SCRIPTMANAGER_FLAG);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getStylesList(){
        $v_childs=array();
        foreach($this->m_head->Childs as  $v){
            if(get_class($v) == IGKHtmlCssLink::class){
                $v_childs[]=$v;
            }
        }
        return $v_childs;
    }
    ///<summary></summary>
    ///<param name="min" default="false"></param>
    /**
    * 
    * @param mixed $min the default value is false
    */
    // public function getSystemCssContent($min=false){
    //     igk_die(__METHOD__.": not implement");
        // $o=IGK_STR_EMPTY;
        // foreach($def->Attributes as $k=>$v){
        //     if(!$min){
        //         $o .= IGK_CLF;
        //     }
        //     $o .= $k."{".igk_css_treat($this->m_sys_theme, $v)."}";
        // }
        // return $o;
    // }
    ///<summary>get the gobal system theme</summary>
    /**
    * get the gobal system theme
    */
    public function getSysTheme(){
        static $sys_theme;
        if ($sys_theme===null){
            $sys_theme = new IGKHtmlDocTheme($this, 0, "sys://document");
        }
        return $sys_theme;
        // igk_wln_e("sys theme , ", $th);
        // if($r=igk_app()->Session->getParam(IGKSession::SESS_GLOBAL_THEME, function(){
        //     return new IGKHtmlDocTheme(igk_app()->getDoc(), "sys://document");
        // })){
        //     return $r;
        // }
        //igk_die("sys theme not created");
    }
    ///<summary></summary>
    ///<param name="minfile"></param>
    ///<param name="export"></param>
    ///<param name="reset"></param>
    /**
    * 
    * @param mixed $minfile
    * @param mixed $export
    * @param mixed $reset the default value is 0
    */
    public function getTemporaryCssDef($minfile, $export, $reset=0){
        igk_set_env("sys://css_temp", 1);
        $p=$this->m_private->get_css_def($minfile, $export);
        igk_set_env("sys://css_temp", null);
        if($reset){
            $this->m_private->resetAll();
        }
        return $p;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTempTheme(){
        return $this->m_private;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTheme(){
        if($r=(igk_get_env("sys://css_temp") ? $this->m_private: $this->m_theme)){
            return $r;
        }
        igk_die("theme not created");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTitle(){
        $g=$this->getFlag(self::IGK_DOC_TITLE_FLAG);
        if($g !== null){
            return $g->Content;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="vsystheme"></param>
    /**
    * 
    * @param mixed $vsystheme
    */
    public static function InitSystemTheme($vsystheme){
        $vsystheme->Name="igk_system_theme";
        $vsystheme->def->Clear();
        $d=$vsystheme->get_media(IGKHtmlDocThemeMediaType::SM_MEDIA);
        $d=$vsystheme->get_media(IGKHtmlDocThemeMediaType::XSM_MEDIA);
        $d=$vsystheme->reg_media("(max-width:700px)");
        $lfile=[];
        $v_cache_file=igk_io_dir(IGK_LIB_DIR."/Cache/css.cache");
        if(file_exists($v_cache_file)){
            igk_css_include_cache($v_cache_file, $lfile);
        }
        else{
            $lfile[]=igk_io_dir(IGK_LIB_DIR."/".IGK_STYLE_FOLDER."/global.pcss");
            $lfile[]=igk_get_env("sys://css/file/global_color", igk_io_dir(IGK_LIB_DIR."/igk_css_colors.phtml"));
            $lfile[]=igk_get_env("sys://css/file/global_template", igk_io_dir(IGK_LIB_DIR."/igk_css_template.phtml"));
        }
        $g=implode(";", $lfile);
        $g=str_replace(IGK_LIB_DIR, "%lib%", $g);
        $vsystheme->def->setFiles($g);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function initSysTheme(){
        igk_get_uvar("CONFIG_SCHEMA_FONT", IGK_RES_FOLDER."/Fonts/PDFFont.TTF", true);
        igk_get_uvar(IGK_CSV_SEPARATOR, ",", true);
        igk_get_uvar("CONFIG_DB_MAX_VISIBLEITEM", "50", true);
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        $out=IGK_STR_EMPTY;
        $ln=($options->Indent) ? IGK_LF: "";
        $sdepth=$options->Depth;
        $sdepth++;
        if($this->m_body->getIsVisible()){
            $options->Depth=$sdepth;
            $out .= $this->m_body->Render($options);
        }
        if($this->m_head->getIsVisible()){
            $options->Depth=$sdepth;
            $out=$this->m_head->Render($options).$ln. $out;
        }
        return $out;
    }
    ///<summary>Get The last rendering document index</summary>
    /**
    * 
    */
    public static function LastRenderedDocument(){
		static $sm_lastDocument;

		if ($sm_lastDocument === null){
			$_id = igk_app()->settings->CurrentDocumentIndex;
			if ($_id > 0){
				$sm_lastDocument = new IGKHtmlDoc($_id);
			}else {
				$sm_lastDocument = igk_app()->getDoc();
			}
		}
		return $sm_lastDocument;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function prepareScriptManager(){
        if(self::$sm_scriptManager != null)
            return self::$sm_scriptManager;
        self::$sm_scriptManager = new IGKHtmlScriptManager($this);
        return self::$sm_scriptManager;
    }
    ///<summary>register a component to the current document</summary>
    /**
    * register a component to the current document
    */
    public function RegComponent($id, $component){
        if(isset($this->m_components[$id])){
            if($component == null){
                $g=$this->m_components [$id];
                unset($this->m_components [$id]);
                if($g === $component)
                    $component->setParam("system://component/id", null);
                return;
            }
        }
        $this->m_components [$id]=$component;
        $component->setParam("system://component/id", $id);
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function registerHook(){
        $v_cevent=array($this, 'setup_document');
        $v_func=function(){
            $this->setup_document();
        };
        igk_notification_reg_event(IGK_CONF_USER_CHANGE_EVENT, $v_cevent);
        igk_reg_hook(IGKEvents::HOOK_PAGEFOLDER_CHANGED, $v_func, 0);
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public function removeStyle($file){
        $g=$this->m_head->getParam("sys://css");
        if(isset($g[$file])){
            $ln=$g[$file];
            igk_html_rm($ln);
            unset($g[$file]);
            $this->m_head->setParam("sys://css", $g);
            return;
        }
        $tab=($c=$this->m_head->Childs) ? $c->ToArray(): null;
        foreach($tab as  $v){
            if(get_class($v) == IGKHtmlCssLink::class){
                if($v->link == $file){
                     igk_html_rm($v);
                }
            }
        }
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        if($options == null){
            $options=igk_xml_create_render_option();
        }
        $options->Document=$this;
        $options->StandAlone=igk_html_is_fullurirequest($options);
        if(!isset($options->BodyOnly))
            $options->BodyOnly=0;
        if(!isset($options->Indent))
            $options->Indent=0;
        igk_set_env(IGK_ENV_CURRENT_RENDERING_DOC, $this);
        igk_hook(IGK_EVENT_DOC_BEFORE_RENDER, array($this, $options));
        $ln=($options->Indent) ? IGK_LF: "";
        if($options->BodyOnly){
            $out=$this->m_body->Render($options);
            return $out;
        }
        $out=IGK_STR_EMPTY;
        if(!$this->NoDocType)
            $out .= $this->getDocType().$ln;
        if(defined("IGK_PADDING_HEADER")){
            $out .= str_repeat("\n\n\n", 40);
        }
        $sDepth=$options->Depth;
        $lang=R::GetCurrentLang();
        $depth=str_repeat("\t", $sDepth);
        $out .= $depth."<html lang=\"".$lang."\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:igk=\"".$this->getNameSpace()."\" ";
        $b=$this->getHtmlOptions();
        if($b){
            foreach($b as $k=>$v){
                $out .= "{$k}=\"{$v}\" ";
            }
        }
        if(file_exists(igk_io_currentrelativepath("manifest.appcache")))
            $out .= "manifest=\"manifest.appcache\" ";
        $document_class = igk_html_get_document_class($this); 
        $out .= "class=\"{$document_class}\" ";
        if(igk_xml_is_mailoptions($options)){
            $out .= "style=\"width:100%; height:100%; \" ";
        }
        $out .= ">".$ln;
        $out .= $this->innerHTML($options).$ln;
        if($options->Cache && ($options->Context == IGK_WEB_CONTEXT)){
            $c=igk_createnode("style");
            $c["type"]="text/css";
            $c->Content=igk_css_getbasedef(1);
            $out .= $c->Render();
            unset($c);
        }
        $out .= igk_bind_host_css_style($this);
        $out .= $depth."</html>";
        $options->Depth=max($sDepth, 0);
        if(!isset($options->NoStoreRendering) || !$options->NoStoreRendering){
            self::SetLastRenderingDocument($this);
        }
        return $out;
    }
    ///<summary>shortcut to render node to buffer</summary>
    /**
    * shortcut to render node to buffer
    */
    public function renderAJX(& $options=null){
        igk_wl($this->Render($options));
    }
    ///<summary>render this document as html context</summary>
    /**
    * render this document as html context
    */
    public function RenderHtmlAJX($options=null, $header=IGK_HTML_CONTENT_TYPE){
        igk_set_header('200', $header);
        $this->RenderAJX($options);
    }
    ///<summary>set document base asset folder</summary>
    /**
    * set document base asset folder
    */
    public function setBaseAsset($dir){
        $this->setParam("scripts/assets", $dir);
        return $this;
    }
    ///<summary>set the base uri of the document</summary>
    /**
    * set the base uri of the document
    */
    public function setBaseUri($uri){
		$this->getEnvParam()->baseuri = $uri;
		return $this;
	}
	public function getBaseUri(){
		return igk_getv($this->getEnvParam(), "baseuri");
	}
	public function & getEnvParam(){
		$id = spl_object_hash($this);
		$key = "doc://".$id."/env_setting";
		if (!($ob = igk_get_env($key))){
			$ob = igk_createobj();
			igk_set_env($key, $ob);
		}
		return $ob;
	}
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setDocType($value){
        $this->m_docType=$value;
    }
    ///<summary></summary>
    ///<param name="icon"></param>
    /**
    * 
    * @param mixed $icon
    */
    public function setFavicon($icon){

        $g=$this->getFavicon();
        if($icon){
            if(is_object($icon)){
                $icon=$icon->getValue();
            } else if (is_string($icon) && !empty(igk_realpath($icon))){
				$icon = IGKResourceUriResolver::getInstance()->resolve($icon);
			} else {
				$icon = null;
			}
            $this->setFlag(self::IGK_DOC_FAVICON_FLAG, $icon);
        }
        else{
            $this->setFlag(self::IGK_DOC_FAVICON_FLAG, null);
        }
    }
    ///<summary></summary>
    ///<param name="cl"></param>
    /**
    * 
    * @param mixed $cl
    */
    public function setHeaderColor($cl){
        $sm=$this->getMetas();
        $n="theme-color";
        $meta=$sm->getMetaById($n);
        if($meta == null){;
            $meta=igk_createnode("meta");
            $meta["name"]=$n;
            $this->Metas->addMeta($n, $meta);
        }
        $this->Metas->setAttribute($n, IGKHtmlMetaManager::ATTR_CONTENT, $cl);
    }
    ///<summary></summary>
    ///<param name="attr"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $attr
    * @param mixed $value
    */
    public function setHtmlOptions($attr, $value){
        $this->setParam("doc://html/{$attr}", $value);
    }
    ///<summary>set the last rendering document</summary>
    ///<param name="doc"></param>
    /**
    * set the last rendering document
    * @param mixed $doc
    */
    private static function SetLastRenderingDocument($doc){
        // $api=igk_app();
        if(!$doc->getParam(IGK_KEY_DOC_NO_STORE_RENDERING)){
			igk_app()->settings->CurrentDocumentIndex = $doc->getId();
		}
	    // $api->Session->setParam(IGK_KEY_LAST_RENDERED_DOC, $doc);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setNoDocType($v){
        $this->setTempFlag("NoDocType", $v);
        return $this;
    }
    ///<summary>setup document title</summary>
    /**
    * setup document title
    */
    public function setTitle($value){
        $g=$this->getFlag(self::IGK_DOC_TITLE_FLAG);
        if($value === null){
            igk_html_rm($g);
            $this->setFlag(self::IGK_DOC_TITLE_FLAG, null);
            return;
        }
        if($g === null){
            $g=$this->m_head->add("title");
            $this->setFlag(self::IGK_DOC_TITLE_FLAG, $g);
        }
        igk_html_add($g, $this->m_head);
        $g->Index=-9999;
        $g->Content=$value;
        return $this;
    }
    ///<summary>setup global document</summary>
    /**
    * setup global document
    */
    public function setup_document(){
        $this->_initThemes();
        $this->m_body["class"]="igk-body";
        //$this->m_body->clearChilds()->addBodyBox();
    }
}
///<summary>Represente class: IGKHtmlCssLink</summary>
/**
* Represente IGKHtmlCssLink class
*/
class IGKHtmlCssLink extends IGKHtmlItem {
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        if($this->system && $o && ($o->Context == "mail")){
            return false;
        }
        $uri=igk_html_get_system_uri($this->link, $o);
        if($this->cache && ($o && $o->Cache)){
            $uri=igk_uri_add_args($uri, array("Cache"=>1));
        }
        $tr=$uri ? $uri: $this->link;
        $this->ln["href"]=$tr;           
        return $tr && $this->IsVisible;
    }

    ///<summary></summary>
    ///<param name="link"></param>
    ///<param name="system" default="false"></param>
    /**
    * 
    * @param mixed $link
    * @param mixed $system the default value is false
    */
    public function __construct($link, $system=false, $defer=0){
        parent::__construct("igk-css-link"); 
        $ln=self::CreateWebNode("link");
        $ln["type"]="text/css";
        $ln["rel"]="stylesheet";
        if ($defer)
            $ln->activate("defer");
        $ln->link=$link;
        $ln->cache=false;
        $ln->system=$system;
        $this->setln($ln);
    }


    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        return array($this->ln);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCache(){
        return $this->ln->cache;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getlink(){
        return $this->ln->link;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getln(){
        return $this->getFlag("csslink");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRel(){
        return $this->ln["rel"];
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSystem(){
        return $this->ln->system;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getType(){
        return $this->ln["type"];
    }
    ///<summary></summary>
    ///<param name="option" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $option the default value is null
    */
    protected function innerHTML(& $option=null){
        return null;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    protected function setln($v){
        $this->setFlag("csslink", $v);
        return $this;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setRel($value){
        $this->ln["rel"]=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setType($value){
        $this->ln["type"]=$value;
        return $this;
    }
    public function setAttribute($name, $value){
        $this->ln->setAttribute($name, $value);
        return $this;
    }
    public function activate($name){
        $this->ln->activate($name);
        return $this;
    }
}
///<summary>Represente class: IGKHtmlCtrlNodeItemBase</summary>
/**
* Represente IGKHtmlCtrlNodeItemBase class
*/
abstract class IGKHtmlCtrlNodeItemBase extends IGKHtmlItem {
    private $m_ctrl;
    ///<summary></summary>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $tag
    */
    public function __construct($tag){
        parent::__construct($tag);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCtrl(){
        return igk_getctrl($this->m_ctrl);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setCtrl($v){
        $this->m_ctrl=$v;
        return $this;
    }
}
///<summary>component node item base</summary>
/**
* component node item base
*/
abstract class IGKHtmlCtrlComponentNodeItemBase extends IGKHtmlCtrlNodeItemBase implements IIGKHtmlComponent {
    ///<summary></summary>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $tag
    */
    public function __construct($tag){
        $this->m_controller=igk_getctrl(IGK_COMPONENT_MANAGER_CTRL, true);
        parent::__construct($tag);
        $this->m_controller->Register($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Dispose(){
        $this->free();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function free(){
        $this->m_controller->Unregister($this);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getComponentId(){
        return $this->getParam(get_class($this->m_controller).":id");
    }
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function getComponentUri($uri){
        return ($c=$this->getController()) ? $c->getUri($uri, $this): null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getController(){
        $c=$this->getParam("Controller");
        return $c;
    }
    ///<summary></summary>
    ///<param name="listener"></param>
    ///<param name="param" default="null"></param>
    /**
    * 
    * @param mixed $listener
    * @param mixed $param the default value is null
    */
    public function setComponentListener($listener, $param=null){}
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $context the default value is null
    */
    protected function setParentNode($n, $context=null){
        if(($n === null) && ($context && (strtolower($context) == 'clearchilds'))){
            $this->free();
        }
        parent::setParentNode($n, $context);
    }
}
///<summary>Represente class: IGKHtmlSessionBlockNode</summary>
/**
* Represente IGKHtmlSessionBlockNode class
*/
final class IGKHtmlSessionBlockNode extends IGKHtmlCtrlNodeItemBase {
    private $m_owner;
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){

        if(!$o || !$o->Document){
            return false;
        }
        $key=".@".get_class($this)."/rendered";
        if(isset($o->{$key}) && $o->{$key}){
            return false;
        }
        $o->{$key}=1;
        if(igk_xml_is_mailoptions($o) || igk_xml_is_cachingrequired($o))
            return false;
        $this->ClearChilds();
        $v=$this->__buildview();
        $t=$this;
        $t->addNodeCallback("mem_usage", function($t){
            return $t->addMemoryUsageInfoNode();
        });
        $t->addJSReadyScript('igk.ctrl.sessionblock.init');
        return $this->getIsVisible();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __buildview(){
        $cnf_=igk_getctrl(IGK_CONF_CTRL);
        $t=$this;
        $t->addObData(function() use ($t, $cnf_){
			$cnf_view =igk_is_conf_connected();
            $_owner=igk_getctrl(IGK_SESSION_CTRL);
            $t["class"]="debugzone igk-session-block google-Roboto";
            $t->setIndex(10000);
            $d=igk_createnode("div");
            $d->addSectionTitle(4)->Content=__("Debug Panel");
            $ul= $d->add("ul"); 
            $ul->setClass("debug-panel");
            $v_btn_class = "btn btn-default igk-btn igk-btn-default";
            if(!igk_get_env("sys://error")){
                $ul["class"]="btn-group action-group";
                $ul["style"]="max-width: 300px";
                $ul->addLi()->add("a", array("href"=>$_owner->getUri("forceview")))
                ->setClass($v_btn_class)
                ->Content= __("ForceView");
                $ul->addLi()->addAClearSAndReload()
                ->clearClass()
                ->setClass($v_btn_class)->Content = __("ClearSession");

                if (igk_server_is_local() && ($sess_ctrl = igk_getctrl(IGK_SESSION_CTRL, false))){
                    $ul->li()->a($sess_ctrl->getUri("clearAllSession"))
                    ->setClass($v_btn_class)
                    ->Content = __("Clear All Session");
                }


            }

            if (igk_server_is_local()){
                $ul->li()->a($cnf_->getUri("clearLogs"))
                ->setClass($v_btn_class)
                ->Content = __("Clear Logs");
            }

            if($cnf_view )
                $ul->addLi()->add("a", array("href"=>$cnf_->getUri('logout')))
                ->setClass($v_btn_class)->Content=__("Logout");
            if(igk_app()->CurrentPageFolder != "Configs"){
                $ul->addLi()->add("a", array("href"=>new IGKHtmlRelativeUriValueAttribute("/Configs")))->setClass($v_btn_class)->Content=__("Configure");
            }
            // $ul->addLi()->addAJXA($cnf_->getUri('preview_result_ajx'))->setClass($v_btn_class)->Content=__("Preview Result");
            $ul->addLi()->add("a", array("href"=>new IGKHtmlRelativeUriValueAttribute(IGK_BASE_DIR."/")))->setClass($v_btn_class)->Content=__("Page Index");
            if(IGKServerInfo::IsLocal() || $cnf_view || !igk_sys_env_production()){
                $ul->addLi()->add("a", array("href"=>igk_getctrl(IGK_SESSION_CTRL)->getUri("clearcache")))
                ->setClass($v_btn_class)->Content=__("Clear Cache");
            }
            $ul->addVisible("igk_is_conf_connected")->addLi()->addA(igk_io_baseUri()."/resetDb")->setClass($v_btn_class)->Content=__("Reset DB");
            if ($api_ctrl = igk_getctrl("api", false)){
                $ul->addVisible("igk_is_conf_connected")->addLi()->addA($api_ctrl->getAppUri(""))->setClass($v_btn_class)->Content=__("API");
            }
            $ul=$d->add("ul")->setId("cnf-inf");
            $ul->li()->Content="Referer : ". igk_server()->REMOTE_ADDR;
            $ul->li()->Content="PHP VERSION : ". PHP_VERSION;
            $ul->li()->Content="CurrentLang : ". R::GetCurrentLang();
            $ul->li()->Content="CurrentPage : ". igk_app()->CurrentPage;
            $ul->li()->Content="CurrentFolder : ". igk_app()->CurrentPageFolder;
            $ul->li()->Content="ViewMode : ". IGKViewMode::GetSystemViewMode();
            $ul->li()->Content="Environment : ". array("development", "production")[igk_sys_env_production()];
            $ul->li()->Content=new IGKSessionIdValue();
            $bootstrap=igk_sys_getconfig("BootStrap.Enabled");
            $tab=igk_sys_debug_components();
            if($tab){
                foreach($tab as $k=>$v){
                    $v($this, $_owner);
                }
            }
            if(!$cnf_view  && ($this->CurrentPageFolder != IGK_CONFIG_PAGEFOLDER)){
                $logindiv=$t->add("div");
                $logindiv->setCallback("getIsVisible", igk_create_expression_callback("return igk_app()->CurrentPageFolder !== IGK_CONFIG_PAGEFOLDER;", null));
                $frm=$logindiv->addForm();
                $frm["action"]=igk_getconfigwebpagectrl()->getUri("connectToConfig");
                $frm["class"]="igk-debug-connect-form";
                igk_html_form_initfield($frm);
                $v_logul=$frm->addPanelBox()->add("ul");
                $li=$v_logul->addLi();
                $li->add("label")->setAttribute("for", "clAdmLogin")->Content=__("Login");
                $input=$li->addInput("clAdmLogin");
                $input["autocomplete"]="off";
                $input["placeholder"]=__("tip.login");
                $input->setClass("igk-form-control");
                $li=$v_logul->addLi();
                $li->addLabel()->Content=__("Password");
                $i=$li->addInput("clAdmPwd", "password");
                $i["placeholder"]=__("tip.password");
                $i["autocomplete"]="current-password";
                $i->setClass("igk-form-control");
                $i=$v_logul->addLi()->addInput("btn.connect", "submit", __("btn.connect"));
                if($bootstrap){
                    $i->setClass("btn btn-default igk-btn igk-btn-default");
                }
            }
            else{
                $div=$t->addDiv()->setClass("igk-form-group");
                if($cnf_view ){
                    $sl=$div->addSelect("clViewMode")->setClass("igk-form-control");
                    $uri=$_owner->getUri("changeviewmode");
                    $sl["onchange"]="javascript: ns_igk.ajx.get('{$uri}&mode='+this.value,null, ns_igk.ajx.fn.replace_body); return false;";
                    $mode=igk_app()->getViewMode();
                    foreach(igk_get_class_constants("IGKViewMode") as $k=>$v){
                        $opt=$sl->add("option")->setContent($k)->setAttribute("value", $v);
                        if($v == $mode){
                            $opt["selected"]=true;
                        }
                    }
                }
                $t->addDiv()->setClass("igk-cleartab");
            }
            $d->RenderAJX();
        }, IGK_HTML_NOTAG_ELEMENT);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("div");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function onAppExit(){
        $app=igk_app();
        if(igk_is_ajx_demand() && $this->IsVisible && $app->Session->getRedirectTask('modview')){
            $this->RenderAJX();
            $app->Session->{"modeview"}=null;
        }
    }
}
///check if this method is public
///<summary>used internally for debugging node</summary>
/**
* used internally for debugging node
*/
final class IGKHtmlDebuggingNodeItem extends IGKHtmlItem{
    ///<summary></summary>
    ///<param name="tag"></param>
    ///<param name="prop" default="null"></param>
    /**
    * 
    * @param mixed $tag
    * @param mixed $prop the default value is null
    */
    public function __construct($tag, $prop=null){
        parent::__construct($tag);
        if($prop)
            $this->setAttributes($prop);
    }
}
///<summary>base div model</summary>
/**
* base div model
*/
class IGKHtmlDiv extends IGKHtmlItem {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("div");
    }
    ///<summary></summary>
    ///<param name="opt"></param>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $opt
    * @param mixed $tag
    */
    public function closeWithCloseTag($opt, $tag){
        return true;
    }
    ///<summary>set editable</summary>
    ///<param name="cond">indicate if editable</param>
    ///<param name="spellcheck">checking</param>
    /**
    * set editable
    * @param mixed $cond indicate if editable
    * @param mixed $spellcheck checking
    */
    public function editable($cond, $spellcheck=true){
        $this->setAttribute("contenteditable", $cond ? "true": null);
        if(!$spellcheck){
            $this->setAttribute("spellcheck", 'false');
        }
        return $this;
    }
}
///<summary>Represent global doctype</summary>
/**
* Represent global doctype
*/
final class IGKHtmlDoctype extends IGKHtmlItem {
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function __construct($value){
        $this->Content=$value;
    }
    ///<summary></summary>
    ///<param name="item"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $item
    * @param mixed $index the default value is null
    */
    protected function _AddChild($item, $index=null){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function AcceptRender($options=null){
        return true;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $out="<!DOCTYPE ".$this->Content. " >".igk_html_indent_line($options);
        return $out;
    }
}
///<summary>Represente class: IGKHtmlEmptyNode</summary>
/**
* Represente IGKHtmlEmptyNode class
*/
final class IGKHtmlEmptyNode extends IGKHtmlItem{
    ///<summary></summary>
    ///<param name="tagname"></param>
    /**
    * 
    * @param mixed $tagname
    */
    public function __construct($tagname){
        parent::__construct($tagname);
    }
    ///<summary></summary>
    ///<param name="child"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $child
    * @param mixed $index the default value is null
    */
    protected function _AddChild($child, $index=null){
        return false;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $attributes the default value is null
    */
    public function addNode($n, $attributes=null){
        return null;
    }
}
///<summary>represent the favicon document's node</summary>
/**
* represent the favicon document's node
*/
final class IGKHtmlFavicon extends IGKHtmlItem {
    static $sm_instance;
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        if($o && isset($o->Document)){
            $g=$o->Document->getFavicon();
            $this["href"]=$g;
            return $g != null;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("link");
        $this["rel"]="shortcut icon";
        $this["type"]="image/x-icon";
        $this["href"]=null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        return array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __wakeup(){}
    ///<summary></summary>
    /**
    * 
    */
    public static function getItem(){
        if(self::$sm_instance === null){
            self::$sm_instance=new IGKHtmlFavicon();
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTagName(){
        return "link";
    }
}

///used with form to render content only
/**
*/
final class IGKHtmlFormInner extends IGKHtmlItem {
    private $m_form;
    ///<summary></summary>
    ///<param name="form"></param>
    /**
    * 
    * @param mixed $form
    */
    public function __construct($form){
        parent::__construct("igk:FormInner");
        $this->m_form=$form;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
}
///<summary>represent the header document's node</summary>
/**
* represent the header document's node
*/
final class IGKHtmlHead extends IGKHtmlItem {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("head");
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    protected function __getRenderingChildren($options=null){
        $v=parent::__getRenderingChildren($options);
        $t=array(
            IGKHtmlHeadBaseUri::getItem(),
            IGKHtmlFavicon::getItem()
        );
        if($options->Document){
            if($meta=$options->Document->getMetas()){
                $t[]=$meta;
            }
        }
        if(is_array($v))
            $t=array_merge($t, $v);
        $t[]=new IGKHtmlHookNode(IGKEvents::HOOK_HTML_HEAD, $options);
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function clearChilds(){
        parent::clearChilds();
        $this->setParam("sys://css", null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTagName(){
        return "head";
    }
}
///<summary>Represente class: IGKHtmlHeadBaseUri</summary>
/**
* Represente IGKHtmlHeadBaseUri class
*/
final class IGKHtmlHeadBaseUri extends IGKHtmlItem{
    static $sm_item;
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __AcceptRender($option=null){
        // $uri=igk_io_baseuri()."/";
        $suri=0;
        if(($doc=$option->Document)){

			$b = $doc->getBaseUri();
			if (!empty($b)){
				$this["href"] = $b;
				return 1;
			}


            // $curi=igk_get_env("baseuri");
            // if($curi){
                // $uri=$curi;
                // $suri=1;
            // }
        }
        // $this["href"]=$uri;
        return false; //$suri || $this->getIsVisible();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("base");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return !defined('IGK_NO_BASEURL') && (!igk_io_basedir_is_root());
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getItem(){
        if(self::$sm_item == null){
            self::$sm_item=new IGKHtmlHeadBaseUri();
        }
        return self::$sm_item;
    }
}
///<summary>used to hook on some html event</summary>
/**
* used to hook on some html event
*/
class IGKHtmlHookNode extends IGKHtmlItem{
    private $eventType;
    private $source;
    ///<summary></summary>
    ///<param name="eventType"></param>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $eventType
    * @param mixed $options the default value is null
    */
    public function __construct($eventType, $options=null){
        parent::__construct("igk-hook-node");
        $this->eventType=$eventType;
        $this->source=$options;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    protected function __getRenderingChildren($options=null){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        ob_start();
        igk_hook($this->eventType);
        $s=ob_get_contents();
        ob_end_clean();
        return $s;
    }
} 
///<summary>Represente class: IGKHtmlJSSessionBlockInitItem</summary>
/**
* Represente IGKHtmlJSSessionBlockInitItem class
*/
final class IGKHtmlJSSessionBlockInitItem extends IGKHtmlItem{
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("sesesionblock-init-script");
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        return "<script language='javascript' type='text/javascript'>if (window.igk && window.igk.ctrl.sessionblock)window.igk.ctrl.sessionblock.init();</script>";
    }
}
///<summary></summary>
/**
*
*/
final class IGKHtmlMailDoc extends IGKHtmlItem {
    private $_attachement;
    private $m_app;
    private $m_message;
    private $m_theme;
    ///<summary></summary>
    ///<param name="opt" default="null"></param>
    /**
    * 
    * @param mixed $opt the default value is null
    */
    public function __AcceptRender($opt=null){
        return true;
    }
    ///<summary>Construct mail document</summary>
    /**
    * construct mail document
    */
    public function __construct(){
        $this->m_app=igk_app();
        if($this->m_app == null)
            igk_die("apps not initialize");
        parent::__construct("div");
        $this["class"]="igk-mail";
        $this->m_theme=new IGKHtmlDocTheme($this->m_app->getDoc(), __CLASS__.":theme");
        $this->_initTheme();
        $this->m_message=$this->addDiv();
        $this->setId("message");
    }
    ///<summary></summary>
    ///<param name="target"></param>
    ///<param name="source"></param>
    /**
    * 
    * @param mixed $target
    * @param mixed $source
    */
    private function _copyAddBuildDefinition($target, $source){
        $selector=array();
        foreach($source->def->Attributes as $k=>$v){
            $tab=explode(',', $k);
            if(empty($v))
                continue;
            foreach($tab as $s=>$t){
                if(!empty($t)){
                    $selector[trim($t)
                    ]=$v;
                }
            }
        }
        foreach($selector as $k=>$v){
            if(IGKString::StartWith($k, ".igk-mail")){
                $target->def[$k.",.a3s > div "]=$v;
            }
            else{
                $target->def[".igk-mail ".$k.",.a3s > div ".$k]=$v;
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initTheme(){}
    ///<summary></summary>
    ///<param name="doc"></param>
    /**
    * 
    * @param mixed $doc
    */
    public static function CreateFromDocument($doc){
        if($doc == null)
            return null;
        $c=new IGKHtmlMailDoc();
        $c->m_doc=$doc;
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAttachement(){
        return $this->_attachement;
    }
    ///<summary>get the message node in this mail definition</summary>
    /**
    * get the message node in this mail definition
    */
    public function getMessage(){
        return $this->m_message;
    }
    ///<summary>get the theme used in this mail definition</summary>
    /**
    * get the theme used in this mail definition
    */
    public function getTheme(){
        return $this->m_theme;
    }
    ///<summary></summary>
    ///<param name="options" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $options the default value is null
    */
    protected function innerHTML(& $options=null){
        $out="";
        $s=new IGKHtmlItem("style");
        $s["type"]="text/css";
        $s->Content=$this->m_theme->get_css_def(true);
        if($this->m_doc != null){
            $out .= "<head>".$this->m_doc->head->innerHTML($options);
            $out .= $s->Render($options)."</head>";
            $out .= $this->m_doc->body->Render($options);
        }
        else{
            $out .= "<head>".$s->Render($options)."</head>";
            $out .= parent::innerHTML($options);
        }
        unset($s);
        return $out;
    }
    ///<summary></summary>
    ///<param name="theme"></param>
    /**
    * 
    * @param mixed $theme
    */
    public function loadTheme($theme){
        $this->_copyAddBuildDefinition($this->m_theme, $theme);
        foreach($theme->getMedias() as $k=>$m){
            $r=$this->m_theme->reg_media($k);
            if($r)
                $this->_copyAddBuildDefinition($r, $m);
        }
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function render($o=null){
        return $this->renderDoc();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function renderDoc(){
        $this->_attachement=new IGKMailAttachementContainer();
        $p=igk_xml_create_render_option();
        $p->Context="mail";
        $p->Attachement=$this->_attachement;
        $s="<!DOCTYPE ".IGK_DOC_TYPE." >";
        $s .= "<html ";
        $s .= trim($this->getAttributeString($p));
        $s .= ">";
        $s .= $this->innerHTML($p);
        $s .= "</html>";
        return $s;
    }
    ///<summary></summary>
    ///<param name="to"></param>
    ///<param name="from"></param>
    ///<param name="subject"></param>
    /**
    * 
    * @param mixed $to
    * @param mixed $from
    * @param mixed $subject
    */
    public function sendMail($to, $from, $subject){
        $src=$this->Render();
        $g=igk_mail_sendmail($to, $from, $subject, $src, null, $this->_attachement ? $this->_attachement->getList(): null, "text/html");
        return $g;
    }
}

///<summary>Represente class: IGKHtmlMetaViewNode</summary>
/**
* Represente IGKHtmlMetaViewNode class
*/
final class IGKHtmlMetaViewNode extends IGKHtmlItem {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("igk-metanode");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        $b=$this->HasChilds;
        return $b;
    }
}
///<summary>Represente class: IGKHtmlMsBox</summary>
/**
* Represente IGKHtmlMsBox class
*/
final class IGKHtmlMsBox extends IGKHtmlItem {
    private $m_msboxController;
    ///<summary></summary>
    ///<param name="msboxController"></param>
    /**
    * 
    * @param mixed $msboxController
    */
    public function __construct($msboxController){
        parent::__construct("div");
        $this->m_msboxController=$msboxController;
    }
    ///<summary></summary>
    ///<param name="xmloption" default="null"></param>
    /**
    * 
    * @param mixed $xmloption the default value is null
    */
    public function render($xmloption=null){
        $out=parent::Render($xmloption);
        if($this->m_msboxController->getIsVisible()){
            $this->m_msboxController->getIsVisible(false);
            $this->m_msboxController->Clear();
            return $out;
        }
        else{
            $this->m_msboxController->Clear();
            return null;
        }
    }
}
///<summary>Represente class: IGKHtmlNotificationItemNode</summary>
/**
* Represente IGKHtmlNotificationItemNode class
*/
final class IGKHtmlNotificationItemNode extends IGKHtmlItem {
    private $m_autohided;
    private $m_owner;
    private $m_script;
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        if(!$this->IsVisible || !$this->HasChilds)
            return false;
        if($this->m_autohided){
            igk_html_add($this->m_script, $this);
        }
        else{
            igk_html_rm($this->m_script);
        }
        return true;
    }
    ///<summary></summary>
    ///<param name="owner"></param>
    /**
    * 
    * @param mixed $owner
    */
    public function __construct($owner, $name){
        parent::__construct("div");
        $this->m_autohided=true;
        $this->m_script=igk_createnode("script");
        $this->m_script->Content="\$ns_igk.winui.notifyctrl.init(\$ns_igk.getParentScript());";
        $this->m_owner=$owner;
        $this["class"] = "igk-notify-ctrl";
        $this["igk-control-type"]="notifyctrl";
        $this["igk-control-name"]= $name;

    }
	public function __wakeup(){
		// igk_ilog(implode("\n", [
		// igk_io_request_uri(),
		// "wake up :::::"." ".$this, $this["igk-control-name"]]));
	}

    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    function addError($msg){
        $this->add("div", array("class"=>"igk-notify igk-notify-danger"))->Content=$msg;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function addErrorr($key){
        $this->addError(__($key, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    function addInfo($msg){
        $this->add("div", array("class"=>"igk-notify igk-notify-info"))->Content=$msg;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function addInfor($key){
        $this->addInfo(__($key, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    ///<param name="type" default="'default'"></param>
    /**
    * 
    * @param mixed $msg
    * @param mixed $type the default value is 'default'
    */
    function addMsg($msg, $type='default'){
        $this->add("div", array("class"=>"igk-notify igk-notify-{$type}"))->Content=$msg;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function addMsgr($key){
        $this->addMsg(__($key, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    function addSuccess($msg){
        $this->add("div", array("class"=>"igk-notify igk-notify-success"))->Content=$msg;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function addSuccessr($key){
        $this->addSuccess(__($key, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    function addWarning($msg){
        $this->add("div", array("class"=>"igk-notify igk-notify-warning"))->Content=$msg;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function addWarningr($key){
        $this->addWarning(__($key, array_slice(func_get_args(), 1)));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAutoHide(){
        return $this->m_autohided;
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function RenderComplete($o=null){
		// TODO: Render Complete notificiation
        $this->ClearChilds();
        if($this->m_owner->TargetNode === $this){
            $this->m_owner->setNotifyHost(null);
        }
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setAutohide($v){
        $this->m_autohided=$v;
    }

}
///<summary>represent a server response item. used to send name, value, description data to client</summary>
/**
* represent a server response item. used to send name, value, description data to client
*/
final class IGKHtmlResponse extends IGKHtmlItem {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("response");
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="value"></param>
    ///<param name="description" default="null"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $value
    * @param mixed $description the default value is null
    */
    public function addItem($name, $value, $description=null){
        $i=$this->add("item");
        $i["name"]=$name;
        $i->Content=$value;
        $i["description"]=$description;
        return $i;
    }
}
///<summary>Represente class: IGKHtmlScript</summary>
/**
* Represente IGKHtmlScript class
*/
class IGKHtmlScript extends IGKHtmlItem {
    const ACCEPT=0xb3;
    const CANMERGE_LINK=0xb2;
    const NOT_SINGLEVIEW=0xb4;
    const SCRIPT_LINK=0xb1;
    const SCRIPT_TAG=0xb0;
    const TEMPORARY=0xb5;
    ///<summary></summary>
    ///<param name="opt" default="null"></param>
    /**
    * 
    * @param mixed $opt the default value is null
    */
    protected function __AcceptRender($opt=null){
        $v=$this->IsVisible;
        if(!$v){
            return 0;
        }
        if($lk=$this->link){
            if(!$this->getFlag(self::NOT_SINGLEVIEW) && $opt && ($doc=igk_getv($opt, "Document"))){
                $tab=$doc->getTempFlag(IGKHtmlDoc::IGK_DOC_LOADED_SCRIPT_FLAG) ?? array();
                if(isset($tab[$lk])){
                    return false;
                }
                $tab[$lk]=1;
                $doc->setTempFlag(IGKHtmlDoc::IGK_DOC_LOADED_SCRIPT_FLAG, $tab);
            }
			// igk_wln("link : ".$lk , "\n");
            if(igk_html_uri($lk) == IGK_BALAFON_JS_CORE_FILE){
                $this->deactivate("defer");
                $this->activate($this->tag);
            }
        }
        if($opt && $opt->Document && $opt->Document->getParam("no-script")){
            return 0;
        }
        if(igk_xml_is_mailoptions($opt))
            return false;
        return $this->getFlag(self::ACCEPT);
    }
    ///<summary></summary>
    ///<param name="link" default="null"></param>
    /**
    * 
    * @param mixed $link the default value is null
    */
    public function __construct($link=null){
        parent::__construct("script");
        $this->link=$link;
        $v_scriptLink=new IGKHtmlScriptLink($this);
        $this["type"]="text/javascript";
        $this["language"]="javascript";
        parent::offsetSet("src", $v_scriptLink);
        $this->canBeMerged=true;
        $this->__iaccept();
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __iaccept(){
        $this->setFlag(self::ACCEPT, !(!empty($this->link) && (!IGKValidator::IsUri($this->link) && !file_exists(igk_getv(explode("?", $this->link), 0)))));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanBeMerged(){
        return $this->getFlag(self::CANMERGE_LINK) ?? true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getlink(){
        return $this->getFlag(self::SCRIPT_LINK);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNotSingleView(){
        return $this->getFlag(self::NOT_SINGLEVIEW);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTag(){
        return $this->getFlag(self::SCRIPT_TAG);
    }
    ///<summary></summary>
    ///<param name="o" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $o the default value is null
    */
    protected function innerHTML(& $o=null){
        if(igk_xml_is_mailoptions($o)){
            return IGK_STR_EMPTY;
        }
        return parent::innerHTML($o);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function IsTemporary(){
        return $this->getFlag(self::TEMPORARY);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $value
    */
    public function offsetSet($name, $value){
        if(strtolower($name) == "src"){
            $this->link=$value;
            $this->__iaccept();
        }
        else{
            parent::offsetSet($name, $value);
        }
    }
    ///<summary>override.</summary>
    /**
    * override.
    */
    public function RenderComplete($options=null){
        parent::RenderComplete($options);
        if($g=$this->IsTemporary()){
            igk_html_rm($this);
            $file=$this->link;
            unset($g->temp[$file]);
        }
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setCanBeMerged($v){
        $this->setFlag(self::CANMERGE_LINK, $v);
        return $this;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setIsTemporary($v){
        $this->setFlag(self::TEMPORARY, $v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setlink($v){
        $this->setFlag(self::SCRIPT_LINK, $v);
        return $this;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setNotSingleView($v){
        $this->setFlag(self::NOT_SINGLEVIEW, $v);
        return $this;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setTag($v){
        $this->setFlag(self::SCRIPT_TAG, $v);
        return $this;
    }
}
///<summary> Shared Content Node</summary>
/**
*  Shared Content Node
*/
final class IGKHtmlSharedContentNode extends IGKHtmlItem {
    private $m_ctrl;
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function __construct($ctrl){
        parent::__construct("igk-shared-content");
        $this->m_ctrl=$ctrl;
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __getRenderingChildren($o=null){
        $t=array();
        $entities=$this->m_ctrl->getEntities();
        if($entities){
            foreach($entities as $v){
                if($v->IsVisible){
                    $t[]=$v;
                }
            }
        }
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
}
///<summary>shared notify content notify Dialog</summary>
/**
* shared notify content notify Dialog
*/
final class IGKHtmlSharedNotifyDialog extends IGKHtmlItem {
    private $m_Message;
    private $m_title;
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("div");
        $this->setIsVisible(false);
        $this["class"]="igk-notify-box";
        $this->addDiv()->setClass("title")->Content=new IGKValueListener($this, 'Title');
        $this->addDiv()->setClass("msg")->Content=new IGKValueListener($this, 'Message');
        $this->addScript()->Content=<<<EOF
if (ns_igk)ns_igk.winui.notify.init();
EOF;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMessage(){
        return $this->m_Message;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTitle(){
        return $this->m_title;
    }
    ///<summary></summary>
    ///<param name="title"></param>
    ///<param name="message"></param>
    /**
    * 
    * @param mixed $title
    * @param mixed $message
    */
    public function show($title, $message){$this->m_title=$title;
        $this->m_Message=$message;
        $this->setIsVisible(true);
        return $this;
    }
}
///<summary>Represente class: IGKHtmlSingleNodeViewer</summary>
/**
* Represente IGKHtmlSingleNodeViewer class
*/
final class IGKHtmlSingleNodeViewer extends IGKHtmlItem{
    private $m_callback;
    var $targetNode;
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    protected function __AcceptRender($options=null){
        if($this->targetNode)
            return $this->IsVisible;
        return false;
    }
    ///<summary>.ctr</summary>
    ///<param name="node">.node to render once</param>
    ///<param name="callback">call after render</param>
    /**
    * .ctr
    * @param mixed $node .node to render once
    * @param mixed $closure callback call after render
    */
    public function __construct($node, $callback=null){
        parent::__construct("igk:singleViewItem");
        $this->targetNode=$node;
        $this->m_callback=$callback;
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    protected function __getRenderingChildren($option=null){
        return array($this->targetNode);
    }
    ///<summary></summary>
    ///<param name="item"></param>
    ///<param name="index" default="null"></param>
    /**
    * 
    * @param mixed $item
    * @param mixed $index the default value is null
    */
    protected function _AddChild($item, $index=null){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function RenderComplete($options=null){
        igk_html_rm($this);
        if($this->m_callback){
            igk_invoke_callback_obj($this, $this->m_callback);
            $this->m_callback=null;
            unset($this->m_callback);
        }
        unset($this->targetNode);
    }
}
///<summary>Represente class: IGKHtmlTable</summary>
/**
* Represente IGKHtmlTable class
*/
final class IGKHtmlTable extends IGKHtmlItem {
    private $m_headers;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("table");
        $this["class"]="igk-table";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function addRow(){
        return $this->addTr();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function setHeader(){
        if($this->m_headers){
            $this->m_headers->ClearChilds();
        }
        else
            $this->m_headers=$this->addTr();
        foreach(func_get_args() as $v){
            $this->m_headers->add("th")->Content=$v;
        }
    }
}
///<summary>represent a tinyMceScript general component</summary>
/**
* represent a tinyMceScript general component
*/
final class IGKHtmlTinyMceScript extends IGKHtmlItem {
    private $m_rendered;
    private $m_tinyScript;
    private static $sm_instance=null;
    ///<summary></summary>
    /**
    * 
    */
    function __construct(){
        parent::__construct(IGK_STR_EMPTY);
        $this->m_tinyScript=igk_js_enable_tinymce($this);
        $this->m_rendered=false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            self::$sm_instance=igk_get_class_instance(__CLASS__, function(){
                return new IGKHtmlTinyMceScript();
            });
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    ///<param name="option" default="null" ref="true"></param>
    /**
    * 
    * @param mixed * $option the default value is null
    */
    protected function innerHTML(& $option=null){
        return $this->m_tinyScript->innerHTML($option);
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function render($option=null){
        return $this->m_tinyScript->Render($option);
    }
}
///<summary>Represente class: IGKHtmlUl</summary>
/**
* Represente IGKHtmlUl class
*/
class IGKHtmlUl extends IGKHtmlItem {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("ul");
    }
    ///<summary></summary>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $attributes the default value is null
    */
    public function addLi($attributes=null){
        return $this->add("li", $attributes);
    }
    ///<summary></summary>
    ///<param name="url"></param>
    ///<param name="attributes" default="null"></param>
    /**
    * 
    * @param mixed $url
    * @param mixed $attributes the default value is null
    */
    public function addLiA($url, $attributes=null){
        return $this->addLi($attributes)->addA($url);
    }
}
///<summary>Represente class: IGKHtmlWebMasterNodeBase</summary>
/**
* Represente IGKHtmlWebMasterNodeBase class
*/
abstract class IGKHtmlWebMasterNodeBase extends IGKHtmlItem{
    ///<summary></summary>
    ///<param name="tagname"></param>
    /**
    * 
    * @param mixed $tagname
    */
    public function __construct($tagname){
        parent::__construct($tagname);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        return igk_app()->IsSupportViewMode(IGKViewMode::WEBMASTER);
    }
}
///<summary>represent the dialog frame</summary>
/**
* represent the dialog frame
*/
final class IGKMsDialogFrame extends IGKHtmlItem {
    private $m_Box;
    private $m_BoxContent;
    private $m_Height;
    private $m_Title;
    private $m_Width;
    private $m_callbackMethod;
    private $m_closeBtn;
    private $m_closeCallBackEvent;
    private $m_closeMethodUri;
    private $m_closeUri;
    private $m_form;
    private $m_framectrl;
    private $m_id;
    private $m_owner;
    private $m_reloadcallbackMethod;
    private $m_script;
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    protected function __AcceptRender($o=null){
        if(!$this->m_framectrl || !$this->m_framectrl->ContainFrame($this->m_id, $this)){
            igk_html_rm($this);
            return false;
        }
        $def=IGK_STR_EMPTY;
        if($this->m_Width && $this->m_Height)
            $def=$def."width:".$this->m_Width."px; height:".$this->m_Height."px";
        $this->m_closeBtn->Uri=R::GetImgUri("btn_close");
        $this->m_closeBtn["datasrc"]=R::GetImgUri("btn_close");
        $this->m_Box["style"]=$def;
        return true;
    }
    ///<summary></summary>
    ///<param name="framectrl"></param>
    ///<param name="id" default="null"></param>
    ///<param name="owner" default="null"></param>
    ///<param name="reloadcallback" default="null"></param>
    /**
    * 
    * @param mixed $framectrl
    * @param mixed $id the default value is null
    * @param mixed $owner the default value is null
    * @param mixed $reloadcallback the default value is null
    */
    public function __construct($framectrl, $id=null, $owner=null, $reloadcallback=null){
        parent::__construct("div");
        if(!igk_reflection_class_implement($framectrl, "IIGKFrameController")){
            igk_die("required IIGKFrameController");
        }
        $this->m_framectrl=$framectrl;
        $this->m_closeCallBackEvent=new IGKEvents($this, "closeCallBackEvent");
        $this["class"]="framebox fitw fith posab loc_t loc_l";
        $this["id"]="framebox-".$id;
        $this["igk-control-type"]="frame";
        $this->setIsVisible(true);
        $this->m_id=$id;
        $this->m_owner=$owner;
        $this->m_reloadcallbackMethod=$reloadcallback;
        $this->m_Box=$this->add("div", array(
            "class"=>"igk-framebox-dialog posab no-overflow resizable",
            "id"=>"igk-framebox-dialog"
        ));
        $this->m_Title=$this->m_Box->add("div", array(
            "class"=>"framebox-title",
            "id"=>"framebox_".$id."_title"
        ))->addDiv()->setClass("igk-framebox-dialog-title title");
        $tab=$this->m_Box->add("div", array("class"=>"disptable fitw fith framebox_bgcl"));
        $c=$this->m_Box;
        $this->m_BoxContent=$tab->add("div", array("class"=>"disptabr fith fitw"))->add("div", array("class"=>"igk-framebox-dialog-content disptabc alignl pad4"));
        $v_cdiv=$this->m_Title->addDiv()->setClass("framebox_close");
        $this->m_closeBtn=$v_cdiv->addLinkBtn(IGK_STR_EMPTY, null, 48, 24);
        $this->m_closeBtn["class"]="-igk-btn-lnk igk-framebox-btn-close";
        $this->m_Box["data"]=igk_create_func_callback(array($this, '__get_dialog_attrib'), null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __get_dialog_attrib(){
        return "\"{w:'300px', h:'800px'}\"";
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function addCloseCallBackEvent($obj, $method){
        if($this->m_closeCallBackEvent != null){
            $this->m_closeCallBackEvent->add($obj, $method);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearChilds(){
        $this->m_BoxContent->ClearChilds();
        return $this;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function closeMethod(){
        if($this->m_callbackMethod){
            $c=$this->m_callbackMethod;
            $c($this);
        }
        if($this->m_closeCallBackEvent != null){
            $this->m_closeCallBackEvent->Call($this, null);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getBox(){
        return $this->m_Box;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getBoxContent(){
        return $this->m_BoxContent;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getcallbackMethod(){
        return $this->m_callbackMethod;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCloseBtn(){
        return $this->m_closeBtn;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getcloseMethodUri(){
        return $this->m_closeMethod;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getcloseUri(){
        return $this->m_closeBtn["href"]->getValue();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getForm(){
        return $this->m_form;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHeight(){
        return $this->m_Height;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getId(){
        return $this->m_id;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsVisible(){
        if(!parent::getIsVisible() && !$this->m_framectrl || !$this->m_framectrl->ContainFrame($this->m_id, $this)){
            return false;
        }
        return true;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getOwner(){
        return $this->m_owner;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getScript(){
        return $this->m_script;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTitle(){
        return $this->m_Title->Content;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getWidth(){
        return $this->m_Width;
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function removeCloseCallBackEvent($obj, $method){
        if($this->m_closeCallBackEvent != null){
            $this->m_closeCallBackEvent->remove($obj, $method);
        }
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setcallbackMethod($value){
        $this->m_callbackMethod=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setcloseMethodUri($value){
        $this->m_closeMethod=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setcloseUri($value){
        $this->m_closeBtn["href"]=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setForm($value){
        $this->m_form=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setHeight($value){
        $this->m_Height=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setTitle($value){
        $this->m_Title->Content=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setWidth($value){
        $this->m_Width=$value;
    }
}
///represent nod type
///<summary> xml render document</summary>
/**
*  xml render document
*/
final class IGKHtmlReaderDocument extends IGKXmlNode {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("DocumentToRender");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        $t=[];
        return $t;
    }
    ///<summary> copy the current node to destination</summary>
    /**
    *  copy the current node to destination
    */
    public function CopyTo($target){
        $t=($c=$this->Childs) ? $c->ToArray(): null;
        $this->__rm_childs(__FUNCTION__);
        if($t) foreach($t as $k){
            if($k == null)
                continue;
            $target->add($k);
        }
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function RendeAJX($o=null){
        parent::RenderAJX($o);
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $out=IGK_STR_EMPTY;
        foreach($this->Childs as $k){
            $out .= $k->Render($options);
        }
        return $out;
    }
}
///<summary>represent a CDATA xmln node</summary>
/**
* represent a CDATA xmln node
*/
final class IGKXmlCDATA extends IGKXmlNode{
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct("igk:cdata");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanAddChild(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $c="<![CDATA[";
        $s=$this->Content;
        if(is_string($s))
            $c .= $s;
        else if(is_object($s) && (method_exists($s, "getValue")))
            $c .= $s->getValue();
        $c .= "]]>";
        return $c;
    }
}
///<summary>Represente class: IGKXmlProcessor</summary>
/**
* Represente IGKXmlProcessor class
*/
final class IGKXmlProcessor extends IGKXmlNode{
    ///<summary></summary>
    ///<param name="type"></param>
    /**
    * 
    * @param mixed $type
    */
    public function __construct($type){
        parent::__construct($type);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCanAddChild(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsRenderTagName(){
        return false;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $c="<?".$this->TagName." ";
        $c .= $this->getAttributeString(null);
        $c .= "?>";
        return $c;
    }
}
///<summary>represent an object used to manage document's meta data.</summary>
/**
* represent an object used to manage document's meta data.
*/
final class IGKHtmlMetaManager extends IGKObject implements Serializable {
    const ATTR_CONTENT="content";
    const META_AUTHOR=0x1;
    const META_CONTENT_TYPE=self::META_AUTHOR + 0x4;
    const META_COPYRIGHT=self::META_AUTHOR + 0x1;
    const META_DESC=self::META_AUTHOR + 0x2;
    const META_GENERATOR=self::META_AUTHOR + 0x5;
    const META_KEYWORDS=self::META_AUTHOR + 0x3;
    private $m_metas;
    ///<summary>ownerDoc is used to initialize data</summary>
    /**
    * ownerDoc is used to initialize data
    */
    public function __construct(){
        $this->_initMetas();
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return __CLASS__;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _initMetas(){
        $pmetas=null;
        $cnf=igk_app()->configs;
        $this->m_metas=array();
        $this->m_metas[self::META_AUTHOR]=array("name"=>"author", self::ATTR_CONTENT=>IGK_AUTHOR);
        $this->m_metas[self::META_COPYRIGHT]=array(
            "name"=>"copyright",
            self::ATTR_CONTENT=>$cnf->meta_copyright
        );
        $this->m_metas[self::META_DESC]=array(
            "name"=>"Description",
            self::ATTR_CONTENT=>$cnf->meta_description
        );
        $this->m_metas[self::META_KEYWORDS]=
            array("name"=>"Keywords",
            self::ATTR_CONTENT=>$cnf->meta_keywords
        );
        $this->m_metas[self::META_CONTENT_TYPE]=array(
            "http-equiv"=>"Content-Type",
            self::ATTR_CONTENT=>$cnf->meta_enctype
        );
        $this->m_metas[self::META_GENERATOR]=array(
            "name"=>"generator",
            self::ATTR_CONTENT=>igk_app_version()
        );
        igk_reg_hook("html_meta", function(){
            igk_trace();
            igk_wln("render content type :::::");
            igk_exit();
        });
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="meta"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $meta
    */
    public function addMeta($name, $meta){
        $bmeta=igk_getv($this->m_metas, $name);
        if($bmeta && ($bmeta !== $meta)){
            unset($this->m_metas[$name]);
        }
        if($meta && !isset($this->m_metas[$name])){
            $this->m_metas[$name]=$meta->attributes->toArray();
            $this->m_metas[$name]["changed"]=1;
            return 1;
        }
        return 0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAuthor(){
        return IGKHtmlUtils::GetValue($this->m_metas[self::META_AUTHOR][self::ATTR_CONTENT]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getContentType(){
        return IGKHtmlUtils::GetValue($this->m_metas[self::META_CONTENT_TYPE][self::ATTR_CONTENT]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getCopyright(){
        return IGKHtmlUtils::GetValue($this->m_metas[self::META_COPYRIGHT][self::ATTR_CONTENT]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDescription(){
        return IGKHtmlUtils::GetValue($this->m_metas[self::META_DESC][self::ATTR_CONTENT]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getKeywords(){
        return IGKHtmlUtils::GetValue($this->m_metas[self::META_KEYWORDS][self::ATTR_CONTENT]);
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function getMetaById($name){
        if(isset($this->m_metas[$name])){
            return $this->m_metas[$name];
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function render($options=null){
        $handle=0;
        $s=igk_ob_get_func(function() use (& $handle){});
        if($handle){
            return $s;
        }
        $LF="";
        $o="";
        foreach($this->m_metas as $k=>$v){
            $o .= "<meta ";
            foreach($v as $k=>$v){
                if($k == "changed")
                    continue;
                $o .= $k."=\"".IGKHtmlUtils::GetAttributeValue($v)."\" ";
            }
            $o .= "/>".$LF;
        }
        return $o.$s;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function rmMeta($name){
        if(isset($this->m_metas[$name])){
            unset($this->m_metas[$name]);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        $g=array();
        foreach($this->m_metas as $k=>$v){
            if(isset($v['changed']) && $v['changed']){
                $t=array_slice($v, 0);
                unset($t["changed"]);
                $g[$k]=$t;
            }
        }
        if(count($g) > 0)
            return json_encode($g);
        return '';
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="attr"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $attr
    * @param mixed $value
    */
    public function setAttribute($key, $attr, $value){
        $this->m_metas[$key][$attr]=$value;
        $this->m_metas[$key]["changed"]=1;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setAuthor($value){
        $this->updateContent(self::META_AUTHOR, $value);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setContentType($value){
        $this->updateContent(self::META_CONTENT_TYPE, $value);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setCopyright($value){
        $this->updateContent(self::META_COPYRIGHT, $value);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setDescription($value){
        $this->updateContent(self::META_DESC, $value);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setKeywords($value){
        $this->updateContent(self::META_KEYWORDS, $value);
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public function unserialize($s){
        $this->_initMetas();
        if(!empty($s) && ($tab=json_decode($s))){
            foreach($tab as $k=>$v){
                unset($v->changed);
                $this->m_metas[$k]=(array)$v;
            }
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function updateContent($key, $value){
        if(!isset($this->m_metas[$key][self::ATTR_CONTENT]) || ($this->m_metas[$key][self::ATTR_CONTENT] != $value)){
            $this->m_metas[$key][self::ATTR_CONTENT]=$value;
            $this->m_metas[$key]["changed"]=1;
        }
    }
}

class IGKHtmlAttribExpressionNode extends IGKHtmlItem{
	var $node_args;
	var $m_context;
	public function __construct($c, $context=null){
		if(!is_array($c)){
			igk_die("node args must be an array");
		}
		parent::__construct(IGK_ENGINE_ATTR_EXPRESSION_NODE);
		$this->node_args = $c;
		$this->m_context = $context;

	}
	public function getCanAddChild(){return false;}

	protected function loadingComplete(){ 
		$r = $this->node_args;
		$m = $this->Attributes->toArray();
		$_p = [];
		$_g = explode("|", "*for|*visible");
		if (!$this->m_context){
			$context = array_merge(["ctrl"=>$r[2]], isset($r[3]) ? (array)$r[3]->getArgs() : []);
			$context["raw"] = $context["value"];
		}
		else
            $context = $this->m_context; 
        $context = igk_get_attrib_raw_context($context); 
            
		foreach($m as $k=>$t){
			if(in_array($k, $_g))
				continue;
			if ($k[0] == "*"){
				$t = igk_template_get_piped_value($t, $context);
				$k = igk_str_rm_start($k, "*");

			}
			$_p[$k]=$t;
		}

		if (count($_p)>0){
			$r[0]->setAttributes($_p);
			//update
			$m = & $r[1];
			$m = igk_html_render_attribs($r[0]->getAttributes()); // attribs)
		}


		$this->node_args = null;
		$this->dispose();
	}
}

///<summary> represent a html/xml reader info</summary>
/**
*  represent a html/xml reader info
*/
final class IGKHtmlReader extends IGKObject {
    const EXPRESSION_ARGS="[[:@raw]], [[:@ctrl]]";
    private $m_attribs;
    private $m_contextLevel;
    private $m_hasAttrib;
    private $m_hfile;
    private $m_isEmpty;
    private $m_mmodel;
    private $m_name;
    private $m_nodes;
    private $m_nodetype;
    private $m_offset;
    private $m_resolvKeys;
    private $m_resolvValues;
    private $m_text;
    private $m_v;
    private static $sm_ItemCreatorListener;
    /** @var string */ 
    private static $sm_openertype;
    ///<summary>loading context</summary>
    private $m_context;
    static $ss;

    public function getContext(){
        igk_trace();
        die("load context");
        return $this->m_context;
    }
    ///<summary>set loading  context</summary>
    private function setContext($context){
        $this->m_context = $context;
        
    }
    ///<summary>bind template object</summary>
    /**
    * bind template object
    */
    private static function __bind_template($reader, & $cnode, $template, $context){

        $engine="";
        if(is_array($template)){
            $src =$template["content"];
            $data=$template["context-data"];
            $ctrl=isset($reader->m_context->ctrl) ? $reader->m_context->ctrl: null;
            $n_context=["scope"=>0, "contextlevel"=>1, "fname"=>"__memory__", "data"=>null];
            $root_context = igk_get_article_root_context();

            if($template["operation"] == "loop"){
                $n_options=(object)["Indent"=>0, "Depth"=>0, "Context"=>"html", "RContext"=>$n_context, "ctrl"=>$ctrl];
                igk_set_env("sys:://expression_context", $n_options);
                $script_obj=igk_html_databinding_getobjforscripting($ctrl);
                if( $script_obj && $cnode->getIsVisible()){

					if ($attribs = $cnode->getAttributes())
						$attribs = igk_html_render_attribs($attribs);

					if ($data){
                        igk_html_engine_parent_push_node([$cnode, & $attribs, $ctrl,  & $script_obj]);
                         
						foreach($data as $key=>$raw){
							$script_obj->push(["type"=>"loop", "key"=>$key, "value"=>$raw]);
							$c= igk_html_treat_content($src, $ctrl, $raw, null, true, $n_context);
							if($c){ 
								$engine .= trim(igk_html_wtag($cnode->tagName, $c->getinnerHtml($n_options), $attribs));
                        	}
							$script_obj->pop();
						}
                        igk_html_engine_parent_pop_node(); 
					}
                }
                igk_set_env("sys:://expression_context", null);

            }
            else{

                igk_die(__("Operation not handle : {0}", $template["operation"]));
            }
        } 
		$gnode = $cnode->getParentNode();
		if ($gnode && !empty($engine)){
			$gnode->remove($cnode);
			$v=igk_createnotagnode();
			$v->addText($engine);
			$gnode->add($v);
			$cnode = $v;
		}
        return 1;
    }
    ///<summary></summary>
    ///<param name="text"></param>
    /**
    * 
    * @param mixed $text
    */
    private function __construct($text){
        $this->m_text=$text;
        $this->m_offset=0;
        $this->m_contextLevel=0;
        $this->m_nodetype=IGKXMLNodeType::NONE;
        $this->m_resolvKeys=array();
        $this->m_resolvValues=array();
        $this->m_attribs=null;
        $this->m_nodes=array();
    }
    ///<summary></summary>
    ///<param name="text"></param>
    ///<param name="offset" ref="true"></param>
    ///<param name="start" default="'['"></param>
    ///<param name="end" default="']'"></param>
    /**
    * 
    * @param mixed $text
    * @param mixed * $offset
    * @param mixed $start the default value is '['
    * @param mixed $end the default value is ']'
    */
    private static function __readBracket($text, & $offset, $start='[', $end=']'){
        $c=0;
        $m="";
        $ct=strlen($text);
        while(($offset < $ct)){
            $ch=$text[$offset];
            $m .= $ch;
            $offset++;
            if($ch == $end){
                if($c == 0){
                    break;
                }
                $c--;
            }
            else if($ch == $start){
                $c++;
            }
        }
        return $m;
    }
    ///<summary></summary>
    ///<param name="reader"></param>
    ///<param name="text"></param>
    ///<param name="offset" ref="true"></param>
    ///<param name="tag"></param>
    /**
    * 
    * @param mixed $reader
    * @param mixed $text
    * @param mixed * $offset
    * @param mixed $tag
    */
    private static function __readSkipContent($reader, $text, & $offset, $tag){
        $ln=strlen($text);
        $o="";
        $v="";
        $level=0;
        $end=1;
        $tpos=0;
        $intag=0;
        $replace_expression=1;
        $read_name=function($text, $ln, & $offset){
            $name="";
            while($offset < $ln){
                $ch=$text[$offset];
                if(strpos(IGK_IDENTIFIER_TAG_CHARS, $ch) === false){
                    $offset--;
                    break;
                }
                $name .= $ch;
                $offset++;
            }
            return $name;
        };
        $tnames=[$tag];
        while($end && ($offset < $ln)){
            $ch=$text[$offset];
            switch($ch){
                case ">":
                $v .= $ch;
                if(($end == 2) && ($level == 0)){
                    $end=0;
                }
                $intag=0;
                break;
                case "/":
                $v .= $ch;
                if(($offset + 1 < $ln) && (($tch=$text[$offset + 1]) == ">")){
                    $v .= $tch;
                    $offset++;
                    $level--;
                    $intag=0;
                    array_pop($tnames);
                }
                break;
                case "<":
                if($intag){
                    igk_die("xml reading : enter tag not valid: ".$offset);
                }
                $intag=1;
                $tpos=strlen($v);
                $v .= $ch;
				$tch = null;

				($offset + 1 < $ln) && (($tch=$text[$offset + 1]));
				switch($tch){
					case "/" : {
						$v .= $tch;
						$offset += 2;
						$name=$read_name($text, $ln, $offset);
						if(empty($name) || (($tmix=array_pop($tnames)) != $name)){
							igk_die("xml reading not valid : ".$tmix. " # ".$name. " level ".$level);
						}
						$v .= $name;
						if(($level == 0) && ($name == $tag)){
							$end=2;
						}
						else{
							$level--;
						}
						}
					break;
					case "!":
						$start = $offset;

						igk_html_skip_comment($text, $offset);
						//+ Skip comment
						if (($pp = strpos($text, "-->", $offset))!== null){
							$offset = $pp+3;
						}
						$intag=0;

					break;
					default:
						$offset++;

						$name=$read_name($text, $ln, $offset);
						if(empty($name)){
							igk_wln_e(__FILE__.":".__LINE__, "start tag is not a valid start tag", igk_html_wtag("textarea", $v.substr($text, $offset, 10)."...\n-----------\n".$text), "name is empty : offset : ".$offset. " tag  : ".$tag. " level: ".$level);
						}
						array_push($tnames, $name);
						$level++;
						$v .= $name;
					break;
                }
                break;
                case "'":
                case '"':
                $v .= igk_str_read_brank($text, $offset, $ch, $ch, null, 1);
                break;
                case '{':
                case '@':
                if(!$intag){
                    if(self::__replaceDetectedExpression($reader, $text, $v, $offset, $replace_expression)){
                        $offset--;
                        break;
                    }
                }
                $v .= $ch;
                break;default: $v .= $ch;
                break;
            }
            $offset++;
        }
        $v=substr($v, 0, $tpos);
        if(($intag) || (count($tnames) > 0)){
            igk_die("failed to read data");
        }
        return $v;
    }
    ///<summary>read text content</summary>
    /**
    * read text content
    */
    private function __readTextValue(){
        $_pre=($this->m_name == 'pre') && ($this->m_nodetype == 1);
        $_cread=1;
        $replace_expression=1;
        $this->m_name=null;
        $v="";
        $space=0;
        while($_cread && $this->CanRead()){
            $ch=$this->m_text[$this->m_offset];
            if(!$_pre && $ch == ' '){
                if($space){
                    $this->m_offset++;
                    continue;
                }
                else{
                    $space=1;
                }
            }
            else{
                $space=0;
            }
            switch($ch){
                case '<':
                    $_cread=0;
                break 2;
                case '@':
                case '{':
                case IGK_EXPRESSION_ESCAPE_MARKER:
                if($this->m_context){ 
                    if(self::__replaceDetectedExpression($this, $this->m_text, $v, $this->m_offset, $replace_expression, 0)){
                        break 2;
                    }
                }
                break;
            }
            $this->m_offset++;
            $v .= $ch;
        }
        if(!empty($v)){
            $this->m_v=$v;
            $this->m_nodetype=IGKXMLNodeType::TEXT;
            return true;
        }
        return false;
    }
    ///<summary>replace data binding expression</summary>
    ///<param name="reader"></param>
    ///<param name="text"></param>
    ///<param name="v" ref="true"></param>
    ///<param name="offset" ref="true"></param>
    ///<param name="replace_expression" default="1"></param>
    ///<param name="skip" default="1"></param>
    /**
    * replace data binding expression
    * @param mixed $reader
    * @param mixed $text
    * @param mixed * $v
    * @param mixed * $offset
    * @param mixed $replace_expression the default value is 1
    * @param mixed $skip the default value is 1
    */
    private static function __replaceDetectedExpression($reader, $text, & $v, & $offset, $replace_expression=1, $skip=1){
        if($c=preg_match(IGK_TEMPLATE_EXPRESSION_REGEX, $text, $tab, PREG_OFFSET_CAPTURE, $offset)){
            if($offset == $tab[0][1]){
                if($replace_expression){
                    $sdata="";
                    if($skip){
                        $sdata=igk_html_wtag(IGK_ENGINE_EXPRESSION_NODE, "", ["expression"=>str_replace("\"", "\\\"", htmlentities($tab[0][0])), "igk:args"=>self::EXPRESSION_ARGS], 1);
                    }
                    else{
                        $n_context= $reader->m_context;
                        $_e=$tab[0][0];
						$_b = 0;
                        while($_e[0] == "@"){
                            $_e=substr($_e, 1);
							$_b = 1;
                        }
                        if(!isset($n_context->raw)){ 
                            igk_die("raw not defined");
                        }
                       
                        $sdata=igk_html_databinding_treatresponse($_e, $n_context->ctrl,
                            igk_get_attrib_raw_context($n_context), 
                            null, $_b);
                    }
                    $v .= $sdata;
                }
                else{
                    $v .= $tab[0][0];
                }
                $offset += strlen($tab[0][0]);
                return true;
            }
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="cnode"></param>
    ///<param name="n"></param>
    ///<param name="tab"></param>
    ///<param name="args"></param>
    /**
    * 
    * @param mixed $cnode
    * @param mixed $n
    * @param mixed $tab
    * @param mixed $args
    */
    private function _addNode($cnode, $n, $tab, $args){
        $g=explode(':', $n);
        if(igk_count($g) == 1){
            $v=self::CreateNode($n, $args);
            if(!$cnode->add($v) && !self::_AddToParent($tab, $cnode, $v)){
                $b=$tab->add($v);
            }
            else{
                $b=$v;
            }
            return $b;
        }
        if(($k=call_user_func_array(array($cnode, IGK_ADD_PREFIX.$g[1]), $args != null ? $args: array())) && ($k!==$cnode))
			$this->_appendResolvNode($n, $k, $cnode);

        return $k;
    }
    ///<summary></summary>
    ///<param name="topnode"></param>
    ///<param name="cnode"></param>
    ///<param name="node"></param>
    /**
    * 
    * @param mixed $topnode
    * @param mixed $cnode
    * @param mixed $node
    */
    private static function _AddToParent($topnode, $cnode, $node){
        $p=$cnode->ParentNode;
        while($p && ($p !== $topnode)){
            if($p->add($node) !== null){
                return 1;
            }
            $p=$p->ParentNode;
        }
        return 0;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="k"></param>
    ///<param name="cnode"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $k
    * @param mixed $cnode
    */
    private function _appendResolvNode($n, $k, $cnode){
        if($k){
            $this->m_resolvKeys[]=$n;
            $this->m_resolvValues[]=$k;
            $this->m_nodes[]=$cnode;
        }
    }
    ///<summary></summary>
    ///<param name="reader"></param>
    ///<param name="cnode"></param>
    ///<param name="name"></param>
    ///<param name="tab_doc"></param>
    ///<param name="pargs"></param>
    /**
    * 
    * @param mixed $reader
    * @param mixed $cnode
    * @param mixed $name
    * @param mixed $tab_doc
    * @param mixed $pargs
    */
    private static function _BuildNode($reader, $cnode, $name, $tab_doc, $pargs){

        if((self::$sm_openertype == "XML") || (isset($reader->context) && ($reader->context == IGKHtmlContext::XML))){
            $n=self::CreateNode($name, $pargs);
            if($cnode){
                $cnode->add($n);
            }
            return $n;
        }
        else{
			if (($name==IGK_ENGINE_ATTR_EXPRESSION_NODE) && ($cnode !== null)){
				$g = new IGKHtmlAttribExpressionNode([$cnode, null], $reader->m_context);
				if ($cnode){
					$cnode->add($g);
				}
				return $g;
			}
            return ($cnode !== null) ? $reader->_addNode($cnode, $name, $tab_doc, $pargs): self::CreateNode($name, $pargs);
        }
    }
    ///<summary></summary>
    ///<param name="cnode">node to close</param>
    ///<param name="tag">tag name that referrer to </param>
    /**
    * 
    * @param mixed $cnode
    * @param mixed $tag
    */
    private function _LoadComplete($cnode, $tag, $peekData=null){
		// igk_debug_wln("closing : ". $tag . " vs ".$cnode->tagName. " peekData ");
        $m=(strtolower($cnode->tagName) == strtolower($tag));
        if($m){
            $p = $cnode->getParentNode();
            $cnode->loadingComplete();
			return $p;
        }
		//closing till peekDataParent found
		$c = count($this->m_resolvKeys);
		if ($peekData && ($c>0) ){

			$n=count($this->m_resolvKeys) > 0 ? $this->m_resolvKeys[$c-1]: null;
			$d=count($this->m_resolvValues) > 0 ? $this->m_resolvValues[$c-1]: null;


			if (!$d && (strtolower($n) != strtolower($tag))){
				igk_wln_e(
				$c,
				"failed to relov : ".$tag. " VS :::".$n . " === ".$cnode->tagName);
			}
			$cnode->loadingComplete();
			$pnode = $cnode->getParentNode();
			if ($pnode === $d)
			{
				$pnode->loadingComplete();
				$pnode = $d->getParentNode(); ;
			}else{
				while($pnode && ($pnode!==$d)){
					$pnode->loadingComplete();
					$pnode = $pnode->getParentNode();
				}
				if ($pnode ===$d){
					$pnode = $d->getParentNode();
				}
			}
			array_pop($this->m_resolvKeys);
            array_pop($this->m_resolvValues);
			$peekData->closing = true;
			return $pnode;
		}

		$n=count($this->m_resolvKeys) > 0 ? $this->m_resolvKeys[count($this->m_resolvKeys)-1]: null;
        $d=count($this->m_resolvValues) > 0 ? $this->m_resolvValues[count($this->m_resolvValues)-1]: null;

        if((strtolower($n) == strtolower($tag)) && ($d === $cnode)){
            array_pop($this->m_resolvKeys);
            array_pop($this->m_resolvValues);
        }
        $cnode->loadingComplete();
        $b=array_pop($this->m_nodes);
        $pnode=$cnode->getParentNode();
        if(($b !== null) && ($pnode !== $b)){
            $pnode=$b;
        }
        $cnode=$pnode;
        return $cnode;
    }
    ///<summary>read the model</summary>
    ///<param name="context">name of the function that call the read model</param>
    /**
    * read the model
    * @param mixed|IGKHtmlReader reader to used
    * @param mixed document
    * @param mixed context to used
    */
    private static function _ReadModel($reader, $tab_doc, $context=null){
        $cnode=null;
        $pnode=null;

        $vp_item=(object)array("clCurrent"=>null, "clParent"=>null);
        if((self::$sm_openertype == null) && ($reader->m_context != null)){
            self::$sm_openertype=$reader->m_context;
        }
        $v_tags=array();
        $_shift_setting=function($n, $cnode, & $v_tags, & $krsv){
            if(igk_count($v_tags)<=0)
                return;
            $s=array_shift($v_tags);
            if($s->clName == $n){
                if($cnode === $s->item){
                    $krsv=false;
                }
                else
                    array_unshift($v_tags, $s);
            }
        };
	 
        while($reader->Read()){  

            switch($reader->NodeType){
                case IGKXMLNodeType::ELEMENT:
                $name=$reader->Name();
                if(empty($name)){
                    break;
                }
				// igk_debug_wln("context : ".$name . " ".$context );
                $cattr=$reader->Attribs();
                if($context == IGK_LOAD_EXPRESSION_CONTEXT){
                    $v_tn=new IGKHtmlItem($name);
                    $v_tn->startLoading(__CLASS__, $context);
                    if($reader->HasAttrib()){
                        foreach($cattr as $k=>$c){
                            $v_tn->offsetSetExpression($k, $c);
                        }
                    }
                    if($cnode == null){
                        $tab_doc->add($v_tn);
                    }
                    else{
                        $cnode->add($v_tn);
                        if($v_tn->ParentNode !== $cnode){
                            $ht=$cnode->ParentNode;
                            while($ht){
                                if($ht->add($v_tn)->ParentNode === $ht)
                                    break;
                                $ht=$ht->ParentNode;
                            }
                            if($ht === null){
                                $tab_doc->add($v_tn);
                            }
                            else
                                igk_die("failed ".($ht === null));
                        }
                    }
                    $cnode=$v_tn;
                    if($reader->IsEmpty()){
                        $cnode=$reader->_LoadComplete($cnode, $name);
                        if($cnode == $tab_doc){
                            $cnode=null;
                            $reader->m_nodes=array();
                        }
                    }
                }
                else{
                    $template=igk_getv($cattr, "igk:template-content");
                    if($template){
                        $cattr["igk:template-content"]=null;
                    }
                    $pargs=igk_engine_get_attr_arg(igk_getv($cattr, "igk:args"), $reader->m_context);
					$v_tn=self::_BuildNode($reader, $cnode, $name, $tab_doc, $pargs);
 
					if($v_tn){
                        if($v_tn->tagName && ($v_tn->tagName != $name) && !$reader->IsEmpty()){
                            array_unshift($v_tags, (object)array(IGK_FD_NAME=>$name, "item"=>$v_tn));
                            if($cnode == null)
                                $reader->_appendResolvNode($name, $v_tn, $cnode);
                        }
                        $v_tn->startLoading(__CLASS__, $context);
                        if($reader->HasAttrib()){
                            foreach($cattr as $k=>$c){
                                if($k == "igk:args")
                                    continue;
                                if(self::$sm_openertype == "XML"){
                                    $v_tn->setAttribute($k, $c);
                                }
                                else
                                    $v_tn[$k]=$c;

                            }
                        }
                        if($cnode == null){
                            $tab_doc->add($v_tn);
                        }
                        $cnode=$v_tn;
                        if($template){
                            self::__bind_template($reader, $cnode, $template, $context);
							$gc = $reader->_LoadComplete($cnode, $cnode->tagName);
							$cnode = $gc;
							break;
                        }
                        if($reader->IsEmpty() && $cnode){
							// igk_debug_wln("---------------------------");

                            $cnode = $reader->_LoadComplete($cnode, $name);

                            if($cnode === $tab_doc){
                                $cnode=null;
                                $reader->m_nodes=array();
                            }
                        }else {
							// igk_debug_wln("base loading ....".get_class($cnode));
						}
                    }
                    else{
                        $reader->Skip();
                    }
                } 
                break;
                case IGKXMLNodeType::TEXT:
                $v_sr=$reader->getValue()."";
				// igk_ilog($v_sr);
                if(strlen($v_sr) > 0){
				 	if (  empty($v_c = trim($v_sr)) && $v_c!=='0'){
						$v_sr = ""; 
						break;
					}
                    if($cnode){
                        if($cnode->isEmptyTag()){
                            $txt=new IGKHtmlText();
                            $txt->setContent($v_sr);
                            $cnode->parentNode->add($txt);
                            $cnode=$cnode->parentNode;
                        }
                        else{
                            if($cnode->getTempFlag("replaceContentLoading") || (($cnode->Content == "") && !$cnode->HasChilds))
                                $cnode->Content=$v_sr;
                            else{
                                $txt=new IGKHtmlText();
                                $txt->setContent($v_sr);
                                $cnode->add($txt);
                            }
                        }
                    }
                    else{
                        $v=igk_html_node_text($v_sr);
                        $tab_doc->add($v);
                    }
                }
                break;
                case IGKXMLNodeType::COMMENT:
                $v_v=$reader->getValue();
                $v=new IGKHTMLCommentItem($v_v);
                if(!$cnode){
                    $tab_doc->add($v);
                }
                else{
                    $cnode->add($v);
                }
                break;
                case IGKXMLNodeType::CDATA:
                case IGKXMLNodeType::DOCTYPE;
                $v=self::CreateElement($reader->NodeType);
                $v->Content=$reader->getValue();
                if(!$cnode){
                    $tab_doc->add($v);
                }
                else{
                    $cnode->add($v);
                }
                break;
                case IGKXMLNodeType::ENDELEMENT:
                $n=$reader->Name();
                $tnode=$cnode;
                if($cnode){
                    $t=$cnode->TagName;
                    if($context == "LoadExpression"){
                        if($n == $t){
                            $cnode=$reader->_LoadComplete($cnode, $n);
                        }
                        else{
                            $rsv=false;
                            $krsv=true;
                            $_shift_setting($n, $cnode, $v_tags, $krsv);
                            while($cnode && ($cnode->TagName != $n)){
                                $cnode=$reader->_LoadComplete($cnode, $n);
                                $rsv=true;
                            }
                            if(!$krsv && $cnode){
                                $cnode=$reader->_LoadComplete($cnode, $n);
                            }
                            else{
                                igk_die("[Bad Html structure] can't get parent, cnode is null, name : $n  , tagName : $t  ?  <br/>\n"."Line : ".__LINE__."<br /><br />".IGK_LF."<br /><div >Context:".$context."</div>"." : ".get_class($cnode));
                            }
                        }
                        if($cnode == $tab_doc){
                            $cnode=null;
                            $reader->m_nodes=array();
                        }
                    }
                    else{
                        if(($n == $t) || $cnode->isCloseTag($n) || $reader->IsResolved($cnode, $n)){
                            $cnode=$reader->_LoadComplete($cnode, $n);
                        }
                        else{
                            $rsv=false;
                            $krsv=true;
                            $pnode=$cnode;
                            $kclosing=true;
							$peek = null;
                            while($kclosing && $pnode){
                                if(igk_count($v_tags) > 0){
                                    $peek=$v_tags[0];
                                    if(($peek->clName == $n) && ($peek->item === $pnode)){
										igk_dev_wln_e(__FILE__.':'.__LINE__, "closing found");
                                        array_shift($v_tags);
                                        $kclosing=0;
                                    }
                                    else{
                                        if(!$pnode->isEmptyTag() && ($pnode->TagName == $n)){
                                            $kclosing=0;
                                        }
                                      
                                    }
                                }
								// ob_clean();
                                $pnode = $reader->_LoadComplete($pnode, $n, $peek);
								if ($peek && ($pnode === $peek->item)){
									  array_shift($v_tags);
                                      $kclosing=0;
								}

                            }
                            $cnode=$pnode;
                        }
                        if($cnode == $tab_doc){
                            $cnode=null;
                            $reader->m_nodes=array();
                        }
                    }
                }
                break;
                case IGKXMLNodeType::PROCESSOR:{
                    $v=$reader->getValue();
                    $v_cnode=new IGKHtmlProcessInstruction($v);
                    if($cnode == null){
                        $tab_doc[]=$cnode;
                    }
                    else{
                        $cnode->add($v_cnode);
                    }
                }
                break;
            }
 

        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Attribs(){
        return $this->m_attribs;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function CanRead(){
        return (($this->m_offset>=0) && ($this->m_offset < strlen($this->m_text)));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Close(){
        if($this->hfile)
            fclose($this->hfile);
		$this->m_text = null;
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public static function Create($file){
        if(is_file($file)){
            $f=fopen($file, "r");
            if($f){
                $c=filesize($file);
                $str=fread($f, $c);
                $reader=new IGKHtmlReader($str);
                $reader->m_hfile=$f;
                return $reader;
            }
        }
        return null;
    }
    ///<summary>create Element</summary>
    /**
    * create Element
    */
    public static function CreateElement($nodetype, $value=IGK_STR_EMPTY){
        $v=null;
        switch($nodetype){
            case IGKXMLNodeType::CDATA:
            $v=(new IGKXmlNode("!CDATA"));
            $v->setContent($value);
            break;
            case IGKXMLNodeType::DOCTYPE:
            $v=new IGKHtmlDoctype($value);
            break;
        }
        return $v;
    }
    ///<summary>createnode </summary>
    /**
    * createnode
    */
    public static function CreateNode($name, $args=null){
        if(is_callable(self::$sm_ItemCreatorListener)){
            $fc=self::$sm_ItemCreatorListener;
            return $fc($name, $args);
        }
        if(self::$sm_openertype == "XML"){
            return new IGKXmlNode($name);
        }
        return IGKHtmlItem::CreateElement($name, $args);
    }
    ///<summary>Create Binding information</summary>
    /**
    * Create Binding information- for template data binding
    */
    protected function getBindingInfo(){
        $bindinfo=new IGKReaderBindingInfo($this, function($k, $v){
            $this->m_attribs[$k]=$v;
            return $this;
        });
        return $bindinfo;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNodeType(){
        return $this->m_nodetype;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSource(){
        return $this->m_text;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getValue(){
        return $this->m_v;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function HasAttrib(){
        return $this->m_hasAttrib;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function IsEmpty(){
        return $this->m_isEmpty;
    }
    ///<summary></summary>
    ///<param name="node" ref="true"></param>
    ///<param name="tagName"></param>
    /**
    * 
    * @param mixed * $node
    * @param mixed $tagName
    */
    private function IsResolved(& $node, $tagName){
        if(!$node)
            return false;
        $n=count($this->m_resolvKeys) > 0 ? $this->m_resolvKeys[count($this->m_resolvKeys)-1]: null;
        $d=count($this->m_resolvValues) > 0 ? $this->m_resolvValues[count($this->m_resolvValues)-1]: null;
        if((strtolower($n) == strtolower($tagName)) && ($d === $node)){
            return true;
        }
        if(IGKString::StartWith($tagName, "igk:")){
            $f=IGKString::Format(IGK_HTML_CLASS_NODE_FORMAT, substr($tagName, 4));
            if(strtolower($f) == strtolower(get_class($node))){
                return class_exists($f) && !igk_reflection_class_isabstract($f) && igk_reflection_class_extends($f, 'IGKHtmlItem');
            }
            else{
                if($node->getParentHost() != null){
                    $node=$node->getParentHost();
                    return $this->IsResolved($node, $tagName);
                }
            }
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="text"></param>
    ///<param name="context" default="null"></param>
    ///<param name="listener" default="null"></param>
    /**
    * 
    * @param mixed $text
    * @param mixed $context the default value is null
    * @param mixed $listener the default value is null
    */
    public static function Load($text, $context=null, $listener=null){
        
        $opentag=false;
        $tab_doc=null;
        if(empty(self::$sm_openertype) && ($context != null)){
            self::$sm_openertype=$context;
        }
        if(func_num_args() > 2){
            self::SetCreator($listener);
        }
        if(is_string($text)){
            $tab_doc= new IGKHtmlReaderDocument(); 
            $reader = new IGKHtmlReader($text);
            $reader->setContext($context);
            self::_ReadModel($reader, $tab_doc,__FUNCTION__);
            self::$sm_openertype=null;
        }
        return $tab_doc;
    }
    ///<summary></summary>
    ///<param name="text"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $text
    * @param mixed $context the default value is null
    */
    public static function LoadExpression($text, $context=null){
        $opentag=false;
        $tab_doc=null;
        if(is_string($text)){
            $tab_doc=new IGKHtmlReaderDocument();
            $reader=new IGKHtmlReader($text);
            $reader->context=$context;
            self::_ReadModel($reader, $tab_doc, __FUNCTION__);
        }
        return $tab_doc;
    }
    ///<summary>load the html file</summary>
    /**
    * load the html file
    */
    public static function LoadFile($file){
        if(is_file($file)){
            $size=@filesize($file);
            if($size > 0){
                try {
                    $hfile=fopen($file, "r");
                }
                catch(Exception $ex){}
                if($hfile){
                    $text=fread($hfile, $size);
                    fclose($hfile);
                    return self::Load($text, null);
                }
            }
            return null;
        }
        igk_die("file : ".$file." doesn't exist");
    }
    ///<summary> load in xml opening context</summary>
    /**
    *  load in xml opening context
    */
    public static function LoadXML($content){
        self::$sm_openertype="XML";
        $d=self::Load($content);
        self::$sm_openertype=null;
        return $d;
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public static function LoadXMLFile($file){
        self::$sm_openertype="XML";
        $d=self::LoadFile($file);
        self::$sm_openertype=null;
        return $d;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Name(){
        return $this->m_name;
    }
    public static function GetAttributeRegex(){
        $machv="(?P<value>";
        $machv .= "([\"](([^\"]*(')?(\"\")?)+)[\"])";
        $machv .= "|([\'](([^']*(\")?('')?)+)[\'])";
        $machv .= "|(([^\s]*)+)";
        $machv .= ")";
        $tagRegexLoad="(?P<name>("."([\(])".IGK_TAGNAME_CHAR_REGEX."+([\)])"."|([\\[])".IGK_TAGNAME_CHAR_REGEX."+([\\]])".'|(@|\*(\*)?)?'.IGK_TAGNAME_CHAR_REGEX.'+'."))";
        return "/".$tagRegexLoad."[\s]*=[\s]*(".$machv.")/i";
    }
    public static function ReadAttributes($value){
        $regex = self::GetAttributeRegex();
        $out = [];
        if ( ($c = preg_match_all($regex, $value, $tab)) > 0)
        { 
            for($i =0 ; $i < $c; $i++){
                $out[$tab["name"][$i]] =  igk_str_uncollapseString($tab["value"][$i]);
            }
        }
        return $out;
    }

    ///<summary></summary>
    /**
    * 
    */
    public function Read(){
        static $_tagRegexValueRgx=null;
        if(!$this->CanRead()){
            $this->m_nodetype=IGKXMLNodeType::NONE;
            $this->m_v=null;
            $this->m_name=null;
            $this->m_isEmpty=true;
            $this->m_hasAttrib=false;
            $this->m_attribs=null;
            return false;
        }
        if(($this->m_nodetype == IGKXMLNodeType::ELEMENT) && ($this->m_isEmpty)){
            $this->m_nodetype=0;
            $this->m_isEmpty=false;
            $this->m_name="";
        }
        $v_enter=false;
        $this->m_isEmpty=false;
        $this->m_hasAttrib=false;
        $this->m_attribs=array();
        $v=IGK_STR_EMPTY;
        $v_c=strlen($this->m_text);
        $fc_attrib=function($k, $v){
            $this->m_attribs[$k]=$v;
        };
        if($_tagRegexValueRgx === null){
            $_tagRegexValueRgx = self::GetAttributeRegex();           
        }
        while($this->CanRead()){
            $c=$this->m_text[$this->m_offset];
            switch($c){
                case "<":
                $v_enter=true;
                break;
                case "?":
                if($v_enter){
                    $this->m_offset++;
                    $v=IGK_STR_EMPTY;
                    while($this->CanRead()){
                        $v .= $this->m_text[$this->m_offset];
                        $this->m_offset++;
                        if(substr($v, -2, 2) == "?>"){
                            $v=substr($v, 0, strlen($v)-3);
                            $this->m_name=null;
                            $this->m_v=$v;
                            $this->m_nodetype=IGKXMLNodeType::PROCESSOR;
                            return true;
                        }
                    }
                }
                else{
                    return $this->__readTextValue();
                }
                igk_debug_wln("failed - processor : offset: ".$this->m_offset);
                return false;
                case "!":
                if($v_enter){
                    if(substr($this->m_text, $this->m_offset + 1, 2) == "--"){
                        $this->m_offset += 3;
                        $v=IGK_STR_EMPTY;
                        while($this->CanRead()){
                            $v .= $this->m_text[$this->m_offset];
                            $this->m_offset++;
                            if(substr($v, -3, 3) == "-->"){
                                $v=substr($v, 0, strlen($v)-3);
                                $this->m_name=null;
                                $this->m_v=$v;
                                $this->m_nodetype=IGKXMLNodeType::COMMENT;
                                return true;
                            }
                        }
                    }
                    else if(strtoupper(substr($this->m_text, $this->m_offset + 1, 7)) == "[CDATA["){
                        $this->m_offset += 8;
                        $v=IGK_STR_EMPTY;
                        while($this->CanRead()){
                            $v .= $this->m_text[$this->m_offset];
                            $this->m_offset++;
                            if(substr($v, -3, 3) == "]]>"){
                                $v=substr($v, 0, strlen($v)-3);
                                $this->m_name=null;
                                $this->m_v=$v;
                                $this->m_nodetype=IGKXMLNodeType::CDATA;
                                return true;
                            }
                        }
                    }
                    else if(strtoupper(substr($this->m_text, $this->m_offset + 1, 7)) == "DOCTYPE"){
                        $this->m_offset += 8;
                        $v=IGK_STR_EMPTY;
                        while($this->CanRead()){
                            $v .= $this->m_text[$this->m_offset];
                            $this->m_offset++;
                            if(substr($v, -1, 1) == ">"){
                                $v=substr($v, 0, strlen($v)-1);
                                $this->m_name=null;
                                $this->m_v=$v;
                                $this->m_nodetype=IGKXMLNodeType::DOCTYPE;
                                return true;
                            }
                        }
                    }
                    return false;
                }
                break;
                case "/":
                if($v_enter){
                    $this->m_offset += 1;
                    $this->m_nodetype=IGKXMLNodeType::ENDELEMENT;
                    $this->m_name=$this->ReadName();
                    $this->m_v=null;
                    $v_enter=false;
                    while(($v_c > $this->m_offset) && ($this->m_text[$this->m_offset] !== '>')){
                        $this->m_offset++;
                    }
                    return true;
                }
                $v .= $c;
                break;
                default:
                if(!$v_enter){
                    if($this->m_nodetype == IGKXMLNodeType::ELEMENT){
                        $match=array();
                        $tag=strtolower($this->m_name);
                        switch($tag){
                            case "script":
                            case "code":
                                 // special case 
                                while($this->CanRead()){
                                    $v .= $this->m_text[$this->m_offset];
                                    $this->m_offset++;
                                    if(preg_match("/\<\/([\s]*)".$tag."([\s]*)\>$/i", $v, $match)){
                                        $this->m_offset -= strlen($match[0]);
                                        $v=substr($v, 0, strlen($v) - strlen($match[0]));
                                        break;
                                    }
                                }
                                $this->m_name=$tag;
                                $this->m_v=$v;
                                $this->m_nodetype=IGKXMLNodeType::TEXT;
                                return true;

                            case "style":{
                                while($this->CanRead()){
                                    $v .= $this->m_text[$this->m_offset];
                                    $this->m_offset++;
                                    if(preg_match("/(\<\/([\s]*)style([\s]*)>)$/i", $v, $match)){
                                        $this->m_offset -= strlen($match[0]);
                                        $v=substr($v, 0, strlen($v) - strlen($match[0]));
                                        break;
                                    }
                                }
                                $this->m_name=null;
                                $this->m_v=$v;
                                $this->m_nodetype=IGKXMLNodeType::TEXT;

                            }
                            return true;
                            default:
                                $c = $this->__readTextValue(); 
                                return $c;
                        }
                    }
                    else{
                        $v=IGK_STR_EMPTY;
                        if($this->m_nodetype == IGKXMLNodeType::ENDELEMENT){
                            if($c == ">")
                                $this->m_offset++;
                            $c_txt=$this->__readTextValue();
                            if(!$c_txt){
                                $this->m_offset--;
                                break;
                            }
                            return $c_txt;
                        }
                        return $this->__readTextValue();
                    }
                }
                else{
                    $this->m_name=$this->ReadName();
                    $this->m_v=null;
                    $this->m_nodetype=IGKXMLNodeType::ELEMENT;
                    $this->m_isEmpty=false;
                    $this->m_hasAttrib=false;
                    $v_end=false;
                    $v=IGK_STR_EMPTY;
                    $v_readname=false;
                    $v_readvalue=false;
                    $v_attribname=null;
                    $v_ch=null;
                    $v_startattribvalue=false;
                    $v_attribmatch=IGK_STR_EMPTY;
                    $v_bracketstart=false;
                    $v_bracketch="";
                    $v_expressions=array();
                    while($this->CanRead()){
                        $v_ch=$this->m_text[$this->m_offset];
                        $this->m_offset++;
                        // if(preg_match("/(\[)/", $v_ch)){
                            // if(!$v_startattribvalue){
                                // $exp=$v_ch. self::__readBracket($this->m_text, $this->m_offset, '[', ']');
                                // $cout=igk_count($v_expressions);
                                // $v_expressions[]=$exp;
                                // $v .= "@igk:expression{$cout}";// =\"{$cout}\" ";
                                // continue;
                            // }
                        // }
                        $v .= $v_ch;
                        if(preg_match("('|\")", $v_ch)){
                            if($v_startattribvalue){
                                if($v_attribmatch == $v_ch)
                                    $v_startattribvalue=false;
                            }
                            else{
                                $v_startattribvalue=true;
                                $v_attribmatch=$v_ch;
                            }
                        }
                        if($v_startattribvalue)
                            continue;
                        if(substr($v, -2, 2) == "/>"){
                            $v=trim(substr($v, 0, strlen($v)-2));
                            $this->m_isEmpty=true;
                            break;
                        }
                        else if(substr($v, -1, 1) == ">"){
                            $v=substr($v, 0, strlen($v)-1);
                            $this->m_isEmpty=false;
                            break;
                        }
                        if($v_readname == false){
                            if(preg_match("/([\s])/", $v_ch)){
                                $v_attribname=$v_ch;
                                $v_readname=true;
                                $v_readvalue=false;
                            }
                        }
                        else{
                            if(preg_match("/[\s]/", $v_ch))
                                $v_attribname .= $v_ch;
                            else{
                                $v_readname=false;
                            }
                        }
                    }
					//igk_debug_wln("info: ".$v);
                    if(!empty($v)){
                        $this->m_hasAttrib=true;
                        $m=null;
                        $acount=preg_match_all($_tagRegexValueRgx, $v, $m);
                        $this->m_attribs=array();
                        $binfo=$this->getBindingInfo();
                        $v_context = $this->m_context;
                        for($cc=0; $cc < $acount; $cc++){
                            $k=$m["name"][$cc];
                            $_v=$m["value"][$cc];
                            if(preg_match("/^@igk:expression/", $k)){
                                $this->m_attribs[$k]=$v_expressions[IGKHtmlUtils::GetAttributeValue($m["value"][$cc], $v_context)];								
                            }
                            else{ 
                                if(!igk_temp_bind_attribute($binfo, $k, $_v, $v_context, $fc_attrib)){
                                    if((strlen($k) > 2) && preg_match("/^\*\*[^\*]/i", $k)){
                                        //+ match double attribute
                                        $this->m_attribs["[".substr($k, 2)."]"] = IGKHtmlUtils::GetAttributeValue($m["value"][$cc], $v_context);
                                    }
                                    else{
                                        $this->m_attribs[$k]=IGKHtmlUtils::GetAttributeValue($m["value"][$cc], $v_context);
                                    }
                                }

                            }
                        }

						$skip_visible = (array_key_exists("igk:isvisible", $this->m_attribs) && ($this->m_attribs["igk:isvisible"]== false));
						// igk_wln("skipout",  $skip_visible,  $this->m_attribs,
						// array_key_exists("igk:isvisible", $this->m_attribs));

                        if($skip_visible || ($binfo->skipcontent && !$this->m_isEmpty)){
                            $content=self::__readSkipContent($this, $this->m_text, $this->m_offset, $this->m_name);
                            $this->m_attribs["igk:template-content"] = $skip_visible ? null: array_merge(["content"=>$content], $binfo->getInfoArray());
                            $this->m_isEmpty=true;
                        }
                    }
                    return true;
                }
            }
            $this->m_offset += 1;
        }
        if(!$v_enter && !empty($v)){
            $this->m_name=null;
            $this->m_v=$v;
            $this->m_nodetype=IGKXMLNodeType::TEXT;
            return true;
        }
        return false;
    }
    ///read tag name
    /**
    */
    public function ReadName(){
        $v=IGK_STR_EMPTY;
        while($this->CanRead() && preg_match("/".IGK_TAGNAME_CHAR_REGEX."/i", $this->m_text[$this->m_offset])){
            $v .= $this->m_text[$this->m_offset];
            $this->m_offset++;
        }
        return $v;
    }
    ///<summary>set root node creator</summary>
    /**
    * set root node creator
    */
    public static function SetCreator($listener){
        self::$sm_ItemCreatorListener=$listener;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Skip(){
        if($this->m_nodetype == IGKXMLNodeType::ELEMENT){
            if(!$this->m_isEmpty){
                $n=$this->Name();
                $depth=0;
                $end=false;
                while(!$end && $this->Read()){
                    switch($this->m_nodetype){
                        case IGKXMLNodeType::ELEMENT:
                        $depth++;
                        break;
                        case IGKXMLNodeType::ENDELEMENT:
                        if(($depth == 0) && (strtolower($this->Name()) == strtolower($n))){
                            $end=true;
                        }
                        else if($depth > 0)
                            $depth--;
                        break;
                    }
                }
                return $end;
            }
        }
        return false;
    }
}
///<summary>Represente class: IGKHtmlScriptLink</summary>
/**
* Represente IGKHtmlScriptLink class
*/
class IGKHtmlScriptLink extends IGKObject {
    private $m_owner;
    ///<summary></summary>
    ///<param name="o"></param>
    /**
    * 
    * @param mixed $o
    */
    public function __construct($o){
        $this->m_owner=$o;
    }
    ///<summary></summary>
    ///<param name="options"></param>
    /**
    * 
    * @param mixed $options
    */
    public function getValue($options){
        $src=IGK_STR_EMPTY;
        $o=$this->m_owner;
        $lnk=$o->link;
        if($lnk){
            $src=IGKResourceUriResolver::getInstance()->resolve($lnk, $options);
        }
        return $src;
    }
}
///<summary>Represente class: IGKHtmlScriptManager</summary>
/**
* Represente IGKHtmlScriptManager class
*/
final class IGKHtmlScriptManager extends IGKObject {
    const DOC_FLAG=3;
    const JSMAN_ASSOC_TABLE_FLAG=2;
    const JSMAN_NODE=4;
    const MANAGER_FLAG=1;
    const SCRIPT_ITEM_MANAGER=5;
    const TEMPORARY_SCRIPT=6;
    private $_f;
    ///<summary></summary>
    ///<param name="owner"></param>
    /**
    * 
    * @param mixed $owner
    */
    public function __construct($owner){
        $this->_f=new IGKFv();
        $this->_f->setFlag(self::DOC_FLAG, $owner);
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return get_class($this);
    }
    ///clear cache if script not loaded correctly
    ///<summary>register script to script manager</summary>
    /**
    * register script to script manager
    * @param string $file server script file
    * @param bool $canbeMerged serve on production allow to merge on system rendering script
    * @param string $tag 'priv'| or any tag to identify associate script
    */
    public function addScript($file, $canbeMerged=true, $tag='priv'){
        $local=false;
        $fname=true;
        $f=$file;
        if(!IGKValidator::IsUri($file)){
            $fname=false;
            $f=$file;
            if(file_exists($f)){
                $file=igk_html_uri(igk_realpath($f));
                $local=true;
            }
            else{
                $local=false;
            }
        }
        $tasc=$this->getAssoc();
        if(isset($tasc[$file])){
            return $tasc[$file];
        }
        $g=!$fname && !$local;
        $tasc[$file]=[
            "merge"=>$canbeMerged ? 1: 2,
            "tag"=>$tag
        ];
        $this->_f->updateFlag(self::JSMAN_ASSOC_TABLE_FLAG, $tasc);
        return $tasc[$file];
    }
    ///<summary>current script to new document</summary>
    /**
    * current script to new document
    */
    public function bindScriptTo($document){
        if($document == null)
            return;
        $tasc=$this->getAssoc();
        if($tasc) foreach($tasc as $k=>$v){
            list($t, $m)
            =igk_array_fill(explode(";", $v), 2);
            $document->addScript($k, $t, $m);
        }
    }
    ///<summary>clear loaded script</summary>
    /**
    * clear loaded script
    */
    public function Clear($tag=null){
        if($tag == null){
            $this->m_assocTable=array();
            $this->m_node->ClearChilds();
            return;
        }
        $t=array();
        foreach($this->m_assocTable as $k=>$v){
            if($v->tag == $tag){
                igk_html_rm($v);
                continue;
            }
            $t[$k]=$v;
        }
        $this->m_assocTable=$t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Flags(){
        return $this->_f;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAssoc(){
        if(($i=$this->getFlag(self::JSMAN_ASSOC_TABLE_FLAG)) == null){
            $i=new IGKHtmlScriptAssocInfo();
            $this->_f->setFlag(self::JSMAN_ASSOC_TABLE_FLAG, $i);
            $i->initialize();
        }
        return $i;
    }
    ///<summary> get the parent document</summary>
    /**
    *  get the parent document
    */
    public function getDoc(){
        return $this->getFlag(self::DOC_FLAG);
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="default" default="null"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $default the default value is null
    */
    public function getFlag($n, $default=null){
        return $this->_f->getFlag($n, $default);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getManager(){
        return $this->getFlag(self::MANAGER_FLAG);
    }
    ///<summary>merge all required scripts</summary>
    ///<param name="zip">get or set if required minification</param>
    ///<param name="files" ref="true">will recieve all merged scripts</param>
    /**
    * merge all required scripts
    * @param mixed $zip get or set if required minification
    * @param mixed $files will recieve all merged scripts
    */
    public function getMergedContent($zip=0, & $files=null){
        // igk_wln_e("merge content");
        $tasc=$this->getAssoc();
        $o="";
        if($tasc){
            $resolver=IGKResourceUriResolver::getInstance();
            foreach($tasc->toarray() as $k=>$v){
                if(!file_exists($k) || !preg_match("/\.js$/", basename($k)))
                    continue;
                $u=$resolver->resolve($k, null, 0);
                $o .= IGK_START_COMMENT."+F:  ". $u."".IGK_END_COMMENT.IGK_LF;
                $g=utf8_decode(igk_io_read_allfile($k));
                if($zip)
                    $g=igk_js_minify($g);
                $o .= $g.IGK_LF;
            }
        }
        return (object)(array("data"=>$o));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getNode(){
        return $this->getFlag(self::JSMAN_NODE);
    }
    ///<summary></summary>
    ///<param name="tab" default="null"></param>
    /**
    * 
    * @param mixed $tab the default value is null
    */
    public function getNonMergedContent($tab=null){
        $nonMerged=$tab == null ? $this->getMergedContent()->notMerged: $tab->notMerged;
        $o="";
        foreach($nonMerged as $v){
            $o .= $v->Render(null);
        }
        return $o;
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public function getScript($file){
        $tasc=$this->getAssoc();
        if($tasc && isset($tasc[$file]))
            return $this->$tasc[$file];
        return null;
    }
    ///<summary>return document tempory script</summary>
    /**
    * return document tempory script
    */
    public function & getTempScripts(){
        $c=$this->_f->getFlag(self::TEMPORARY_SCRIPT);
        if(!$c){
            $c=(object)array();
            $this->_f->setFlag(self::TEMPORARY_SCRIPT, $c);
        }
        return $c;
    }
    ///<summary>get if this script file is loaded to the document</summary>
    /**
    * get if this script file is loaded to the document
    */
    public function isLoaded($file){
        return isset($this->m_assocTable[$file]);
    }
    ///<summary></summary>
    ///<param name="option" default="null"></param>
    /**
    * 
    * @param mixed $option the default value is null
    */
    public function localScriptRenderCallback($option=null){
        if(igk_xml_is_mailoptions($option))
            return;

        $g="";
        $_appv = igk_app()->settings->version;
        $bindjs=function($m, $u, $liburi, & $root, & $g, $option){
            if(igk_io_path_ext($m) == "js"){
                $active='';
                if($liburi == $u){
                    $root .= "<script type='text/javascript' language='javascript' src='{$u}'></script>";
                }
                else{
                    $active="defer";
                    if($option && igk_getv($option, "Context") == "xsl")
                        $active .= "='true'";
                    $g .= "<script type='text/javascript' language='javascript' src='{$u}' {$active}></script>";
                }
            }
        }; 
        $tasc=$this->getAssoc();
        $depth=$option->Indent ? str_repeat("\t", max(0, $option->Depth-1)): "";
        if(igk_sys_env_production() || defined("IGK_JS_TRIMSCRIPTS")){
            if(!file_exists($js_uri=igk_core_dist_jscache())){
                $js_uri = igk_io_corejs_uri();
            }
            else{
                $bjs_uri = dirname($js_uri);
                IGKResourceUriResolver::getInstance()->resolve($bjs_uri);
            } 
            // $c=igk_createxmlnode("script");
            // $c["type"]="text/javascript";
            // $c["language"]="javascript";
            // $c["src"]= new IGKHtmlRelativeUriValueAttribute($js_uri);
            // $c->RenderAJX($option);

            $c=igk_createxmlnode("script");
            $c["type"]="text/balafon-javascript";
            $c["language"]="javascript";
            // $c["src"]= new IGKHtmlRelativeUriValueAttribute($js_uri);         
            $c->Content = implode("", ["//<![CDATA[", 
                igk_get_balafonjs_src(),
                "]]>",                
            ]);
            $c->RenderAJX($option);
            $c=igk_createxmlnode("script");
            $c->Content = file_get_contents(__DIR__."/Inc/js/eval.js");
            $c->RenderAJX($option);
            $bdir=igk_io_basedir();
            // igk_wln("render .... ", $tasc);
            foreach($tasc->toArray() as $k=>$v){
                if(is_array($v) && (igk_getv($v, "merge") == 2)){
                    
                    $u = IGKResourceUriResolver::getInstance()->resolve($k);
                    // igk_wln_e("render .... ",$u, $_appv);
                    // $u=igk_io_html_link($bb)->getValue();
                    if (strpos("?", $u) === false){
                        $u .="?v=".$_appv;
                    }
                    // igk_wln_e("request ", $u);
                    $g .= "<script type='text/javascript' language='javascript' src='{$u}' defer></script>";
                }
            }
            igk_wl($g);
            $c=igk_js_get_temp_script_host();
            if($c){
                $c->RenderAJX();
            }
            return;
        }
        if($tasc){
            $files=array_keys($tasc->toArray());
            $buri=igk_io_baseuri();
            $libdir=IGK_BALAFON_JS_CORE_FILE;
            $bdir=igk_html_uri(igk_io_basedir());
            $root="";

            $bb="";
            $liburi=igk_io_html_link($libdir)->getValue();

            if(!igk_io_is_subdir(igk_io_applicationdir(), IGK_LIB_DIR)){
                $resolver=IGKResourceUriResolver::getInstance();
                foreach($files as $m){
                    $u=$resolver->resolve($m);

                    $bindjs($m, $u, $liburi, $root, $g, $option);
                }

            }
            else{

                foreach($files as $k=>$b){
                    $u='';
                    if(preg_match("/^\%lib\%/i", $b)){
                        $bb=igk_io_expand_path($b);
                        $u=substr($bb, strlen(IGK_LIB_DIR) + 1);
                        if(preg_match("/^phar:/i", $bb)){
                            $u=igk_io_html_link(str_replace(Phar::running()."/", "", $bb))->getValue();
                        }
                    }
                    else{
                        $u=igk_io_html_link($b)->getValue();
                    }
                    if(empty($u))
                        continue;
                    if (strpos("?", $u) === false){
                        $u .="?v=".$_appv;
                    }
					if ($b == IGK_BALAFON_JS_CORE_FILE){
						 //+ render core js
						 $root .= "<script type='text/javascript' language='javascript' src='{$u}'></script>";
					}else {
						$bindjs($b, $u, $liburi, $root, $g, $option);
					}
                }
            }
            if(!empty(trim($s=($root.$g)))){
                $ds="\n<!-- render script -->\n";
                $ds .= ($root.$g);
                $ds .= "\n<!-- endrender: script -->\n";
                igk_wl($ds);
            }
        }
        return;
    }
}
///<summary>Represente class: IGKHtmlTargetValue</summary>
/**
* Represente IGKHtmlTargetValue class
*/
final class IGKHtmlTargetValue extends IGKObject implements IIGKHtmlGetValue {
    private $m_target;
    ///<summary></summary>
    ///<param name="d"></param>
    /**
    * 
    * @param mixed $d
    */
    public function __construct($d){
        $this->m_target=$d;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        return IGKString::Format("#{1}", $this->m_target["id"]);
    }
    ///<summary></summary>
    ///<param name="d"></param>
    /**
    * 
    * @param mixed $d
    */
    public function setTarget($d){
        $this->m_target=$d;
    }
}
///<summary>Represente class: IGKHtmlUri</summary>
/**
* Represente IGKHtmlUri class
*/
final class IGKHtmlUri extends IGKObject implements IIGKHtmlGetValue {
    private $m_v;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $bck=$this->m_v;
        if($options && igk_xml_is_mailoptions($options)){
            if(!IGKValidator::IsUri($bck)){
                $tab=explode('?', $bck);
                $cf=igk_getv($tab, 0);
                if(!empty($cf) && file_exists($cf)){
                    $f=igk_io_baseuri(igk_realpath($cf));
                    $t=array_slice($tab, 1);
                    if(igk_count($t) > 0)
                        $f .= "?".igk_str_join_tab($t, '?', false);
                    return $f;
                }
            }
            else{
                if(IGKString::StartWith($bck, "?")){
                    return igk_io_baseuri().$bck;
                }
            }
        }
        return $this->m_v;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setValue($v){
        $this->m_v=$v;
    }
}
///<summary>Represente class: IGKHtmlUsageCondition</summary>
/**
* Represente IGKHtmlUsageCondition class
*/
final class IGKHtmlUsageCondition extends IGKObject implements IIGKHtmlGetValue {
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function getValue($o=null){
        $c=igk_createnode("span");
        $tc=igk_get_regctrl("sys://articles");
        $uri="#";
        if($tc != null){
            $uri=$tc->getUri("usagecondition");
        }
        $c->Content=__("lb.span.accept.usagecondition_1");
        $c->addA($uri)->Content=__("lb.usagecondition");
        return $c->Render($o);
    }
}
///<summary>used to iterate thru an array</summary>
/**
* used to iterate thru an array
*/
final class IGKIterator extends IGKObject implements ArrayAccess, Iterator, Countable {
    private $it_index;
    private $it_vtab;
    private $m_count;
    private $m_index;
    private $m_it_key;
    private $m_target;
    private $m_viewCount;
    ///<summary></summary>
    ///<param name="ob"></param>
    /**
    * 
    * @param mixed $ob
    */
    public function __construct($ob){
        $this->m_target=$ob;
        $this->m_count=igk_count($ob);
        $this->m_index=0;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function count(){
        return igk_count($this->m_target);
    }
    ///<summary></summary>
    /**
    * 
    */
    function current(){
        return $this->m_target[$this->m_it_key];
    }
    ///<summary></summary>
    /**
    * 
    */
    function key(){
        return $this->m_it_key;
    }
    ///<summary></summary>
    /**
    * 
    */
    function next(){
        $this->it_index++;
        if($this->it_index < $this->m_count){
            $this->m_it_key=$this->it_vtab[$this->it_index];
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetExists($key){
        return isset($this->m_target[$key]);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        if(isset($this->m_target[$key]))
            return $this->m_target[$key];
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    function offsetSet($key, $value){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    function offsetUnset($key){}
    ///<summary></summary>
    /**
    * 
    */
    function rewind(){
        $this->it_vtab=array_keys($this->m_target);
        $this->it_index=$this->m_index;
        $c=count($this->it_vtab);
        if(($c > 0) && ($this->m_index<=$c)){
            $this->m_it_key=$this->it_vtab[$this->m_index];
        }
        else{
            $this->m_it_key=null;
        }
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function setrewindStart($i){
        $this->m_index=$i;
    }
    ///<summary></summary>
    ///<param name="index"></param>
    ///<param name="count" default="null"></param>
    /**
    * 
    * @param mixed $index
    * @param mixed $count the default value is null
    */
    public function Shift($index, $count=null){
        $this->m_index=$index;
        if($count && is_numeric($count)){
            $this->m_count=min($index + $count, igk_count($this->m_target));
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    function valid(){
        $v=($this->it_index>=0) && ($this->it_index < $this->m_count);
        return $v;
    }
}
///<summary>Represente class: IGKJSPostFrameCmd</summary>
/**
* Represente IGKJSPostFrameCmd class
*/
class IGKJSPostFrameCmd extends IGKObject implements IIGKHtmlGetValue {
    private $m_global;
    private $m_obj;
    private $m_t;
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="t"></param>
    ///<param name="global" default="false"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $t
    * @param mixed $global the default value is false
    */
    public function __construct($obj, $t, $global=false){
        if(($obj == null) || !igk_reflection_class_implement($obj, 'IIGKHtmlGetValue'))
            igk_die("PostFrameCommand");
        $this->m_obj=$obj;
        $this->m_t=$t;
        $this->m_global=$global;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $s=$this->m_obj->getValue($options);
        if(preg_match("/^javascript:/", $s)){
            return $s;
        }
        return igk_js_post_frame($s, $this->m_t, $this->m_global);
    }
}
///<summary>Represente class: IGKLangExpression</summary>
/**
* Represente IGKLangExpression class
*/
final class IGKLangExpression extends IGKObject implements IIGKHtmlGetValue {
    private $m_keys;
    ///<summary></summary>
    ///<param name="keys"></param>
    /**
    * 
    * @param mixed $keys
    */
    public function __construct($keys){
        if(!is_array($keys) || (igk_count($keys) == 0))
            igk_die("keys is not an array");
        $this->m_keys=$keys;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $nl=R::GetCurrentLang();
        return igk_getv($this->m_keys, $nl, igk_getv(array_values($this->m_keys), 0));
    }
}
class IGKListener implements IIGKListener{
	private $listener;

	public function Register($n, $callback){
		$this->listener[$n] = $callback;
	}
	public function __call($n, $args){
		$f = igk_getv($this->listener , $n);
		if (is_callable($f)){
			return \call_user_func_array($f, $args);
		}
	}
	public static function __callStatic($n, $args){
		die("dieNotAllowed");
	} 
}

///<summary>Represente class: IGKLog</summary>
/**
* Represente IGKLog class
*/
final class IGKLog extends IGKObject{
    const ERRORLOGFILE="Data/Logs/.global-error.".IGK_TODAY.".log";
    const LOGFILE="Data/Logs/.global.".IGK_TODAY.".log";
    private static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary></summary>
    /**
    * 
    */
    public function ClearLog(){
        $f=$this->getLogFile();
        $r=fopen($f, "w+");
        fclose($r);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(!isset($_SESSION)){
            igk_die("/|\ must start session");
        }
        if(self::$sm_instance == null){
            self::$sm_instance=igk_get_class_instance(__CLASS__, function(){
                return new IGKLog();
            });
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLogFile(){
        $app=igk_app();
        $s=igk_io_basedir(IGKLog::LOGFILE);
        if($app && isset($app->Configs))
            return igk_getv($app->Configs, "LogFile", $s);
        else
            return $s;
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    public function write($msg){
        $this->write_i("IGKLOG", $msg);
    }
    ///<summary></summary>
    ///<param name="tag"></param>
    ///<param name="message"></param>
    ///<param name="eval" default="1"></param>
    /**
    * 
    * @param mixed $tag
    * @param mixed $message
    * @param mixed $eval the default value is 1
    */
    public function write_i($tag, $message, $eval=1){
        $f=$this->getLogFile();
        if(empty($f)){
            return;}
        if(is_array($message) && $eval){
            IGKOb::Start();
            igk_dump_array($message);
            $c=IGKOb::Content();
            IGKOb::Clear();
            $message="Array[".$c."]";
        }
        $r=null;
        if(!file_exists($f) && !IGKIO::CreateDir(dirname($f)))
            return;
        $r=@fopen($f, file_exists($f) ? "a+": "w+");
        if(is_array($message)){
            IGKOb::Start();
            var_dump($message);
            $message=IGKOb::Content();
            IGKOb::Clear();
        }
        if($r){
            fwrite($r, date("h:i:s").": - [".$tag."] - ".$message.IGK_LF);
            fclose($r);
        }
    }
}
///MAIL FUNCTION
/**
*/
class IGKMailAttachement extends IGKObject {
    private $m_content;
    var $CID;
    var $ContentType;
    var $Link;
    var $Name;
    var $Type;
    var $Visible;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->ContentType=IGK_CT_PLAIN_TEXT;
        $this->Visible=false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getContent(){
        return $this->m_Data;
    }
    ///get data used
    /**
    */
    public function getData(){
        if($this->Type == "Content")
            return chunk_split(base64_encode($this->m_Data), 76, IGK_CLF);
        $data="";
        if(file_exists($this->Link))
            $data=igk_io_read_allfile($this->Link);
        return chunk_split(base64_encode($data), 76, IGK_CLF);
    }
    ///<summary></summary>
    ///<param name="content"></param>
    /**
    * 
    * @param mixed $content
    */
    public function setContent($content){
        $this->m_content=$content;
        return $this;
    }
}
///<summary>Represente class: IGKMailAttachementContainer</summary>
/**
* Represente IGKMailAttachementContainer class
*/
final class IGKMailAttachementContainer extends IGKObject implements IIGKMailAttachmentContainer {
    private $m_files;
    private $m_ids;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_files=array();
    }
    ///<summary></summary>
    ///<param name="content"></param>
    ///<param name="contentType" default="IGK_CT_PLAIN_TEXT"></param>
    ///<param name="cid" default="null"></param>
    /**
    * 
    * @param mixed $content
    * @param mixed $contentType the default value is IGK_CT_PLAIN_TEXT
    * @param mixed $cid the default value is null
    */
    public function attachContent($content, $contentType=IGK_CT_PLAIN_TEXT, $cid=null){
        $attach=new IGKMailAttachement();
        $attach->Content=$content;
        $attach->ContentType=$contentType;
        $attach->Type="Content";
        $attach->CID=$cid ? $cid: $this->generate_cid();
        $this->m_files[]=$attach;
        return $attach;
    }
    ///<summary></summary>
    ///<param name="file"></param>
    ///<param name="contentType" default="IGK_CT_PLAIN_TEXT"></param>
    ///<param name="cid" default="null"></param>
    /**
    * 
    * @param mixed $file
    * @param mixed $contentType the default value is IGK_CT_PLAIN_TEXT
    * @param mixed $cid the default value is null
    */
    public function attachFile($file, $contentType=IGK_CT_PLAIN_TEXT, $cid=null){
        if(!file_exists($file))
            return null;
        $attach=new IGKMailAttachement();
        $attach->Link=$file;
        $attach->ContentType=$contentType;
        $attach->Type="File";
        $attach->CID=$cid ? $cid: $this->generate_cid();
        $this->m_files[]=$attach;
        return $attach;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function generate_cid(){
        $this->m_ids++;
        return "idcall_".$this->m_ids;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getList(){
        return $this->m_files;
    }
}
///<summary>represent the menu object</summary>
/**
* represent the menu object
*/
final class IGKMenu extends IGKObject{
    public static $sm_menus;
    var $Name;
    var $m_menus;
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function __construct($name){
        $this->Name=$name;
        $this->m_menus=array();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public function addMenu($name){
        $n=new IGKMenuItem($name, null, null);
        $this->m_menus[$name]=$n;
        return $n;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMenuFile(){
        return igk_io_basedir(IGK_DATA_FOLDER. "/menu".$this->Name."conf.csv");
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetMenus(){
        return array();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function loadMenu(){}
    ///<summary></summary>
    /**
    * 
    */
    public function storeMenu(){}
}
///<summary>Represente class: IGKMenuHostControl</summary>
/**
* Represente IGKMenuHostControl class
*/
final class IGKMenuHostControl extends IGKObject{
    private $m_active;
    private $m_diseable;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
    ///<summary></summary>
    /**
    * 
    */
    public function getActive(){
        return $this->m_active;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDiseable(){
        return $this->m_diseable;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setActive($v){
        $this->m_active=$v;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setDiseable($v){
        $this->m_diseable=$v;
    }
}
///<summary>Represente class: IGKMenuItemObject</summary>
/**
* Represente IGKMenuItemObject class
*/
class IGKMenuItemObject extends IGKObject{
    private $m_subMenus;
    private $m_uri;
    ///<summary></summary>
    ///<param name="uri"></param>
    ///<param name="submenu" default="null"></param>
    /**
    * 
    * @param mixed $uri
    * @param mixed $submenu the default value is null
    */
    public function __construct($uri, $submenu=null){
        $this->m_uri=$uri;
        $this->m_subMenus=$submenu;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSubmenu(){
        return $this->m_subMenus;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUri(){
        return $this->m_uri;
    }
}
///<summary>Represente class: IGKMetaValue</summary>
/**
* Represente IGKMetaValue class
*/
class IGKMetaValue extends IGKObject implements IIGKHtmlGetValue {
    private $m_v;
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKMetaValue[". $this->getValue()."]";
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        return $this->m_v;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setValue($value){
        $this->m_v=$value;
    }
}
///<summary>represent a own view controller objet.</summary>
/**
* represent a own view controller objet.
*/
final class IGKOwnViewCtrl extends IGKObject implements Serializable {
    private $m_ctrls;
    static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->m_ctrls=array();
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public static function Contains($ctrl){
        $i=self::getInstance();
        if($ctrl && ($n=strtolower($ctrl->getName())) && isset($i->m_ctrls[$n])){
            return true;
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            self::$sm_instance=new IGKOwnViewCtrl();
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetList(){
        $i=self::getInstance();
        return $i->m_ctrls;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="handleevent" default="1"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $handleevent the default value is 1
    */
    public static function RegViewCtrl($ctrl, $handleevent=1){
        $i=self::getInstance();
        if($i->m_ctrls == null){
            $i->m_ctrls=array();
        }
        $n=strtolower($ctrl->getName());
        if(!isset($i->m_ctrls[$n])){
            $i->m_ctrls[$n]=$n;
            if($handleevent){
                igk_notification_reg_event(IGK_FORCEVIEW_EVENT, array($ctrl, "View"));
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function serialize(){
        return null;
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public function unserialize($s){}
}
///<summary>Used to save page view list in a list in order to check if the controller is visible or not</summary>
/**
* Used to save page view list in a list in order to check if the controller is visible or not
*/
final class IGKPageView extends IGKObject {
    private $m_pagelist;
    private $m_v;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
    ///<summary></summary>
    ///<param name="page"></param>
    /**
    * 
    * @param mixed $page
    */
    public function getIsVisible($page){
        if(is_bool($this->m_pagelist))
            return $this->m_pagelist;
        if($this->m_v == "*")
            return true;
        if(isset($this->m_pagelist[strtoupper($page)]))
            return true;
        if(isset($this->m_pagelist["-".strtoupper($page)]))
            return false;
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getPageList(){
        return $this->m_pagelist;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        return $this->m_v;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function register($value){
        $this->m_v=$value;
        $t=explode(',', $value);
        if($value == "*"){
            $this->m_pagelist=true;
        }
        else{
            $this->m_pagelist=array();
            foreach($t as $v){
                $this->m_pagelist[strtoupper(trim($v))]=1;
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function registerPages(){
        $ctrl=igk_getctrl(IGK_MENU_CTRL);
        if(!is_array($this->m_pagelist) || !$ctrl)
            return;
        foreach($this->m_pagelist as $k=>$v){
            if(!empty($k))
                $ctrl->registerPage(strtolower(trim($k)));
        }
    }
}
///<summary>represent a parameter storage object</summary>
/**
* represent a parameter storage object
*/
class IGKParamStorage extends IGKObject implements IIGKParamHostService{
    private $m_params;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_params=array();
    }
    ///<summary>Parameter storage</summary>
    ///<param name="key"></param>
    ///<param name="default" default="null"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $default the default value is null
    */
    public function getParam($key, $default=null){
        return igk_getv($this->m_params, $key, $default);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getParamKeys(){
        return array_keys($this->m_params);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function resetParam(){
        $this->m_params=array();
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function setParam($key, $value){
        $this->m_params[$key]=$value;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function unsetParam($key){
        unset($this->m_params[$key]);
    }
}
///<summary> represent a component listener class</summary>
/**
*  represent a component listener class
*/
abstract class IGKComponentListenerBase extends IGKParamStorage implements IIGKParamHostService {
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        parent::__construct();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    final function getUri($n){
        return igk_get_component_uri($this, $n);
    }
}
///<summary>used to post uri value each time value require to render. </summary>
/**
* used to post uri value each time value require to render.
*/
final class IGKPostUriValue extends IGKObject implements IIGKHtmlGetValue {
    private $m_uri;
    ///<summary></summary>
    ///<param name="uri"></param>
    /**
    * 
    * @param mixed $uri
    */
    public function __construct($uri){
        $this->m_uri=$uri;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        return "";
    }
}
///<summary>Represente class: IGKQueryResult</summary>
/**
* Represente IGKQueryResult class
*/
abstract class IGKQueryResult extends IGKObject {
    private $m_error;
    private $m_errormsg;

    public const CALLBACK_OPTS = "@callback";
    ///<summary></summary>
    /**
    * 
    */
    public function createEmptyEntry(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getColumns(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getError(){
        return $this->m_error;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasError(){
        return !empty($this->m_error);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHasRow(){
        return ($this->getRowCount() > 0);
    }
    ///<summary>return the itarator that can be used to iterate shift onto an element</summary>
    /**
    * return the itarator that can be used to iterate shift onto an element
    */
    public function getIterator(){
        $t=new IGKIterator($this->getRows());
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getResultType(){
        return "unknow";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRowCount(){
        return 0;
    }
    ///<summary></summary>
    /**
    * @return iterable|object 
    */
    public function getRows(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getSuccess(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getValue(){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function ResultTypeIsBoolean(){
        return $this->getResultType() == "boolean";
    }
    ///<summary></summary>
    ///<param name="error"></param>
    /**
    * 
    * @param mixed $error
    */
    protected function setError($error){
        $this->m_error=$error;
    }
    ///<summary></summary>
    ///<param name="msg"></param>
    /**
    * 
    * @param mixed $msg
    */
    protected function setErrorMsg($msg){
        $this->m_errormsg=$msg;
    }
    ///<summary>sort this result by </summary>
    /**
    * sort this result by
    */
    public function SortBy($key, $asc=true){
        $t=new IGKSorter();
        $t->key=$key;
        $t->asc=$asc;
        $t->Sort($this);
        return $this;
    }
    ///<summary> if all row loaded get row to other keys</summary>
    public function to_key_array($keyname){
        $tm = [];
        foreach($this->getRows() as $r){
            $tm[$r->$keyname] = $r;
        }
        return $tm;
    }
}
///<summary>used to serve csv query result</summary>
/**
* used to serve csv query result
*/
final class IGKCSVQueryResult extends IGKQueryResult {
    private $m_columns;
    private $m_rowcount;
    private $m_rows;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary></summary>
    ///<param name="e"></param>
    ///<param name="tableinfo" default="null"></param>
    /**
    * 
    * @param mixed $e
    * @param mixed $tableinfo the default value is null
    */
    public function AppendEntries($e, $tableinfo=null){
        $this->m_rowcount += igk_count($e);
        if($tableinfo != null){
            foreach($e as $v){
                $t=array();
                foreach($v as $m=>$n){
                    $v_n=$tableinfo[$m];
                    $t[$v_n->clName]=$n;
                }
                $this->m_rows[]=(object)$t;
            }
        }
        else{
            foreach($e as $v){
                $this->m_rows[]=$v;
            }
        }
    }
    ///<summary></summary>
    ///<param name="result" default="null"></param>
    ///<param name="seacharray" default="null"></param>
    /**
    * 
    * @param mixed $result the default value is null
    * @param mixed $seacharray the default value is null
    */
    public static function CreateEmptyResult($result=null, $seacharray=null){
        $out=new IGKCSVQueryResult();
        $out->m_rowcount=0;
        $out->m_rows=array();
        return $out;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getColumns(){
        return $this->m_columns;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRows(){
        return $this->m_rows;
    }
}
///<summary>represent basics data result</summary>
/**
* represent basics data result
*/
final class IGKDataQueryResult extends IGKQueryResult{
    const CREATE_ROW="obj://createrow";
    private $m_columns;
    private $m_rows;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->m_columns=array();
        $this->m_rows=array();
    }
    ///<summary></summary>
    ///<param name="tab"></param>
    /**
    * 
    * @param mixed $tab
    */
    public function addColumns($tab){
        foreach($tab as $k){
            $d=igk_createobj();
            $d->index=igk_count($this->m_columns);
            $d->name=$k;
            $this->m_columns[]=$d;
        }
    }
    ///<summary></summary>
    ///<param name="row"></param>
    /**
    * 
    * @param mixed $row
    */
    public function addRow($row){
        $d=self::CREATE_ROW;
        if(is_object($row) && isset($row->$d) && ($row->$d == 1)){
            $this->m_rows[]=$row;
            unset($row->$d);
            return true;
        }
        $drow=$this->createRow();
        $row=is_object($row) ? (array)$row: $row;
        foreach($drow as $k=>$v){
            if(isset($row[$k])){
                $drow->$k=$row[$k];
            }
        }
        $this->m_rows[]=$drow;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function createRow(){
        $c=igk_createobj();
        foreach($this->m_columns as  $v){
            $n=$v->name;
            $c->$n=null;
        }
        $d=self::CREATE_ROW;
        $c->$d=1;
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getColumns(){
        return $this->m_columns;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRowCount(){
        return igk_count($this->m_rows);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRows(){
        return $this->m_rows;
    }
}
///<summary>represent les rectangles</summary>
/**
* represent les rectangles
*/
final class IGKRectanglef extends IGKObject{
    private $m_h;
    private $m_w;
    private $m_x;
    private $m_y;
    ///<summary></summary>
    ///<param name="x"></param>
    ///<param name="y"></param>
    ///<param name="width"></param>
    ///<param name="height"></param>
    /**
    * 
    * @param mixed $x the default value is 0
    * @param mixed $y the default value is 0
    * @param mixed $width the default value is 0
    * @param mixed $height the default value is 0
    */
    public function __construct($x=0, $y=0, $width=0, $height=0){
        $this->m_x=$x;
        $this->m_y=$y;
        $this->m_w=$width;
        $this->m_h=$height;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKRectanglef [x:".$this->X." y:".$this->Y."; width: ".$this->Width." ;height: ".$this->Height."]";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getHeight(){
        return $this->m_h;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getWidth(){
        return $this->m_w;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getX(){
        return $this->m_x;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getY(){
        return $this->m_y;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setHeight($value){
        $this->m_h=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setWidth($value){
        $this->m_w=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setX($value){
        $this->m_x=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setY($value){
        $this->m_y=$value;
    }
}

///<summary>represent single value result</summary>
class IGKDBSingleValueResult{
    var $type;
    var $value;
    var $query;
    var $RowCount = 0;
    public function Success(){
        return ($this->type == "boolean")  && ($this->value == true);
    }
    public function getResultType(){
        return $this->type;
    }
    public function ResultTypeIsBoolean(){
        return ($this->type == "boolean");
    }
    public function getValue(){
        return $this->value;
    }
    public function getRows(){
        return [];
    }
    public function sortBy(){
        
    }
    public function getRowCount(){
        return 0;
    }
    public function getRowAtIndex(int $index){
        return null;
    }
    public function __get($name){
        if (method_exists($this, $name)){
            return $this->$name();
        }
        return null;
    }
}
///<summary>Represente class: IGKDBQueryDriver</summary>
/**
* Represente IGKDBQueryDriver class
*/
class IGKDBQueryDriver extends IGKObject implements IIGKdbManager {
    private $fkeys;
    private $m_adapter;
    private $m_closeCallback;
    private $m_dbpwd;
    private $m_dbselect;
    private $m_dbport; // store the port
    private $m_dbserver;
    private $m_dbuser;
    private $m_isconnect;
    private $m_lastQuery;
    private $m_openCallback;
    private $m_openCount;
	private $m_dboptions;
    private $m_resource;
    private static $LENGTHDATA=array("int"=>"Int", "varchar"=>"VarChar");
    private static $__store;
    private static $sm_resid;
    public  static $Config;
    static $idd=0;
    const DRIVER_MYSQLI = "MySQLI";
    public function getServer(){
        return $this->m_dbserver;
    }
    public function getUser(){
        return $this->m_dbuser;
    }
    public function getPort(){
        return $this->m_dbport;
    }
    public function getPwd(){
        return $this->m_dbpwd;
    }
    ///<summary>.ctr</summary>
    /**
    * .ctr
    */
    private function __construct(){}
    ///<summary></summary>
    ///<param name="tablename"></param>
    ///<param name="entries"></param>
    ///<param name="forceload"></param>
    /**
    * 
    * @param mixed $tablename
    * @param mixed $entries
    * @param mixed $forceload the default value is 0
    */
    private function __initTableEntries($tablename, $entries, $forceload=0){
        if(!$forceload && igk_get_env("pinitSDb")){ 
            igk_reg_hook(IGKEvents::HOOK_DB_INIT_ENTRIES, array(new IGKDbEntryToLoad($this, $tablename, $entries), "loadEntries"));
            return;
        }
        igk_db_load_entries($this, $tablename, $entries);
    }
    ///<summary></summary>
    ///<param name="query"></param>
    /**
    * 
    * @param mixed $query
    * @param mixed $option null or array key of object 
    */
    private function _sendQuery($query, $options=null){
        return $this->getSender()->sendQuery($query, $options);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function __sleep(){
        if($this->m_openCount > 1){
            igk_die("open count must not be greather than 1");
        }
        return array();
    }

  
    ///<summary></summary>
    /**
    * 
    */
    public function __wakeup(){
        igk_wln_e("wake up not allowed ", $this->m_openCount, get_class($this));
        // $this->m_resource=null;
        // $this->m_openCount=0;
    }
    ///<summary></summary>
    ///<param name="leaveOpen" default="false"></param>
    /**
    * 
    * @param mixed $leaveOpen the default value is false
    */
    public function close($leaveOpen=false){
        if($this->getIsConnect()){
            if($leaveOpen && ($this->m_openCount == 1)){
                return;}
            $this->m_openCount--;
            if($this->m_openCount<=0){
                if(igk_db_is_resource($this->m_resource))
                    igk_mysql_db_close($this->m_resource);
                $this->m_isconnect=false;
                $this->m_resource=null;
                self::SetResId(null, __FUNCTION__);
                $this->m_openCount=0;
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function closeAll(){
        if(igk_db_is_resource($this->m_resource)){
            igk_mysql_db_close($this->m_resource);
            $this->m_isconnect=false;
            $this->m_resource=null;
            $this->m_openCount=0;
        }
        if($this->m_closeCallback){
            call_user_func_array($this->m_closeCallback, array());
        }
    }
	public function escape_string($v){
		return igk_db_escape_string($v);
	}
    ///<summary></summary>
    /**
    * 
    */
    public function connect(){
    
        if($this->m_isconnect && $this->m_resource){
            if(@$this->m_resource->ping()){
                self::SetResId($this->m_resource, __FUNCTION__);
                $this->m_openCount++;
                igk_set_env("lastCounter", igk_ob_get_func('igk_trace'));
                return true;
            }
            $lcount=$this->m_openCount;
            $this->m_openCount=0;
            $this->m_isconnect= false;
            $this->m_openCount=0;
            igk_die("[igk] The connection was not closed properly :::ping failed : ".
				$lcount." <br />");
				
        }
        $r=igk_db_connect($this);//->m_dbserver, $this->m_dbuser, $this->m_dbpwd, $this->m_dboptions);
       
        
        if(igk_db_is_resource($r)){
            self::SetResId($r, __FUNCTION__);

            $t=igk_db_query("SELECT SUBSTRING_INDEX(CURRENT_USER(),'@',1)");
            if($t && (igk_db_num_rows($t) == 1)){
                $this->m_isconnect=true;
                $this->m_resource=$r;
                $this->m_openCount=1;
              
                return true;
            }
        }
        else{
            $_error=__CLASS__."::Error : SERVER RESOURCE # ";
            igk_notify_error($_error, "sys");
        }
        self::SetResId(null, __FUNCTION__);
        $this->m_isconnect=false;
        $this->m_resource=null;
        return false;
    }
    ///<summary></summary>
    ///<param name="dbserver"></param>
    ///<param name="dbname"></param>
    ///<param name="dbuser"></param>
    ///<param name="dbpwd"></param>
    /**
    * 
    * @param mixed $dbserver
    * @param mixed $dbname
    * @param mixed $dbuser
    * @param mixed $dbpwd
    */
    public function connectTo($dbserver, $dbname, $dbuser, $dbpwd){
        if($this->m_isconnect)
            $this->close();
        $r=@igk_db_connect($dbserver, $dbuser, $dbpwd);
        if(igk_db_is_resource($r)){
            $t=igk_db_query("SELECT SUBSTRING_INDEX(CURRENT_USER(),'@',1)");
            if($t && (igk_db_num_rows($t) == 1)){
                $this->m_isconnect=true;
                $this->m_resource=$r;
                $this->m_openCount=1;
                $tt=$this->selectdb($dbname);
                if(!$tt){
                    igk_debug_wln("DB Not selected : ". $dbname);
                }
                return $tt;
            }
        }
        else{
            $s=igk_mysql_db_error();
            igk_notifyctrl()->addError("MySQLError  : ".$s);
            igk_debug_wln("ERROR : ". $s);
        }
        $this->m_isconnect=false;
        $this->m_resource=null;
        return false;
    }
    ///<summary></summary>
    ///<param name="dbserver" default="localhost"></param>
    ///<param name="dbuser" default="root"></param>
    ///<param name="dbpwd" default=""></param>
    /**
    * 
    * @param mixed $dbserver the default value is "localhost"
    * @param mixed $dbuser the default value is "root"
    * @param mixed $dbpwd the default value is ""
    */
    public static function Create($dbserver="localhost", $dbuser="root", $dbpwd="", $port = null){
        $out=new IGKDBQueryDriver();
        if (is_object($dbserver)){
            //principal info 
            $out->m_dbserver=trim($dbserver->server);
            $out->m_dbuser=trim($dbserver->user);
            $out->m_dbpwd=trim($dbserver->pwd);
            $out->m_dbport = $dbserver->port;
        } else {
            $out->m_dbserver= trim($dbserver);
            $out->m_dbuser=trim($dbuser);
            $out->m_dbpwd=trim($dbpwd);
            $out->m_dbport = $port;
        }
        $out->connect();
        if($out->m_isconnect){
            if (igk_environment()->is("DEV")  && !empty($db = igk_app()->Configs->db_name)){
                $out->createDb($db);
            }
            $out->close();
        }
        else{
            $out=null;
        }
        return $out;
    }
    ///<summary></summary>
    ///<param name="db"></param>
    /**
    * 
    * @param mixed $db
    */
    public function createdb($db){
        if(!$this->getIsConnect())
            return false;
        $t=$this->getSender()->sendQuery("CREATE DATABASE IF NOT EXISTS `".igk_db_escape_string($db)."` ");
        return $t;
    }
    ///<summary>create table</summary>
    /**
    * create table
    */
    public function createTable($tbname, $columninfo, $entries=null, $desc=null, $dbname=null){
        if(!$this->getIsConnect())
            return false; 
        if ($grammar = $this->m_adapter->getGrammar()){
            $query = $grammar->createTableQuery($tbname, $columninfo, $desc, $dbname);
            if ($this->sendQuery($query)){
                if ($entries){
                    $this->m_adapter->pushEntries($tbname, $entries, $columninfo);
                }
                return true;
            }
        }
        return null;

        // $v_rs=false;
        // $v_infkey="sys://db/tabfinfo/data";
        // $v_tableinit_info=igk_get_env($v_infkey);
        // $queryfilter = igk_environment()->mysql_query_filter;

        // if($v_tableinit_info === null){
        //     $v_tableinit_info=array(
        //         "__linkdata"=>array(),
        //         "__tables"=>array(),
        //         "__failed"=>array(),
        //         "__created"=>array(),
        //         "__constraint"=>0
        //     );
        //     igk_get_env($v_infkey, $v_tableinit_info);
        // }
        // $dbname=$dbname == null ? igk_sys_getconfig("db_name"): $dbname;
        // $tbname=igk_mysql_db_tbname($tbname);
        

        // $query=IGKSQLQueryUtils::CreateTableQuery($tbname, $columninfo, $desc, $this->m_adapter);
        // $nk=igk_get_env("sys://db/constraint_key");
        // if($nk){
        //     if(!igk_get_env("sys://db/initConstraint/".$nk)){
        //         IGKMySQLDataCtrl::DropConstraints($this->m_adapter, $dbname, $nk."%");
        //         igk_set_env("sys://db/initConstraint/".$nk, 1);
        //     }
        // }

        // $t=$this->getSender()->sendQuery($query);
        // if($t){
        //     igk_hook(IGK_HOOK_DB_TABLECREATED, [$this, $tbname]);
        //     $v_tableinit_info["__created"][$tbname]=$tbname;
        //     $query="";
        //     $tlinks=array();
        //     $linkdata=igk_getv($v_tableinit_info, "__linkdata");
        //     $c=& $v_tableinit_info["__tables"];
        //     foreach($columninfo as $k=>$v){
        //         if($v->clLinkType != null){
        //             $v_tableinit_info["__constraint"]++;
        //             $ck_index=$v_tableinit_info["__constraint"];
        //             $nk=igk_get_env("sys://db/constraint_key", "ctn_");
        //             if($ck_index == 1){
        //                 $idx=1;
        //                 $ck_index=max($idx, $ck_index);
        //                 $v_tableinit_info["__constraint"]=$idx++;
        //             }
        //             $nk=strtolower($nk.$ck_index);
        //             if(strlen($nk) > 64){
        //                 $tbm=explode("_", $nk);
        //                 $tbs="";
        //                 foreach($tbm as $_rs){
        //                     $tbs .= !empty($_rs) ? $_rs[0]: "";
        //                 }
        //                 $nk="constraint_".$tbs;
        //             }
        //             $nk = $queryfilter ? '' : "`".$nk."`";
        //             $query=IGKString::Format("ALTER TABLE {0} ADD CONSTRAINT {1} FOREIGN KEY (`{2}`) REFERENCES {3}  ON DELETE RESTRICT ON UPDATE RESTRICT;\n",
		// 				"`{$dbname}`.`{$tbname}`", 
        //                 $nk,
        //                  $v->clName, IGKString::Format("`{0}`.`{1}`(`{2}`)",
		// 				$dbname,
		// 				$v->clLinkType,
		// 				igk_getv($v, "clLinkColumn", IGK_FD_ID)
		// 			));
        //             $sender=$this->getSender();
        //             if($this->tableExists($v->clLinkType)){
        //                 $t=$this->_sendQuery($query);
        //             }
        //             else{
        //                 if(!isset($tlinks[$v->clLinkType])){
        //                     $mm=igk_getv($linkdata, $v->clLinkType);
        //                     if($mm == null){
        //                         $mm=(object)array("To"=>1, "from"=>array($tbname=>1));
        //                     }
        //                     else{
        //                         $mm->To++;
        //                         $mm->from[$tbname]=1;
        //                     }
        //                     $tlinks[$v->clLinkType]=$mm;
        //                     $linkdata[$v->clLinkType]=$mm;
        //                 }
        //                 else{
        //                     $tlinks[$v->clLinkType]->To++;
        //                     $tlinks[$v->clLinkType]->from[$tbname]=1;
        //                 }
        //                 $inf=null;
        //                 if(isset($v_tableinit_info[$v->clLinkType])){
        //                     $inf=$v_tableinit_info[$v->clLinkType];
        //                 }
        //                 else{
        //                     $inf=array();
        //                 }
        //                 $inf[]=$query;
        //                 $v_tableinit_info[$v->clLinkType]=$inf;
        //             }
        //         }
        //     }
        //     $direct=true;
        //     if($entries != null){
        //         if(igk_count($tlinks) > 0){
        //             $c[$tbname]=array("links"=>$tlinks, "entries"=>$entries);
        //             $direct=false;
        //         }
        //         else{
        //             $this->__initTableEntries($tbname, $entries, 1);
        //         }
        //     }
        //     else{
        //         $ctrl=igk_get_env(IGK_ENV_DB_INIT_CTRL) ?? igk_die(__("Environment failed : current controller to init not found. ".$tbname));
        //         if(igk_count($tlinks) == 0){
        //             igk_hook(IGKEvents::HOOK_DB_DATA_ENTRY, [$this, $tbname, 0]);
        //         }
        //         else{
        //             $c[$tbname]=array(
        //                 "links"=>$tlinks,
        //                 "entries"=>null,
        //                 "callback"=>function() use ($tbname){
        //                         igk_hook(IGKEvents::HOOK_DB_DATA_ENTRY, [$this, $tbname, 0]);
        //                     }
        //             );
        //         }
        //     }
        //     if(isset($v_tableinit_info[$tbname])){
        //         $error=false;
        //         foreach($v_tableinit_info[$tbname] as $k=>$v){
        //             if(!$this->_sendQuery($v)){
        //                 $msg="Alter failed : ". igk_debuggerview()->getMessage();
        //                 $error=true;
        //                 $v_tableinit_info["__failed"][]=$v;
        //             }
        //         }
        //         unset($v_tableinit_info[$tbname]);
        //         igk_debug_wln("init table with link ".$tbname);
        //         if(isset($linkdata[$tbname])){
        //             $tt=$linkdata[$tbname]->from;
        //             foreach($tt as $x=>$y){
        //                 if(isset($c[$x])){
        //                     unset($c[$x]["links"][$tbname]);
        //                     if(igk_count($c[$x]["links"]) == 0){
        //                         $e=$c[$x]["entries"];
        //                         if($e)
        //                             $this->__initTableEntries($x, $e);
        //                         else{
        //                             $cb=igk_getv($c[$x], "callback");
        //                             if(igk_is_callable($cb)){
        //                                 call_user_func_array($cb, array($this, $tbname));
        //                             }
        //                             else{
        //                                 igk_ilog(__METHOD__, " no callback found for ".$tbname);
        //                                 igk_ilog($cb);
        //                                 igk_die("no callback error");
        //                             }
        //                         }
        //                         unset($c[$x]);
        //                     }
        //                 }
        //             }
        //             unset($linkdata[$tbname]);
        //         }
        //     }
        //     foreach($c as $k=>$v){
        //         $m=$v["links"];
        //         if(isset($m[$tbname])){
        //             unset($m[$tbname]);
        //             if(igk_count($m) == 0){
        //                 $e=$v["entries"];
        //                 $this->__initTableEntries($k, $e);
        //                 unset($v["links"]);
        //                 unset($v["entries"]);
        //                 unset($v_tableinit_info["__tables"][$k]);
        //             }
        //             else{
        //                 $v["links"]=$m;
        //             }
        //         }
        //     }
        //     $v_tableinit_info["__linkdata"]=$linkdata;
        //     $v_tableinit_info["__tables"]=$c;
        //     $v_rs=true;
        // }
        // if(!$v_rs)
        //     igk_debug_wln("failed to create ".$tbname);
        // igk_set_env("sys://db/tabfinfo/data", $v_tableinit_info);
        // return $v_rs;
    }
    ///delete item in tables
    /**
    */
    public function delete($tbname, $values=null){
        $this->dieNotConnect();
        $query=IGKSQLQueryUtils::GetDeleteQuery($tbname, $values);
        $sender=$this->getSender();
        $t=$this->_sendQuery($query);
        if($t){
            if($values == null)
                $this->_sendQuery("ALTER TABLE `".$tbname."` AUTO_INCREMENT =1");
            return true;
        }
        return false;
    }
    ///<summary>delete all items</summary>
    /**
    * delete all items
    */
    public function deleteAll($tbname, $condition=null){
        $sender=$this->getSender();
        $this->dieNotConnect();
        $tbname= $this->escape_string($tbname);
   
 
        if ($condition===null){
            if (!$t=$this->_sendQuery("TRUNCATE TABLE `".$tbname."`")){
                $t=$this->_sendQuery("DELETE FROM `".$tbname."`");
            }
            $c=$t && $this->_sendQuery("ALTER TABLE `".$tbname."` AUTO_INCREMENT =1");
            if($t)
               return true;
        } else {
            $cond = IGKSQLQueryUtils::GetCondString($condition);
            return $this->_sendQuery("DELETE FROM `".$tbname."` WHERE {$cond}");
        }
    }
    ///<summary></summary>
    ///<param name="t"></param>
    ///<param name="msg" default=""></param>
    /**
    * 
    * @param mixed $t
    * @param mixed $msg the default value is ""
    */
    protected function dieinfo($t, $msg=""){
 
        if(!$t){ 
            $d=$this->getErrorCode();
            $m = $em=$this->getError(); 
            if (!igk_is_cmd()){
                $m="<div><div class=\"igk-title-4 igk-danger\" >/!\\ ".__CLASS__." Error</div><div>". $em."</div>"."<div>Code: ".$d."</div>"."<div>Message: <i>".$msg."</i></div></div>";
            } else {
                $m = implode(PHP_EOL, ["code: $d", "query: ".$this->getLastQuery(), "error: $m"]);
            }
            $this->ErrorString=$em;
            switch($d){
                case 1062:
                case 1146:
                return null;
            }
            igk_push_env("sys://adapter/sqlerror", $m);
            if(!igk_sys_env_production()){
                throw new \Exception($m);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    function dieNotConnect(){
        if(!$this->getIsConnect()){
            igk_trace();
            igk_die("/!\\ DB Not connected");
        }
    }
    ///<summary></summary>
    ///<param name="tablename"></param>
    /**
    * 
    * @param mixed $tablename
    */
    public function dropTable($tablename){
        igk_die(__METHOD__." not implement");
    }
    ///<summary></summary>
    /**
    * 
    */
    public function flushForInitDb($complete=null){
        $v_infkey="sys://db/tabfinfo/data";
        $v_tableinit_info=igk_get_env($v_infkey);
        $ad=$this->m_adapter;
        $tb=$v_tableinit_info ? igk_getv(igk_getv($v_tableinit_info, "__failed"), 0): [];
        $tbs=$v_tableinit_info ? igk_getv($v_tableinit_info, "__linkdata"): [];
        if ($ad->connect()){

        
        if(igk_count($tbs) > 0 ){
            foreach($tbs as $k=>$v){
                $queries=$v_tableinit_info[$k];
                foreach($queries as $q){
                    $ad->sendQuery($q);
                }
            } 
        }
        $sender=$this->getSender();
        $tbs=igk_getv($v_tableinit_info, "__linkdata");
        if((igk_count($tbs) > 0) && $ad->connect()){
            foreach($tbs as $k=>$v){
                $queries=$v_tableinit_info[$k];
                foreach($queries as $q){
                    $this->_sendQuery($q);
                }
            } 
        }
        if(is_array($tb) && (igk_count($tb) > 0)){
            igk_debug_wln("send failed table .... creation ");
            foreach($tb as $k=>$v){
                $sender->endQuery($v);
            }
        }
        if (is_callable($complete)){
            $complete();
        }
        $ad->close();
        }
        if(($dg=igk_debuggerview()) && ($msg=$dg->getMessage())){
            igk_wln_assert(!empty($msg), $msg);
            return !empty($msg);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getdatabases(){
        if(!$this->getIsConnect())
            return;
        $t=$this->getSender()->sendQuery("SHOW DATABASES");
        return $t;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDbServer(){
        return $this->m_dbServer;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDbUser(){
        return $this->m_dbUser;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getError(){
        return igk_mysql_db_error();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getErrorCode(){
        return igk_mysql_db_errorc();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="throwError" default="1"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $throwError the default value is 1
    */
    public static function GetFunc($n, $throwError=1){
        $tn=self::$Config["db"];
        if(empty($tn))
            return null;
        $fc=igk_getv(self::$Config[$tn]["func"], $n);
        if(empty($fc))
            $fc=null;
        return $fc ?? ($throwError ? igk_die("no <b>{$n}</b> found in {$tn} dataadapter "): null);
    }
    ///<summary>get if last execution has an error</summary>
    /**
    * get if last execution has an error
    */
    public function getHasError(){
        return igk_mysql_db_has_error();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getIsConnect(){
        return $this->m_isconnect;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLastQuery(){
        return $this->m_lastQuery;
    }
    ///<summary></summary>
    ///<param name="tablename"></param>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $tablename
    * @param mixed $name
    */
    public function getNewContraintKeys($tablename, $name){
        if($this->fkeys == null)
            $this->fkeys=array();
        $s="csk_". ((strlen($name) > 3) ? substr($name, 0, 3): $name).IGKNumber::ToBase(count($this->fkeys) + 1, 16, 4);
        $this->fkeys[]=$s;
        return $s;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetResId(){
        return self::$sm_resid;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function getSender(){
        return $this->m_adapter ?? $this;
    }
    ///<summary></summary>
    ///<param name="k"></param>
    ///<param name="rowInfo" default="null"></param>
    ///<param name="tinfo" default="null" ref="true"></param>
    /**
    * 
    * @param mixed $k
    * @param mixed $rowInfo the default value is null
    * @param mixed * $tinfo the default value is null
    */
    public static function GetValue($k, $rowInfo=null, & $tinfo=null){
        $sys=self::$Config["db"];
        if(empty($sys))
            return null;
        $m=igk_getv(self::$Config[$sys], $k);
        if(igk_is_callable($m)){
            return $m($rowInfo, $tinfo);
        }
        return $m;
    }
    ///<summary></summary>
    ///<param name="tabname"></param>
    ///<param name="ctrl" default="null"></param>
    /**
    * 
    * @param mixed $tabname
    * @param mixed $ctrl the default value is null
    */
    public function haveNoLinks($tabname, $ctrl=null){
        $v_infkey="sys://db/tabfinfo/data";
        $v_tableinit_info=igk_get_env($v_infkey);
        $c=& $v_tableinit_info["__tables"];
        if(isset($c[$tabname])){
            if($ctrl != null){
                $c[$tabname]["callback"]=function() use($tabname){
                    igk_hook(IGKEvents::HOOK_DB_DATA_ENTRY, [$this, $tabname, 0]);
                };
            }
            return 0;
        }
        return 1;
    }
    ///<summary></summary>
    ///<param name="callback"></param>
    /**
    * 
    * @param mixed $callback
    */
    public static function Init($callback){
        if(self::$Config == null)
            self::$Config=array();
        $callback(self::$Config);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function InitDefault(){
        $dbName = igk_get_env("dbName");
        $db=new IGKDBQueryDriver();
        $db->connect();
        $db->selectdb($dbName);
        return $db;
    }
    ///<summary>reset db initialize algorithm algorithm</summary>
    /**
    * reset db initialize algorithm algorithm
    */
    public function initForInitDb(){
        igk_set_env("sys://db/tabfinfo/data", null);
    }
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="values"></param>
    ///<param name="tableinfo" default="null"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $values
    * @param mixed $tableinfo the default value is null
    */
    public function insert($tbname, $values, $tableinfo=null){
        $this->dieNotConnect();
        $tableinfo=$tableinfo == null ? igk_db_getdatatableinfokey($tbname): $tableinfo;

        // igk_wln(__FILE__.':'.__LINE__, ["tbname"=>$tbname, "table info"=>$tableinfo]);
        IGKSQLQueryUtils::SetAdapter($this);
        $query=IGKSQLQueryUtils::GetInsertQuery($tbname, $values, $tableinfo);
        $t=$this->getSender()->sendQuery($query);
        if($t){
            if(($t->getResultType() == "boolean") && $t->getValue()){
                if(is_object($values)){
                    if(igk_getv($values, IGK_FD_ID) == null)
                        $values->clId=$this->lastId();
                }
                return true;
            }
            return false;
        }
        else{
            $error="[IGK] - Insertion Query Error : ".igk_mysql_db_error(). " : ".$query;
            igk_ilog($error);
            igk_db_error($error);
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsMySQLi(){
        return self::Is(self::DRIVER_MYSQLI);
    }
    ///<summary>get if the current state is on driver</summary>
    public static function Is($driverName){
        $s= self::$Config["db"];
        return ($s == strtolower($driverName));
        // DRIVER_MYSQLI
    }

    ///get the last inserted id
    /**
    */
    public function lastId(){
        return igk_mysql_db_last_id();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function OpenCount(){
        return $this->m_openCount;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function RestoreConfig(){
        IGKDBQueryDriver::$Config=self::$__store;
        self::$__store=null;
    }
    ///<summary></summary>
    ///<param name="cbinfo"></param>
    /**
    * 
    * @param mixed $cbinfo
    */
    public static function SaveConfig($cbinfo){
        $ctn=array_merge(IGKDBQueryDriver::$Config);
        $g=IGKDBQueryDriver::$Config["func"];
        IGKDBQueryDriver::$Config["db"]="user";
        $tab=array("escapestring"=>function($v) use ($cbinfo){
                    return $cbinfo->escapeString($v);
                });
        IGKDBQueryDriver::$Config["func"]=$tab;
        self::$__store=$ctn;
    }
    ///<summary></summary>
    ///<param name="table"></param>
    ///<param name="cond" default="null"></param>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $table
    * @param mixed $cond the default value is null
    * @param mixed $options the default value is null
    */
    public function select($table, $cond=null, $options=null){
        $this->dieNotConnect();
        $query=IGKSQLQueryUtils::GetSelectQuery($this, $table, $cond, $options);
        $s=$this->_sendQuery($query, $options);
        return $s;
    }
    ///<summary></summary>
    ///<param name="dbname"></param>
    /**
    * 
    * @param mixed $dbname
    */
    function selectdb($dbname){
        $this->dieNotConnect();
        $mysql_func=self::GetFunc("selectdb");
        if(self::$Config["db"] == "mysqli"){
            if($this->m_resource){
                if(!@$this->m_resource->ping())
                    return false;
                return $mysql_func($this->m_resource, $dbname);
            }
            return false;
        }
        else{
            return $mysql_func($dbname);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function selectLastId(){
        return IGKMySQLQueryResult::CreateResult($this->_sendQuery("SELECT  LAST_INSERT_ID()"));
    }
    ///<summary></summary>
    ///<param name="query"></param>
    ///<param name="throwex" default="true"></param>
    /**
    * 
    * @param mixed $query
    * @param mixed $throwex the default value is true
    */
    public function sendQuery($query, $throwex=true){
        $v_qdebug = igk_environment()->querydebug;
        $v_nolog = false;
        if (is_array($throwex)){
            $v_nolog = igk_getv($throwex, "no_log", false);
            $throwex = igk_getv($throwex, "throw");
        } 
        
        if(igk_db_is_resource($this->m_resource)){
			if ($v_qdebug){ 
                igk_dev_wln($query);
				igk_push_env(IGK_ENV_QUERY_LIST, $query);
                if (strpos($query,"SELECT * FROM `tbigk_data_types` WHERE `clName`='wplq_templates';")!== false){
                    igk_trace();
                    igk_exit();
                }
			}
            $this->setLastQuery($query);
            $t=igk_db_query($query, $this->m_resource);
            if (!$t && !$v_nolog){ 
                igk_ilog("Query Error:".$this->getError()."\n".$query."\n"); 
            }            
            if($throwex){
                $this->dieinfo($t, "/!\\ SQL Query Error :<div style='font-style:normal;'>".igk_html_query_parse($query)."</div>");
            }
            else if(!$t)
                return null;
            return $t;
        }
        return null;
    }

	public function sendMultiQuery($query, $throwex=true){
        $v_qdebug = igk_environment()->querydebug;
		if(igk_db_is_resource($this->m_resource)){
            $this->setLastQuery($query);
            if ($v_qdebug){
                igk_dev_wln($query);
				igk_push_env(IGK_ENV_QUERY_LIST, $query);
			}
            $t = igk_db_multi_query( $query , $this->m_resource);

            if($throwex){
                $this->dieinfo($t, "/!\\ SQLQuery Error:<div style='font-style:normal;'>".igk_html_query_parse($query)."</div>");
            }
            else if(!$t)
                return null;
            return $t;
        }
        return null;
	}
    ///<summary></summary>
    ///<param name="o"></param>
    /**
    * 
    * @param mixed $o
    */
    public function setAdapter($o){
        $this->m_adapter=$o;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setCloseCallback($v){
        $this->m_closeCallback=$v;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    private function setLastQuery($v){
        $this->m_lastQuery=$v;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setOpenCallback($v){
        $this->m_openCallback=$v;
    }
    ///<summary></summary>
    ///<param name="r"></param>
    ///<param name="context" default="null"></param>
    /**
    * 
    * @param mixed $r
    * @param mixed $context the default value is null
    */
    private static function SetResId($r, $context=null){
        self::$sm_resid=$r;
    }
    ///<summary></summary>
    ///<param name="tablename"></param>
    /**
    * 
    * @param mixed $tablename
    */
    public function tableExists($tablename){
        if(empty($tablename))
            return false;
        try {
            
            $s=$this->_sendQuery("SELECT Count(*) FROM `".igk_mysql_db_tbname($tablename)."`", 
                [
                    "throw"=>false,
                    "no_log"=>true
                ]
            );
            if($s && ($s->ResultType == "boolean")){
                return true;  
            } 
            return $s !== null;
        }
        catch(Exception $ex){

        }
         return false;
    }
    ///update data table
    /**
    */
    public function update($tbname, $entry, $where=null, $querytabinfo=null){
        $this->dieNotConnect();
        $query=IGKSQLQueryUtils::GetUpdateQuery($tbname, $entry, $where, $querytabinfo);
        $s=$this->_sendQuery($query);
        return $s;
    }
}
///<summary>represent handle session service</summary>
///<remark> only create when required . from session param</remark>
/**
* represent handle session service
*/
final class IGKSession extends IGKObject implements IIGKParamHostService {
    const BASE_SESS_PARAM=0x020;
    const IGK_DOMAINBASEDIR_SESS_PARAM=(self::BASE_SESS_PARAM + 0x005);
    const IGK_INSTANCES_SESS_PARAM=(self::BASE_SESS_PARAM + 0x006);
    const IGK_REDIRECTION_SESS_PARAM=(self::BASE_SESS_PARAM + 0x004);
    const SESS_CONTROLLERPARAM_KEY=(self::BASE_SESS_PARAM + 0x00C);
    const SESS_CREF_KEY=(self::BASE_SESS_PARAM + 0x001);
    const SESS_DOMAIN=(self::BASE_SESS_PARAM + 0x00A);
    const SESS_DOMAIN_BASEFILE=(self::BASE_SESS_PARAM + 0x009);
    const SESS_GLOBAL_THEME=(self::BASE_SESS_PARAM + 0x007);
    const SESS_LANG_KEY=(self::BASE_SESS_PARAM + 0x00B);
    const SESS_PAGEFOLDER_KEY=(self::BASE_SESS_PARAM + 0x003);
    const SESS_SESSION_EVENTS=(self::BASE_SESS_PARAM + 0x008);
    const SESS_USER_KEY=(self::BASE_SESS_PARAM + 0x002);
    const SYSDB_CTRL=IGK_KEY_SYSDB_CTRL;
	const GLOBALVARS = (self::BASE_SESS_PARAM + 0x00D);
    private $m_instances;
    private $m_sessionParams;
    ///<summary></summary>
    ///<param name="App"></param>
    ///<param name="params" ref="true"></param>
    /**
    * 
    * @param mixed $App
    * @param mixed * $params
    */
    public function __construct($App, & $params){
        $this->m_sessionParams=& $params;
        $this->getCRef();
    }
	public function & getRoutes(){
		$s = igk_app()->getSettings();
		if (($r = $s->{IGK_SESS_ROUTES}) === null){
			$r = [];
			$s->{IGK_SESS_ROUTES} = $r;
		}
		return $r;
	}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function __get($key){
		$g = null;
        if(method_exists($this, "get".$key)){
            $g= call_user_func(array($this, "get".$key), null);

        }
        else if(isset($this->m_sessionParams[$key])){
            return $this->m_sessionParams[$key];
        }
        return $g;
    }
    public function & getReference($name){
        $tab = null;
        if (isset($this->m_sessionParams[$name])){
            $tab = & $this->m_sessionParams[$name];
        }
        return $tab;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function __set($key, $value){
        if(!$this->_setIn($key, $value)){
            if($value == null)
                unset($this->m_sessionParams[$key]);
            else{
                $this->m_sessionParams[$key]=$value;
            }
        }
    }
    ///igk_wln("set : ".count($this->m_sessionParams), $key);
    /**
    */
    public function __toString(){
        //+ ASS: Appliation session storage
        return get_class($this)."[::ASS]";
    }
    ///<summary></summary>
    /**
    * 
    */
    private function _onUserChanged(){
        igk_invoke_session_event(__CLASS__."::UserChanged", array($this, null));
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function addInitializeSessionEvent($obj, $method){}
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function addUserChangedEvent($obj, $method){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function Clear($key){
        if(isset($this->m_sessionParams[$key]))
            unset($this->m_sessionParams[$key]);
    }
    ///<summary>register a custom uri compoent to reg uris</summary>
    /**
    * register a custom uri compoent to reg uris
    */
    public function component($uri, $setting){
        $c=$this->regUris;
        if(!$c){
            $c=array();
        }
        $c[$uri]=$setting;
        $this->regUris=$c;
    }
    ///<summary>create instance item for session</summary>
    /**
    * create instance item for session
    */
    public function createInstance($class, $callback=null){
        if($this->m_instances == null){
            $this->m_instances=array();
        }
        if(isset($this->m_instances[$class])){
            if(get_class(($cl=$this->m_instances[$class])) != $class){
                die(__("Class instance changed:{0}", $class));
            }
            return $cl;
        }
        if($callback != null){
            $cl=$callback();
        }
        else{
            $cl=new $class();
        }
        if($cl == null){
            die(__("Failed to create instance fo ".$class));
        }
        $this->m_instances[$class]=$cl;
        return $cl;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function generateCref(){
        $cref=igk_create_cref();
		igk_app()->settings->{IGK_FORM_CREF} = $cref;
        return $cref;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getApp(){
        return igk_app();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function & getControllerParams(){
        static $controllerParams=null;
        $appInfo = igk_app()->settings->appInfo;
        if ($appInfo){
            if($controllerParams == null){
                if (!isset($appInfo->ctrlParams)){
                    $appInfo->ctrlParams = array();
                }
                $controllerParams = & $appInfo->ctrlParams;
            }
        }
        return $controllerParams;
    }
	///<summary>store here general form setting</summary>
	public function getForm(){
		if (!igk_app()->settings->form){
			igk_app()->settings->form = (object)[];
		}
		return igk_app()->settings->form;
	}
    ///<summary></summary>
    /**
    * 
    */
    public function getCRef(){
        $key= self::SESS_CREF_KEY;
        // $cref= $this->getParam($key) ?? (function(){
        // $cref= igk_getv($this->getForm(), 'cref') ?? (function(){
        $cref= igk_app()->settings->{IGK_FORM_CREF} ?? (function(){
            return $this->generateCref();
        })();
        return $cref;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getData(){
        return $this->m_sessionParams;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDomain(){
        return $this->getParam(self::SESS_DOMAIN);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getDomainBaseDir(){
        return $this->getParam(self::IGK_DOMAINBASEDIR_SESS_PARAM);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getdomainBaseFile(){
        $c= $this->getParam(self::SESS_DOMAIN_BASEFILE);
        if  ($c){
            $c = igk_io_dir(str_replace("%basepath%", igk_io_basedir(), $c));            
        }
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getEvents(){
        return $this->getParam(self::SESS_SESSION_EVENTS);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getLang(){
		$g = igk_app()->settings->{self::SESS_LANG_KEY};
        return $g ??  R::GetDefaultLang();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getPageFolder(){
        if($p=$this->getParam(self::SESS_PAGEFOLDER_KEY)){
            return $p;
        }
        return IGK_HOME_PAGEFOLDER;
    }
    ///<summary>session get parameter</summary>
    ///<param name="key"></param>
    ///<param name="default" default="null"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $default the default value is null
    */
    public function getParam($key, $default=null){
        if(isset($this->m_sessionParams[$key])){
            return $this->m_sessionParams[$key];
        }
        if(igk_is_callable($default)){
            $o=$default();
            if($o){
                $this->m_sessionParams[$key]=$o;
            }
            return $o;
        }
        return $default;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getParamKeys(){
        return array_keys($this->m_sessionParams);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRedirectTask(){
        $i=null;
        $name=null;
        if(func_num_args() > 0)
            $name=func_get_arg(0);
        $g=$this->prepareRedirectTask();
        if($g){
            $i=(object)$g;
            if($name)
                return igk_getv($i, $name);
        }
        return $i;
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    ///<return refout="true"></return>
    /**
    * 
    * @param mixed $classname
    * @return *
    */
    public function & getRegisteredControllerParams($classname){
        $g=null;
		$t = & $this->getControllerParams();
		if (isset($t[$classname]))
			$g = & $t[$classname];
        // if(isset($this->m_sessionParams[self::SESS_CONTROLLERPARAM_KEY][$classname])){
            // $g=& $this->m_sessionParams[self::SESS_CONTROLLERPARAM_KEY][$classname];
            // return $g;
        // }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUser(){
        return $this->getParam(self::SESS_USER_KEY);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getUserChangedEvent(){
        return $this->m_UserChangedEvent;
    }
    ///<summary></summary>
    ///<param name="app"></param>
    /**
    * 
    * @param mixed $app
    */
    public function initalize($app){
        if($app == $this->m_igk){
            $this->m_initializeSessionEvent->Call($this, null);
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private function prepareRedirectTask(){
        $g=igk_get_env("sys://session/redirecttask");
        if($g)
            return $g;
        $g=$this->{"REDIREC_TASK"}
         ?? array();
        igk_get_env("sys://session/redirecttask", $g);
        return $g;
    }
    ///<summary></summary>
    ///<param name="classname"></param>
    ///<param name="tab" ref="true"></param>
    /**
    * 
    * @param mixed $classname
    * @param mixed * $tab
    */
    public function registerControllerParams($classname, & $tab){
		$p = & $this->getControllerParams();
		$p[$classname] = & $tab;
        // $this->m_sessionParams[self::SESS_CONTROLLERPARAM_KEY][$classname]=& $tab;
    }
	 public function unregisterControllerParams($classname, & $tab){
		$p = & $this->getControllerParams();
		unset($p[$classname]);
        // $this->m_sessionParams[self::SESS_CONTROLLERPARAM_KEY][$classname]=& $tab;
    }
    ///<summary></summary>
    ///<param name="obj"></param>
    ///<param name="method"></param>
    /**
    * 
    * @param mixed $obj
    * @param mixed $method
    */
    public function removeInitializeSessionEvent($obj, $method){}
    ///<summary></summary>
    /**
    * 
    */
    public function resetParam(){
        $this->m_sessionParams=array();
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setDomain($v){
        $this->setParam(self::SESS_DOMAIN, $v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setDomainBaseDir($v){
        $this->setParam(self::IGK_DOMAINBASEDIR_SESS_PARAM, $v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function setdomainBaseFile($v){
        $bpth = igk_io_basepath($v);
        if  ($bpth){
            $v = "%basepath%/".$bpth;
        }
        return $this->setParam(self::SESS_DOMAIN_BASEFILE, $v);
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setEvents($value){
        $this->setParam(self::SESS_SESSION_EVENTS, $value);
    }
    ///<summary></summary>
    ///<param name="lang"></param>
    /**
    * 
    * @param mixed $lang
    */
    public function setLang($lang){
        $c=R::GetDefaultLang();
		$l = $this->getLang();
		if ($l!=$lang){
        	igk_app()->settings->{self::SESS_LANG_KEY} = $lang;
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setPageFolder($value){
        $this->setParam(self::SESS_PAGEFOLDER_KEY, $value);
    }
    ///<summary>set session param</summary>
    /**
    * set session param
    */
    public function setParam($key, $value){
        if(empty($key))
            return;
        if(isset($this->m_sessionParams[$key])){
            if($value == null)
                unset($this->m_sessionParams[$key]);
            else
                $this->m_sessionParams[$key]=$value;
        }
        else{
            if($value != null){
                $this->m_sessionParams[$key]=$value;
            }
        }
    }
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $value
    */
    public function setRedirectTask($name, $value){
        $g=$this->{"REDIREC_TASK"}
         ?? array();
        if($value === null){
            unset($g[$name]);
        }
        else
            $g[$name]=$value;
        $this->{"REDIREC_TASK"}=$g;
    }
    ///<summary></summary>
    ///<param name="user"></param>
    ///<param name="context"></param>
    /**
    * 
    * @param mixed $user
    * @param mixed $context
    */
    public function setUser($user, $context){
        $u=$this->getUser();
        if(($context !== null) && ($context === igk_getctrl(IGK_USER_CTRL))){
            if($u !== $user){
                if ($user && (get_class($user) !== IGKUserInfo::class)){
                    $user = igk_sys_create_user($user);
                }
                $this->setParam(self::SESS_USER_KEY, $user);
                $this->_onUserChanged();
            }
        }
        else
            igk_die("Operation not  allowed ".__FUNCTION__);
    }
    ///raise the session UpdateEVent
    /**
    */
    public function update(){
        $s=IGKSession::IGK_REDIRECTION_SESS_PARAM;
        $this->__set($s, null);
        if($this->m_updateSessionEvent != null)
            $this->m_updateSessionEvent->Call($this, null);
    }
}
///<summary>Represente class: IGKSessionIdValue</summary>
/**
* Represente IGKSessionIdValue class
*/
final class IGKSessionIdValue extends IGKObject implements IIGKHtmlGetValue {
    var $i;
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        if($this->i)
            $this->i++;
        else
            $this->i=1;
        $s="Session ID[". $this->i."] : ". session_id();
        return $s;
    }
}
///<summary>subdomain manager</summary>
/**
* subdomain manager
*/
final class IGKSubDomainManager extends IGKObject{
    private static $sm_instance;
    private static $sm_isSubDomain;
    private static $sm_subDomainName;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary></summary>
    ///<param name="domain"></param>
    ///<param name="servername"></param>
    /**
    * 
    * @param mixed $domain
    * @param mixed $servername
    */
    public static function AcceptDomain($domain, $servername){
        if(IGKValidator::IsIpAddress($domain) && IGKValidator::IsIpAddress($servername)){
            return false;
        }
        $x1=igk_io_path_ext($domain);
        $x2=igk_io_path_ext($servername);
        if($x1 == $x2){
            $x1=igk_io_basenamewithoutext($domain);
            $x2=igk_io_basenamewithoutext($servername);
            if(preg_match("/\.".$x1."$/i", $x2)){
                return true;
            }
        }
        return false;
    }
    ///<summary>get the domain controller or return false</summary>
    /**
    * get the domain controller or return false
    */
    public function checkDomain($uri=null, & $row=null){
        if(igk_is_atomic()){
            return false;
        }
        $subdomain=igk_io_subdomain_uri_name($uri);
        $t=$this->getRegList();
        if(!empty($subdomain)){
            $s=$subdomain;
            if (is_callable($t)){
                igk_die("Rgister list is a callable");
            }

            if(isset($t[$s])){
                $c=$t[$s];
                $row=$c->row;
                return $c->ctrl;
            }
            $row=null;
            $domctrl=igk_getctrl(IGK_SUBDOMAINNAME_CTRL);
            if(!$domctrl){
                igk_die("domain controller not found + single application ".igk_sys_getconfig("force_single_controller_app"));
            }
            $c=$domctrl->getDomainCtrl($s, $row);
            if(($c != null)){
                if(!$this->reg_domain($s, $c, $row))
                    igk_die("/!\\ Fatal can't register function");
                return $c;
            }
        }
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function Clear(){
        igk_environment()->{IGK_ENV_SESS_DOM_LIST} = null; 
    }
    ///<summary></summary>
    /**
    * 
    */
    public function domainList(){
        if (is_array($t=$this->getRegList()))
            return array_keys($t);
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetBaseDomain(){
        $f=self::GetBaseDomainConfile();
        $d="";
        if(file_exists($f)){
            $d=IGKIO::ReadAllText($f);
        }
        if(empty($d))
            $d=IGK_DOMAIN;
        return $d;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected static function GetBaseDomainConfile(){
        return igk_io_sys_datadir()."/domain.conf";
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            $k=new IGKSubDomainManager();
            self::$sm_instance=$k;
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegList(){
        if (!($c = igk_environment()->get(IGK_ENV_SESS_DOM_LIST)))
            $c = [];
        return $c;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetSubDomain(){
        $srv=igk_io_server_name();
        if(preg_match("/^(www\.)/i", $srv)){
            $srv=substr($srv, 4);
        }
        if(!empty($srv)){
            $d=self::GetBaseDomain();
            if(preg_match("/(\.".$d."$)/i", $srv)){
                $srv=substr($srv, 0, strlen($srv) - strlen($d)-1);
            }
            else
                $srv="";
        }
        return $srv;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetSubDomainName(){
        return self::$sm_subDomainName;
    }
    ///<summary>init domain server</summary>
    /**
    * init domain server
    */
    public static function Init(){
        self::$sm_isSubDomain=false;
        self::$sm_subDomainName=false;
        $srv=igk_sys_srv_domain_name();
        $domain=self::GetBaseDomain();
        $rdomain=null;
        if(($srv !== "localhost") && !IGKValidator::IsIPAddress($srv) && ($srv !== $domain) && (preg_match("/(www)?\.".$domain."$/i", $srv) || self::AcceptDomain($domain, $srv))){
            $rdomain=defined("IGK_COOKIE_DOMAIN") ? igk_const("IGK_COOKIE_DOMAIN") : self::Resolv($domain);
            ini_set("session.cookie_domain", ".".$rdomain);
            self::$sm_isSubDomain=true;
            self::$sm_subDomainName=self::GetSubDomain();
        }
        else{
            $rdomain=$srv;
            $_path="/";
            if(IGKValidator::IsIPAddress($srv)){}
            else{
                if(igk_server_request_onlocal_server())
                    $srv="localhost";
                else
                    $srv=".".$srv;
            }
            if(!empty($bdir=igk_io_rootbasedir())){
                $_path=$bdir;
            }
            ini_set("session.cookie_domain", ($srv == "localhost") ? null: $srv);
            ini_set("session.cookie_path", $_path);
        }
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $ctrl
    */
    public static function IsControl($n, $ctrl){
        $t=self::getInstance()->getRegList();
        return isset($t[$n]) && ($t[$n]->ctrl === $ctrl);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsSubDomain(){
        return self::$sm_isSubDomain;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function onDomainChanged(){
        $this->Clear();
    }
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="ctrl"></param>
    ///<param name="row" default="null"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $ctrl
    * @param mixed $row the default value is null
    */
    public function reg_domain($n, $ctrl, $row=null){
        if(empty($n) || !igk_reflection_class_implement($ctrl, "IIGKUriActionRegistrableController")){
            return false;
        } 
        $t=$this->getRegList();
        if(!isset($t[$n])){
            $t[$n]=(object)array("ctrl"=>$ctrl, "row"=>$row);
            $this->updateRegList($t);
            return true;
        }
        return false;
    }
    ///<summary>resole domain to match server name</summary>
    /**
    * resole domain to match server name
    */
    public static function Resolv($domain){
        $servername=igk_io_server_name();
        $ex1=igk_io_path_ext($domain);
        $ex2=igk_io_path_ext($servername);
        if($ex1 == $ex2)
            return $domain;
        $x1=igk_io_basenamewithoutext($domain);
        $x2=igk_io_basenamewithoutext($servername);
        if(preg_match("/\.".$x1."$/i", $x2))
            return $x1.".".$ex2;
        return $domain;
    }
    ///<summary></summary>
    ///<param name="domain" default="IGK_DOMAIN"></param>
    /**
    * 
    * @param mixed $domain the default value is IGK_DOMAIN
    */
    public static function SetBaseDomain($domain=IGK_DOMAIN){
        $f=self::GetBaseDomainConfile();
        igk_io_w2file($f, $domain, true);
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    ///<param name="bDomain" default="IGK_DOMAIN"></param>
    /**
    * 
    * @param mixed $ctrl
    * @param mixed $bDomain the default value is IGK_DOMAIN
    */
    public static function StoreBaseDomain($ctrl, $bDomain=IGK_DOMAIN){
        $f=self::GetBaseDomainConfile();
        igk_io_w2file($f, $bDomain, true);
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    */
    private function updateRegList($t){
        igk_environment()->{IGK_ENV_SESS_DOM_LIST} = $t; 
    }
}
///<summary>represent information pattern</summary>
/**
* represent information pattern
*/
final class IGKSystemUriActionPatternInfo extends IGKObject {
    var $action;
    var $context;
    var $ctrl;
    var $keys;
    var $pattern;
    var $requestparams;
    var $uri;
    var $value;
    ///<summary></summary>
    ///<param name="tab"></param>
    /**
    * 
    * @param mixed $tab
    */
    public function __construct($tab){
        foreach($tab as $k=>$v){
            $this->$k=$v;
        }
    }
    ///<summary>get query parameters</summary>
    /**
    * get query parameters
    */
    public function getQueryParams(){
        $t=igk_pattern_get_matches($this->pattern, $this->uri, $this->keys);
        return $t;
    }
    ///<summary></summary>
    ///<param name="uri" default="null"></param>
    /**
    * 
    * @param mixed $uri the default value is null
    */
    public function matche($uri=null){
  
        $uri=$uri ?? $this->uri;
        if(preg_match($this->pattern, $uri)){
            $this->uri=$uri;
            return true;
        }
        return false;
    }
}
///<summary>represent global user Info</summary>
/**
* represent global user Info
*/
class IGKUserInfo extends IGKObject {
    const DB_INFO_KEY="sys://db/info";
    var $clId;
    var $clLogin;
    public function auth($name, $strict=false){
        return IGK\Models\Users::createFromCache($this)->auth($name, $strict); 
    }

    public function to_json(){
        return json_encode($this);
    }
    // var $clPwd;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){}
    ///<summary></summary>
    ///<param name="name"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $name
    * @param mixed $value
    */
    public function __set($name, $value){
        if(!$this->_setIn($name, $value))
            $this->$name=$value;
    }
    ///get all available authorisation for this user
    /**
    */
    public function getAuths(){
        if($this->clId){
            $tab=array();
            $db=igk_db_table_select_where($this->usergrouptable, array(IGK_FD_USER_ID=>$this->clId));
            foreach($db->Rows as  $v){
                $rdb=igk_db_table_select_where($this->groupauthtable, array(IGK_FD_GROUP_ID=>$v->clGroup_Id));
                if($rdb){
                    foreach($rdb->Rows as $b){
                        if(!isset($tab[$b->clAuthId])){
                            $authinfo=igk_db_table_select_row($this->authtable, array(IGK_FD_ID=>$b->clAuthId));
                            $authinfo->clGrant=$b->clGrant;
                            $tab[$b->clAuthId]=$authinfo;
                        }
                        else
                            $tab[$b->clAuthId]->clGrant=$tab[$b->clAuthId]->clGrant && $b->clGrant;
                    }
                }
            }
            return $tab;
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getGroups(){
        if($this->clId){
            $tab=array();
            $db=igk_db_table_select_where($this->usergrouptable, array(IGK_FD_USER_ID=>$this->clId));
            foreach($db->Rows as $v){
                $rdb=igk_db_table_select_where($this->grouptable, array(IGK_FD_ID=>$v->clGroup_Id))->getRowAtIndex(0);
                if($rdb){
                    $tab[$rdb->clName]=$rdb;
                }
            }
            return $tab;
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="uinfo"></param>
    ///<param name="authname"></param>
    ///<param name="authCtrl" default="null"></param>
    ///<param name="adapter" default="IGK_MYSQL_DATAADAPTER"></param>
    /**
    * 
    * @param mixed $uinfo
    * @param mixed $authname
    * @param mixed $authCtrl the default value is null
    * @param mixed $adapter the default value is IGK_MYSQL_DATAADAPTER
    */
    public static function GetIsAuthorize($uinfo, $authname, $strict=false, $authCtrl=null, $adapter=IGK_MYSQL_DATAADAPTER){
        $s=$uinfo;
        $k=self::DB_INFO_KEY;
        $v_authtable=$s->$k->authtable;
        $v_grouptable=$s->$k->grouptable;
        $v_usergrouptable=$s->$k->usergrouptable;
        $v_groupauthtable=$s->$k->groupauthtable;
        if($authCtrl !== null){
            $v_authtable=$authCtrl->AuthTable;
            $v_grouptable=$authCtrl->GroupTable;
            $v_usergrouptable=$authCtrl->UserGroupTable;
            $v_groupauthtable=$authCtrl->GroupAthTable;
        }
        return igk_db_is_user_authorized($uinfo, $authname, $strict, $v_authtable, $v_usergrouptable, $v_groupauthtable);
    }
    ///<summary></summary>
    ///<param name="authname"></param>
    ///<param name="authCtrl" default="null"></param>
    ///<param name="adapter" default="IGK_MYSQL_DATAADAPTER"></param>
    /**
    * 
    * @param mixed $authname
    * @param mixed $authCtrl the default value is null
    * @param mixed $adapter the default value is IGK_MYSQL_DATAADAPTER
    */
    public final function IsAuthorize($authname, $authCtrl=null, $adapter=IGK_MYSQL_DATAADAPTER){
        $s=$this;
        return self::GetIsAuthorize($s, $authname, $authCtrl, $adapter);
    }
    ///<summary></summary>
    ///<param name="userTableData"></param>
    /**
    * 
    * @param mixed $userTableData
    */
    public function loadData($userTableData){
        if($userTableData){
            foreach($userTableData as $k=>$v){
                $this->$k=$v;
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public function toString(){
        return get_class($this);
    }
    public function fullname(){
        return igk_user_fullname($this);
    }
}
///<summary>Represente class: IGKValidator</summary>
/**
* Represente IGKValidator class
*/
final class IGKValidator extends IGKObject {
    const INT_REGEX="/^[0-9]+$/i";
    private $sm_cibling;
    private $sm_enode;
    private static $sm_instance;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->sm_enode=igk_createnode("error");
        $this->sm_cibling=array();
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public static function AddCibling($name){
        $e=self::getInstance();
        $t=explode(",", $name);
        foreach($t as $v){
            $e->sm_cibling[$v]=1;
        }
    }
    ///<summary></summary>
    ///<param name="condition"></param>
    ///<param name="error" ref="true"></param>
    ///<param name="node" default="null"></param>
    ///<param name="errormsg" default="IGK_STR_EMPTY"></param>
    /**
    * 
    * @param mixed $condition
    * @param mixed * $error
    * @param mixed $node the default value is null
    * @param mixed $errormsg the default value is IGK_STR_EMPTY
    */
    public static function Assert($condition, & $error, $node=null, $errormsg=IGK_STR_EMPTY){
        if($condition){
            $error=$error || true;
            if($node != null){
                $node->addLi()->Content=$errormsg;
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Cibling(){
        return self::getInstance()->sm_cibling;
    }
    ///<summary></summary>
    ///<param name="name"></param>
    /**
    * 
    * @param mixed $name
    */
    public static function ContainCibling($name){
        $e=self::getInstance();
        return isset($e->sm_cibling[$name]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Error(){
        $e=self::getInstance();
        return $e->sm_enode;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            self::$sm_instance=igk_get_class_instance(__CLASS__, function(){
                return new IGKValidator();
            });
        }
        return self::$sm_instance;
    }
    ///<summary></summary>
    ///<param name="n"></param>
    /**
    * 
    * @param mixed $n
    */
    public static function GetPattern($n){
        static $patterns=null;
        if($patterns == null){
            $patterns=array(
                "email"=>IGK_HTML_EMAIL_PATTERN,
                "phone"=>IGK_HTML_PHONE_PATTERN
            );
        }
        return igk_getv($patterns, $n);
    }
    ///<summary>represent initilalize the validator node</summary>
    /**
    * represent initilalize the validator node
    */
    public static function Init(){
        $e=self::getInstance();
        $e->sm_enode->ClearChilds();
        $e->sm_cibling=array();
        return $e->sm_enode;
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function IsDate($v){}
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function IsDouble($v){
        return is_Double($v);
    }
    ///<summary></summary>
    ///<param name="mail"></param>
    /**
    * 
    * @param mixed $mail
    */
    public static function IsEmail($mail){
        if(self::IsStringNullOrEmpty($mail))
            return false;
        return preg_match('/[a-z0-9\.\-_]+@[a-z0-9\.\-_]+\.[a-z]{2,6}$/i', $mail);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function IsFloat($v){
        return is_float($v);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function IsInt($v){
        return is_numeric($v);
    }
    ///<summary></summary>
    ///<param name="p"></param>
    /**
    * 
    * @param mixed $p
    */
    public static function IsIpAddress($p){
        return preg_match(IGK_IPV4_REGEX, trim($p));
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public static function IsString($v){
        return is_string($v);
    }
    ///<summary>check is null or empty.</summary>
    /**
    * check is null or empty.
    */
    public static function IsStringNullOrEmpty($v, $cibling=null, $msg="error..."){
        $v=(($v == null) || (is_string($v) && (strlen($v) == 0)));
        if($v && $cibling){
            $cibling->addError($msg);
        }
        return $v;
    }
    ///<summary>check if full uri</summary>
    /**
    * check if full uri
    */
    public static function IsUri($v){
        if(empty($v))
            return false;
        $r=preg_match('/^(((http(s){0,1}):)?\/\/([\w\.0-9]+)|(\?))/i', $v);
        return $r;
    }
    ///<summary></summary>
    ///<param name="o"></param>
    /**
    * 
    * @param mixed $o
    */
    public static function IsValidPwd($o){
        if((is_string($o) && strlen($o)>=6)){
            return true;
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="o"></param>
    ///<param name="fields"></param>
    ///<param name="error" ref="true"></param>
    /**
    * 
    * @param mixed $o
    * @param mixed $fields
    * @param mixed * $error
    */
    public static function Validate($o, $fields, & $error){
        $g=self::getInstance()->sm_enode;
        $g->ClearChilds();
        $e=false;
        if(is_array($fields)){
            foreach($fields as $k=>$v){
                $s=$o->$k;
                $cond=call_user_func_array(array(__CLASS__, $v["f"]), array($s));
                self::Assert($cond, $e, $g, $v["e"]);
            }
        }
        return !$e;
    }
}
///<summary>Represente class: IGKValueListener</summary>
/**
* Represente IGKValueListener class
*/
final class IGKValueListener extends IGKObject implements IIGKHtmlGetValue {
    private $m_attr;
    private $m_owner;
    ///<summary></summary>
    ///<param name="owner"></param>
    ///<param name="attr"></param>
    /**
    * 
    * @param mixed $owner
    * @param mixed $attr
    */
    public function __construct($owner, $attr){
        $this->m_owner=$owner;
        $this->m_attr=$attr;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public function getValue($options=null){
        $k=$this->m_attr;
        $v="";
        if(method_exists(get_class($this->m_owner), $k)){
            $v=$this->m_owner->$k($options);
        }
        else
            $v=$this->m_owner->$k;
        if($v){
            $rv=IGKHtmlUtils::GetValue($v, $options);
            return $rv;
        }
        return null;
    }
}
///<summary>Represente class: IGKVector2f</summary>
/**
* Represente IGKVector2f class
*/
final class IGKVector2f extends IGKObject{
    private $m_x;
    private $m_y;
    ///<summary></summary>
    ///<param name="x"></param>
    ///<param name="y"></param>
    /**
    * 
    * @param mixed $x the default value is 0
    * @param mixed $y the default value is 0
    */
    public function __construct($x=0, $y=0){
        $this->m_x=$x;
        $this->m_y=$y;
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKVector2f [x:".$this->X." y:".$this->Y."]";
    }
    ///<summary></summary>
    ///<param name="data"></param>
    /**
    * 
    * @param mixed $data
    */
    public static function FromString($data){
        $b=explode(";", $data);
        list($X, $Y)
        =count($b) == 2 ? $b: array($data, $data);
        return new IGKVector2f($X, $Y);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getX(){
        return $this->m_x;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getY(){
        return $this->m_y;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setX($value){
        $this->m_x=$value;
    }
    ///<summary></summary>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $value
    */
    public function setY($value){
        $this->m_y=$value;
    }
}
///<summary>represent system view mode </summary>
/**
* represent system view mode
*/
final class IGKViewMode extends IGKObject {
    const ADMINISTRATOR=6;
    const VISITOR=1;
    const WEBMASTER=2;
    ///<summary></summary>
    /**
    * 
    */
    public static function GetSystemViewMode(){
        $m=igk_app()->getViewMode();
        $t=array();
        foreach(igk_get_class_constants(__CLASS__) as $k=>$v){
            if(($m& $v) == $v)
                $t[]=$k;
        }
        return IGKString::Join($t, ',', false);
    }
    ///<summary></summary>
    ///<param name="mode"></param>
    /**
    * 
    * @param mixed $mode
    */
    public static function IsViewMode($mode){
        return igk_app()->IsSupportViewMode($mode);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsWebMaster(){
        return igk_app()->IsSupportViewMode(IGKViewMode::WEBMASTER);
    }
}
///<summary>Represente class: IGKXmlRenderOptions</summary>
/**
* Represente IGKXmlRenderOptions class
*/
class IGKXmlRenderOptions extends IGKObject{
    var $Context;
    var $Depth;
    var $Indent;
    var $UseInXml;
    var $ns;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->Indent=true;
        $this->UseInXml=true;
        $this->Depth=0;
        $this->Context="xml";
    }
}

///<summary>Represente class: IGKObjectGetProperties</summary>
/**
* Represente IGKObjectGetProperties class
*/
abstract class IGKObjectGetProperties{
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    * @return mixed 
    */
    public function __get($key){
        if(method_exists($this, "get".$key)){
            return call_user_func(array($this, "get".$key), null);
        }
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $v
    */
    public function __set($key, $v){
        $nk="set".$key;
        if(method_exists($this, $nk)){
             call_user_func_array(array($this, $nk), array($v));
        }
    }
}
///<summary>represent a document themes</summary>
/**
* represent a document themes
*/
final class IGKHtmlDocTheme extends IGKObjectGetProperties implements ArrayAccess {
    const REGKEY="HtmlDocTheme";
    private $m_document;
    private $m_def;
    private $m_id;
    private $m_medias;
    private $m_type;
    private $m_istemp;
    private static $MEDIA;
    private static $SM_MEDIAKEY;
    ///<summary></summary>
    ///<param name="document"></param>
    ///<param name="id"></param>
    ///<param name="type" default="global"></param>
    /**
    * 
    * @param mixed $document
    * @param mixed $id
    * @param mixed $type the default value is "global"
    */
    public function __construct($document, $id, $type="global"){
        $this->m_id=$id;
        $this->m_document=$document;
        $this->m_type=$type;
        $this->m_istemp = false;
        $this->_initialize();
    }
	public static function CreateTemporaryTheme($id){
        $c = new IGKHtmlDocTheme(null, $id);
        $c->m_istemp = true;
		return $c;
    }
    public function getIsTemp(){
        return $this->m_istemp;
    }
    public function setColors($color){
        $cl = & $this->getCl();
        $cl = array_merge($cl, $color);
        $tc=0;  
        while($c = array_search(null, $cl)){
            unset($cl[$c]);
            $tc++;
            if ($tc>10){
                break;
            }
        }
    }
    ///<summary>display value</summary>
    /**
    * display value
    */
    public function __toString(){
        return "IGKHtmlDocTheme : [id:".$this->m_id.", type: {$this->m_type} ]";
    }
    public function bindFile($file){
        igk_css_bind_file(null, $file, $this); 
    }
    ///<summary></summary>
    ///<param name="indent" default="true"></param>
    ///<param name="themeexport" default="false"></param>
    ///<param name="doc" default="null"></param>
    /**
    * 
    * @param mixed $indent the default value is true
    * @param mixed $themeexport the default value is false
    * @param mixed $doc the default value is null
    */
    private function _get_css_def($indent=true, $themeexport=false, $systheme=null){
        $lineseparator=$indent ? IGK_CLF: IGK_STR_EMPTY;
        $out=IGK_STR_EMPTY;
        $def=$this->def;
        $colors=$this->cl;
        $fonts=$def->getFont();
        $res=$this->res;
        $ft_def="";
        $tv=0;
        $s="";
        if($systheme===null){
            $systheme = igk_app()->Doc->getSysTheme();
        }
        $s=$def->getSymbols();
        if(is_array($s)){
            $v_cacherequire=igk_sys_cache_require();
            $tb=array();
            foreach($s as $k=>$v){
                if(file_exists($k)){
                    $rk=igk_realpath($k);
                    if($v_cacherequire){
                        $tb[]="./".igk_html_uri(igk_io_basepath($k));
                    }
                    else
                        $tb[]=igk_io_fullpath2fulluri($k);
                }
            }
            $ks=igk_str_join_tab($tb, ',', false);
            $out .= ".igk-svg-symbol-lists:before{content:'$ks'} ".$lineseparator;
        }
        if(igk_css_design_mode()){
            $v_var_def="";
            foreach($colors as $k=>$v){
                if(empty($v)){
                    $v="initial";
                }
                else if(preg_match("/\{(?P<name>(.)+)\}/i", $v, $tab)){
                    $v="var(--igk-cl-".$tab["name"].")";
                }
                $v_var_def .= "--igk-cl-".$k.":".$v.";".$lineseparator;
            }
            $tc=$this->properties;
            foreach($tc as $k=>$v){
                if(empty($v)){
                    $v="initial";
                }
                $v_var_def .= "--igk-prop-".$k.":".$v.";".$lineseparator;
            }
            if(!empty($v_var_def))
                $out .= ":root{".$v_var_def."}";
        }
        if($fonts){
            $ft_def="";
            foreach($fonts as $k=>$v){
                if(!$v)
                    continue;
                $tv=1;
                $s .= igk_css_get_fontdef($k, $v, $lineseparator);
                $v_def=null;
                if(isset($v->Def)){
                    $v_def=", ".$v->Def;
                }
                $ft_def .= ".ft-".$k." { font-family: \"$k\"{$v_def}; }".$lineseparator;
            }
            if($tv)
                $out .= "/* <!-- Fonts --> */".$lineseparator.$s.$ft_def;
        }
        if($def->getHasRules()){
            $out .= "/* <!-- Rules --> */".$lineseparator;
            $out .= $def->getRulesString($lineseparator, $themeexport, $systheme).$lineseparator;
        }
        $s="";
        $tv=0;
        if($attr=$def->getAttributes()){
            foreach($attr as $k=>$v){
                $kv=trim(igk_css_treat($this, $v, $systheme));
                if(!empty($kv)){
                    $s .= $k."{".$kv."}".$lineseparator;
                    $tv=1;
                }
            }
        }
        if($tv)
            $out .= "/* <!-- Attributes --> */".$lineseparator.$s;
        $res=$this->res;
        if(!$themeexport){
            if($res && ($attr=$res->Attributes)) foreach($attr as $k=>$v){
                $out .= ".".$k."{background-image: url('../Img/".$v."');}".$lineseparator;
            }
        }
        $tab=$this->Append;
        if($tab && igk_count($tab) > 0){
            $keys=array_keys($tab);
            $out .= IGK_START_COMMENT." APPEND THEME ".IGK_END_COMMENT.IGK_LF;
            igk_usort($keys, "igk_key_sort");
            foreach($keys as $k){
                $v=$tab[$k];
                $kv=trim(igk_css_treat($this, $v, $systheme));
                if(!empty($kv)){
                    if(IGKString::StartWith($k, "#"))
                        $out .= $k."{".$kv."}".$lineseparator;
                    else
                        $out .= ".".$k."{".$kv."}".$lineseparator;
                }
            }
        }
        $ktemp=IGK_CSS_TEMP_FILES_KEY;
        $v_csstmpfiles=$def->getTempFiles();
        if(count($v_csstmpfiles) > 0){
            if(!igk_get_env($ktemp) && $v_csstmpfiles){
                igk_set_env($ktemp, 1);



                $vtemp = IGKHtmlDocTheme::CreateTemporaryTheme("theme://inline/tempfiles");
                foreach($v_csstmpfiles as $k){
                    IGKOb::Start();
                    igk_css_bind_file(null, $k, $vtemp);
                    $m=IGKOb::Content();
                    IGKOb::Clear();
                    $h=$vtemp->get_css_def($indent, $themeexport);
                    if(igk_is_debug()){
                        $out .= "\n/TempFileLoading: *".igk_io_basepath($k)."*/\n";
                    }
                    $out .= $h;
                    if(!empty($m)){
                        $out .= $m;
                    }
                    $vtemp->resetAll();
                }
                igk_set_env($ktemp, null);
            }
        }
        return $out;
    }
    ///<summary></summary>
    /**
    * int theme
    */
    private function _initialize(){
		if ($this->m_document === null){
			$tab = [];
			$this->def = new IGKCssDefaultStyle($tab);
			$this->_initMedia($this->m_id);
			return;
		}
        ( ($cl = get_class($this->m_document)) !=IGKHtmlDoc::class)  && igk_die("class [".$cl."] not allowed\n ") ;
        $tab = null;
        $id = $this->m_document->getId();
        $app_info = igk_app()->settings->appInfo;
        $docs = null;
        $themes = null;
        if ($app_info){

            $docs = & $app_info->documents[$id];
            
            if ($docs===null){
                $docs = [];
                // igk_wln_e(__LINE__.":".__FILE__, igk_app()->settings->appInfo);
                $app_info->documents[$id] = & $docs;
                //die("no setting for id : ".$id);
            }
            if (!isset($docs["theme"])){
                
                $tab = [];
                $docs["theme"] = & $tab;
                $tab[$this->m_id] = [];
                $tab = & $tab[$this->m_id];
                $themes = & $docs["theme"];
            }else {
                $themes = & $docs["theme"];
                if (!isset($themes[$this->m_id])){
                    $themes[$this->m_id] = [];
                    
                    $docs["theme"] = & $themes;
                }
                $tab = & $themes[$this->m_id];
            }
        }
        $this->def = new IGKCssDefaultStyle($tab);
        $this->m_files=array();
        $this->m_medias=array();
        $this->m_mediasid=array();
        $this->Append=$this->add("AppendCss");
        $this->_initMedia($this->m_id);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    private function _initMedia($id){
        if(!IGKString::StartWith($id, "media:")){
            $this->reg_media("(max-width:".(IGK_CSS_XSM_SCREEN)."px)", IGKHtmlDocThemeMediaType::XSM_MEDIA, "xsm");
            $this->reg_media("(min-width:".(IGK_CSS_XSM_SCREEN + 1)."px) and (max-width:".IGK_CSS_SM_SCREEN."px)", IGKHtmlDocThemeMediaType::SM_MEDIA, "sm");
            $this->reg_media("(min-width:".(IGK_CSS_SM_SCREEN + 1)."px) and (max-width:".IGK_CSS_LG_SCREEN."px)", IGKHtmlDocThemeMediaType::LG_MEDIA, "lg");
            $this->reg_media("(min-width:".(IGK_CSS_LG_SCREEN + 1)."px) and (max-width:".IGK_CSS_XLG_SCREEN."px)", IGKHtmlDocThemeMediaType::XLG_MEDIA, "xlg");
            $this->reg_media("(min-width:".(IGK_CSS_XLG_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::XXLG_MEDIA, "xxlg");
            $this->reg_media("(min-width:".(IGK_CSS_XSM_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_XSM_MEDIA);
            $this->reg_media("(min-width:".(IGK_CSS_SM_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_SM_MEDIA);
            $this->reg_media("(min-width:".(IGK_CSS_LG_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_LG_MEDIA);
            $this->reg_media("(min-width:".(IGK_CSS_XLG_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_XLG_MEDIA);
            $this->reg_media("(min-width:855px)", IGKHtmlDocThemeMediaType::CTN_LG_MEDIA);
            $this->reg_media("(min-width:1300px)", IGKHtmlDocThemeMediaType::CTN_XLG_MEDIA);
            $this->reg_media("(min-width:1820px)", IGKHtmlDocThemeMediaType::CTN_XXLG_MEDIA);
            $this->reg_media();
        }
    }
    ///<summary></summary>
    ///<param name="style"></param>
    /**
    * 
    * @param mixed $style
    */
    private function add($style){
        $tc=$this->m_tc ?? array();
        if(is_string($style) && !empty($style)){
            $n=igk_createxmlnode($style);
            array_push($tc, $n);
            return $n;
        }
        array_push($tc, $style);
        return $style;
    }
    ///<summary></summary>
    ///<param name="cl"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $cl
    * @param mixed $value
    */
    public function addColor($cl, $value){
        $changed=false;
        if(isset($this->cl[$cl])){
            if($this->cl[$cl] != $value){
                $this->cl[$cl]=$value;
                $changed=true;
            }
        }
        else{
            $this->cl[$cl]=$value;
            $changed=true;
        }
        if($changed){
            $this->save();
        }
    }
    ///<summary>Add file to document theme</summary>
    /**
    * Add file to document theme
    */
    public function addFile($host, $f, $temp=1){
        if($host === null)
            igk_die("controller host must be defined");
        igk_css_reg_global_style_file($f, $this, $host, $temp); 
    }
    ///<summary>add font package</summary>
    /**
    * add font package
    */
    public function addFont($name, $path){
        $changed=false;
        $ft=& $this->def->getFont();
        if(isset($ft[$name])){
            $changed=$ft[$name] != $path;
            $ft[$name]=$path;
        }
        else{
            $ft[$name]=$path;
            $changed=true;
        }
    }
    ///<summary>attach tempory css file to bind</summary>
    /**
    * attach tempory css file to bind
    */
    public function addTempFile($file){
        if(!file_exists($file))
            return 0;
        $v_tfiles=& $this->m_def->getTempFiles();
        $v_tfiles[$file]=$file;
        return 1;
    }
    ///<summary>add file from tempory</summary>
    /**
    * add file from tempory
    */
    public function addTempStyle($host, $f){
        if(!file_exists($f))
            return false;
        $key="css://temp/rendering";
        $tab=$this->getParam($key);
        if($tab === null)
            $tab=array();
        $tab[$f]=(object)array('file'=>$f, 'host'=>$host);
        $this->setParam($key, $tab);

    }
    ///<summary></summary>
    /**
    * 
    */
    public function ClearChilds(){}
    ///<summary></summary>
    /**
    * 
    */
    public function ClearFont(){
        $tab=$this->ft->Attributes;
        if(count($tab) > 0){
            foreach($tab as  $v){
                if(is_object($v)){
                    foreach($v->Fonts as  $n){
                        $f=igk_io_basedir($n->File);
                        if(file_exists($f))
                            @unlink($f);
                    }
                }
                else{
                    $f=igk_io_basedir($v);
                    if(file_exists($f))
                        @unlink($f);
                }
            }
            $this->ft->Attributes->Clear();
            $this->save();
        }
    }
    ///<summary></summary>
    ///<param name="minfile" default="false"></param>
    ///<param name="themeexport" default="false"></param>
    ///<param name="doc" default="null"></param>
    /**
    * 
    * @param mixed $minfile the default value is false
    * @param mixed $themeexport the default value is false
    * @param mixed $doc the default value is null
    */
    public function get_css_def($minfile=false, $themeexport=false, $doc=null){
        $el=$minfile ? IGK_STR_EMPTY: IGK_LF;
        $is_root=false;
        $doc = $doc ?? igk_app()->Doc;
        
        $systheme = $doc->SysTheme;
        $is_root = $this === $systheme;
        
        $out=$this->_get_css_def(!$minfile, $themeexport, $systheme);

        if($this->m_medias) foreach($this->m_medias as $k=>$v){
            $g=trim($v->getCssDef($this, $minfile, $themeexport, $systheme));
            if(!empty($g)){
                $out .= "@media ".self::GetMediaName($k)."{".$el;
                if($is_root){
                    $inf=self::GetMediaClassInfo($k);
                    if(!empty($inf)){
                        $out .= $inf.$el;
                    }
                }
                $out .= $g.$el;
                $out .= "}".$el;
            }
        }
        return $out;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function get_media($id){
        $g=null;
        if(isset($this->m_medias[$id])){
            $g=& $this->m_medias[$id];
        }
        else{
            igk_ilog("Media not found {$id}");
            header("Content-Type:text/html");
            igk_trace();
            igk_wln_e("media not found");
        }
        return $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAllClassExpression(){
        $out=IGK_STR_EMPTY;
        $def=$this->def;
        $tab=igk_createnode("table");
        foreach($def->Attributes as $k=>$v){
            $r=$tab->addRow();
            $r->addTd()->Content=$k;
            $r->addTd()->Content=$v;
        }
        $out .= $tab->Render();
        return $out;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAppend(){
        return "";
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getAttributes(){
        igk_die(__METHOD__.". not avaiable for theme");
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getCl(){
        return $this->m_def->getCl();
    }
    ///<summary>return theme extra smalll media type</summary>
    public function getxsm_screen(){
        return $this->get_media( IGKHtmlDocThemeMediaType::XSM_MEDIA);
    }
    ///<summary>return theme smal media type</summary>
    public function getsm_screen(){
        return $this->get_media( IGKHtmlDocThemeMediaType::SM_MEDIA);
    }
    ///<summary>return theme large media type</summary>
    public function getlg_screen(){
        return $this->get_media( IGKHtmlDocThemeMediaType::LG_MEDIA);
    }
    ///<summary>return theme extra large media type</summary>
    public function getxlg_screen(){
        return $this->get_media( IGKHtmlDocThemeMediaType::XLG_MEDIA);
    }
    ///<summary>return theme extra extra large media type</summary>
    public function getxxlg_screen(){
        return $this->get_media( IGKHtmlDocThemeMediaType::XXLG_MEDIA);
    }
    ///<summary></summary>
    ///<param name="key" default="null"></param>
    /**
    * 
    * @param mixed $key the default value is null
    */
    public function getDeclaration($key=null){
        $out=IGK_STR_EMPTY;
        $key=$key == null ? "\$this": $key;
        foreach($this->def->Attributes as $k=>$v){
            $out .= $key."[\"$k\"]=\"".$v."\";".IGK_LF;
        }
        foreach($this->getChilds() as $k){
            $t=strtolower($k->TagName);
            $c=false;
            switch($t){
                case "default":
                case "igk:text":
                case "":
                $c=true;
                break;default:
                $c=!preg_match(IGK_ISIDENTIFIER_REGEX, $t);
                break;
            }
            if($c)
                continue;
            $out .= "\$$k->TagName = igk_getv({$key}->getElementsByTagName(\"$k->TagName\"), 0);".IGK_LF;
            $tab=$k->Attributes;
            if($tab){
                foreach($tab as $r=>$s){
                    if(is_object($s)){
                        switch($k->TagName){
                            case "Fonts":
                            $out .= "\$$k->TagName[\"$r\"]=\"".str_replace("\\", "\\", str_replace("\"", "'", igk_css_get_fontdef($s->Name, $s)))."\";".IGK_LF;
                            break;
                        }
                        continue;
                    }
                    $out .= "\$$k->TagName[\"$r\"]=\"".str_replace("\\", "\\", str_replace("\"", "'", $s))."\";".IGK_LF;
                }
            }
        }
        return $out;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getdef(){
        return $this->m_def;
    }
    ///<summary> get the parent document</summary>
    /**
    *  get the parent document
    */
    public function getDoc(){
        return $this->m_document;
    }
    ///<summary>return registrated fontn</summary>
    /**
    * return registrated fontn
    */
    public function getFont(){
        return null;
    }
    ///<summary> return the id of the data</summary>
    /**
    *  return the id of the data
    */
    public function getId(){
        return $this->m_id;
    }
    ///<summary></summary>
    ///<param name="idk"></param>
    /**
    * 
    * @param mixed $idk
    */
    public static function GetMediaClassInfo($idk){
        if(self::$SM_MEDIAKEY == null){
            self::$SM_MEDIAKEY=[IGKHtmlDocThemeMediaType::XSM_MEDIA=>"xsm", IGKHtmlDocThemeMediaType::SM_MEDIA=>"sm", IGKHtmlDocThemeMediaType::LG_MEDIA=>"lg", IGKHtmlDocThemeMediaType::XLG_MEDIA=>"xlg", IGKHtmlDocThemeMediaType::XXLG_MEDIA=>"xxlg", ];
        }
        $s=null;
        if(isset(self::$SM_MEDIAKEY[$idk])){
            $g=self::$SM_MEDIAKEY[$idk];
            $s=IGK_CSS_MEDIA_TYPE_CLASS. "{z-index:{$idk}; content:'{$g}'}";
        }
        return $s;
    }
    ///<summary></summary>
    ///<param name="idk"></param>
    /**
    * 
    * @param mixed $idk
    */
    public static function GetMediaName($idk){
        if(!isset(self::$MEDIA))
            self::$MEDIA=[IGKHtmlDocThemeMediaType::XSM_MEDIA=>"(max-width:".(IGK_CSS_XSM_SCREEN)."px)", IGKHtmlDocThemeMediaType::SM_MEDIA=>"(min-width:".(IGK_CSS_XSM_SCREEN + 1)."px) and (max-width:".IGK_CSS_SM_SCREEN."px)", IGKHtmlDocThemeMediaType::LG_MEDIA=>"(min-width:".(IGK_CSS_SM_SCREEN + 1)."px) and (max-width:".IGK_CSS_LG_SCREEN."px)", IGKHtmlDocThemeMediaType::XLG_MEDIA=>"(min-width:".(IGK_CSS_LG_SCREEN + 1)."px) and (max-width:".IGK_CSS_XLG_SCREEN."px)", IGKHtmlDocThemeMediaType::XXLG_MEDIA=>"(min-width:".(IGK_CSS_XLG_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_XSM_MEDIA=>"(min-width:".(IGK_CSS_XSM_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_SM_MEDIA=>"(min-width:".(IGK_CSS_SM_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_LG_MEDIA=>"(min-width:".(IGK_CSS_LG_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::GT_XLG_MEDIA=>"(min-width:".(IGK_CSS_XLG_SCREEN + 1)."px)", IGKHtmlDocThemeMediaType::CTN_LG_MEDIA=>"(min-width:855px)", IGKHtmlDocThemeMediaType::CTN_XLG_MEDIA=>"(min-width:1300px)", IGKHtmlDocThemeMediaType::CTN_XXLG_MEDIA=>"(min-width:1820px)"];
        return igk_getv(self::$MEDIA, $idk, $idk);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getMedias(){
        return $this->m_medias;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getParam(){
        return null;
    }
    ///<summary>get print media</summary>
    /**
    * get print media
    */
    public function getPrintMedia(){
        return $this->reg_media("print", null, 'print');
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getProperties(){
		$g = & $this->m_def->getParams();
		return  $g;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getRegChangedKey(){
        return self::REGKEY."_".$this->Name;
    }
    ///<summary></summary>
    ///<return refout="true"></return>
    /**
    * 
    * @return *
    */
    public function & getrules(){
        $q=$this;
        $sd=& $this->m_def->getRules();
        return $sd;
    }
    ///<summary></summary>
    ///<param name="file"></param>
    /**
    * 
    * @param mixed $file
    */
    public function LoadThemeFromFile($file){
        if(file_exists($file)){
            include($file);
        }
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetExists($i){
        if(isset($this->m_tc))
            return ($i>=0) && ($i < count($this->m_tc));
        return 0;
    }
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function offsetGet($key){
        return $this->def[$key];
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function offsetSet($key, $value){
        if($key == "file"){
            igk_die(__METHOD__." offset is file");
        }
        $this->def[$key]=$value;
    }
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public function offsetUnset($i){
        if(isset($this->m_tc))
            unset($this->m_tc[$i]);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function output(){
        header("Content-Type:text/css");
        $s=$this->get_css_def();
        igk_wl($s);
    }
    ///<summary></summary>
    ///<param name="def"></param>
    ///<param name="name"></param>
    ///<param name="expression"></param>
    /**
    * 
    * @param mixed $def
    * @param mixed $name
    * @param mixed $expression
    */
    public function reg_keyFrames($def, $name, $expression){
        $def->addRule("@-webkit-keyframes ".$name, $expression);
        $def->addRule("@-moz-keyframes ".$name, $expression);
        $def->addRule("@-ms-keyframes ".$name, $expression);
        $def->addRule("@-o-keyframes ".$name, $expression);
        $def->addRule("@keyframes ".$name, $expression);
    }
    ///<summary>register a media </summary>
    ///<param name="$name">name or condition</param>
    /**
    * register a media
    * @param mixed $name name or condition
    */
    public function reg_media($name="print", $id=null, $display=null){
        $s="";
        $n=null;
        $doc=$this->m_document;
        $is_root=IGKString::StartWith($this->m_id, "sys:");
        $display=($name == 'print') && ($display == null) ? 'ptrdevice': $display;
        if(!isset($this->m_medias[$name])){
            $n=new IGKMedia("media:".$name, $display);
            $idkey=$id ?? $name;
            $this->m_medias[$idkey]=$n;
        }
        else{
            $n=$this->m_medias[$name];
        }
        return $n;
    }
    ///<summary></summary>
    ///<param name="cl"></param>
    /**
    * 
    * @param mixed $cl
    */
    public function removeColor($cl){
        if(isset($this->cl[$cl])){
            $this->cl[$cl]=null;
            $this->save();
        }
    }
    ///remove a specific font
    /**
    */
    public function removeFont($name){
        $f=$this->ft[$name];
        if($f){
            if(is_object($f)){
                $this->ft[$name]=null;
                unset($this->ft[$name]);
                $this->save();
                return true;
            }
            if(is_string($f)){
                $f=igk_io_currentrelativepath($f);
                if(file_exists($f) && (unlink($f))){
                    igk_notifyctrl()->addMsg(__("msg.fontfile.removed"));
                }
                $this->ft[$name]=null;
                $this->save();
                return true;
            }
        }
        return false;
    }
    ///<summary>reset all media</summary>
    /**
    * reset all media
    */
    public function reset($save=false){
        // igk_wln(__FILE__.':'.__LINE__);
        $this->def->Clear();
        $this->cl->Clear();
        $this->res->Clear();
        $this->ft->Clear();
        $this->properties->Clear();
        $this->rules->Clear();
        foreach($this->m_medias as $v){
            $v->Clear();
        }
        if($save)
            $this->save();
    }
    ///<summary></summary>
    /**
    * 
    */
    public function resetAll(){

        $this->def->Clear();
        $cl=$this->def->getCl();
        $this->m_medias=array();
        $this->_initMedia($this->m_id);
    }
    ///<summary></summary>
    ///<param name="file" default="null"></param>
    /**
    * 
    * @param mixed $file the default value is null
    */
    public function save($file=null){
        if(($file == null) && empty($this->Name))
            return;
        $f=($file == null) ? igk_io_syspath(IGK_RES_FOLDER."/Themes/".$this->Name.".".IGK_DEFAULT_VIEW_EXT): $file;
        $out=IGK_STR_EMPTY;
        $out .= "<?php".IGK_LF;
        $out .= <<<EOF
// Theme Media creation
// Name : {$this->Name}
\$cl = get_class(\$this);
if (\$cl != 'IGKHtmlDocTheme')
{
	igk_die("this file can be only included in IGKHtmlDocTheme context");
}
EOF;
        $out .= $this->getDeclaration();
        $out .= IGK_START_COMMENT."media properties ".IGK_END_COMMENT.IGK_LF;
        foreach($this->m_medias as $k=>$v){
            $out .= "\$media = igk_getv(\$this->m_medias, '$k');".IGK_LF;
            $out .= "if (\$media){ ".IGK_LF;
            $out .= $v->getDeclaration("\$media");
            $out .= "}".IGK_LF;
        }
        $result=igk_io_save_file_as_utf8($f, $out, true);
        return $result;
    }
    ///protected the access to allow parent or child call via calluser func
    /**
    */
    protected function setdef($v){
        if(($v === null) || (get_class($v) == "IGKHtmlDoc")){
            igk_die("/!\\ bad ? ".($v === null), __METHOD__);
        }
        $this->m_def=$v;
    }
    ///set properties
    /**
    */
    public function setProperty($name, $value){
        $p=& $this->m_def->getParams();
        $p[$name]=$value;
    }
}
///<summary>Represente class: IGKObjectStrict</summary>
/**
* Represente IGKObjectStrict class
*/
final class IGKObjectStrict{
    private $m_ins;
    ///<summary></summary>
    ///<param name="n"></param>
    ///<param name="params"></param>
    /**
    * 
    * @param mixed $n
    * @param mixed $params
    */
    public function __call($n, $params){
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){}
    ///<summary></summary>
    ///<param name="key"></param>
    /**
    * 
    * @param mixed $key
    */
    public function __get($key){
        return igk_getv($this->m_ins, $key);
    }
    ///<summary></summary>
    ///<param name="key"></param>
    ///<param name="value"></param>
    /**
    * 
    * @param mixed $key
    * @param mixed $value
    */
    public function __set($key, $value){
        if(!isset($this->m_ins, $key))
            igk_die("setting of $key is not allowed");
        $this->m_ins[$key ]=$value;
    }
    ///<summary></summary>
    ///<param name="arraykey"></param>
    /**
    * 
    * @param mixed $arraykey
    */
    public static function Create($arraykey){
        if(is_array($arraykey) && igk_count($arraykey) > 0){
            $m=array();
            foreach($arraykey as $n){
                if(is_string($n))
                    $m[$n]=null;
            }
            if(igk_count($m) > 0){
                $g=new IGKObjectStrict();
                $g->m_ins=$m;
                return $g;
            }
        }
        return null;
    }
}
///<summary>Represente class: IGKQueryListener</summary>
/**
* Represente IGKQueryListener class
*/
final class IGKQueryListener{
    var $squery;
    ///query list
    /**
    */
    public function __construct(){
        $this->squery="";
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    function sendQuery($s){
        if(preg_match("/^SELECT Count\(\*\) FROM/i", $s)){
            return null;
        }
        if(preg_match("/^SELECT \* FROM/i", $s)){
            return true;
        }
        if(preg_match("/^(set|commit|START)/i", $s)){
            $s="#".$s;
        }
        $this->squery .= $s.IGK_LF;
        if(preg_match("/^(use|select|create|insert|update) /i", $s)){
            return true;
        }
        return false;
    }
}


///<summary>Represente class: IGKReaderBindingInfo</summary>
/**
* Represente IGKReaderBindingInfo class
*/
final class IGKReaderBindingInfo{
    const PATH=__CLASS__.'::Construct';
    ///<summary></summary>
    ///<param name="_reader"></param>
    ///<param name="listener" default="null"></param>
    /**
    * 
    * @param mixed $_reader
    * @param mixed $listener the default value is null
    */
    public function __construct($_reader, $listener=null){
        igk_set_env(self::PATH, ["reader"=>$_reader, "info"=>[], "listener"=>$listener]);
    }
    ///<summary></summary>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $v
    */
    public function __get($v){

        $g=igk_get_env(self::PATH);
        return igk_getv($g["info"], $v);
    }
    ///<summary></summary>
    ///<param name="k"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $k
    * @param mixed $v
    */
    public function __set($k, $v){
        $g=igk_get_env(self::PATH);
        $g["info"][$k]=$v;
		igk_set_env(self::PATH, $g);
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getInfoArray(){
        $g=igk_get_env(self::PATH);
        return $g["info"];
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getName(){
        $g=igk_get_env(self::PATH);
        return $g["reader"]->Name();
    }
    ///<summary></summary>
    ///<param name="x"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $x
    * @param mixed $v
    */
    public function setAttribute($x, $v){
        $g=igk_get_env(self::PATH);
        $fc=$g["listener"];
        if($fc){
            $fc($x, $v);
        }
        return $this;
    }
    ///<summary></summary>
    ///<param name="k"></param>
    ///<param name="v"></param>
    /**
    * 
    * @param mixed $k
    * @param mixed $v
    */
    public function setInfo($k, $v){
        $g=igk_get_env(self::PATH);
        $fc=$g["info"];
        $fc[$k]=$v;
        igk_set_env(self::PATH, $g);
    }
    ///<summary></summary>
    ///<param name="atab"></param>
    /**
    * 
    * @param mixed $atab
    */
    public function setInfos($atab){
        $g=igk_get_env(self::PATH);
        $fc=$g["info"];
        $fc=array_merge($fc, $atab);
        $g["info"]=$fc;
        igk_set_env(self::PATH, $g);
    }
}
///<summary>Represente class: IGKRefoutModel</summary>
/**
* Represente IGKRefoutModel class
*/
class IGKRefoutModel {
    var $clId;
    var $clModel;
    var $clNextValue;
    var $ctrl;
    var $out;
    ///<summary></summary>
    ///<param name="tab"></param>
    /**
    * 
    * @param mixed $tab
    */
    public static function Init($tab){
        $c=new IGKRefoutModel();
        foreach($c as $k=>$v){
            $c->$k=igk_getv($tab, $k);
        }
        return $c;
    }
    ///<summary></summary>
    ///<param name="db"></param>
    /**
    * 
    * @param mixed $db
    */
    public function update($db){
        $t=igk_db_create_data($this, array("out"=>null, "ctrl"=>null));
        if($this->clId){
            $this->clNextValue++;
            $db->update($this->ctrl->getDataTableName(), $t);
        }
        else{
            $o=$db->insert($this->ctrl->getDataTableName(), $t);
        }
    }
}
///<summary>Represente class: IGKResourceUriResolver</summary>
/**
* Represente IGKResourceUriResolver class
*/
class IGKResourceUriResolver{
    private $environment;
    private static $sm_instance;
    var $fulluri;
    ///<summary></summary>
    /**
    * 
    */
    private function __construct(){
        $this->fulluri=0;
        $this->prepareEnvironment();
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function getInstance(){
        if(self::$sm_instance == null){
            self::$sm_instance=new IGKResourceUriResolver();
        }
        return self::$sm_instance;
    }
    ///<summary>utility use to bind javascript resources
    /**
    * utility use to bind javascript resources
    */
    public function prepareEnvironment(){
        $this->environment=array(
            IGK_LIB_DIR."/cgi-bin"=>(object)array(
                "name"=>"cgi-bin",
                "ini_chain"=>function($n, $rp){
                        $chain=igk_html_uri(IGK_RES_FOLDER."/_cgi_/".$n);
                        $o=igk_io_basedir($chain);
                        $dir=dirname($o);
                        if(!file_exists($o)){
                            IGKIO::CreateDir($dir);
                            igk_io_symlink($rp, $o);
                        }
                        else{
                            if(!is_link($o)){
                                igk_die(__("res failed shortcut"));
                            }
                        }
                        if(!file_exists($file=$dir."/.htaccess")){
                            igk_io_w2file($file, igk_io_read_allfile(IGK_LIB_DIR."/Inc/default.cgi.htaccess")); 
                        }
                        return $chain;
                    }
            ),
            IGK_LIB_DIR=>"_lib_",
            igk_get_module_dir()=>"_mod_",
            igk_io_projectdir()=>"_prj_",
            igk_get_packages_dir()=>"_pkg_",
            igk_io_cachedir()=>"_chs_"
        );
    }
    ///<summary>resolve existing file to asset resources</summary>
    /**
    * resolve existing file to asset resources
    */
    public function resolve($uri, $options=null, $generate=1){
        if (empty($uri))
            return null; 
        static $appData=null;
        $fulluri=$this->fulluri || igk_is_ajx_demand();
     
        $createlink=function($target, $cibling) use ($generate){
            if(file_exists($cibling) && !$generate){
                return 1;
            } 
            $outlink = 1;
            if(!file_exists($cibling)  && !($outlink=igk_io_symlink($target, $cibling))){
                igk_die(__("Failed to create symbolic link -1- {0} ==&gt; {1}", $target, igk_realpath($target), $cibling));
            }
            igk_hook("generateLink", array(
                "source"=>$target,
                "outdir"=>dirname($cibling),
                "link"=>$cibling
            ));
            return $outlink;
        };
        $buri=explode("?", $uri);
        $uri=$buri[0];
        $query="";
        if(count($buri) > 1){
            $query="?".implode("?", array_slice($buri, 1));
        }
        if(IGKIO::IsRealAbsolutePath($uri)){
            $rp=igk_realpath($uri);
            $bdir=igk_io_basedir();
        
            if(!igk_io_is_subdir($bdir, $rp)){
                if(!igk_io_is_subdir($bdir, $uri)){
                    $rp=$uri;
                }
                $tab=$this->environment;
                // +| generate asset directory
               // if (!file_exists($chain= igk_io_basedir(igk_html_uri(IGK_RES_FOLDER."/.htaccess")))){
                    // +
                    // igk_io_w2file($chain, file_get_contents(IGK_LIB_DIR."/Default/assets.htaccess.inc"));
                // }
                foreach($tab as $i=>$j){
                    if(igk_io_is_subdir($i, $rp)){
                        $s=$j;
                        $n=substr($rp, strlen($i) + 1);
                        if(is_object($s)){
                            $b=$s->{'ini_chain'};
                            $chain=$b($n, $rp);
                        }
                        else{
                            $chain=igk_html_uri(IGK_RES_FOLDER."/".$j."/".$n);
                            $o=igk_io_basedir($chain);
                            if($generate){
                                $exists=file_exists($o);
                                if(!$exists && !is_link($o)){
                                    $odir=dirname($o);
                                    if (IGKIO::CreateDir($odir)){
                                        if( !file_exists($o) && !($outlink=igk_io_symlink($rp, $o))){                                             
                                            igk_ilog("file exists ? $rp = ".file_exists($o));
                                            igk_ilog(__("Failed to create symbolic link - 2 - ")." ".$rp .'==$gt; '. $o. " ? ".is_link($o)." = ".$outlink);
                                            return null;
                                        }
                                        igk_hook("generateLink", $gt=array("outdir"=>$odir, "link"=>$rp));
                                    }else {                                        
                                        igk_ilog("failed to create dir:".$odir);
                                        return null;
                                    }
                                }
                            }
                        }
                        if(defined("IGK_TESTING")){
                            igk_wln_e("chain: ".$chain, "fulluri ? ".$fulluri, "fullpath :".igk_io_baseuri($chain, $options), "relative :".$g=igk_io_currentrelativeuri($chain, $options), "RP = ".igk_realpath($g));
                        }
                        if($fulluri)
                            return igk_io_baseuri($chain).$query;
                        return igk_io_currentrelativeuri($chain, $options).$query;
                    }
                }
                $gs_uri=igk_html_get_system_uri($uri, $options);
                if($gs_uri){
                    $gs_uri=preg_replace("#(\.\./)+#", "_oth_/", $gs_uri);
                    $chain=igk_html_uri(IGK_RES_FOLDER."/".$gs_uri);
                    $o=igk_io_basedir($chain);
                    $outlink=null;
            

                    if(!file_exists($o) && IGKIO::CreateDir(dirname($o))){
                        if (!$createlink($uri, $o)){
                            igk_debug_wln("failed to create link", $o);
                        }else {
                            if (!is_link($o)){
                                igk_debug_wln("link not create:".$o);
                            }
                        }
                    }
                    
                    if($fulluri){
                        $outlink=igk_io_baseuri($chain);
                    }
                    else{
                        $outlink=igk_io_currentrelativeuri($chain, $options);
                    }
                    return $outlink.$query;
                }
            }
        }
        if($appData === null){
            $i=1;
            if(!strstr(IGK_LIB_DIR, igk_html_uri(igk_io_applicationdir())))
                $i=0;
            $appData=$i;
        }
        if(!$appData && strpos($ln=igk_html_uri($uri), IGK_LIB_DIR) === 0){
            return igk_io_libdiruri($rp, $options).$query;
        }
       
        if(($v=igk_ajx_link($uri)) == null){ 
            $v=igk_html_get_system_uri($uri, $options);
        } 
        return $v.$query;
    }
    ///<summary>resolveOnly  file</summary>
    ///<param name="file"></param>
    ///<param name="notresolved" ref="true"></param>
    /**
    * resolveOnly  file 
    * @param mixed $file
    * @param mixed * $notresolved the default value is 0
    */
    public function resolveOnly($file, & $notresolved=0){
        /// TODO : resolveONLY

        $fulluri=$this->fulluri || igk_is_ajx_demand();
        $notresolved=0;
        $bdir=igk_html_uri(igk_io_basedir());
        $rp=igk_html_uri($file);
        $options = null;
        $uri = "";

        if(!igk_io_is_subdir($bdir, $rp)){
            $tab=$this->environment;
            $v_brpath=igk_io_baserelativepath($rp);
            foreach($tab as $i=>$j){
                if(igk_io_is_subdir($i, $rp)){
                    $s=$j;
                    $n=substr($rp, strlen($i) + 1);
                    if(is_object($s)){
                        $b=$s->{'ini_chain'};
                        $chain=$b($n, $rp);
                    }
                    else{
                        $chain=igk_html_uri(IGK_RES_FOLDER."/".$j."/".$n);
                        $o=igk_io_basedir($chain);
                    }
                    if($fulluri)
                        return igk_io_baseuri($chain);
                    return igk_io_currentrelativeuri($chain, null);
                }
            }
            // igk_wln_e(__FILE__.":".__LINE__, "uri not found ".$uri);
            $gs_uri=igk_html_get_system_uri($uri, $options);
            if($gs_uri){
                $gs_uri=preg_replace("#(\.\./)+#", "_oth_/", $gs_uri);
                $chain=igk_html_uri(IGK_RES_FOLDER."/".$gs_uri);
                $o=igk_io_basedir($chain);
                $outlink=null;
                if($fulluri){
                    $outlink=igk_io_baseuri($chain);
                }
                else{
                    $outlink=igk_io_currentrelativeuri($chain, $options);
                }
                return $outlink;
            }
        }
        $notresolved=1;
        if(($v=igk_ajx_link($rp)) == null)
            $v=igk_html_get_system_uri($rp, $options);
        return $v;
    }
}
///<summary>Represente class: IGKSQLQueryUtils</summary>
/**
* Represente IGKSQLQueryUtils class
* @deprecated since 11.7.0.0519 use SQLGrammar
*/
class IGKSQLQueryUtils {
    const AVAIL_FUNC=[
        'IGK_PASSWD_ENCRYPT',
        'AES_ENCRYPT', 
        'BIN', 'CHAR', 'COMPRESS', 'CURRENT_USER', 'AES_DECRYPTDATABASE', 
        'DAYNAME', 'DES_DECRYPT', 'DES_ENCRYPT', 'ENCRYPT', 'HEX', 'INET6_NTOA', 
        'INET_NTOA', 'LOAD_FILE', 'LOWER', 'LTRIM', 'MD5', 'MONTHNAME', 'OLD_PASSWORD', 
        'PASSWORD', 'QUOTE', 'REVERSE', 'RTRIM', 'SHA1', 'SOUNDEX', 'SPACE', 'TRIM', 
        'UNCOMPRESS', 'UNHEX', 'UPPER', 'USER', 'UUID', 'VERSION', 'ABS', 'ACOS', 'ASCII', 
        'ASIN', 'ATAN', 
        'BIT_COUNT', 'BIT_LENGTH', 'CEILING', 'CHAR_LENGTH', 'CONNECTION_ID', 'COS', 'COT', 
        'CRC32', 'CURRENT_DATE', 'CURRENT_TIME', 'DATE', 'DAYOFMONTH', 'DAYOFWEEK', 'DAYOFYEAR', 'DEGREES', 'EXP', 
        'FLOOR', 'FROM_DAYS', 'FROM_UNIXTIME', 'HOUR', 'INET6_ATON', 'INET_ATON', 'LAST_DAY', 
        'LENGTH', 'LN', 'LOG', 'LOG10', 'LOG2', 'MICROSECOND', 'MINUTE', 'MONTH', 'NOW', 'OCT', 'ORD', 'PI', 
        'QUARTER', 'RADIANS', 'RAND', 'ROUND', 'SECOND', 'SEC_TO_TIME', 'SIGN', 'SIN', 'SQRT', 'SYSDATE', 'TAN', 'TIME', 'TIMESTAMP', 'TIME_TO_SEC', 'TO_DAYS', 'TO_SECONDS', 
        'UNCOMPRESSED_LENGTH', 'UNIX_TIMESTAMP', 'UTC_DATE', 'UTC_TIME', 'UTC_TIMESTAMP', 'UUID_SHORT', 'WEEK', 'WEEKDAY', 'WEEKOFYEAR', 'YEAR', 'YEARWEEK'];
    public static $LENGTHDATA=array(        
        "varchar"=>"VarChar"
    );
    protected static $sm_adapter;

    public static function SetAdapter($ad){
        self::$sm_adapter = $ad;
    }
    public static function ResolvType($t){
        return igk_getv([
            "int"=>"Int",
            "uint"=>"Int",
            "udouble"=>"Double",
            "bigint"=>"BIGINT",
            "ubigint"=>"BIGINT",
            "date"=>"Date",
            "enum"=>"Enum",
            "json"=>"JSON"
        ], $t = strtolower($t), $t);    
    }
    public static function fallbackType($t, $adapter){
        switch(strtolower($t)){
            case "json":
                if ($adapter->isTypeSupported('longtext')){
                    return "longtext";
                }
                break;
            case "date":
                if ($adapter->isTypeSupported('datetime')){
                    return "datetime";
                }
        }  
        return "text";
    }
    /**
     * @deprecated since 11.7.0.0519 use SQLGrammar
     */
    public static function AllowedDefValue(){
        static $defvalue = null;
		if ($defvalue === null){
			$defvalue = [
				"TIMESTAMP"=>[
                    "CURRENT_TIMESTAMP"=>1,
                    "NOW()"=>"CURRENT_TIMESTAMP",
                    "NULL"=>1
                ],
				"DATETIME"=>[
					"CURRENT_TIMESTAMP"=>1,
					"NOW()"=>1,
					"CURDATE"=>1,
					"CURTIME()"=>1,
                    "NULL"=>1
				],
                "JSON"=>[
                    "{}"=>"(JSON_OBJECT())",
                    "[]"=>"((JSON_ARRAY())"
                ]  
			];
		}
        return $defvalue;
    }
    ///<summary>check if this type support defaut value</summary>
    /**
     * @deprecated since 11.7.0.0519 use SQLGrammar
     */
    public static function supportDefaultValue($type){
        return !in_array($type, ["text"]);
    }
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="columninfo"></param>
    ///<param name="desc" default="null"></param>
    ///<param name="noengine"></param>
    ///<param name="nocomment"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $columninfo
    * @param mixed $desc the default value is null
    * @param mixed $noengine the default value is 0
    * @param mixed $nocomment the default value is 0
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function CreateTableQuery($tbname, $columninfo, $desc=null, $adapter=null, $noengine=0, $nocomment=0){
        

        $query="CREATE TABLE IF NOT EXISTS `".igk_mysql_db_tbname($tbname)."`(";
        $tb=false;
        $primary="";
        $unique="";
        $funique="";
        $findex="";
		$fautoindex = "";
        $uniques=array();
        $primkey="";
        $tinf=array();
        $defvalue = self::AllowedDefValue();
		
        foreach($columninfo as $v){
            if(($v == null) || !is_object($v)){
                igk_die(__CLASS__." :::Error table column info is not an object error for ".$tbname);
            }
            $primkey="noprimkey://".$v->clName;
            if($tb)
                $query .= ",";
            $v_name=igk_db_escape_string($v->clName);
            $query .= "`".$v_name."` ";
            $type=igk_getev(static::ResolvType($v->clType), "Int");
           
            if ($adapter && !$adapter->isTypeSupported($type)){
                $type = static::fallbackType($type, $adapter);
            } 



            $query .= igk_db_escape_string($type);
            $s=strtolower($type);
            $number=false;
            if(isset(self::$LENGTHDATA[$s])){
                if($v->clTypeLength > 0){
                    $number=true;
                    $query .= "(".igk_db_escape_string($v->clTypeLength).")";                   
                }
            } else if ($type=="Enum"){
                $query .="(". implode(",", array_map(function($i){
                    return "'".igk_db_escape_string($i)."'";
                }, array_filter(explode(",", $v->clEnumValues), function($c){
                    return (strlen(trim($c))>0);
                }))).")";
            }
            $query .= " ";

            


            if ($v->IsUnsigned()){
                $query .= "unsigned ";
            }

            if(!$number){
                if(($v->clNotNull) || ($v->clAutoIncrement))
                    $query .= "NOT NULL ";
                else
                    $query .= "NULL ";
            }
            else if($v->clNotNull){
                $query .= "NOT NULL ";
            }
            if($v->clAutoIncrement){
                $query .= IGKDBQueryDriver::GetValue("auto_increment_word", $v, $tinf)." ";
				if ($idx=igk_getv($v,"clAutoIncrementStartIndex")){
					$fautoindex = IGKDBQueryDriver::GetValue("auto_increment_word", $v, $tinf)."={$idx} ";
				}
            }
            $tb=true;
            if( static::supportDefaultValue($type) &&  $v->clDefault || $v->clDefault === '0'){
				$_ktype = strtoupper($type);
				$_def = $r_v = isset($defvalue[$_ktype][$v->clDefault]) ?
                (is_int($defvalue[$_ktype][$v->clDefault])?
                $v->clDefault : $defvalue[$_ktype][$v->clDefault] ):
				"'".igk_db_escape_string($v->clDefault)."'";
                $query .= "DEFAULT {$_def} ";

                if ($r_v && $v->clUpdateFunction){
                    $_def = !isset($defvalue[$_ktype][$v->clUpdateFunction]) ? $v->clDefault:
                    "".igk_db_escape_string($v->clUpdateFunction).""; 
                    $query .= " ON UPDATE {$_def}";
                }
            }
 

            if($v->clDescription && !$nocomment){
                $query .= " COMMENT '".igk_db_escape_string($v->clDescription)."' ";
            }
            if($v->clIsUnique){
                if(!empty($unique))
                    $unique .= ",";
                $unique .= "UNIQUE KEY `".$v_name."` (`".$v_name."`)";
            }
            if($v->clIsUniqueColumnMember){
                if(isset($v->clColumnMemberIndex)){
                    $tindex=explode("-", $v->clColumnMemberIndex);
                    $indexes=array();
                    foreach($tindex as $kindex){
                        if(!is_numeric($kindex) || isset($indexes[$kindex]))
                            continue;
                        $indexes[$kindex]=1;
                        $ck='unique_'. $kindex;
                        $bf="";
                        if(!isset($uniques[$ck])){
                            $bf .= "UNIQUE KEY `clUC_".$ck."_index`(`".$v_name."`";
                        }
                        else{
                            $bf=$uniques[$ck];
                            $bf .= ", `".$v_name."`";
                        }
                        $uniques[$ck]=$bf;
                    }
                }
                else{
                    if(empty($funique)){
                        $funique="UNIQUE KEY `clUnique_Column_".$v_name."_index`(`".$v_name."`";
                    }
                    else
                        $funique .= ", `".$v_name."`";
                }
            }
            if($v->clIsPrimary && !isset($tinf[$primkey])){
                if(!empty($primary))
                    $primary .= ",";
                $primary .= "`".$v_name."`";
            }
            if(($v->clIsIndex || $v->clLinkType) && !$v->clIsUnique && !$v->clIsUniqueColumnMember && $v->clIsPrimary){
                if(!empty($findex))
                    $findex .= ",";
                $findex .= "KEY `".$v_name."_index` (`".$v_name."`)";
            }
            unset($tinf[$primkey]);
        }
        if(!empty($primary)){
            $query .= ", PRIMARY KEY  (".$primary.") ";
        }
        if(!empty($unique)){
            $query .= ", ".$unique." ";
        }
        if(!empty($funique)){
            $funique .= ")";
            $query .= ", ".$funique." ";
        }
        if(igk_count($uniques) > 0){
            foreach($uniques as $v){
                $v .= ")";
                $query .= ", ".$v." ";
            }
        }
        if(!empty($findex))
            $query .= ", ".$findex;

        $query .= ")";
        if(!$noengine)
            $query .= ' ENGINE=InnoDB ';
		if (!empty($fautoindex)){
			$query .= " ".	$fautoindex." ";
		}
        if($desc){
            $query .= "COMMENT='".igk_db_escape_string($desc)."' ";
        }
        $query = rtrim($query).";";
        return $query;
    }
    ///<summary>get column query definition</summary>
    /**
    * get column query definition
    */
    public static function GetColumnDefinition($v, $nocomment=0){
        $query="";
        $type=igk_getev($v->clType, "Int");
        $query .= igk_db_escape_string($type);
        $s=strtolower($type);
        $number=false;
        if(isset(self::$LENGTHDATA[$s])){
            if($v->clTypeLength > 0){
                $number=true;
                $query .= "(".igk_db_escape_string($v->clTypeLength).") ";
            }
            else
                $query .= " ";
        }
        else
            $query .= " ";
        if(!$number){
            if(($v->clNotNull) || ($v->clAutoIncrement))
                $query .= "NOT NULL ";
            else
                $query .= "NULL ";
        }
        else if($v->clNotNull){
            $query .= "NOT NULL ";
        }
        if($v->clAutoIncrement){
            $query .= IGKDBQueryDriver::GetValue("auto_increment_word", $v, $tinf)." ";
        }
        $tb=true;
        if($v->clDefault || $v->clDefault === '0'){
            $query .= "DEFAULT '".igk_db_escape_string($v->clDefault)."' ";
        }
        if($v->clDescription && !$nocomment){
            $query .= "COMMENT '".igk_db_escape_string($v->clDescription)."' ";
        }
        return $query;
    }
    ///<summary></summary>
    ///<param name="options"></param>
    ///<param name="tbname"></param>
    /**
    * 
    * @param mixed $options
    * @param mixed $tbname
    */
    public static function GetColumnList($options, $tbname){
        die( __METHOD__.":: obselete : use GetExtrasOptions instead");

        // $o="*";
        // if($options && ($c=igk_getv($options, 'Columns'))){
        //     $s="";
        //     foreach($c as $k=>$v){
        //         if(!empty($s))
        //             $s .= ", ";
		// 		if (is_object($v)){
		// 			$s .= igk_db_escape_string($v->getValue());
		// 		}else{

        //         $s .= $tbname.".".$k;
        //         if(is_string($v) && ($v != $k)){
        //             $s .= " as ".$v;
        //         }
		// 		}
        //     }
        //     if(!empty($s))
        //         $o=$s;
        // }
        // return $o;
    }
    private static function GetKey($k, $adapter){
        return "`".implode("`.`", array_map([$adapter, "escape_string"] , explode(".", $k)))."`";  
    }
    ///<summary>get query condition string</summary>
    ///<param name="tab"></param>
    ///<param name="operator" default="'AND'"></param>
    /**
    * get query condition string
    * @param mixed $tab
    * @param mixed $operator the default value is 'AND'
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetCondString($tab, $operator='AND', $adapter=null, $grammar=null){
        $query="";
        $t=0;
        $fc="getValue";
        $to="obj:type";
        $grammar = $grammar ?? new static();
        if ($adapter===null){
            $adapter = igk_db_current_data_adapter();
            if (!$adapter){
                die("adapter not found");
            } 
        }
        $op= $adapter->escape_string($operator);
        $c_exp="IS NULL";
        if(is_numeric($tab)){
            return "`clId`='{$tab}'";
        }
        if(is_object($tab)){
            if(get_class($tab) instanceof IGKDbExpression){
                return $tab->getValue($grammar);
            }
        }
        $qtab = [["tab"=>$tab, "operator"=>$op, "query"=> & $query]];
        $loop =  0;
        $tquery = [];
        while($ctab = array_shift($qtab)){
            if (!$loop){
                $loop = 1;
            }else {
                //$query .= " $op ";
                $t=0;
            }

           //igk_wln("entry one 1...".$op, array_keys($tab));
           $tab = $ctab["tab"];
           $op = $ctab["operator"];
           $query = & $ctab["query"];
           $tquery[] = & $query;
           //igk_debug_wln("ini ::: ");        
        foreach($tab as $k=>$v){
// igk_debug_wln("bindig:::", $k, $op);
			$c="=";			
            if(is_object($v)){
                if($v instanceof IGKDbExpression){
                    if($t == 1)
                        $query .= " $op ";
                    $query .= $v->getValue((object)[
                        "grammar"=>$grammar,
                        "type"=>"where",
                        "column"=>$k
                        ]);
                    $t = 1;
                    continue;
                }
                $tb = igk_get_robjs("operand|conditions", 0, $v); 
                if ($tb->operand && $tb->conditions && preg_match("/(or|and)/i", $tb->operand)){
                    if ($t){
                        $t = 0;
                    } 
                   // $op = strtoupper($tb->operand);
                    array_unshift($qtab,["tab"=>$tb->conditions, "operator"=>strtoupper($tb->operand)]);
                    continue; 
                }    
            }
            if($t == 1)
            $query .= " $op ";            
        
            if (is_object($v)){
                $query .= "`".igk_obj_call($v, $fc)."`";      
            }
            else{
                  
                if(preg_match("/^(!|@@|@&|(<|>)=?|#|\||&)/", $k, $tab)){
                    $ch=substr($k, 0, $ln=strlen($tab[0]));
                    $k=substr($k, $ln);
                    switch($ch){
                        case '!':
                        $c="!=";
                        $c_exp="IS NOT NULL";
                        break;
                        case "@@";
                        $c=" Like ";
                        break;
                        case "@&":
                            $query .= "(".self::GetKey($k, $adapter)." & ".$adapter->escape_string($v).") = ".$adapter->escape_string($v);
                            $t = 1;
                            continue 2;
                        break;
                        default:
                        $c = $ch;
                        break;
                    }
                } 
                $query .= self::GetKey($k, $adapter); // "`".implode("`.`", array_map([$adapter, "escape_string"] , explode(".", $k)))."`";  
                if($v !== null)
                {
                    if (is_array($v)){
                        $query .= $c.implode(" ", $v);
                    }else{
                        $query .= "{$c}'".$adapter->escape_string($v)."'";
                    }
                }
                else
                    $query .= " ".$c_exp;
            }
            $t=1;
        }
    }  
    
    $tquery = array_filter($tquery);
    if (count($tquery)>1){
        $query = "(".implode(") {$operator} (", $tquery).")";
    }
        return $query;
    }
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="values"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $values
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetDeleteQuery($tbname, $values){
        $query="";
        $query .= "DELETE FROM `".igk_mysql_db_tbname($tbname)."`";
        if(is_numeric($values)){
            return $query. " WHERE `clId`={$values}";
        }

        if(is_array($values)){
            $query .= " WHERE ". self::GetCondString($values);
        }
        else{
			if (is_string("values")){
				 $query .= " WHERE ".igk_db_escape_string($values);
			}else{
				$id=igk_getv($values, IGK_FD_ID);
				if($id){
					$query .= " WHERE `clId`='".igk_db_escape_string($id)."'";
				}
			}
        }
        return $query;
    }
    /**
     * @deprecated since 11.7.0.0519 use SQLGrammar
     */
    private static function Key($t, $adapter, $separator=","){        
        return implode($separator, array_map(function($t) use($adapter){
                return  "`".implode("`.`", array_map([$adapter, "escape_string"], explode(".", $t)))."`";
            }, 
            array_map("trim", array_filter(explode(",", $t)))));
    }
    ///<summary></summary>
    ///<param name="options"></param>
    /**
    * 
    * @param mixed $options
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetExtraOptions($options, $ad){
        $defOrder = "ASC";
        $q="";
        $options=!is_object($options) ? (object)$options: $options;
        $optset = [];
        $columns = "*";
        $query = "";
        $flag = "";
        $join = "";
		$_express = function ($v, & $query ) use($defOrder){
            $a = 0;
            foreach($v as $s){
                $s_t = explode("|", $s);
                if ($a)
                $query.=",";
                $query.= $s_t[0] ." ".strtoupper(igk_getv($s_t, 1, $defOrder));
                $a = 1;
            }
        };
        $_buildjoins = function ($v, & $join){
            if (!is_array($v)){
                die("join options not an array");
            }
            foreach($v as $m){ 
                $t = "INNER JOIN";
                if (!is_array($m)){
                    die("expected array list in joint: ".$m);
                }
                $tab = array_keys($m)[0];
                $vv = array_values($m)[0];

                if (isset($vv["type"])){
                    $t = $vv["type"];
                }
                $join .= $t. " ";                
                $join .= $tab;
                if (isset($vv[0]))
                    $join .= " on (".$vv[0].") ";  
            }
        };
		foreach(igk_array_extract($options, "Distinct|GroupBy|OrderBy|OrderByField|Columns|Limit|Joins") as $k=>$v){
            if (!$v)continue;
                switch($k){
                    case queryConstant::Distinct: 
                        $flag .= "DISTINCT ";
                        
                    break;
                    case queryConstant::Limit:
					    $optset[$k] = 1;
                        $h = 1;
                        if (is_array($v)){
                            if (isset($v["start"]) && isset($v["end"])){
                            $s = $v["start"];
                            $e = $v["end"];
                            $h = $s.", ".$e;
                            } else if (count($v)==1){
                                $h = $v[0];
                            } else if (count($v)==2){
                                $h = $v[0].",".$v[1];
                            }
                        } else {
                            if (is_numeric($v))
                                $h = $v;
                        }
                        $query.= " Limit ".$h;
                    break;
                    case queryConstant::Joins:  
                        $_buildjoins($v, $join);
                    break;
                    case queryConstant::GroupBy: 
					    $optset[$k] = 1;
                        if ($ad->supportGroupBy()){
                            $query .= " GROUP BY ";
                            $a = 0;
                            foreach($v as $s){
                                $s_t = explode("|", $s);
                                if ($a)
                                $query.=",";
                                $query.= $s_t[0];
                                $a = 1;
                            }
                        }
                    break;
                    case "OrderByField":
                        break;
                    case "OrderBy":
                        // igk_wln_e("order by", $v);
                        if (is_array($v)){                       
                            $torder = "";
                            $c = "";
                            foreach($v as $s){
                                
                                $g = explode("|", $s);
                                $type = igk_getv($g, 1, $defOrder);


                                $c.= self::Key($g[0], $ad,  "".$type.", ");
                                // $c = "`".implode("` ".$type.", `",
                                // );         
                                
                                // igk_wln(
                                //     array_map(function($t) use($ad){
                                //         return "`".implode("`.`", array_map([$ad, "escape_string"], explode(".", $t))) ."`";
                                //     },
                                //    // self::Key($t, $ad)
                                //     array_map("trim", array_filter(explode(",", "basic.ok")))),

                                //     self::Key("info.BASIC, basic, info", $ad)
                                // );
                                //igk_wln_e("done", $c); // $c,$g);
                                // array_map( function($t)use($ad){                               
                                //     return self::Key($t, $ad);
                                // },
                                // //array_map([$ad, "escape_string"],
                                // array_map("trim", explode(",", $g[0]))));
                                if (!empty($torder))
                                    $torder .=", ";
                                $torder.= $c." ".$type;
                                
                            }
                            igk_ilog("torder: ".$torder);                         
                            $optset[$k] = $torder;

                        } else {
                            igk_die("OrderBy must be an array ['Colum,...|Type']");
                        }
                    //     $query .= " ORDER BYLL ";
                    //     $_express($v, $query);
                    break;
                    case "Columns":
                        //["func" => "CONCAT", "args"=> ["nom", "prenom"], "as" => "Charles"]
                        $a = 0;
                        $columns = "";
                        foreach($v as $s){
                            if ($a){
                                $columns.=", ";
                            }
                            if (is_string($s)) {
                                $columns.= $ad->escape_string($s);
                            } elseif (is_object($s)){
                                // object of db expression;
                                if ($s instanceof IGKDbExpression){
                                    $columns.= $s->getValue();
                                } else {
                                    throw new IGKException(__("objet not a DB Expression"));
                                }
                            }
                            elseif(isset($s["key"])){
                                $columns.= $ad->escape_string($s["key"]);
                            }
                            elseif(isset($s["func"]) && isset($s["args"])){
                                if(is_array($s["args"])) {
                                    $columns.= $s["func"] . "(" . implode(', ', $s["args"]) . ")";
                                } else {
                                    $columns.= $s["func"] . "(" . $s["args"] . ")";
                                }
                            } elseif (is_array($s) && (count($s)==1) && is_string($s[0])){
                                $columns .= $s[0];
                            }
                            if ($c = igk_getv($s,"as")){
                                $columns  .= " As ".$c;
                            }
                            $a = 1;
                        }
                    break;
                }
            }

         
		if (! isset($optset["OrderBy"])){
             
            if (isset($options->Sort) && isset($options->SortColumn)){
                $v = strtoupper($options->Sort);
                if (strpos("ASC|DESC", $v)!== false){
                    $q .=" ORDER BY `".igk_db_escape_string($options->SortColumn)."` ".$v;
                    $optset["OrderBy"] = 1;    
                }
            }else {
             
                if (isset($options->SortColumn) &&  @is_array($options->SortColumn)){
                    foreach($options->SortColumn as $r=>$v){
                        $v = strtoupper($v);
                        if (strpos("ASC|DESC", $v)!== false){
                        $q .=" ORDER BY `".igk_db_escape_string($r)."` ".$v;
                        $optset["OrderBy"] = 1;
                        }
                    }
                }
		    }
        }
        else {
            $q.= "ORDER BY ".$optset["OrderBy"];
        }

		if (!isset($optset["Limit"])){
        if(is_numeric($limit=igk_getv($options, "Limit"))){
            $lim=igk_db_escape_string($limit);
            if(is_numeric($offset=igk_getv($options, "LimitOffset"))){
                $lim=igk_db_escape_string($offset).", ".$lim;
            }
            $q .= " Limit ".$lim ;
        }
        }
        
        return (object)["columns"=>$columns, "join"=>$join, "extra"=> $q. $query, "flag"=>$flag];
    }
    ///<summary></summary>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $b
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetFCN($b){
        return strtoupper($b);
    }
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="values"></param>
    ///<param name="tableInfo" default="null"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $values
    * @param mixed $tableInfo the default value is null
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetInsertQuery($tbname, $values, $tableInfo=null){
        if(!$values)
            return null;
        $rtbname=igk_mysql_db_tbname($tbname);
        $query="INSERT INTO `".$rtbname."`(";
        $v_v="";
        $v_c=0; 
     
        $tvalues= self::GetValues($values, $tableInfo); 

        foreach($tvalues as $k=>$v){
            if($v_c != 0){
                $query .= ",";
                $v_v .= ",";
            }
            else
                $v_c=1;
            $query .= "`".igk_db_escape_string($k)."`";
            if($tableInfo){
                // | get value 
                $v_v .= self::GetValue($rtbname, $tableInfo, $k, $v);
            }
            else{
                if($v === null){
                    $v_v .= "NULL ";
                }
                else if(is_object($v) && method_exists($v, "getValue")){
                    $v_v .= "".$v->getValue();
                }
                else
                    $v_v .= "'".igk_db_escape_string($v)."'";
            }

        }
        $query .= ") VALUES (".$v_v.");"; 

        return $query;
    }
    ///<summary>get sql select query</summary>
    /**
    * get sql select query
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetSelectQuery($ad, $tbname, $where=null, $options=null){
        $q="";
        if($options == null){
            $options=igk_db_create_opt_obj();
        }
        else if(is_callable($options)){
            $g=igk_db_create_opt_obj();
            $c= IGKQueryResult::CALLBACK_OPTS;
            $g->$c=$options;
            $options=$g;
        }
        if($where != null){
			if (!is_numeric($where) && is_string($where)){
				$q .= " WHERE ".$where;
			}else{
				$operand=igk_getv($options, "Operand", "AND");
				$q .= " WHERE ".IGKSQLQueryUtils::GetCondString($where, $operand, $ad);
			}
        }
        $tq = IGKSQLQueryUtils::GetExtraOptions($options, $ad);
        $column = $tq->columns;
        if (!empty($tq->join)){
            $q = " ".$tq->join . " ".$q;
        }
        if (isset($tq->extra)){
            $q .=" ".$tq->extra;
        }
        $flag = "";
        if (igk_environment()->querydebug){
            $flag = igk_getv($tq, "flag"); 
        }
        $q ="SELECT {$flag}{$column} FROM `".igk_mysql_db_tbname($tbname)."`".rtrim($q).";";// ".$tq->extra;
        return $q;
    }
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="values"></param>
    ///<param name="condition" default="null"></param>
    ///<param name="tableInfo" default="null"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $values
    * @param mixed $condition the default value is null
    * @param mixed $tableInfo the default value is null
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetUpdateQuery($tbname, $values, $condition=null, $tableInfo=null){
        $rtbname=igk_mysql_db_tbname( $tbname);
        $out="";
        $out .= "UPDATE `".$rtbname."` SET ";
        $t=0;
        $v_condstr = "";
        $id=$condition == null ? igk_getv($values, IGK_FD_ID): null;

        if(($id == null) && is_integer($condition)){
            $id=$condition;
        }
        $tableInfo=$tableInfo ?? igk_db_getdatatableinfokey($tbname);
        $tvalues= self::GetValues($values, $tableInfo, 1);
      

        foreach($tvalues as $k=>$v){
            if($id && ($k == IGK_FD_ID) || (strpos($k, ":") !== false))
                continue;
            if($t == 1)
                $out .= ",";
            if($tableInfo){
                $out .= "`".igk_db_escape_string($k)."`=".self::GetValue($rtbname, $tableInfo, $k, $v, "u");
            }
            else{
                $out .= "`".igk_db_escape_string($k)."`=";
                if(!empty($v) && is_integer($v)){
                    $out .= $v;
                }
                else
                    $out .= "'".igk_db_escape_string($v). "'";
            }
            $t=1;
        }


        if($condition){
            if(is_array($condition)){
                $v_condstr .= self::GetCondString($condition);
            }
            else if(is_string($condition) && !preg_match("/^[0-9]+$/i", $condition))
                $v_condstr .=$condition;
            else if(is_integer($condition) || preg_match("/^[0-9]+$/i", $condition))
                $v_condstr .= "`clId`='".igk_db_escape_string($condition)."'";
            else{
                igk_wln("data is ".$condition. " ".strlen($condition). " ::".is_integer((int)$condition));
            }
        }
        else if($id){
            $v_condstr .= "`clId`='".igk_db_escape_string($id)."'";
        }
        if (!empty($v_condstr)){
            $out.= " WHERE ".$v_condstr;
        }

        return $out;
    }
    /**
     * @deprecated since 11.7.0.0519 use SQLGrammar
     */
    protected static function IsAllowedDefValue($def, $type, $value){
        if ($b = igk_getv($def, strtoupper($type))){
            if (isset($b[strtoupper($value)])){
                return true;
            }
        }  
        return false;
    }
    /**
     * @deprecated since 11.7.0.0519 use SQLGrammar
     */
    private static function GetExpressQuery($express, $tinf){
        $b = explode(".", $express);
        $sl = [$b[0]=>$b[1]]; 
        if ($b=self::GetSelectQuery(self::$sm_adapter, $tinf->clLinkType, $sl, ["Columns"=>[$tinf->clLinkColumn ?? IGK_FD_ID]])){
            return $b = "(".rtrim(trim($b),";").")";
        }
        return null;
    }
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="tableInfo"></param>
    ///<param name="columnName"></param>
    ///<param name="value"></param>
    ///<param name="type" default="i"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $tableInfo
    * @param mixed $columnName
    * @param mixed $value
    * @param mixed $type the default value is "i"
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public static function GetValue($tbname, $tableInfo, $columnName, $value, $type="i"){
        $tinf=igk_getv($tableInfo, $columnName);        
        $def = static::AllowedDefValue();

        if($tinf === null){            
            igk_die("can't get column: {$columnName} info in table: {$tbname}");
        }  
        if (!empty($tinf->clLinkType) && is_string($value) && (strpos($value,".")!==false)){            
            if ($v = self::GetExpressQuery($value, $tinf)){
                return $v;
            }
        }
      
        
        if((is_integer($value))){
            if (($value === 0) && !empty($tinf->clLinkType)&& !$tinf->clNotNull){                 
                return 'NULL'; 
            }
            if (($value === 0) && !empty($tinf->clLinkType) && $tinf->clNotNull){
                // select default link expression
                if ($express = $tinf->clDefaultLinkExpression){
                    if ($v = self::GetExpressQuery($express, $tinf)){
                        return $v;
                    }                  
                }
            }            
            if ($tinf->clType =="Enum"){
                return "'".igk_db_escape_string($value)."'";
            }
            return $value;
        }
        $of = 'NULL';
        if(($type == "i") && $tinf->clInsertFunction){
            $of=$tinf->clInsertFunction;
        }
        else if(($type != "i") && $tinf->clUpdateFunction){
            $of=$tinf->clUpdateFunction;
        }
        
        if(($value === null) || ($value == $tinf->clDefault) || (($value !== '0') && empty($value))){
            if($tinf->clNotNull){
              
                if($tinf->clDefault !== null){
                    if (is_integer($tinf->clDefault)){
                        return $tinf->clDefault;
                    }else { 
                        if(self::IsAllowedDefValue($def,$tinf->clType, $tinf->clDefault)){
                            return $tinf->clDefault;
                        }
                       
                        return "'".igk_db_escape_string($tinf->clDefault)."'";
                    }
                }
                
                switch(strtolower($tinf->clType)){
                    case 'int':
                    case 'integer':
                    case 'float':
                    case 'double':
                    if(!$tinf->clNotNull){
                        return 'NULL';
                    }
                    return "0";
                    case "datetime":
                    case "date":
                    case "time":
                    return "NOW()";
					default: 
                    if (is_string($value)){
                         return "''";
                    }                  
                    return igk_str_format($of, $value);
                }
            }
            // + allow null value
            

            if(preg_match("/(date(time)?|timespan)/i", $tinf->clType)){                
                if(strtolower($of) == 'now()'){
                    switch(strtolower($tinf->clType)){
                        case "datetime":
                        case "timespan":
                        return "'".igk_db_escape_string(igk_mysql_datetime_now())."'";
                        case "date":
                        return "'".igk_db_escape_string(date("Y-m-d"))."'";
                        case "time":
                        return "'".igk_db_escape_string(date("H:i:s"))."'";
                    }
                }
                if ($value === 'NULL'){
                    $value = null;
                }
                if($tinf->clDefault && self::IsAllowedDefValue($def,$tinf->clType, $tinf->clDefault)){
                    return $tinf->clDefault;
                }
            }
            
           
            if ($of!='NULL'){
                $gt=explode("(", $of);
                $pos=strtoupper(array_shift($gt));
                if(!$tinf->clNotNull){
                    if(in_array($pos, self::AVAIL_FUNC)){
                    
                        return igk_str_format($of, $value);
                    } 
                }
            }
            if ($value && ($value == $tinf->clDefault)){
                return "'".igk_db_escape_string($value)."'";
            }
            return 'NULL';
        }
        
        if(empty($value)){
            if(!$tinf->clNotNull || ($tinf->clAutoIncrement && strtolower($tinf->clType) == 'int'))
                return 'NULL';
        }
        if(is_object($value)){
            if(igk_reflection_class_implement($value, 'IIGKHtmlGetValue')){
                return $value->getValue(
                    (object)[
                        "grammar"=>null,
                        "type"=>"insert"
                    ]
                );
            }
        }
        if($tinf){
            $of=$type == "i" ? $tinf->clInsertFunction: $tinf->clUpdateFunction;
            if(!preg_match("/date(time)?/i", $tinf->clType) && !empty($of)){
                $gt=explode("(", $of);
                $pos=strtoupper(array_shift($gt)); 
                if ($pos == "IGK_PASSWD_ENCRYPT"){
                    return "'".igk_db_escape_string(IGKSysUtil::Encrypt($value))."'";
                }
                return self::GetFCN($pos)."('".igk_db_escape_string($value)."')";
            }
        }       
        return "'".igk_db_escape_string($value)."'";
    }
    ///<summary></summary>
    ///<param name="values"></param>
    ///<param name="tableInfo"></param>
    ///<param name="update"></param>
    /**
    * 
    * @param mixed $values
    * @param mixed $tableInfo
    * @param mixed $update the default value is 0
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    private static function GetValues($values, $tableInfo, $update=0){
        $tvalues=igk_createobj();

		if (is_object($values) && method_exists($values,"toArray")){
			$values = $values->toArray();
		}
        if(is_array($values))
            $values=(object)$values;
        if($tableInfo){
            $filter = igk_environment()->mysql_query_filter;
            foreach($tableInfo as $k=>$v){
                if ($v->clIsPrimary && $filter){
                    continue;
                }

                if(!property_exists($values, $k)){
                    if ($update){
                        if ($v->clLinkType||
                            !$v->clUpdateFunction||
                            !preg_match("/(date|datetime)/i", $v->clType)){
                                continue;
                        }
                    } 
                    $tvalues->$k=null;
                }
                else{
                    $tvalues->$k=$values->{$k};
                }
            }
        }
        else{
            $tvalues=$values;
        }

        return $tvalues;
    }
    ///<summary></summary>
    /**
    * 
    */
    protected function initConfig(){}
    ///<summary></summary>
    ///<param name="tbname"></param>
    ///<param name="values"></param>
    ///<param name="tableinfo" default="null"></param>
    /**
    * 
    * @param mixed $tbname
    * @param mixed $values
    * @param mixed $tableinfo the default value is null
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    public function insert($tbname, $values, $tableinfo=null){
        $this->dieNotConnect();
        $this->initConfig();
        $query=IGKSQLQueryUtils::GetInsertQuery($tbname, $values, $tableinfo);
        $t=$this->sendQuery($query);
        if($t){
            if(is_object($values)){
                if(igk_getv($values, IGK_FD_ID) == null)
                    $values->clId=$this->lastId();
            }
            return true; 
        }
        else{
            $error="Query Insert Error : ".igk_mysql_db_error(). " : ".$query;
            igk_debug_wln($error);
            igk_db_error($error);
        }
        return false;
    }
    ///<summary></summary>
    ///<param name="t"></param>
    /**
    * 
    * @param mixed $t
    * @deprecated since 11.7.0.0519 use SQLGrammar
    */
    private static function IsNumber($t){
        return preg_match("/(int|float|decimal)/i", $t);
    }
}
///<summary>Represent default script loader </summary>
/**
* Represent default script loader
*/
class IGKScriptLoader{
    var $ctrl;
    var $target;
    ///<summary></summary>
    ///<param name="controller"></param>
    ///<param name="cachetarget"></param>
    /**
    * 
    * @param mixed $controller
    * @param mixed $cachetarget
    */
    public function __construct($controller, $cachetarget){
        $this->ctrl=$controller;
        $this->target=$cachetarget;
    }
    ///<summary></summary>
    ///<param name="doc"></param>
    ///<param name="folder"></param>
    ///<param name="created"></param>
    /**
    * 
    * @param mixed $doc
    * @param mixed $folder
    * @param mixed $created
    */
    public function Load($doc, $folder, $created){
        $is_prod=igk_environment()->is("production");
        $files=igk_io_getfiles($this->ctrl->getScriptDir(), "/\.js$/");
        if(!$is_prod){
            $cache_js=array();
            foreach($files as $f){
                $doc->addTempScript($f);
                $cache_js[$f]=$f;
            }
        }
        else{
            $cachedir=igk_io_cacheddist_jsdir();
            $file=$cachedir.$this->target;
            if(!file_exists($file)){
                $out=igk_js_dist_scripts($files);
                igk_io_w2file($file, igk_ob_get_func("igk_zip_output", [$out, 0, 0]));
            }
            $doc->addTempScript($file);
        }
    }
}
///<summary> IGKServerInfo: Represent the server utility method</summary>
/**
*  IGKServerInfo: Represent the server utility method
*/
final class IGKServerInfo {
    ///<summary></summary>
    /**
    * 
    */
    public static function IsIGKDEVSERVER(){
        $r=igk_server()->HTTP_USER_AGENT;
        if(strstr($r, IGK_SERVERNAME)){
            return true;
        }
        return false;
    }
    ///get if this server runing on the loal server
    /**
    */
    public static function IsLocal(){
        $v_saddr=self::ServerAddress();
        $v_srddr=self::RemoteIp();
        $v=($v_srddr == "::1") || ($v_saddr == $v_srddr) || preg_match("/^127\.(.)/i", $v_saddr);
        return $v;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function RemoteIp(){
        return igk_gettv(igk_server()->REMOTE_ADDR, null);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function ServerAddress(){
        return igk_gettv(igk_getv($_SERVER, "SERVER_ADDR"), null);
    }
}
///<summary>represent the filesession handler</summary>
/**
* represent the filesession handler
*/
class IGKSessionFileSaveHandler{
    var $savePath;
    var $sessName;
    ///<summary>.ctr</summary>
    /**
    * .ctr
    */
    protected function __construct(){}
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    private function _getFile($id){
        return igk_html_uri(implode(DIRECTORY_SEPARATOR, [$this->savePath, IGK_SESSION_FILE_PREFIX.$id]));
    }
    ///<summary></summary>
    /**
    * 
    */
    public function close(){
        return true;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function destroy($id){
        if(file_exists($f=$this->_getFile($id))){
            unlink($f);
        }
        return true;
    }
    ///<summary></summary>
    ///<param name="maxlifetime"></param>
    /**
    * 
    * @param mixed $maxlifetime
    */
    public function gc($maxlifetime){
        foreach(glob($this->savePath.DIRECTORY_SEPARATOR.IGK_SESSION_FILE_PREFIX."*") as  $v){
            if(filemtime($v) + $maxlifetime < time() && file_exists($v)){
                unlink($v);
            }
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function Init(){
        if(!defined("IGK_SESS_DIR")){
            return;}
        $handler=new IGKSessionFileSaveHandler();
        session_set_save_handler([$handler, "open"], [$handler, "close"], array($handler, 'read'), array($handler, 'write'), array($handler, 'destroy'), array($handler, 'gc'));
        register_shutdown_function('session_write_close');
    }
    ///<summary></summary>
    ///<param name="savepath"></param>
    ///<param name="sessname"></param>
    /**
    * 
    * @param mixed $savepath
    * @param mixed $sessname
    */
    public function open($savepath, $sessname){
        if(defined("IGK_SESS_DIR")){
            $savepath=IGK_SESS_DIR;
        }
        $this->savePath=$savepath;
        $this->sessName=$sessname;
        return IGKIO::CreateDir($this->savePath);
    }
    ///<summary></summary>
    ///<param name="id"></param>
    /**
    * 
    * @param mixed $id
    */
    public function read($id){
        if(file_exists($f=$this->_getFile($id))){
            return file_get_contents($f);
        }
        return (string)null;
    }
    ///<summary></summary>
    ///<param name="id"></param>
    ///<param name="data"></param>
    /**
    * 
    * @param mixed $id
    * @param mixed $data
    */
    public function write($id, $data){
        $f=$this->_getFile($id);
        igk_io_w2file($f, $data);
        return true;
    }
}
///<summary>stppre setting constant</summary>
/**
* stppre setting constant
*/
class IGKSettingConsts{
    const CookieWarning=1;
}
///<summary>uses to sort value contains in tab by attribute keys</summary>
/**
* uses to sort value contains in tab by attribute keys
*/
final class IGKSorter {
    var $asc;
    var $key;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct(){
        $this->asc=true;
    }
    ///<summary></summary>
    ///<param name="tab" ref="true"></param>
    ///<param name="key"></param>
    ///<param name="asc" default="true"></param>
    ///<param name="funcname"></param>
    /**
    * 
    * @param mixed * $tab
    * @param mixed $key
    * @param mixed $asc the default value is true
    * @param mixed $funcname
    */
    private static function __SortValue(& $tab, $key, $asc, $funcname){
        $t=new IGKSorter();
        $t->key=$key;
        $t->asc=$asc;
        if(is_array($tab)){
            usort($tab, array($t, $funcname));
        }
        else{
            if(method_exists(get_class($tab), "SortValueBy")){
                $tab->SortValueBy($key, $asc, array($t, $funcname));
            }
        }
        return $tab;
    }
    ///<summary></summary>
    ///<param name="tab" ref="true"></param>
    ///<param name="key" default="null"></param>
    /**
    * 
    * @param mixed * $tab
    * @param mixed $key the default value is null
    */
    public function Sort(& $tab, $key=null){
        if(is_array($tab)){
            usort($tab, array($this, "SortValue"));
        }
        else{
            if(method_exists(get_class($tab), "SortValueBy")){
                $tab->SortValueBy($this->key);
            }
        }
        if($key){
            $b=array();
            foreach($tab as $v){
                $b[igk_getv($v, $key)
                ]=$v;
            }
            $tab=$b;
        }
    }
    ///<summary></summary>
    ///<param name="tab"></param>
    ///<param name="key"></param>
    ///<param name="asc" default="true"></param>
    /**
    * 
    * @param mixed $tab
    * @param mixed $key
    * @param mixed $asc the default value is true
    */
    public static function SortByDisplay($tab, $key, $asc=true){
        return self::__SortValue($tab, $key, $asc, "SortKeyValue");
    }
    ///<summary></summary>
    ///<param name="tab"></param>
    ///<param name="key"></param>
    ///<param name="asc" default="true"></param>
    /**
    * 
    * @param mixed $tab
    * @param mixed $key
    * @param mixed $asc the default value is true
    */
    public static function SortByValue($tab, $key, $asc=true){
        return self::__SortValue($tab, $key, $asc, "SortValue");
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public function SortKeyValue($a, $b){
        $k=$this->key;
        $s1=strtolower(__($a->$k));
        $s2=strtolower(__($b->$k));
        $i=strcmp($s1, $s2);
        return $i;
    }
    ///<summary></summary>
    ///<param name="a"></param>
    ///<param name="b"></param>
    /**
    * 
    * @param mixed $a
    * @param mixed $b
    */
    public function SortValue($a, $b){
        $tk=$this->key;
        if(is_string($tk))
            $tk=array($tk=>$this->asc);
        $i=0;
        $o=0;
        $op=0;
        foreach($tk as $k=>$asc){
            $s1=
            $s2=null;
            if(is_object($a) && is_object($b)){
                $s1=strtolower(igk_getv($a, $k, ''));
                $s2=strtolower(igk_getv($b, $k, ''));
            }
            else{
                $s1=strtolower(igk_getv($a, $k, ''));
                $s2=strtolower(igk_getv($b, $k, ''));
            }
            if(is_integer($s1) && is_integer($s2)){
                $i=strnatcmp($s1, $s2);
            }
            else
                $i=strcmp($s1, $s2);
            if(($i != 0) && (!$asc)){
                $i *= -1;
            }
            if($i == 0){
                break;
            }
            $o=$i;
            $op=1;
        }
        return $o;
    }
}
///<summary>represent a string utility class</summary>
/**
* represent a string utility class
*/
class IGKString{
    ///<summary></summary>
    ///<param name="text"></param>
    ///<param name="pattern"></param>
    /**
    * 
    * @param mixed $text
    * @param mixed $pattern
    */
    public static function Contains($text, $pattern){
        if(!empty($pattern))
            return (strstr($text, $pattern) != null);
        return true;
    }
    ///<summary></summary>
    ///<param name="chaine"></param>
    ///<param name="pattern"></param>
    /**
    * 
    * @param mixed $chaine
    * @param mixed $pattern
    */
    public static function EndWith($chaine, $pattern){
        return igk_str_endwith($chaine, $pattern);
    }
    ///<summary></summary>
    ///<param name="s"></param>
    /**
    * 
    * @param mixed $s
    */
    public static function Format($s){
        $c=preg_match_all("/\{(?P<value>[0-9]+)\}/i", $s, $match);
        if($c > 0){
            $args=array_slice(func_get_args(), 1);
            for($i=0; $i < $c; $i++){
                $index=$match["value"][$i];
                if(is_numeric($index)){
                    if(isset($args[$index])){
                        $s=str_replace($match[0][$i], IGKHtmlUtils::GetValue($args[$index]), $s);
                    }
                }
            }
        }
        return $s;
    }
    ///<summary></summary>
    ///<param name="chaine"></param>
    ///<param name="research"></param>
    ///<param name="offset"></param>
    //@chaine : string where to operate
    /**
    * 
    * @param mixed $chaine
    * @param mixed $research
    * @param mixed $offset the default value is 0
    */
    public static function IndexOf($chaine, $research, $offset=0){
        if(empty($chaine) || empty($research))
            return -1;
        $i=strpos($chaine, $research, $offset);
        if($i === false)
            return -1;
        return $i;
    }
    ///<summary></summary>
    ///<param name="tab"></param>
    ///<param name="separator" default=","></param>
    ///<param name="key" default="true"></param>
    /**
    * 
    * @param mixed $tab
    * @param mixed $separator the default value is ","
    * @param mixed $key the default value is true
    */
    public static function Join($tab, $separator=",", $key=true){
        $s=IGK_STR_EMPTY;
        $t=0;
        if($tab){
            foreach($tab as $k=>$v){
                if($t == 1)
                    $s .= $separator;
                if($key)
                    $s .= $k;
                else
                    $s .= "".$v;
                $t=1;
            }
        }
        return $s;
    }
    ///<summary></summary>
    ///<param name="chaine"></param>
    ///<param name="pattern"></param>
    /**
    * 
    * @param mixed $chaine
    * @param mixed $pattern
    */
    public static function StartWith($chaine, $pattern){
        return (self::IndexOf($chaine, $pattern) == 0);
    }
    ///<summary></summary>
    ///<param name="chaine"></param>
    ///<param name="start"></param>
    ///<param name="length" default="null"></param>
    //@personal sub
    /**
    * 
    * @param mixed $chaine
    * @param mixed $start
    * @param mixed $length the default value is null
    */
    public static function Sub($chaine, $start, $length=null){
        if($length){
            return substr($chaine, $start, $length);
        }
        else
            return substr($chaine, $start);
    }
    ///<summary></summary>
    ///<param name="chaine"></param>
    /**
    * 
    * @param mixed $chaine
    */
    public static function Trim($chaine){
        return trim($chaine);
    }
}
///<summary>symbolic file manager</summary>
/**
* symbolic file manager
*/
final class IGKSymbolDataResources{
    const URI="/Default/".IGK_RES_FOLDER."/Symbols/symbols.dat";
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public static function GetScriptValue($options=null){
        $uri=self::GetSystemSymbolUri();
        return <<<EOF
ns_igk.readyinvoke('igk.gkds.symbolManager.load', '{$uri}','default');
EOF;
    }
    ///<summary></summary>
    ///<param name="options" default="null"></param>
    /**
    * 
    * @param mixed $options the default value is null
    */
    public static function GetSystemSymbolUri($options=null){
        $k=IGK_LIB_DIR.self::URI;
        $uri=null;
        if($options && ($options->Context == IGK_WEB_CONTEXT) && $options->Cache){
            $uri=igk_html_uri("./".igk_io_basepath($k));
        }
        else
            $uri=igk_io_baseuri($k);
        return $uri;
    }
}
///<summary>represent system cache</summary>
/**
* represent system cache
*/
abstract class IGKSysCache{
    static $LibFiles;
    ///<summary></summary>
    ///<param name="force" default="false"></param>
    /**
    * 
    * @param mixed $force the default value is false
    */
    public static function CacheLibFiles($force=false){
 
        $f=self::LibCacheFile();
        if(empty($f))
            return;
        $t=3600;
        $expire=time() - $t;
        $el=IGK_LF;
        if(!$force && file_exists($f) && (filemtime($f) > $expire)){
            return;
        }
        $data=IGK_STR_EMPTY;
        $dir=IGK_LIB_DIR; 
        $rdata = [];
        $src = "";
        if(!empty(self::$LibFiles)){
            foreach(self::$LibFiles as  $v){
                $v = igk_io_collapse_path($v);
                if (strpos($v, "%lib%")===0){
                    $src .= "require_once('".substr($v, 6)."');".$el;
                }else{

                    $data .= '\''.$v.'\','.$el;
                    $rdata[] = $v;
                }
                }
        }
        else{ 
            igk_die(__("lib caches is empty."));
        }
        $init='';
        $restore='';
        $phar=igk_phar_available() && strstr(IGK_LIB_DIR, Phar::running());
        if(!$phar){
            $init=<<<EOF
\$bck = getcwd();
chdir(IGK_LIB_DIR);  
EOF;
            $restore=<<<EOF
chdir(\$bck);
unset(\$bck);
EOF;
        }
        $date=igk_date_now();
        $out=<<<EOF
<?php
// Balafon lib cache - auto generate
// author: C.A.D BONDJE DOUE
// date : {$date}
${init}
${src}
\$g = [{$data}];
foreach(\$g as \$k){
    if (file_exists(\$c = igk_io_expand_path(\$k))){
        require_once(\$c);
    }
    else die("file not found: ".\$k);
}
${restore}
EOF;
        igk_io_w2file($f, $out);
 
        self::Init_CachedHook();
        if(function_exists("opcache_invalidate"))
            opcache_invalidate($f, true);

 
    }
    ///<summary>init cache folder hook</summary>
    /**
    * init cache folder hook
    */
    public static function Init_CachedHook($e=null){
        if(!file_exists($f=igk_io_cachedir()."/.htaccess")){
            igk_io_w2file($f, "deny from all");
        }
    }
    ///<summary></summary>
    /**
    * 
    */
    private static function LibCacheFile(){
        return igk_io_syspath(IGK_FILE_LIB_CACHE);
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function LoadCacheLibFiles(){
        $f=self::LibCacheFile();
        $v=false;
        if(!defined("IGK_NO_CACHE_LIB") && file_exists($f)){
            igk_invalidate_opcache($f);
            try { 
                include_once($f);
                $v=true;
                igk_get_env_lib_loaded(true);
            }
            catch(Exception $ex){
                igk_ilog("[ ".__FUNCTION__." ]- can't load files...[".$f."]".$ex->getMessage());
                igk_show_exception($ex);
                igk_wln_e("LoadLibError", $ex->getMessage());
            }
        }
        return $v;
    }
}
///<summary>Represente class: IGKToolHost</summary>
/**
* Represente IGKToolHost class
*/
class IGKToolHost{
    private $_tools;
    ///<summary></summary>
    /**
    * 
    */
    public function __construct($tab){
        $this->_tools=$tab;
    }
    ///<summary></summary>
    /**
    * 
    */
    public function getTools(){
        return $this->_tools;
    }
    ///<summary></summary>
    ///<param name="ctrl"></param>
    /**
    * 
    * @param mixed $ctrl
    */
    public function register($ctrl){
        $this->_tools->setFlag($ctrl->getName(), 1);//$ctrl;
    }
}
///<summary>Represente class: IGKUserAgent</summary>
/**
* Represente IGKUserAgent class
*/
class IGKUserAgent{
    const REGEX_ANDROID="android";
    const REGEX_ANDROID_BUILDNUMBER="android\s+(?P<version>[0-9\.]+);\s*(?P<model>[\w0-9\.]+)\s+build\/(?P<buildnumber>[a-z0-9\.]+)";
    const REGEX_ANDROID_MODELNUMBER="android\s+(?P<version>[0-9\.]+);\s*(?P<model>[\w0-9\.]+)\s*";
    const REGEX_ANDROID_VERSION="android\s+(?P<version>[0-9\.]+);";
    ///<summary></summary>
    /**
    * 
    */
    public static function Agent(){
        return igk_server()->HTTP_USER_AGENT;
    }
    ///<summary></summary>
    ///<param name="callback"></param>
    /**
    * 
    * @param mixed $callback
    */
    public static function CheckSafariVersion($callback){
        $v=self::GetSafariVersion();
        if($v){
            $t=explode(".", $v);
            return $callback($t);
        }
        return -1;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAndroidBuildNumber(){
        if(self::IsAndroid()){
            $regex="/".self::REGEX_ANDROID_BUILDNUMBER."/i";
            $tab=array();
            preg_match_all($regex, self::Agent(), $tab);
            return $tab["buildnumber"][0];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAndroidModel(){
        if(self::IsAndroid()){
            $regex="/".self::REGEX_ANDROID_MODELNUMBER."/i";
            $tab=array();
            preg_match_all($regex, self::Agent(), $tab);
            return $tab["model"][0];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetAndroidVersion(){
        if(self::IsAndroid()){
            $regex="/".self::REGEX_ANDROID_VERSION."/i";
            $tab=array();
            preg_match_all($regex, self::Agent(), $tab);
            return $tab["version"][0];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetChromeVersion(){
        if(self::IsChrome()){
            $v_r="/Chrome\/\s*(?P<version>[0-9\.]+)\s/i";
            $tab=array();
            preg_match_all($v_r, self::Agent(), $tab);
            return $tab["version"][0];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetDefaultLang(){
        static $deflang=null;
        if($deflang == null){
            $regex="/^(?P<name>\w+)(,*)/i";
            $tab=array();
            $r=igk_server()->HTTP_ACCEPT_LANGUAGE;
            if($r){
                preg_match_all($regex, $r, $tab);
                $deflang=$tab["name"][0];
            }
            $deflang=IGK_DEFAULT_LANG;
        }
        return $deflang;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function GetSafariVersion(){
        if(self::IsSafari()){
            $v_r="/Safari\/\s*(?P<version>[0-9\.]+)(\s*)/i";
            $tab=array();
            preg_match_all($v_r, self::Agent(), $tab);
            return $tab["version"][0];
        }
        return null;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsAndroid(){
        $regex="/".self::REGEX_ANDROID."/i";
        return preg_match($regex, self::Agent());
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsChrome(){
        if(strstr(self::Agent(), "Chrome"))
            return true;
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsIE(){
        return preg_match("#(MSIE|Trident/|Edge/)#i", self::Agent());
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsIOS(){
        return false;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsMobileDevice(){
        return self::IsAndroid();
    }
    ///<summary>Is Firefox modzilla</summary>
    /**
    * Is Firefox modzilla
    */
    public static function IsMod(){
        if(strstr(self::Agent(), "Firefox"))
            return true;
        return false;
    }
    ///<summary>Old safari version</summary>
    /**
    * Old safari version
    */
    public static function IsOldSafariAgent(){
        $v=IGKUserAgent::CheckSafariVersion(function($t){
            return $t[0] < 600;
        });
        if($v === -1)
            return false;
        return $v;
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsSafari(){
        return !self::IsChrome() && !self::IsMod() && strstr(self::Agent(), "Safari");
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsXBox(){
        $regex="/xbox/i";
        return preg_match($regex, self::Agent());
    }
    ///<summary></summary>
    /**
    * 
    */
    public static function IsXBoxOne(){
        $regex="/xbox one/i";
        return preg_match($regex, self::Agent());
    }
}
///<summary>Represente class: IGKValueEntryCallback</summary>
/**
* Represente IGKValueEntryCallback class
*/
class IGKValueEntryCallback implements IIGKHtmlGetValue{
    private $_sourcefile;
    private $callback;
    private $params;
    ///<summary></summary>
    ///<param name="callback"></param>
    ///<param name="params"></param>
    ///<param name="declaredfile" default=""></param>
    /**
    * 
    * @param mixed $callback
    * @param mixed $params
    * @param mixed $declaredfile the default value is ""
    */
    public function __construct($callback, $params, $declaredfile=""){
        $this->callback=$callback;
        $this->params=$params;
        $this->_sourcefile=$declaredfile;
    }
    ///<summary></summary>
    ///<param name="o" default="null"></param>
    /**
    * 
    * @param mixed $o the default value is null
    */
    public function getValue($o=null){
        $fc=$this->callback;
        return call_user_func_array($fc, array_merge([$o], $this->params));
    }
}
///<summary>represent a view action handler </summary>
/**
* represent a view action handler
*/
abstract class IGKViewActionHandler{}
///<summary>represnet xml node type</summary>
/**
* represnet xml node type
*/
final class IGKXMLNodeType{
    const CDATA=5;
    const COMMENT=3;
    const DOCTYPE=7;
    const ELEMENT=1;
    const ENDELEMENT=4;
    const NONE=-1;
    const PROCESSOR=2;
    const TEXT=6;
    ///<summary></summary>
    ///<param name="i"></param>
    /**
    * 
    * @param mixed $i
    */
    public static function GetString($i){
        switch($i){
            case self::NONE:
            return "NONE";
            case self::ELEMENT:
            return "ELEMENT";
            case self::PROCESSOR:
            return "PROCESSOR";
            case self::COMMENT:
            return "COMMENT";
            case self::ENDELEMENT:
            return "ENDELEMENT";
            case self::CDATA:
            return "CDATA";
            case self::TEXT:
            return "TEXT";
            case self::DOCTYPE:
            return "DOCTYPE";
        }
        return "UNKNOWN";
    }
}
///<summary>Represente class: IGKdbColumnDataType</summary>
/**
* Represente IGKdbColumnDataType class
*/
final class IGKdbColumnDataType {
    const DATE_TIME="Datetime";
    const DOUBLE_SINGLE="Double";
    const INT32="Int";
    const SINGLE="Float";
    const TEXT="Text";
    const VARCHAR="VarChar";
    ///<summary></summary>
    /**
    * 
    */
    public static function GetDbTypes(){
		static $t;
		if ($t===null)

        $t=array(
            self::VARCHAR=>self::VARCHAR,
            self::INT32=>self::INT32,
            self::TEXT=>self::TEXT,
            self::SINGLE=>self::SINGLE,
            self::DOUBLE_SINGLE=>self::DOUBLE_SINGLE,
            self::DATE_TIME=>self::DATE_TIME
        );
        return $t;
    }
}

///<summary>represent the base template class</summary>
/**
 * the base application template class
 */
abstract class IGKTemplateBase{    
}


function igk_sys_balafon_js($doc, $debug=false){
    $r = igk_io_cacheddist_jsdir();
    if (file_exists($f = $r."/balafon.js")){
        return file_get_contents($f);
    }
    //igk_wln_e("dist: ", $r);


    $c=$doc->ScriptManager->getMergedContent();
    $tassoc=$doc->ScriptManager->getAssoc();  
    // TASK : Render core js 
    $buri=igk_io_baseuri();
    $const="constant";
    $header  = "//author: C.A.D BONDJE DOUE".IGK_LF;
    $header .= "//libname: balafon.js".IGK_LF;
    $header .= "//version: {$const('IGK_BALAFON_JS_VERSION')}".IGK_LF;
    $header .= "//copyright: igkdev @ 2013 - ".date('Y').IGK_LF;
    $header .= "//license: //igkdev.com/balafon/balafonjs/license".IGK_LF;
    $header .= "//generate: ".date("Ymd H:i:s").IGK_LF;
    $header .= "\"use strict\";";
    $s=empty($c->data) ? "/* core script failed to load cache not provide. */": $c->data;
    $s=str_replace("\"use strict\";", "", $s);
    if (ob_get_level()>0)
        ob_clean();
    ob_start();
    $src = "";
    if($debug){
        $src = $header.$s;    }
    else{
        $src = $header.igk_js_minify($s);
    }
    ob_get_clean();
    igk_io_w2file($f, $src);
    return $src;
}

if(file_exists(($file=dirname(__FILE__)."/.igk.version.php"))){
    include($file);
}
unset($file);
define("IGK_BALAFON_JS_VERSION", "4.6.0.0408");
define("IGK_FRAMEWORK", "IGKDEV-WFM");
!defined("IGK_WEBFRAMEWORK") && define("IGK_WEBFRAMEWORK", "11.7");
!defined("IGK_VERSION") && define("IGK_VERSION", IGK_WEBFRAMEWORK.".0.0519");
define("IGK_AUTHOR", "C.A.D. BONDJE DOUE");
define("IGK_AUTHOR_CONTACT", "bondje.doue@igkdev.com");
define("IGK_AUTHOR_2", "R. TCHATCHO");
define("IGK_AUTHOR_CONTACT_2", "gerald.romeo@tbnsolaris.com");
define("IGK_AUTHORS", "C.A.D. BONDJE DOUE & R. TCHATCHO");
define("IGK_PLATEFORM_NAME", "BALAFON");
define("IGK_RELEASE_DATE", "08/04/2021");
define("IGK_START_DATE", "01/01/2013");
define("IGK_COPYRIGHT", "IGKDEV &copy; 2011-".date('Y')." all rights reserved");
define("IGK_WEB_SITE", "https://www.igkdev.com");
define("IGK_SCHEMA_NS", "https://schemas.igkdev.com/balafon");
define("IGK_DOMAIN", "igkdev.com");
define("IGK_LIB_DIR", str_replace('\\', '/', dirname(__FILE__)));
define("IGK_LIB_BIN", IGK_LIB_DIR."/bin/balafon");
define("IGK_LIB_CGI_BIN_DIR", IGK_LIB_DIR."/cgi-bin");
define("IGK_COMPANY", "igkdev");
define("IGK_CODE_NAME", "BALAFON");
define("IGK_BALAFON_JS", "balafonjs");
define("IGK_BALAFON_JS_CORE_FILE", IGK_LIB_DIR."/Scripts/igk.js");
define("IGK_LIB_FILE", __FILE__);
define("IGK_LIB_RUNFILE", IGK_LIB_DIR."/igk_run_script.php");
define("IGK_LIB_MODS_DIR", IGK_LIB_DIR."/Modules");
require_once(IGK_LIB_DIR."/igk_core.php");
include_once(IGK_LIB_DIR."/igk_config.php");
require_once(IGK_LIB_DIR."/igk_gd.php");
if (!defined("IGK_PDF_LIB") && file_exists($cf= igk_realpath(IGK_LIB_DIR."/../Fpdf/fpdf.php"))){
    define("IGK_PDF_LIB", $cf);
    unset($cf);
}


register_shutdown_function(igk_get_ns_func("igk_sys_shutdown_function"));
igk_register_autoload_class();
//+ auto register class 
class_exists(IGKXMLDataAdapter::class);

$g=set_error_handler(igk_get_ns_func('igk_sys_g_handle_error'));
if(igk_const_defined("IGK_LOCAL_DEBUGGING") == 1)
    igk_display_error(1);
unset($g);
require_once(IGK_LIB_DIR."/igk_constants.php");
IGKApp::InitStatic();
igk_init_html_basic_method();
igk_reg_class_instance_key(IGKHtmlScriptManager::class, 0xc0);
igk_reg_class_instance_key(IGKControllerManagerObject::class, 0xc1);

igk_reg_event("sys://event/onbeforeexit", "igk_session_block_exit_callback");
igk_sys_reg_controller(IGK_COMPONENT_MANAGER_CTRL, IGKComponentManagerCtrl::class);
igk_sys_reg_controller(IGK_NOTIFICATION_CTRL, IGKNotificationCtrl::class);
igk_sys_reg_controller(IGK_CSVLANGUAGE_CTRL, IGKCSVLanguageManagerCtrl::class);
igk_reg_ns("igk", IGK_WEB_SITE);
igk_reg_ns("gkds", IGK_WEB_SITE."/gkds/");
igk_reg_component_package("igk", [IGKHtmlItem::class, 'CreateElement']);
 
require_once(IGK_LIB_DIR.'/igk_html_func_items.php');
require_once(IGK_LIB_DIR.'/igk_html_items.php');
require_once(IGK_LIB_DIR.'/igk_html_utils.php');
require_once(IGK_LIB_DIR."/igk_app_ctrl.php");
include_once(IGK_LIB_DIR."/api/igk_api.php");
include_once(IGK_LIB_DIR."/.setting.global.pinc");

igk_reg_hook("SessionStart", function(){
    $b = new IGKSysDbController();
    if (($ad = igk_get_data_adapter($b)) && $ad->connect()){
        $table = IGKSysUtil::GetTableName("%prefix%sessions");
 
        if ($tbinfo = igk_getv($b->getDataTableInfo(), $table)){
            $tbinfo = igk_array_object_refkey(igk_getv($tbinfo, "ColumnInfo"), IGK_FD_NAME);
        }
        $srv = igk_server(); 
        $ad->insert($table, (object)[
            "clSessId"=>session_id(),
            "clSessIp"=>igk_server()->REMOTE_ADDR,
            "clSessLatitude"=>igk_server()->GEOIP_LATITUDE,
            "clSessLongitude"=>igk_server()->GEOIP_LONGITUDE,
            "clSessAgent"=>igk_server()->HTTP_USER_AGENT,
            "clSessCountryCode"=>igk_server()->GEOIP_COUNTRY_CODE,
            "clSessCountryName"=>igk_server()->GEOIP_COUNTRY_NAME,
            "clSessCityName"=>igk_server()->GEOIP_CITY,
            "clSessRegionName"=>igk_server()->GEOIP_REGION
        ], $tbinfo);
    }
});
igk_reg_event('sys://event/cachelibreload', function($o, $e){
    $file=igk_loadcontroller(IGK_LIB_DIR."/SysMods");
    if(!defined('IGK_NO_LIB_EXTENSION')){
        include(IGK_LIB_DIR."/igk_extensions.phtml");
    }
    $e->files=array_merge($e->files, $file);
});
igk_sys_reg_uri("^/favicon.ico[%q%]", function(){ 
    
    igk_set_header(200, 
        "ok",
        ["Content-Type: image/png",
        "Cache-Control: max-age=31536000"]
    );
    // header("Content-Type: image/png");
    include(IGK_LIB_DIR."/Default/R/Img/balafon.ico");
    igk_exit();
}
, 1); 
//+ | -----------------------------------------------------------------------------------
//+ | asset balanfon preloader
//+ | uri: /assets/Scripts/balafon.js
//+ | ----------------------------------------------------------------------------------- 
igk_sys_reg_uri("^/".IGK_RES_FOLDER."/".IGK_SCRIPT_FOLDER."/balafon.js[%q%]", function(){
    igk_wln_e("bind balafon js");

    $_igk = igk_app();
    $doc= $_igk->Doc;
    if(!$doc){
        igk_set_header(404);
        igk_exit();
    } 
    session_write_close(); 
    $generate_source = "igk_sys_balafon_js";
    // function($doc){
    //     $c=$doc->ScriptManager->getMergedContent();
    //     $tassoc=$doc->ScriptManager->getAssoc();  
    //     // TASK : Render core js 
    //     $buri=igk_io_baseuri();
    //     $const="constant";
    //     $header  = "//author: C.A.D BONDJE DOUE".IGK_LF;
    //     $header .= "//libname: balafon.js".IGK_LF;
    //     $header .= "//version: {$const('IGK_BALAFON_JS_VERSION')}".IGK_LF;
    //     $header .= "//copyright: igkdev @ 2013 - ".date('Y').IGK_LF;
    //     $header .= "//license: //igkdev.com/balafon/balafonjs/license".IGK_LF;
    //     $header .= "//generate: ".date("Ymd H:i:s").IGK_LF;
    //     $header .= "\"use strict\";";
    //     $s=empty($c->data) ? "/* core script failed to load cache not provide. */": $c->data;
    //     $s=str_replace("\"use strict\";", "", $s);
    //     if (ob_get_level()>0)
    //         ob_clean();
    //     ob_start();
    //     $src = "";
    //     if(igk_getr('d') == 1){
    //         $src = $header.$s;
    //     }
    //     else{
    //         $src = $header.igk_js_minify($s);
    //     }
    //     ob_get_clean();
    //     return $src;
    // };

    $accept = igk_server()->accepts(["gzip", "deflate"]);
    if (!$accept){
        $src = $generate_source($doc);
        igk_clear_header_list(); 
        header("Content-Type: application/javascript; charset= UTF-8");
        header("Content-Encoding: txt");
        echo $src;
        igk_exit();
    } 
    $sf=igk_core_dist_jscache();
    $resolver=IGKResourceUriResolver::getInstance(); 
    if(file_exists($sf)){
        $resolver->resolve($sf);
        igk_header_set_contenttype("js");
        header("Content-Type: application/javascript; charset= UTF-8");   
        header("Content-Encoding:deflate"); 
        echo file_get_contents($sf); 
        igk_exit();
    }
   
    $src = $generate_source($doc, igk_getr('d'));
    $type = 0;
    if ($_igk->Configs->core_no_zipjs){
        header("Content-Type: application/javascript; charset= UTF-8");
        header("Content-Encoding:deflate");  
        igk_wl($src);
        igk_exit();    
    }
 
    ob_start();
    igk_zip_output($src, 0, $type);
    $c= ob_get_clean(); 
    igk_io_w2file($sf, $c);
    igk_hook(IGKEvents::HOOK_CACHE_RES_CREATED, array("dir"=>$sf, "type"=>"js", "name"=>"balafonjs")); 
    igk_header_set_contenttype("js");
    header("Content-Encoding:deflate");
    igk_header_cache_output(3600 * 24 * 365);   
    igk_wl($c); 
    unset($s, $c);   
    igk_exit();
}
, 0);
igk_sys_reg_uri("^/!@res/".IGK_SCRIPT_FOLDER.IGK_REG_ACTION_METH, function($fc, $arg){
    // igk_wln_e("handle ... ".igk_io_request_uri(). " - ".igk_env_count(__FUNCTION__));
    $doc=igk_get_last_rendered_document();
    if(!$doc){
        igk_wln_e("last rendered document is null");
        igk_set_header(500);
        igk_set_error(__FUNCTION__, "no document  found");
        return;
    }
    $fc=igk_getv(explode("?", $fc), 0);
    $key="scripts/".$fc;
    $dir=$doc->getParam($key);
    session_write_close();
    $strict=igk_getr("strict");
    if(empty($dir)){
        igk_set_header(500);
        igk_exit();
    }
    $load_js_res=is_dir($dir) && !$arg;
    if(!$load_js_res && (count($arg) > 0) && file_exists($file=$dir."/".implode("/", $arg))){
        igk_render_resource($file);
        igk_exit();
    }
    if($load_js_res && ($g=igk_io_getfiles($dir, "/\.js$/i"))){
        $bdir=igk_io_fullpath2fulluri($dir);
        sort($g);
        $header="/* name: ".$fc;
        $header .= " */".IGK_LF;
        $o="\"use strict\";".IGK_LF;
        $o .= "(function(){ var _loc_bdir='{$bdir}'; function getLocalScriptUri(){ return _loc_bdir; }; ".IGK_LF;
        foreach($g as $f=>$n){
            $s=str_replace("\"use strict\";", "", igk_io_read_allfile($n));
            if(empty($s))
                continue;
            $ui=igk_io_fullpath2fulluri($n);
            $o .= "(function(){ var _loc_uri='{$ui}'; ".$s."})();";
        }
        $o .= "})();";
        igk_header_no_cache();
        ob_clean();
        header("Content-Type: text/javascript");
        ob_start();
        igk_zip_output($header.igk_js_minify($o));
        $c=ob_get_contents();
        ob_end_clean();
        igk_wl($c);
        igk_flush_data();
        $v_jsdir=igk_io_cacheddist_jsdir();
        $file=$v_jsdir."/".$fc.".js";
        IGKIO::CreateDir($v_jsdir);
        igk_server()->REQUEST_URI="/";
        $access="";
        $notresolved=0;
        if(($f=IGKResourceUriResolver::getInstance()->resolveOnly($v_jsdir, $notresolved)) || !$notresolved){
            igk_hook(IGKEvents::HOOK_CACHE_RES_CREATED, array("dir"=>$f, "type"=>"js"));
        }
        igk_io_w2file($file, $c);
        igk_exit();
    }
    else{
        igk_set_header(404);
        if(igk_is_ajx_demand()){
            igk_wl("[BJS] - Entry Script directory not found :".$fc);
            igk_exit();
        }
    }
    $doc->setParam($key, null);
    igk_exit();
}
, 0);
igk_reg_hook(IGKEvents::HOOK_CACHE_RES_CREATED, function($e){
    $fdir= igk_io_cacheddist_jsdir();
    $access=$fdir."/.htaccess";
    if(!file_exists($access)){
        IGKIO::CreateDir(dirname($access));
        igk_io_w2file($access, implode("\n", array(
                "allow from all",
                "AddType text/javascript js",
                "AddEncoding deflate js",
                "<IfModule mod_headers.c>",
                "Header set Cache-Control \"max-age=31536000\"",
                "</IfModule>"
        )));
    }
    $sdir = dirname($e->args["dir"]); 
    $core_res_regex = "/\.(json|xml|jpeg|png|svg)$/i";
    if ($scripts = igk_environment()->get("ScriptFolder"))
    {
        $lib_res = IGK_LIB_DIR."/Scripts/";
        foreach($scripts as $d){
            foreach(igk_io_getfiles($d, $core_res_regex) as $res){
                if (strpos($res, $lib_res)===0){
                    $bres = $sdir."/".substr($res, strlen($lib_res));
                    if (IGKIO::CreateDir(dirname($bres))){
                        igk_io_symlink(realpath($res),$bres);
                    }
                }
            }
        }
    } 
    igk_internal_reslinkaccess();
});
igk_reg_hook("generateLink", function(){
    igk_internal_reslinkaccess();
});
igk_sys_reg_uri("^/".IGK_RES_FOLDER."/".IGK_SCRIPT_FOLDER.IGK_REG_ACTION_METH."[%q%]", function($fc, $arg){
    switch($fc){
        case "Lang":
        header("Access-Control-Allow-Origin: ".igk_getv($_SERVER, "HTTP_ORIGIN", "*"));
        header("Access-Control-Allow-Headers: igk-from,igk-x-requested-with");
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
        igk_set_env("sys://headers/ignorelist", array(
                "Access-Control-Allow-Origin",
                "Access-Control-Allow-Headers",
                "Access-Control-Allow-Methods"
            ));
        if($m=igk_server()->REQUEST_METHOD != "OPTIONS"){
            $arg=is_array($arg) ? igk_getv($arg, 0): $arg;
            $file=IGK_LIB_DIR."/Scripts/{$fc}";
            if(file_exists($file)){
                igk_io_render_res_file($file, $arg);
            }
            else{
                igk_set_header(404);
            }
        }
        break;
    }
    igk_exit();
});
igk_sys_reg_uri("^/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/balafon.css[%q%]", function($m=null){
     if(defined("IGK_FORCSS"))
        return; 
 
    header("Content-Type: text/css");

    $d="/".IGK_RES_FOLDER."/".IGK_STYLE_FOLDER."/balafon.css.php";
    // + | change to application directory for protected -- 
    $f=igk_io_dir(igk_io_applicationdir().$d);
    if(!file_exists($f)){
        igk_io_w2file($f, igk_get_basestyle());
    } 
    try{
        include($f); 
    }catch(Exception $ex){
        header("Content-Type: text/css");
        echo "body{background-color: red}";
    }
    igk_exit();
}
, 0);
igk_sys_reg_uri("^/!/lib/(:path+)[%q%]", function($path, $version=null){
    if(is_array($path))
        $path=IGK_LIB_DIR."/".implode("/", $path);
    else
        $path=IGK_LIB_DIR."/".$path;
    /// TASK : Allowed file extension from lib directory

    $allowed=preg_match("/\.(js|css|xml|txt|bmp|png|svg|jpeg|jpg|xsl|pdf|md)$/", $path);
    if(file_exists($path) && $allowed){
        igk_header_content_file($path);
        igk_header_cache_output();
        igk_zip_output(igk_io_read_allfile($path));
        igk_exit();
    }
    else{
        if(!$allowed){
            igk_set_header(403);
            igk_text(';-) 403');
            igk_exit();
        }
    }
    igk_set_header(404);
    igk_exit();
}
, 1);
igk_sys_reg_uri("^/robots.txt$", function(){

    $headers = [];
    $a = IGKServer::getInstance()->HTTP_USER_AGENT;    
 
    //if (preg_match("/Chrome-Lighthouse/", $a)){      
    //}
    // if (!preg_match("/".implode("|",
    // ["HTTPie",
    // "Googlebot"])."/", $a))
    //     return 0;
    $f = implode(DIRECTORY_SEPARATOR,  [igk_io_sys_datadir(), "robot.txt"]);
    if (file_exists($f)){
        include($f);
        igk_exit();
    } 
    // disallow all
    igk_set_header(200, "Content-Type:text/plain; charset=UTF8", $headers);
    // igk_header_cache_output(3600*24*365);    
    igk_text(implode("\n",[
        "user-agent: *",
        "allow: /b"
    ]));
    igk_exit();
}, 1);

igk_sys_reg_uri("^/(index\.php/)?\{(:guid)\}(/(:path+))?[%q%]", function($guid, $query=null, $version=null){

     
    igk_header_no_cache();
	$uri= igk_io_request_entry();
    $key= igk_get_component_uri_key($guid);
    $tab=igk_app()->session->regUris;
    $handle=false;
	$routes = igk_app()->session->Routes;
	$index = array_search($key, $routes);
	$obj = null;
	if (!empty($index)){
		$obj["class"] = $index;
	}else if($tab && isset($tab[$key])){
        $obj=$tab[$key];
	}
    if(is_array($obj)){
        $tclass=  explode("/::", $obj["class"]);
        $class = array_shift($tclass); 
        $tclass = implode("" , $tclass);
        
        // if ($ctrl=igk_getctrl(IGK_CONF_CTRL, false)){
            //     $ctrl::register_autoload();
            // }
            if(!class_exists($class)){
                igk_set_header(500, "temp class not found");
                igk_wln_e("class not exists {$class} ");
            }
            if (is_subclass_of( $class, BaseController::class)
             && ($ctrl = igk_getctrl($class, false))){           
                $ctrl::register_autoload();
             }
            else{
                $tclass = null;
                $ctrl = new $class();
            }
            
            // igk_wln_e($obj, $class, $ctrl, $tclass);
            $args=$query;
            if(is_string($query))
                $args=explode("/", $query);
            $method="index";
            
            R::RegLangCtrl($ctrl);

            if (!empty($tclass) && 
                class_exists($tclass))
            {
                $cl = new $tclass($ctrl);
            }
            else {
                $cl= $ctrl; //new $class();
            } 
            if(count($args) > 0){
                if(method_exists($cl, $args[0])){
                    $method=$args[0];
                    $args=array_slice($args, 1);
                }
            }
            if(method_exists($cl, $method)){
                ob_start();
                if (!igk_do_response($ob = call_user_func_array(array($cl, $method), $args))){
                    igk_wl(ob_get_clean());
                } else {
                    ob_end_clean();                
                }
            }
            else{
                igk_wln("method not found");
                igk_set_header(500, "function not found");
            } 
            igk_exit();
        }
        $cl = null;
        $b=json_decode($tab[$key]);
        if ($b)
         $cl=$b->classpath;
 
        if(!empty($cl) && class_exists($cl, false) && !empty($query)){
            $g=new $cl($b);
            $args=explode("/", $query);
            ob_start();
            $ob=call_user_func_array(array($g, $args[0]), array_slice($args, 1));
            ob_end_clean();
            igk_wl($ob);
        }

    if(igk_getr("__clear")){
        igk_app()->session->regUris=null;
    }
    igk_set_header(500);
	igk_wln_e(__("failed to handle component action"));
}
, 0);
if(!igk_sys_env_production()){
    igk_reg_event("sys://cache/clear", function(){
        if (defined("IGK_INIT_SYSTEM")){
            return;
        }
        $doc=igk_get_last_rendered_document();
        if($doc){
            $doc->clear();
        }
    });
}
 

